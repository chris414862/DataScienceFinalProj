android.accounts.Account.equals,"Indicates whether some other object is ""equal to"" this one. The equals method implements an equivalence relation on non-null object references: It is reflexive : for any non-null reference value x x.equals(x) should return true. It is symmetric : for any non-null reference values x and y x.equals(y) should return true if and only if y.equals(x) returns true. It is transitive : for any non-null reference values x y and z if x.equals(y) returns true and y.equals(z) returns true then x.equals(z) should return true. It is consistent : for any non-null reference values x and y multiple invocations of x.equals(y) consistently return true or consistently return false provided no information used in equals comparisons on the objects is modified. For any non-null reference value x x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is for any non-null reference values x and y this method returns true if and only if x and y refer to the same object ( x == y has the value true ). Note that it is generally necessary to override the hashCode method whenever this method is overridden so as to maintain the general contract for the hashCode method which states that equal objects must have equal hash codes."
android.accounts.Account.equals,Equals.
android.accounts.Account.equals,"Indicates whether some other object is ""equal to"" this one."
android.accounts.Account.equals,The equals method implements an equivalence relation on non-null object references: It is reflexive : for any non-null reference value x x.equals(x) should return true.
android.accounts.Account.equals,It is symmetric : for any non-null reference values x and y x.equals(y) should return true if and only if y.equals(x) returns true.
android.accounts.Account.equals,It is transitive : for any non-null reference values x y and z if x.equals(y) returns true and y.equals(z) returns true then x.equals(z) should return true.
android.accounts.Account.equals,It is consistent : for any non-null reference values x and y multiple invocations of x.equals(y) consistently return true or consistently return false provided no information used in equals comparisons on the objects is modified.
android.accounts.Account.equals,For any non-null reference value x x.equals(null) should return false.
android.accounts.Account.equals,The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is for any non-null reference values x and y this method returns true if and only if x and y refer to the same object ( x == y has the value true ).
android.accounts.Account.equals,Note that it is generally necessary to override the hashCode method whenever this method is overridden so as to maintain the general contract for the hashCode method which states that equal objects must have equal hash codes.
android.accounts.Account.writeToParcel,Flatten this object in to a Parcel.
android.accounts.Account.writeToParcel,Write to parcel.
android.accounts.AccountAuthenticatorResponse.onError,.
android.accounts.AccountAuthenticatorResponse.onError,On error.
android.accounts.AccountManager.addAccountExplicitly,Adds an account directly to the AccountManager. Additionally it specifies Account visibility for given list of packages. Normally used by sign-up wizards associated with authenticators not directly by applications. Calling this method does not update the last authenticated timestamp referred by KEY_LAST_AUTHENTICATED_TIME. To update it call notifyAccountAuthenticated(android.accounts.Account) after getting success. It is safe to call this method from the main thread. This method requires the caller to have a signature match with the authenticator that owns the specified account.
android.accounts.AccountManager.addAccountExplicitly,Add account explicitly.
android.accounts.AccountManager.addAccountExplicitly,Adds an account directly to the AccountManager.
android.accounts.AccountManager.addAccountExplicitly,Additionally it specifies Account visibility for given list of packages.
android.accounts.AccountManager.addAccountExplicitly,Normally used by sign-up wizards associated with authenticators not directly by applications.
android.accounts.AccountManager.addAccountExplicitly,Calling this method does not update the last authenticated timestamp referred by KEY_LAST_AUTHENTICATED_TIME.
android.accounts.AccountManager.addAccountExplicitly,To update it call notifyAccountAuthenticated(android.accounts.Account) after getting success.
android.accounts.AccountManager.addAccountExplicitly,It is safe to call this method from the main thread.
android.accounts.AccountManager.addAccountExplicitly,This method requires the caller to have a signature match with the authenticator that owns the specified account.
android.accounts.AccountManager.addAccountExplicitly,Adds an account directly to the AccountManager. Normally used by sign-up wizards associated with authenticators not directly by applications. Calling this method does not update the last authenticated timestamp referred by KEY_LAST_AUTHENTICATED_TIME. To update it call notifyAccountAuthenticated(android.accounts.Account) after getting success. However if this method is called when it is triggered by addAccount() or addAccountAsUser() or similar functions then there is no need to update timestamp manually as it is updated automatically by framework on successful completion of the mentioned functions. It is safe to call this method from the main thread. This method requires the caller to have a signature match with the authenticator that owns the specified account. NOTE: If targeting your app to work on API level 22 and before AUTHENTICATE_ACCOUNTS permission is needed for those platforms. See docs for this function in API level 22. Requires android.Manifest.permission.AUTHENTICATE_ACCOUNTS.
android.accounts.AccountManager.addAccountExplicitly,Add account explicitly.
android.accounts.AccountManager.addAccountExplicitly,Adds an account directly to the AccountManager.
android.accounts.AccountManager.addAccountExplicitly,Normally used by sign-up wizards associated with authenticators not directly by applications.
android.accounts.AccountManager.addAccountExplicitly,Calling this method does not update the last authenticated timestamp referred by KEY_LAST_AUTHENTICATED_TIME.
android.accounts.AccountManager.addAccountExplicitly,To update it call notifyAccountAuthenticated(android.accounts.Account) after getting success.
android.accounts.AccountManager.addAccountExplicitly,However if this method is called when it is triggered by addAccount() or addAccountAsUser() or similar functions then there is no need to update timestamp manually as it is updated automatically by framework on successful completion of the mentioned functions.
android.accounts.AccountManager.addAccountExplicitly,It is safe to call this method from the main thread.
android.accounts.AccountManager.addAccountExplicitly,This method requires the caller to have a signature match with the authenticator that owns the specified account.
android.accounts.AccountManager.addAccountExplicitly,NOTE: If targeting your app to work on API level 22 and before AUTHENTICATE_ACCOUNTS permission is needed for those platforms.
android.accounts.AccountManager.addAccountExplicitly,See docs for this function in API level 22.
android.accounts.AccountManager.addAccountExplicitly,Requires android.Manifest.permission.AUTHENTICATE_ACCOUNTS.
android.accounts.AccountManager.confirmCredentials,Confirms that the user knows the password for an account to make extra sure they are the owner of the account. The user-entered password can be supplied directly otherwise the authenticator for this account type prompts the user with the appropriate interface. This method is intended for applications which want extra assurance; for example the phone lock screen uses this to let the user unlock the phone with an account password if they forget the lock pattern. If the user-entered password matches a saved password for this account the request is considered valid; otherwise the authenticator verifies the password (usually by contacting the server). This method may be called from any thread but the returned AccountManagerFuture must not be used on the main thread. NOTE: If targeting your app to work on API level 22 and before MANAGE_ACCOUNTS permission is needed for those platforms. See docs for this function in API level 22. Requires android.Manifest.permission.MANAGE_ACCOUNTS.
android.accounts.AccountManager.confirmCredentials,Confirm credentials.
android.accounts.AccountManager.confirmCredentials,Confirms that the user knows the password for an account to make extra sure they are the owner of the account.
android.accounts.AccountManager.confirmCredentials,The user-entered password can be supplied directly otherwise the authenticator for this account type prompts the user with the appropriate interface.
android.accounts.AccountManager.confirmCredentials,This method is intended for applications which want extra assurance; for example the phone lock screen uses this to let the user unlock the phone with an account password if they forget the lock pattern.
android.accounts.AccountManager.confirmCredentials,If the user-entered password matches a saved password for this account the request is considered valid; otherwise the authenticator verifies the password (usually by contacting the server).
android.accounts.AccountManager.confirmCredentials,This method may be called from any thread but the returned AccountManagerFuture must not be used on the main thread.
android.accounts.AccountManager.confirmCredentials,NOTE: If targeting your app to work on API level 22 and before MANAGE_ACCOUNTS permission is needed for those platforms.
android.accounts.AccountManager.confirmCredentials,See docs for this function in API level 22.
android.accounts.AccountManager.confirmCredentials,Requires android.Manifest.permission.MANAGE_ACCOUNTS.
android.accounts.AccountManager.get,Gets an AccountManager instance associated with a Context. The Context will be used as long as the AccountManager is active so make sure to use a Context whose lifetime is commensurate with any listeners registered to addOnAccountsUpdatedListener(OnAccountsUpdateListener Handler boolean) or similar methods. It is safe to call this method from the main thread. No permission is required to call this method.
android.accounts.AccountManager.get,Get.
android.accounts.AccountManager.get,Gets an AccountManager instance associated with a Context.
android.accounts.AccountManager.get,The Context will be used as long as the AccountManager is active so make sure to use a Context whose lifetime is commensurate with any listeners registered to addOnAccountsUpdatedListener(OnAccountsUpdateListener Handler boolean) or similar methods.
android.accounts.AccountManager.get,It is safe to call this method from the main thread.
android.accounts.AccountManager.get,No permission is required to call this method.
android.accounts.AccountManager.getAccounts,Lists all accounts visible to the caller regardless of type. Equivalent to getAccountsByType(null). These accounts may be visible because the user granted access to the account or the AbstractAcccountAuthenticator managing the account did so or because the client shares a signature with the managing AbstractAccountAuthenticator. It is safe to call this method from the main thread. Requires Manifest.permission.GET_ACCOUNTS.
android.accounts.AccountManager.getAccounts,Get accounts.
android.accounts.AccountManager.getAccounts,Lists all accounts visible to the caller regardless of type.
android.accounts.AccountManager.getAccounts,Equivalent to getAccountsByType(null).
android.accounts.AccountManager.getAccounts,These accounts may be visible because the user granted access to the account or the AbstractAcccountAuthenticator managing the account did so or because the client shares a signature with the managing AbstractAccountAuthenticator.
android.accounts.AccountManager.getAccounts,It is safe to call this method from the main thread.
android.accounts.AccountManager.getAccounts,Requires Manifest.permission.GET_ACCOUNTS.
android.accounts.AccountManager.getAccountsByType,Lists all accounts of particular type visible to the caller. These accounts may be visible because the user granted access to the account or the AbstractAcccountAuthenticator managing the account did so or because the client shares a signature with the managing AbstractAccountAuthenticator. The account type is a string token corresponding to the authenticator and useful domain of the account. For example there are types corresponding to Google and Facebook. The exact string token to use will be published somewhere associated with the authenticator in question. It is safe to call this method from the main thread. Caller targeting API level Build.VERSION_CODES.O and above will get list of accounts made visible to it by user (see newChooseAccountIntent(android.accounts.Account java.util.List java.lang.String[] java.lang.String java.lang.String java.lang.String[] android.os.Bundle) ) or AbstractAcccountAuthenticator using setAccountVisibility(Account String int). Manifest.permission.GET_ACCOUNTS permission is not used. Caller targeting API level below Build.VERSION_CODES.O that have not been granted the Manifest.permission.GET_ACCOUNTS permission will only see those accounts managed by AbstractAccountAuthenticators whose signature matches the client. NOTE: If targeting your app to work on API level Build.VERSION_CODES.LOLLIPOP_MR1 and before Manifest.permission.GET_ACCOUNTS permission is needed for those platforms irrespective of uid or signature match. See docs for this function in API level Build.VERSION_CODES.LOLLIPOP_MR1. Requires Manifest.permission.GET_ACCOUNTS.
android.accounts.AccountManager.getAccountsByType,Get accounts by type.
android.accounts.AccountManager.getAccountsByType,Lists all accounts of particular type visible to the caller.
android.accounts.AccountManager.getAccountsByType,These accounts may be visible because the user granted access to the account or the AbstractAcccountAuthenticator managing the account did so or because the client shares a signature with the managing AbstractAccountAuthenticator.
android.accounts.AccountManager.getAccountsByType,The account type is a string token corresponding to the authenticator and useful domain of the account.
android.accounts.AccountManager.getAccountsByType,For example there are types corresponding to Google and Facebook.
android.accounts.AccountManager.getAccountsByType,The exact string token to use will be published somewhere associated with the authenticator in question.
android.accounts.AccountManager.getAccountsByType,It is safe to call this method from the main thread.
android.accounts.AccountManager.getAccountsByType,Caller targeting API level Build.VERSION_CODES.O and above will get list of accounts made visible to it by user (see newChooseAccountIntent(android.accounts.Account java.util.List java.lang.String[] java.lang.String java.lang.String java.lang.String[] android.os.Bundle) ) or AbstractAcccountAuthenticator using setAccountVisibility(Account String int).
android.accounts.AccountManager.getAccountsByType,Manifest.permission.GET_ACCOUNTS permission is not used.
android.accounts.AccountManager.getAccountsByType,Caller targeting API level below Build.VERSION_CODES.O that have not been granted the Manifest.permission.GET_ACCOUNTS permission will only see those accounts managed by AbstractAccountAuthenticators whose signature matches the client.
android.accounts.AccountManager.getAccountsByType,NOTE: If targeting your app to work on API level Build.VERSION_CODES.LOLLIPOP_MR1 and before Manifest.permission.GET_ACCOUNTS permission is needed for those platforms irrespective of uid or signature match.
android.accounts.AccountManager.getAccountsByType,See docs for this function in API level Build.VERSION_CODES.LOLLIPOP_MR1.
android.accounts.AccountManager.getAccountsByType,Requires Manifest.permission.GET_ACCOUNTS.
android.accounts.AccountManager.getAuthToken,Gets an auth token of the specified type for a particular account optionally raising a notification if the user must enter credentials. This method is intended for background tasks and services where the user should not be immediately interrupted with a password prompt. If a previously generated auth token is cached for this account and type then it is returned. Otherwise if a saved password is available it is sent to the server to generate a new auth token. Otherwise an Intent is returned which when started will prompt the user for a password. If the notifyAuthFailure parameter is set a status bar notification is also created with the same Intent alerting the user that they need to enter a password at some point. In that case you may need to wait until the user responds which could take hours or days or forever. When the user does respond and supply a new password the account manager will broadcast the LOGIN_ACCOUNTS_CHANGED_ACTION Intent and notify OnAccountsUpdateListener which applications can use to try again. If notifyAuthFailure is not set it is the application's responsibility to launch the returned Intent at some point. Either way the result from this call will not wait for user action. Some authenticators have auth token types whose value is authenticator-dependent. Some services use different token types to access different functionality -- for example Google uses different auth tokens to access Gmail and Google Calendar for the same account. This method may be called from any thread but the returned AccountManagerFuture must not be used on the main thread. NOTE: If targeting your app to work on API level 22 and before USE_CREDENTIALS permission is needed for those platforms. See docs for this function in API level 22. Requires android.Manifest.permission.USE_CREDENTIALS.
android.accounts.AccountManager.getAuthToken,Get auth token.
android.accounts.AccountManager.getAuthToken,Gets an auth token of the specified type for a particular account optionally raising a notification if the user must enter credentials.
android.accounts.AccountManager.getAuthToken,This method is intended for background tasks and services where the user should not be immediately interrupted with a password prompt.
android.accounts.AccountManager.getAuthToken,If a previously generated auth token is cached for this account and type then it is returned.
android.accounts.AccountManager.getAuthToken,Otherwise if a saved password is available it is sent to the server to generate a new auth token.
android.accounts.AccountManager.getAuthToken,Otherwise an Intent is returned which when started will prompt the user for a password.
android.accounts.AccountManager.getAuthToken,If the notifyAuthFailure parameter is set a status bar notification is also created with the same Intent alerting the user that they need to enter a password at some point.
android.accounts.AccountManager.getAuthToken,In that case you may need to wait until the user responds which could take hours or days or forever.
android.accounts.AccountManager.getAuthToken,When the user does respond and supply a new password the account manager will broadcast the LOGIN_ACCOUNTS_CHANGED_ACTION Intent and notify OnAccountsUpdateListener which applications can use to try again.
android.accounts.AccountManager.getAuthToken,If notifyAuthFailure is not set it is the application's responsibility to launch the returned Intent at some point.
android.accounts.AccountManager.getAuthToken,Either way the result from this call will not wait for user action.
android.accounts.AccountManager.getAuthToken,Some authenticators have auth token types whose value is authenticator-dependent.
android.accounts.AccountManager.getAuthToken,Some services use different token types to access different functionality -- for example Google uses different auth tokens to access Gmail and Google Calendar for the same account.
android.accounts.AccountManager.getAuthToken,This method may be called from any thread but the returned AccountManagerFuture must not be used on the main thread.
android.accounts.AccountManager.getAuthToken,NOTE: If targeting your app to work on API level 22 and before USE_CREDENTIALS permission is needed for those platforms.
android.accounts.AccountManager.getAuthToken,See docs for this function in API level 22.
android.accounts.AccountManager.getAuthToken,Requires android.Manifest.permission.USE_CREDENTIALS.
android.accounts.AccountManager.getAuthToken,Gets an auth token of the specified type for a particular account prompting the user for credentials if necessary. This method is intended for applications running in the foreground where it makes sense to ask the user directly for a password. If a previously generated auth token is cached for this account and type then it is returned. Otherwise if a saved password is available it is sent to the server to generate a new auth token. Otherwise the user is prompted to enter a password. Some authenticators have auth token types whose value is authenticator-dependent. Some services use different token types to access different functionality -- for example Google uses different auth tokens to access Gmail and Google Calendar for the same account. NOTE: If targeting your app to work on API level 22 and before USE_CREDENTIALS permission is needed for those platforms. See docs for this function in API level 22. This method may be called from any thread but the returned AccountManagerFuture must not be used on the main thread. Requires android.Manifest.permission.USE_CREDENTIALS.
android.accounts.AccountManager.getAuthToken,Get auth token.
android.accounts.AccountManager.getAuthToken,Gets an auth token of the specified type for a particular account prompting the user for credentials if necessary.
android.accounts.AccountManager.getAuthToken,This method is intended for applications running in the foreground where it makes sense to ask the user directly for a password.
android.accounts.AccountManager.getAuthToken,If a previously generated auth token is cached for this account and type then it is returned.
android.accounts.AccountManager.getAuthToken,Otherwise if a saved password is available it is sent to the server to generate a new auth token.
android.accounts.AccountManager.getAuthToken,Otherwise the user is prompted to enter a password.
android.accounts.AccountManager.getAuthToken,Some authenticators have auth token types whose value is authenticator-dependent.
android.accounts.AccountManager.getAuthToken,Some services use different token types to access different functionality -- for example Google uses different auth tokens to access Gmail and Google Calendar for the same account.
android.accounts.AccountManager.getAuthToken,NOTE: If targeting your app to work on API level 22 and before USE_CREDENTIALS permission is needed for those platforms.
android.accounts.AccountManager.getAuthToken,See docs for this function in API level 22.
android.accounts.AccountManager.getAuthToken,This method may be called from any thread but the returned AccountManagerFuture must not be used on the main thread.
android.accounts.AccountManager.getAuthToken,Requires android.Manifest.permission.USE_CREDENTIALS.
android.accounts.AccountManager.getAuthToken,This method was deprecated in API level 15. use getAuthToken(android.accounts.Account java.lang.String android.os.Bundle boolean android.accounts.AccountManagerCallback android.os.Handler) instead Gets an auth token of the specified type for a particular account optionally raising a notification if the user must enter credentials. This method is intended for background tasks and services where the user should not be immediately interrupted with a password prompt. If a previously generated auth token is cached for this account and type then it is returned. Otherwise if a saved password is available it is sent to the server to generate a new auth token. Otherwise an Intent is returned which when started will prompt the user for a password. If the notifyAuthFailure parameter is set a status bar notification is also created with the same Intent alerting the user that they need to enter a password at some point. In that case you may need to wait until the user responds which could take hours or days or forever. When the user does respond and supply a new password the account manager will broadcast the LOGIN_ACCOUNTS_CHANGED_ACTION Intent and notify OnAccountsUpdateListener which applications can use to try again. If notifyAuthFailure is not set it is the application's responsibility to launch the returned Intent at some point. Either way the result from this call will not wait for user action. Some authenticators have auth token types whose value is authenticator-dependent. Some services use different token types to access different functionality -- for example Google uses different auth tokens to access Gmail and Google Calendar for the same account. This method may be called from any thread but the returned AccountManagerFuture must not be used on the main thread. Requires android.Manifest.permission.USE_CREDENTIALS.
android.accounts.AccountManager.getAuthToken,Get auth token.
android.accounts.AccountManager.getAuthToken,This method was deprecated in API level 15.
android.accounts.AccountManager.getAuthToken,use getAuthToken(android.accounts.Account java.lang.String android.os.Bundle boolean android.accounts.AccountManagerCallback android.os.Handler) instead Gets an auth token of the specified type for a particular account optionally raising a notification if the user must enter credentials.
android.accounts.AccountManager.getAuthToken,This method is intended for background tasks and services where the user should not be immediately interrupted with a password prompt.
android.accounts.AccountManager.getAuthToken,If a previously generated auth token is cached for this account and type then it is returned.
android.accounts.AccountManager.getAuthToken,Otherwise if a saved password is available it is sent to the server to generate a new auth token.
android.accounts.AccountManager.getAuthToken,Otherwise an Intent is returned which when started will prompt the user for a password.
android.accounts.AccountManager.getAuthToken,If the notifyAuthFailure parameter is set a status bar notification is also created with the same Intent alerting the user that they need to enter a password at some point.
android.accounts.AccountManager.getAuthToken,In that case you may need to wait until the user responds which could take hours or days or forever.
android.accounts.AccountManager.getAuthToken,When the user does respond and supply a new password the account manager will broadcast the LOGIN_ACCOUNTS_CHANGED_ACTION Intent and notify OnAccountsUpdateListener which applications can use to try again.
android.accounts.AccountManager.getAuthToken,If notifyAuthFailure is not set it is the application's responsibility to launch the returned Intent at some point.
android.accounts.AccountManager.getAuthToken,Either way the result from this call will not wait for user action.
android.accounts.AccountManager.getAuthToken,Some authenticators have auth token types whose value is authenticator-dependent.
android.accounts.AccountManager.getAuthToken,Some services use different token types to access different functionality -- for example Google uses different auth tokens to access Gmail and Google Calendar for the same account.
android.accounts.AccountManager.getAuthToken,This method may be called from any thread but the returned AccountManagerFuture must not be used on the main thread.
android.accounts.AccountManager.getAuthToken,Requires android.Manifest.permission.USE_CREDENTIALS.
android.accounts.AccountManager.getAuthenticatorTypes,Lists the currently registered authenticators. It is safe to call this method from the main thread. No permission is required to call this method.
android.accounts.AccountManager.getAuthenticatorTypes,Get authenticator types.
android.accounts.AccountManager.getAuthenticatorTypes,Lists the currently registered authenticators.
android.accounts.AccountManager.getAuthenticatorTypes,It is safe to call this method from the main thread.
android.accounts.AccountManager.getAuthenticatorTypes,No permission is required to call this method.
android.accounts.AccountManager.getUserData,"Gets the user data named by ""key"" associated with the account. This is intended for authenticators and related code to store arbitrary metadata along with accounts. The meaning of the keys and values is up to the authenticator for the account. It is safe to call this method from the main thread. This method requires the caller to have a signature match with the authenticator that owns the specified account. NOTE: If targeting your app to work on API level Build.VERSION_CODES.LOLLIPOP_MR1 and before AUTHENTICATE_ACCOUNTS permission is needed for those platforms. See docs for this function in API level Build.VERSION_CODES.LOLLIPOP_MR1. Requires android.Manifest.permission.AUTHENTICATE_ACCOUNTS."
android.accounts.AccountManager.getUserData,Get user data.
android.accounts.AccountManager.getUserData,"Gets the user data named by ""key"" associated with the account."
android.accounts.AccountManager.getUserData,This is intended for authenticators and related code to store arbitrary metadata along with accounts.
android.accounts.AccountManager.getUserData,The meaning of the keys and values is up to the authenticator for the account.
android.accounts.AccountManager.getUserData,It is safe to call this method from the main thread.
android.accounts.AccountManager.getUserData,This method requires the caller to have a signature match with the authenticator that owns the specified account.
android.accounts.AccountManager.getUserData,NOTE: If targeting your app to work on API level Build.VERSION_CODES.LOLLIPOP_MR1 and before AUTHENTICATE_ACCOUNTS permission is needed for those platforms.
android.accounts.AccountManager.getUserData,See docs for this function in API level Build.VERSION_CODES.LOLLIPOP_MR1.
android.accounts.AccountManager.getUserData,Requires android.Manifest.permission.AUTHENTICATE_ACCOUNTS.
android.accounts.AccountManager.invalidateAuthToken,Removes an auth token from the AccountManager's cache. Does nothing if the auth token is not currently in the cache. Applications must call this method when the auth token is found to have expired or otherwise become invalid for authenticating requests. The AccountManager does not validate or expire cached auth tokens otherwise. It is safe to call this method from the main thread. NOTE: If targeting your app to work on API level 22 and before MANAGE_ACCOUNTS or USE_CREDENTIALS permission is needed for those platforms. See docs for this function in API level 22. Requires android.Manifest.permission.MANAGE_ACCOUNTS or android.Manifest.permission.USE_CREDENTIALS.
android.accounts.AccountManager.invalidateAuthToken,Invalidate auth token.
android.accounts.AccountManager.invalidateAuthToken,Removes an auth token from the AccountManager's cache.
android.accounts.AccountManager.invalidateAuthToken,Does nothing if the auth token is not currently in the cache.
android.accounts.AccountManager.invalidateAuthToken,Applications must call this method when the auth token is found to have expired or otherwise become invalid for authenticating requests.
android.accounts.AccountManager.invalidateAuthToken,The AccountManager does not validate or expire cached auth tokens otherwise.
android.accounts.AccountManager.invalidateAuthToken,It is safe to call this method from the main thread.
android.accounts.AccountManager.invalidateAuthToken,NOTE: If targeting your app to work on API level 22 and before MANAGE_ACCOUNTS or USE_CREDENTIALS permission is needed for those platforms.
android.accounts.AccountManager.invalidateAuthToken,See docs for this function in API level 22.
android.accounts.AccountManager.invalidateAuthToken,Requires android.Manifest.permission.MANAGE_ACCOUNTS or android.Manifest.permission.USE_CREDENTIALS.
android.accounts.AccountManager.removeAccount,Removes an account from the AccountManager. Does nothing if the account does not exist. Does not delete the account from the server. The authenticator may have its own policies preventing account deletion in which case the account will not be deleted. This method may be called from any thread but the returned AccountManagerFuture must not be used on the main thread. This method requires the caller to have a signature match with the authenticator that manages the specified account. NOTE: If targeting your app to work on API level 22 and before MANAGE_ACCOUNTS permission is needed for those platforms. See docs for this function in API level 22. Requires android.Manifest.permission.MANAGE_ACCOUNTS.
android.accounts.AccountManager.removeAccount,Remove account.
android.accounts.AccountManager.removeAccount,Removes an account from the AccountManager.
android.accounts.AccountManager.removeAccount,Does nothing if the account does not exist.
android.accounts.AccountManager.removeAccount,Does not delete the account from the server.
android.accounts.AccountManager.removeAccount,The authenticator may have its own policies preventing account deletion in which case the account will not be deleted.
android.accounts.AccountManager.removeAccount,This method may be called from any thread but the returned AccountManagerFuture must not be used on the main thread.
android.accounts.AccountManager.removeAccount,This method requires the caller to have a signature match with the authenticator that manages the specified account.
android.accounts.AccountManager.removeAccount,NOTE: If targeting your app to work on API level 22 and before MANAGE_ACCOUNTS permission is needed for those platforms.
android.accounts.AccountManager.removeAccount,See docs for this function in API level 22.
android.accounts.AccountManager.removeAccount,Requires android.Manifest.permission.MANAGE_ACCOUNTS.
android.accounts.AccountManager.removeAccount,This method was deprecated in API level 22. use removeAccount(android.accounts.Account android.app.Activity android.accounts.AccountManagerCallback android.os.Handler) instead Removes an account from the AccountManager. Does nothing if the account does not exist. Does not delete the account from the server. The authenticator may have its own policies preventing account deletion in which case the account will not be deleted. This method requires the caller to have a signature match with the authenticator that manages the specified account. NOTE: If targeting your app to work on API level 22 and before MANAGE_ACCOUNTS permission is needed for those platforms. See docs for this function in API level 22. Requires android.Manifest.permission.MANAGE_ACCOUNTS.
android.accounts.AccountManager.removeAccount,Remove account.
android.accounts.AccountManager.removeAccount,This method was deprecated in API level 22.
android.accounts.AccountManager.removeAccount,use removeAccount(android.accounts.Account android.app.Activity android.accounts.AccountManagerCallback android.os.Handler) instead Removes an account from the AccountManager.
android.accounts.AccountManager.removeAccount,Does nothing if the account does not exist.
android.accounts.AccountManager.removeAccount,Does not delete the account from the server.
android.accounts.AccountManager.removeAccount,The authenticator may have its own policies preventing account deletion in which case the account will not be deleted.
android.accounts.AccountManager.removeAccount,This method requires the caller to have a signature match with the authenticator that manages the specified account.
android.accounts.AccountManager.removeAccount,NOTE: If targeting your app to work on API level 22 and before MANAGE_ACCOUNTS permission is needed for those platforms.
android.accounts.AccountManager.removeAccount,See docs for this function in API level 22.
android.accounts.AccountManager.removeAccount,Requires android.Manifest.permission.MANAGE_ACCOUNTS.
android.accounts.AccountManager.setUserData,Sets one userdata key for an account. Intended by use for the authenticator to stash state for itself not directly by applications. The meaning of the keys and values is up to the authenticator. It is safe to call this method from the main thread. This method requires the caller to have a signature match with the authenticator that manages the specified account. NOTE: If targeting your app to work on API level 22 and before AUTHENTICATE_ACCOUNTS permission and same UID as account's authenticator is needed for those platforms. See docs for this function in API level 22. Requires android.Manifest.permission.AUTHENTICATE_ACCOUNTS.
android.accounts.AccountManager.setUserData,Set user data.
android.accounts.AccountManager.setUserData,Sets one userdata key for an account.
android.accounts.AccountManager.setUserData,Intended by use for the authenticator to stash state for itself not directly by applications.
android.accounts.AccountManager.setUserData,The meaning of the keys and values is up to the authenticator.
android.accounts.AccountManager.setUserData,It is safe to call this method from the main thread.
android.accounts.AccountManager.setUserData,This method requires the caller to have a signature match with the authenticator that manages the specified account.
android.accounts.AccountManager.setUserData,NOTE: If targeting your app to work on API level 22 and before AUTHENTICATE_ACCOUNTS permission and same UID as account's authenticator is needed for those platforms.
android.accounts.AccountManager.setUserData,See docs for this function in API level 22.
android.accounts.AccountManager.setUserData,Requires android.Manifest.permission.AUTHENTICATE_ACCOUNTS.
android.app.admin.DeviceAdminReceiver.onReceive,Intercept standard device administrator broadcasts. Implementations should not override this method; it is better to implement the convenience callbacks for each action.
android.app.admin.DeviceAdminReceiver.onReceive,On receive.
android.app.admin.DeviceAdminReceiver.onReceive,Intercept standard device administrator broadcasts.
android.app.admin.DeviceAdminReceiver.onReceive,Implementations should not override this method; it is better to implement the convenience callbacks for each action.
android.app.admin.DevicePolicyManager.getActiveAdmins,Return a list of all currently active device administrators' component names. If there are no administrators null may be returned.
android.app.admin.DevicePolicyManager.getActiveAdmins,Get active admins.
android.app.admin.DevicePolicyManager.getActiveAdmins,Return a list of all currently active device administrators' component names.
android.app.admin.DevicePolicyManager.getActiveAdmins,If there are no administrators null may be returned.
android.app.admin.DevicePolicyManager.getCameraDisabled,Determine whether or not the device's cameras have been disabled for this user either by the calling admin if specified or all admins.
android.app.admin.DevicePolicyManager.getCameraDisabled,Get camera disabled.
android.app.admin.DevicePolicyManager.getCurrentFailedPasswordAttempts,Retrieve the number of times the user has failed at entering a password since that last successful password entry. This method can be called on the DevicePolicyManager instance returned by getParentProfileInstance(android.content.ComponentName) in order to retrieve the number of failed password attemts for the parent user. The calling device admin must have requested DeviceAdminInfo#USES_POLICY_WATCH_LOGIN to be able to call this method; if it has not a security exception will be thrown. On devices not supporting PackageManager#FEATURE_SECURE_LOCK_SCREEN feature the password is always empty and this method always returns 0. Requires the PackageManager#FEATURE_SECURE_LOCK_SCREEN feature which can be detected using PackageManager.hasSystemFeature(String).
android.app.admin.DevicePolicyManager.getCurrentFailedPasswordAttempts,Get current failed password attempts.
android.app.admin.DevicePolicyManager.getCurrentFailedPasswordAttempts,Retrieve the number of times the user has failed at entering a password since that last successful password entry.
android.app.admin.DevicePolicyManager.getCurrentFailedPasswordAttempts,This method can be called on the DevicePolicyManager instance returned by getParentProfileInstance(android.content.ComponentName) in order to retrieve the number of failed password attemts for the parent user.
android.app.admin.DevicePolicyManager.getCurrentFailedPasswordAttempts,The calling device admin must have requested DeviceAdminInfo#USES_POLICY_WATCH_LOGIN to be able to call this method; if it has not a security exception will be thrown.
android.app.admin.DevicePolicyManager.getCurrentFailedPasswordAttempts,On devices not supporting PackageManager#FEATURE_SECURE_LOCK_SCREEN feature the password is always empty and this method always returns 0.
android.app.admin.DevicePolicyManager.getCurrentFailedPasswordAttempts,Requires the PackageManager#FEATURE_SECURE_LOCK_SCREEN feature which can be detected using PackageManager.hasSystemFeature(String).
android.app.admin.DevicePolicyManager.isAdminActive,Return true if the given administrator component is currently active (enabled) in the system.
android.app.admin.DevicePolicyManager.isAdminActive,Is admin active.
android.app.admin.DevicePolicyManager.lockNow,Make the device lock immediately as if the lock screen timeout has expired at the point of this call. The calling device admin must have requested DeviceAdminInfo#USES_POLICY_FORCE_LOCK to be able to call this method; if it has not a security exception will be thrown. This method can be called on the DevicePolicyManager instance returned by getParentProfileInstance(android.content.ComponentName) in order to lock the parent profile. Equivalent to calling lockNow(int) with no flags.
android.app.admin.DevicePolicyManager.lockNow,Lock now.
android.app.admin.DevicePolicyManager.lockNow,Make the device lock immediately as if the lock screen timeout has expired at the point of this call.
android.app.admin.DevicePolicyManager.lockNow,The calling device admin must have requested DeviceAdminInfo#USES_POLICY_FORCE_LOCK to be able to call this method; if it has not a security exception will be thrown.
android.app.admin.DevicePolicyManager.lockNow,This method can be called on the DevicePolicyManager instance returned by getParentProfileInstance(android.content.ComponentName) in order to lock the parent profile.
android.app.admin.DevicePolicyManager.lockNow,Equivalent to calling lockNow(int) with no flags.
android.app.admin.DevicePolicyManager.lockNow,Make the device lock immediately as if the lock screen timeout has expired at the point of this call. The calling device admin must have requested DeviceAdminInfo#USES_POLICY_FORCE_LOCK to be able to call this method; if it has not a security exception will be thrown. This method can be called on the DevicePolicyManager instance returned by getParentProfileInstance(android.content.ComponentName) in order to lock the parent profile.
android.app.admin.DevicePolicyManager.lockNow,Lock now.
android.app.admin.DevicePolicyManager.lockNow,Make the device lock immediately as if the lock screen timeout has expired at the point of this call.
android.app.admin.DevicePolicyManager.lockNow,The calling device admin must have requested DeviceAdminInfo#USES_POLICY_FORCE_LOCK to be able to call this method; if it has not a security exception will be thrown.
android.app.admin.DevicePolicyManager.lockNow,This method can be called on the DevicePolicyManager instance returned by getParentProfileInstance(android.content.ComponentName) in order to lock the parent profile.
android.app.admin.DevicePolicyManager.removeActiveAdmin,Remove a current administration component. This can only be called by the application that owns the administration component; if you try to remove someone else's component a security exception will be thrown. Note that the operation is not synchronous and the admin might still be active (as indicated by getActiveAdmins() ) by the time this method returns.
android.app.admin.DevicePolicyManager.removeActiveAdmin,Remove active admin.
android.app.admin.DevicePolicyManager.removeActiveAdmin,Remove a current administration component.
android.app.admin.DevicePolicyManager.removeActiveAdmin,This can only be called by the application that owns the administration component; if you try to remove someone else's component a security exception will be thrown.
android.app.admin.DevicePolicyManager.removeActiveAdmin,Note that the operation is not synchronous and the admin might still be active (as indicated by getActiveAdmins() ) by the time this method returns.
android.app.admin.DevicePolicyManager.resetPassword,Force a new password for device unlock (the password needed to access the entire device) or the work profile challenge on the current user. This takes effect immediately. For device owner and profile owners targeting SDK level Build.VERSION_CODES.O or above this API is no longer available and will throw SecurityException. Please use the new API resetPasswordWithToken(ComponentName String byte[] int) instead. Note: This API has been limited as of Build.VERSION_CODES.N for device admins that are not device owner and not profile owner. The password can now only be changed if there is currently no password set. Device owner and profile owner can still do this when user is unlocked and does not have a managed profile. The given password must be sufficient for the current password quality and length constraints as returned by getPasswordQuality(android.content.ComponentName) and getPasswordMinimumLength(android.content.ComponentName) ; if it does not meet these constraints then it will be rejected and false returned. Note that the password may be a stronger quality (containing alphanumeric characters when the requested quality is only numeric) in which case the currently active quality will be increased to match. Calling with a null or empty password will clear any existing PIN pattern or password if the current password constraints allow it. Note: This will not work in Build.VERSION_CODES.N and later for managed profiles or for device admins that are not device owner or profile owner. Once set the password cannot be changed to null or empty except by these admins. On devices not supporting PackageManager#FEATURE_SECURE_LOCK_SCREEN feature this methods does nothing. The calling device admin must have requested DeviceAdminInfo#USES_POLICY_RESET_PASSWORD to be able to call this method; if it has not a security exception will be thrown. Requires the PackageManager#FEATURE_SECURE_LOCK_SCREEN feature which can be detected using PackageManager.hasSystemFeature(String).
android.app.admin.DevicePolicyManager.resetPassword,Reset password.
android.app.admin.DevicePolicyManager.resetPassword,Force a new password for device unlock (the password needed to access the entire device) or the work profile challenge on the current user.
android.app.admin.DevicePolicyManager.resetPassword,This takes effect immediately.
android.app.admin.DevicePolicyManager.resetPassword,For device owner and profile owners targeting SDK level Build.VERSION_CODES.O or above this API is no longer available and will throw SecurityException.
android.app.admin.DevicePolicyManager.resetPassword,Please use the new API resetPasswordWithToken(ComponentName String byte[] int) instead.
android.app.admin.DevicePolicyManager.resetPassword,Note: This API has been limited as of Build.VERSION_CODES.N for device admins that are not device owner and not profile owner.
android.app.admin.DevicePolicyManager.resetPassword,The password can now only be changed if there is currently no password set.
android.app.admin.DevicePolicyManager.resetPassword,Device owner and profile owner can still do this when user is unlocked and does not have a managed profile.
android.app.admin.DevicePolicyManager.resetPassword,The given password must be sufficient for the current password quality and length constraints as returned by getPasswordQuality(android.content.ComponentName) and getPasswordMinimumLength(android.content.ComponentName) ; if it does not meet these constraints then it will be rejected and false returned.
android.app.admin.DevicePolicyManager.resetPassword,Note that the password may be a stronger quality (containing alphanumeric characters when the requested quality is only numeric) in which case the currently active quality will be increased to match.
android.app.admin.DevicePolicyManager.resetPassword,Calling with a null or empty password will clear any existing PIN pattern or password if the current password constraints allow it.
android.app.admin.DevicePolicyManager.resetPassword,Note: This will not work in Build.VERSION_CODES.N and later for managed profiles or for device admins that are not device owner or profile owner.
android.app.admin.DevicePolicyManager.resetPassword,Once set the password cannot be changed to null or empty except by these admins.
android.app.admin.DevicePolicyManager.resetPassword,On devices not supporting PackageManager#FEATURE_SECURE_LOCK_SCREEN feature this methods does nothing.
android.app.admin.DevicePolicyManager.resetPassword,The calling device admin must have requested DeviceAdminInfo#USES_POLICY_RESET_PASSWORD to be able to call this method; if it has not a security exception will be thrown.
android.app.admin.DevicePolicyManager.resetPassword,Requires the PackageManager#FEATURE_SECURE_LOCK_SCREEN feature which can be detected using PackageManager.hasSystemFeature(String).
android.app.admin.DevicePolicyManager.wipeData,Ask that all user data be wiped. If called as a secondary user the user will be removed and other users will remain unaffected the provided reason for wiping data can be shown to user. Calling from the primary user will cause the device to reboot erasing all device data - including all the secondary users and their data - while booting up. In this case we don't show the reason to the user since the device would be factory reset. The calling device admin must have requested DeviceAdminInfo#USES_POLICY_WIPE_DATA to be able to call this method; if it has not a security exception will be thrown.
android.app.admin.DevicePolicyManager.wipeData,Wipe data.
android.app.admin.DevicePolicyManager.wipeData,Ask that all user data be wiped.
android.app.admin.DevicePolicyManager.wipeData,If called as a secondary user the user will be removed and other users will remain unaffected the provided reason for wiping data can be shown to user.
android.app.admin.DevicePolicyManager.wipeData,Calling from the primary user will cause the device to reboot erasing all device data - including all the secondary users and their data - while booting up.
android.app.admin.DevicePolicyManager.wipeData,In this case we don't show the reason to the user since the device would be factory reset.
android.app.admin.DevicePolicyManager.wipeData,The calling device admin must have requested DeviceAdminInfo#USES_POLICY_WIPE_DATA to be able to call this method; if it has not a security exception will be thrown.
android.app.admin.DevicePolicyManager.wipeData,Ask that all user data be wiped. If called as a secondary user the user will be removed and other users will remain unaffected. Calling from the primary user will cause the device to reboot erasing all device data - including all the secondary users and their data - while booting up. The calling device admin must have requested DeviceAdminInfo#USES_POLICY_WIPE_DATA to be able to call this method; if it has not a security exception will be thrown.
android.app.admin.DevicePolicyManager.wipeData,Wipe data.
android.app.admin.DevicePolicyManager.wipeData,Ask that all user data be wiped.
android.app.admin.DevicePolicyManager.wipeData,If called as a secondary user the user will be removed and other users will remain unaffected.
android.app.admin.DevicePolicyManager.wipeData,Calling from the primary user will cause the device to reboot erasing all device data - including all the secondary users and their data - while booting up.
android.app.admin.DevicePolicyManager.wipeData,The calling device admin must have requested DeviceAdminInfo#USES_POLICY_WIPE_DATA to be able to call this method; if it has not a security exception will be thrown.
android.accessibilityservice.AccessibilityServiceInfo.getCanRetrieveWindowContent,This method was deprecated in API level 18. Use getCapabilities(). Whether this service can retrieve the current window's content. Statically set from AccessibilityService#SERVICE_META_DATA.
android.accessibilityservice.AccessibilityServiceInfo.getCanRetrieveWindowContent,Get can retrieve window content.
android.accessibilityservice.AccessibilityServiceInfo.getCanRetrieveWindowContent,This method was deprecated in API level 18.
android.accessibilityservice.AccessibilityServiceInfo.getCanRetrieveWindowContent,Use getCapabilities().
android.accessibilityservice.AccessibilityServiceInfo.getCanRetrieveWindowContent,Whether this service can retrieve the current window's content.
android.accessibilityservice.AccessibilityServiceInfo.getCanRetrieveWindowContent,Statically set from AccessibilityService#SERVICE_META_DATA.
android.accessibilityservice.AccessibilityServiceInfo.getCapabilities,Returns the bit mask of capabilities this accessibility service has such as being able to retrieve the active window content etc.
android.accessibilityservice.AccessibilityServiceInfo.getCapabilities,Get capabilities.
android.accessibilityservice.AccessibilityServiceInfo.getDescription,This method was deprecated in API level 16. Use loadDescription(android.content.pm.PackageManager). Gets the non-localized description of the accessibility service. Statically set from AccessibilityService#SERVICE_META_DATA.
android.accessibilityservice.AccessibilityServiceInfo.getDescription,Get description.
android.accessibilityservice.AccessibilityServiceInfo.getDescription,This method was deprecated in API level 16.
android.accessibilityservice.AccessibilityServiceInfo.getDescription,Use loadDescription(android.content.pm.PackageManager).
android.accessibilityservice.AccessibilityServiceInfo.getDescription,Gets the non-localized description of the accessibility service.
android.accessibilityservice.AccessibilityServiceInfo.getDescription,Statically set from AccessibilityService#SERVICE_META_DATA.
android.accessibilityservice.AccessibilityServiceInfo.getId,The accessibility service id. Generated by the system.
android.accessibilityservice.AccessibilityServiceInfo.getId,Get id.
android.accessibilityservice.AccessibilityServiceInfo.getId,The accessibility service id.
android.accessibilityservice.AccessibilityServiceInfo.getId,Generated by the system.
android.accessibilityservice.AccessibilityServiceInfo.getResolveInfo,The service ResolveInfo. Generated by the system.
android.accessibilityservice.AccessibilityServiceInfo.getResolveInfo,Get resolve info.
android.accessibilityservice.AccessibilityServiceInfo.getResolveInfo,The service ResolveInfo.
android.accessibilityservice.AccessibilityServiceInfo.getResolveInfo,Generated by the system.
android.accessibilityservice.AccessibilityServiceInfo.getSettingsActivityName,The settings activity name. Statically set from AccessibilityService#SERVICE_META_DATA.
android.accessibilityservice.AccessibilityServiceInfo.getSettingsActivityName,Get settings activity name.
android.accessibilityservice.AccessibilityServiceInfo.getSettingsActivityName,The settings activity name.
android.accessibilityservice.AccessibilityServiceInfo.getSettingsActivityName,Statically set from AccessibilityService#SERVICE_META_DATA.
android.app.backup.BackupDataInput.getDataSize,Report the size in bytes of the data associated with the current entity in the restore stream.
android.app.backup.BackupDataInput.getDataSize,Get data size.
android.app.backup.BackupDataInput.getKey,Report the key associated with the current entity in the restore stream.
android.app.backup.BackupDataInput.getKey,Get key.
android.app.backup.BackupDataInput.readEntityData,Read a record's raw data from the restore stream. The record's header must first have been processed by the readNextHeader() method. Multiple calls to this method may be made in order to process the data in chunks; not all of it must be read in a single call. Once all of the raw data for the current entity has been read further calls to this method will simply return zero.
android.app.backup.BackupDataInput.readEntityData,Read entity data.
android.app.backup.BackupDataInput.readEntityData,Read a record's raw data from the restore stream.
android.app.backup.BackupDataInput.readEntityData,The record's header must first have been processed by the readNextHeader() method.
android.app.backup.BackupDataInput.readEntityData,Multiple calls to this method may be made in order to process the data in chunks; not all of it must be read in a single call.
android.app.backup.BackupDataInput.readEntityData,Once all of the raw data for the current entity has been read further calls to this method will simply return zero.
android.app.backup.BackupDataInput.readNextHeader,Extract the next entity header from the restore stream. After this method return success the getKey() and getDataSize() methods can be used to inspect the entity that is now available for processing.
android.app.backup.BackupDataInput.readNextHeader,Read next header.
android.app.backup.BackupDataInput.readNextHeader,Extract the next entity header from the restore stream.
android.app.backup.BackupDataInput.readNextHeader,After this method return success the getKey() and getDataSize() methods can be used to inspect the entity that is now available for processing.
android.app.backup.BackupDataOutput.writeEntityData,Write a chunk of data under the current entity to the backup transport.
android.app.backup.BackupDataOutput.writeEntityData,Write entity data.
android.app.backup.BackupDataOutput.writeEntityHeader,Mark the beginning of one record in the backup data stream. This must be called before writeEntityData(byte[] int).
android.app.backup.BackupDataOutput.writeEntityHeader,Write entity header.
android.app.backup.BackupDataOutput.writeEntityHeader,Mark the beginning of one record in the backup data stream.
android.app.backup.BackupDataOutput.writeEntityHeader,This must be called before writeEntityData(byte[] int).
android.app.backup.BackupManager.dataChanged,Notifies the Android backup system that your application wishes to back up new changes to its data. A backup operation using your application's BackupAgent subclass will be scheduled when you call this method.
android.app.backup.BackupManager.dataChanged,Data changed.
android.app.backup.BackupManager.dataChanged,Notifies the Android backup system that your application wishes to back up new changes to its data.
android.app.backup.BackupManager.dataChanged,A backup operation using your application's BackupAgent subclass will be scheduled when you call this method.
android.app.backup.BackupManager.dataChanged,"Convenience method for callers who need to indicate that some other package needs a backup pass. This can be useful in the case of groups of packages that share a uid. This method requires that the application hold the ""android.permission.BACKUP"" permission if the package named in the argument does not run under the same uid as the caller."
android.app.backup.BackupManager.dataChanged,Data changed.
android.app.backup.BackupManager.dataChanged,Convenience method for callers who need to indicate that some other package needs a backup pass.
android.app.backup.BackupManager.dataChanged,This can be useful in the case of groups of packages that share a uid.
android.app.backup.BackupManager.dataChanged,"This method requires that the application hold the ""android.permission.BACKUP"" permission if the package named in the argument does not run under the same uid as the caller."
android.animation.Animator.cancel,Cancels the animation. Unlike end() cancel() causes the animation to stop in its tracks sending an Animator.AnimatorListener.onAnimationCancel(Animator) to its listeners followed by an Animator.AnimatorListener.onAnimationEnd(Animator) message. This method must be called on the thread that is running the animation.
android.animation.Animator.cancel,Cancel.
android.animation.Animator.cancel,Cancels the animation.
android.animation.Animator.cancel,Unlike end() cancel() causes the animation to stop in its tracks sending an Animator.AnimatorListener.onAnimationCancel(Animator) to its listeners followed by an Animator.AnimatorListener.onAnimationEnd(Animator) message.
android.animation.Animator.cancel,This method must be called on the thread that is running the animation.
android.animation.Animator.end,Ends the animation. This causes the animation to assign the end value of the property being animated then calling the Animator.AnimatorListener.onAnimationEnd(Animator) method on its listeners. This method must be called on the thread that is running the animation.
android.animation.Animator.end,End.
android.animation.Animator.end,Ends the animation.
android.animation.Animator.end,This causes the animation to assign the end value of the property being animated then calling the Animator.AnimatorListener.onAnimationEnd(Animator) method on its listeners.
android.animation.Animator.end,This method must be called on the thread that is running the animation.
android.animation.Animator.removeAllListeners,Removes all listeners and pauseListeners from this object.
android.animation.Animator.removeAllListeners,Remove all listeners.
android.animation.Animator.setDuration,Sets the duration of the animation.
android.animation.Animator.setDuration,Set duration.
android.animation.Animator.setInterpolator,The time interpolator used in calculating the elapsed fraction of the animation. The interpolator determines whether the animation runs with linear or non-linear motion such as acceleration and deceleration. The default value is AccelerateDecelerateInterpolator.
android.animation.Animator.setInterpolator,Set interpolator.
android.animation.Animator.setInterpolator,The time interpolator used in calculating the elapsed fraction of the animation.
android.animation.Animator.setInterpolator,The interpolator determines whether the animation runs with linear or non-linear motion such as acceleration and deceleration.
android.animation.Animator.setInterpolator,The default value is AccelerateDecelerateInterpolator.
android.animation.Animator.setStartDelay,The amount of time in milliseconds to delay processing the animation after start() is called.
android.animation.Animator.setStartDelay,Set start delay.
android.animation.Animator.setTarget,Sets the target object whose property will be animated by this animation. Not all subclasses operate on target objects (for example ValueAnimator but this method is on the superclass for the convenience of dealing generically with those subclasses that do handle targets. Note: The target is stored as a weak reference internally to avoid leaking resources by having animators directly reference old targets. Therefore you should ensure that animator targets always have a hard reference elsewhere.
android.animation.Animator.setTarget,Set target.
android.animation.Animator.setTarget,Sets the target object whose property will be animated by this animation.
android.animation.Animator.setTarget,Not all subclasses operate on target objects (for example ValueAnimator but this method is on the superclass for the convenience of dealing generically with those subclasses that do handle targets.
android.animation.Animator.setTarget,Note: The target is stored as a weak reference internally to avoid leaking resources by having animators directly reference old targets.
android.animation.Animator.setTarget,Therefore you should ensure that animator targets always have a hard reference elsewhere.
android.animation.Animator.start,Starts this animation. If the animation has a nonzero startDelay the animation will start running after that delay elapses. A non-delayed animation will have its initial value(s) set immediately followed by calls to AnimatorListener#onAnimationStart(Animator) for any listeners of this animator. The animation started by calling this method will be run on the thread that called this method. This thread should have a Looper on it (a runtime exception will be thrown if this is not the case). Also if the animation will animate properties of objects in the view hierarchy then the calling thread should be the UI thread for that view hierarchy.
android.animation.Animator.start,Start.
android.animation.Animator.start,Starts this animation.
android.animation.Animator.start,If the animation has a nonzero startDelay the animation will start running after that delay elapses.
android.animation.Animator.start,A non-delayed animation will have its initial value(s) set immediately followed by calls to AnimatorListener#onAnimationStart(Animator) for any listeners of this animator.
android.animation.Animator.start,The animation started by calling this method will be run on the thread that called this method.
android.animation.Animator.start,This thread should have a Looper on it (a runtime exception will be thrown if this is not the case).
android.animation.Animator.start,Also if the animation will animate properties of objects in the view hierarchy then the calling thread should be the UI thread for that view hierarchy.
android.animation.AnimatorInflater.loadAnimator,Loads an Animator object from a resource.
android.animation.AnimatorInflater.loadAnimator,Load animator.
android.animation.AnimatorListenerAdapter.onAnimationEnd,Notifies the end of the animation. This callback is not invoked for animations with repeat count set to INFINITE.
android.animation.AnimatorListenerAdapter.onAnimationEnd,On animation end.
android.animation.AnimatorListenerAdapter.onAnimationEnd,Notifies the end of the animation.
android.animation.AnimatorListenerAdapter.onAnimationEnd,This callback is not invoked for animations with repeat count set to INFINITE.
android.animation.AnimatorListenerAdapter.onAnimationStart,Notifies the start of the animation.
android.animation.AnimatorListenerAdapter.onAnimationStart,On animation start.
android.animation.AnimatorSet.cancel,Cancels the animation. Unlike end() cancel() causes the animation to stop in its tracks sending an Animator.AnimatorListener.onAnimationCancel(Animator) to its listeners followed by an Animator.AnimatorListener.onAnimationEnd(Animator) message. This method must be called on the thread that is running the animation. Note that canceling a AnimatorSet also cancels all of the animations that it is responsible for.
android.animation.AnimatorSet.cancel,Cancel.
android.animation.AnimatorSet.cancel,Cancels the animation.
android.animation.AnimatorSet.cancel,Unlike end() cancel() causes the animation to stop in its tracks sending an Animator.AnimatorListener.onAnimationCancel(Animator) to its listeners followed by an Animator.AnimatorListener.onAnimationEnd(Animator) message.
android.animation.AnimatorSet.cancel,This method must be called on the thread that is running the animation.
android.animation.AnimatorSet.cancel,Note that canceling a AnimatorSet also cancels all of the animations that it is responsible for.
android.animation.AnimatorSet.end,Ends the animation. This causes the animation to assign the end value of the property being animated then calling the Animator.AnimatorListener.onAnimationEnd(Animator) method on its listeners. This method must be called on the thread that is running the animation. Note that ending a AnimatorSet also ends all of the animations that it is responsible for.
android.animation.AnimatorSet.end,End.
android.animation.AnimatorSet.end,Ends the animation.
android.animation.AnimatorSet.end,This causes the animation to assign the end value of the property being animated then calling the Animator.AnimatorListener.onAnimationEnd(Animator) method on its listeners.
android.animation.AnimatorSet.end,This method must be called on the thread that is running the animation.
android.animation.AnimatorSet.end,Note that ending a AnimatorSet also ends all of the animations that it is responsible for.
android.animation.AnimatorSet.isRunning,Returns true if any of the child animations of this AnimatorSet have been started and have not yet ended. Child animations will not be started until the AnimatorSet has gone past its initial delay set through setStartDelay(long).
android.animation.AnimatorSet.isRunning,Is running.
android.animation.AnimatorSet.isRunning,Returns true if any of the child animations of this AnimatorSet have been started and have not yet ended.
android.animation.AnimatorSet.isRunning,Child animations will not be started until the AnimatorSet has gone past its initial delay set through setStartDelay(long).
android.animation.AnimatorSet.isStarted,Returns whether this Animator has been started and not yet ended. For reusable Animators (which most Animators are apart from the one-shot animator produced by createCircularReveal() ) this state is a superset of isRunning() because an Animator with a nonzero startDelay will return true for isStarted() during the delay phase whereas isRunning() will return true only after the delay phase is complete. Non-reusable animators will always return true after they have been started because they cannot return to a non-started state.
android.animation.AnimatorSet.isStarted,Is started.
android.animation.AnimatorSet.isStarted,Returns whether this Animator has been started and not yet ended.
android.animation.AnimatorSet.isStarted,For reusable Animators (which most Animators are apart from the one-shot animator produced by createCircularReveal() ) this state is a superset of isRunning() because an Animator with a nonzero startDelay will return true for isStarted() during the delay phase whereas isRunning() will return true only after the delay phase is complete.
android.animation.AnimatorSet.isStarted,Non-reusable animators will always return true after they have been started because they cannot return to a non-started state.
android.animation.AnimatorSet.play,This method creates a Builder object which is used to set up playing constraints. This initial play() method tells the Builder the animation that is the dependency for the succeeding commands to the Builder. For example calling play(a1).with(a2) sets up the AnimatorSet to play a1 and a2 at the same time play(a1).before(a2) sets up the AnimatorSet to play a1 first followed by a2 and play(a1).after(a2) sets up the AnimatorSet to play a2 first followed by a1. Note that play() is the only way to tell the Builder the animation upon which the dependency is created so successive calls to the various functions in Builder will all refer to the initial parameter supplied in play() as the dependency of the other animations. For example calling play(a1).before(a2).before(a3) will play both a2 and a3 when a1 ends; it does not set up a dependency between a2 and a3.
android.animation.AnimatorSet.play,Play.
android.animation.AnimatorSet.play,This method creates a Builder object which is used to set up playing constraints.
android.animation.AnimatorSet.play,This initial play() method tells the Builder the animation that is the dependency for the succeeding commands to the Builder.
android.animation.AnimatorSet.play,For example calling play(a1).with(a2) sets up the AnimatorSet to play a1 and a2 at the same time play(a1).before(a2) sets up the AnimatorSet to play a1 first followed by a2 and play(a1).after(a2) sets up the AnimatorSet to play a2 first followed by a1.
android.animation.AnimatorSet.play,Note that play() is the only way to tell the Builder the animation upon which the dependency is created so successive calls to the various functions in Builder will all refer to the initial parameter supplied in play() as the dependency of the other animations.
android.animation.AnimatorSet.play,For example calling play(a1).before(a2).before(a3) will play both a2 and a3 when a1 ends; it does not set up a dependency between a2 and a3.
android.animation.AnimatorSet.playTogether,Sets up this AnimatorSet to play all of the supplied animations at the same time.
android.animation.AnimatorSet.playTogether,Play together.
android.animation.AnimatorSet.playTogether,Sets up this AnimatorSet to play all of the supplied animations at the same time. This is equivalent to calling play(android.animation.Animator) with the first animator in the set and then Builder#with(Animator) with each of the other animators. Note that an Animator with a Animator#setStartDelay(long) will not actually start until that delay elapses which means that if the first animator in the list supplied to this constructor has a startDelay none of the other animators will start until that first animator's startDelay has elapsed.
android.animation.AnimatorSet.playTogether,Play together.
android.animation.AnimatorSet.playTogether,Sets up this AnimatorSet to play all of the supplied animations at the same time.
android.animation.AnimatorSet.playTogether,This is equivalent to calling play(android.animation.Animator) with the first animator in the set and then Builder#with(Animator) with each of the other animators.
android.animation.AnimatorSet.playTogether,Note that an Animator with a Animator#setStartDelay(long) will not actually start until that delay elapses which means that if the first animator in the list supplied to this constructor has a startDelay none of the other animators will start until that first animator's startDelay has elapsed.
android.animation.AnimatorSet.setDuration,Sets the length of each of the current child animations of this AnimatorSet. By default each child animation will use its own duration. If the duration is set on the AnimatorSet then each child animation inherits this duration.
android.animation.AnimatorSet.setDuration,Set duration.
android.animation.AnimatorSet.setDuration,Sets the length of each of the current child animations of this AnimatorSet.
android.animation.AnimatorSet.setDuration,By default each child animation will use its own duration.
android.animation.AnimatorSet.setDuration,If the duration is set on the AnimatorSet then each child animation inherits this duration.
android.animation.AnimatorSet.setInterpolator,Sets the TimeInterpolator for all current child animations of this AnimatorSet. The default value is null which means that no interpolator is set on this AnimatorSet. Setting the interpolator to any non-null value will cause that interpolator to be set on the child animations when the set is started.
android.animation.AnimatorSet.setInterpolator,Set interpolator.
android.animation.AnimatorSet.setInterpolator,Sets the TimeInterpolator for all current child animations of this AnimatorSet.
android.animation.AnimatorSet.setInterpolator,The default value is null which means that no interpolator is set on this AnimatorSet.
android.animation.AnimatorSet.setInterpolator,Setting the interpolator to any non-null value will cause that interpolator to be set on the child animations when the set is started.
android.animation.AnimatorSet.setStartDelay,The amount of time in milliseconds to delay starting the animation after start() is called. Note that the start delay should always be non-negative. Any negative start delay will be clamped to 0 on N and above.
android.animation.AnimatorSet.setStartDelay,Set start delay.
android.animation.AnimatorSet.setStartDelay,The amount of time in milliseconds to delay starting the animation after start() is called.
android.animation.AnimatorSet.setStartDelay,Note that the start delay should always be non-negative.
android.animation.AnimatorSet.setStartDelay,Any negative start delay will be clamped to 0 on N and above.
android.animation.AnimatorSet.start,Starts this animation. If the animation has a nonzero startDelay the animation will start running after that delay elapses. A non-delayed animation will have its initial value(s) set immediately followed by calls to AnimatorListener#onAnimationStart(Animator) for any listeners of this animator. The animation started by calling this method will be run on the thread that called this method. This thread should have a Looper on it (a runtime exception will be thrown if this is not the case). Also if the animation will animate properties of objects in the view hierarchy then the calling thread should be the UI thread for that view hierarchy. Starting this AnimatorSet will in turn start the animations for which it is responsible. The details of when exactly those animations are started depends on the dependency relationships that have been set up between the animations. Note: Manipulating AnimatorSet's lifecycle in the child animators' listener callbacks will lead to undefined behaviors. Also AnimatorSet will ignore any seeking in the child animators once start() is called.
android.animation.AnimatorSet.start,Start.
android.animation.AnimatorSet.start,Starts this animation.
android.animation.AnimatorSet.start,If the animation has a nonzero startDelay the animation will start running after that delay elapses.
android.animation.AnimatorSet.start,A non-delayed animation will have its initial value(s) set immediately followed by calls to AnimatorListener#onAnimationStart(Animator) for any listeners of this animator.
android.animation.AnimatorSet.start,The animation started by calling this method will be run on the thread that called this method.
android.animation.AnimatorSet.start,This thread should have a Looper on it (a runtime exception will be thrown if this is not the case).
android.animation.AnimatorSet.start,Also if the animation will animate properties of objects in the view hierarchy then the calling thread should be the UI thread for that view hierarchy.
android.animation.AnimatorSet.start,Starting this AnimatorSet will in turn start the animations for which it is responsible.
android.animation.AnimatorSet.start,The details of when exactly those animations are started depends on the dependency relationships that have been set up between the animations.
android.animation.AnimatorSet.start,Note: Manipulating AnimatorSet's lifecycle in the child animators' listener callbacks will lead to undefined behaviors.
android.animation.AnimatorSet.start,Also AnimatorSet will ignore any seeking in the child animators once start() is called.
android.animation.ArgbEvaluator.evaluate,This function returns the calculated in-between value for a color given integers that represent the start and end values in the four bytes of the 32-bit int. Each channel is separately linearly interpolated and the resulting calculated values are recombined into the return value.
android.animation.ArgbEvaluator.evaluate,Evaluate.
android.animation.ArgbEvaluator.evaluate,This function returns the calculated in-between value for a color given integers that represent the start and end values in the four bytes of the 32-bit int.
android.animation.ArgbEvaluator.evaluate,Each channel is separately linearly interpolated and the resulting calculated values are recombined into the return value.
android.animation.Keyframe.ofFloat,Constructs a Keyframe object with the given time. The value at this time will be derived from the target object when the animation first starts (note that this implies that keyframes with no initial value must be used as part of an ObjectAnimator ). The time defines the time as a proportion of an overall animation's duration at which the value will hold true for the animation. The value for the animation between keyframes will be calculated as an interpolation between the values at those keyframes.
android.animation.Keyframe.ofFloat,Of float.
android.animation.Keyframe.ofFloat,Constructs a Keyframe object with the given time.
android.animation.Keyframe.ofFloat,The value at this time will be derived from the target object when the animation first starts (note that this implies that keyframes with no initial value must be used as part of an ObjectAnimator ).
android.animation.Keyframe.ofFloat,The time defines the time as a proportion of an overall animation's duration at which the value will hold true for the animation.
android.animation.Keyframe.ofFloat,The value for the animation between keyframes will be calculated as an interpolation between the values at those keyframes.
android.animation.Keyframe.ofFloat,Constructs a Keyframe object with the given time and value. The time defines the time as a proportion of an overall animation's duration at which the value will hold true for the animation. The value for the animation between keyframes will be calculated as an interpolation between the values at those keyframes.
android.animation.Keyframe.ofFloat,Of float.
android.animation.Keyframe.ofFloat,Constructs a Keyframe object with the given time and value.
android.animation.Keyframe.ofFloat,The time defines the time as a proportion of an overall animation's duration at which the value will hold true for the animation.
android.animation.Keyframe.ofFloat,The value for the animation between keyframes will be calculated as an interpolation between the values at those keyframes.
android.animation.LayoutTransition.disableTransitionType,Disables the specified transitionType for this LayoutTransition object. By default all transition types except CHANGING are enabled.
android.animation.LayoutTransition.disableTransitionType,Disable transition type.
android.animation.LayoutTransition.disableTransitionType,Disables the specified transitionType for this LayoutTransition object.
android.animation.LayoutTransition.disableTransitionType,By default all transition types except CHANGING are enabled.
android.animation.LayoutTransition.enableTransitionType,Enables the specified transitionType for this LayoutTransition object. By default a LayoutTransition listens for changes in children being added/remove/hidden/shown in the container and runs the animations associated with those events. That is all transition types besides CHANGING are enabled by default. You can also enable CHANGING animations by calling this method with the CHANGING transitionType.
android.animation.LayoutTransition.enableTransitionType,Enable transition type.
android.animation.LayoutTransition.enableTransitionType,Enables the specified transitionType for this LayoutTransition object.
android.animation.LayoutTransition.enableTransitionType,By default a LayoutTransition listens for changes in children being added/remove/hidden/shown in the container and runs the animations associated with those events.
android.animation.LayoutTransition.enableTransitionType,That is all transition types besides CHANGING are enabled by default.
android.animation.LayoutTransition.enableTransitionType,You can also enable CHANGING animations by calling this method with the CHANGING transitionType.
android.animation.LayoutTransition.setAnimateParentHierarchy,This flag controls whether CHANGE_APPEARING or CHANGE_DISAPPEARING animations will cause the default changing animation to be run on the parent hierarchy as well. This allows containers of transitioning views to also transition which may be necessary in situations where the containers bounds change between the before/after states and may clip their children during the transition animations. For example layouts with wrap_content will adjust their bounds according to the dimensions of their children. The default changing transitions animate the bounds and scroll positions of the target views. These are the animations that will run on the parent hierarchy not the custom animations that happen to be set on the transition. This allows custom behavior for the children of the transitioning container but uses standard behavior of resizing/rescrolling on any changing parents.
android.animation.LayoutTransition.setAnimateParentHierarchy,Set animate parent hierarchy.
android.animation.LayoutTransition.setAnimateParentHierarchy,This flag controls whether CHANGE_APPEARING or CHANGE_DISAPPEARING animations will cause the default changing animation to be run on the parent hierarchy as well.
android.animation.LayoutTransition.setAnimateParentHierarchy,This allows containers of transitioning views to also transition which may be necessary in situations where the containers bounds change between the before/after states and may clip their children during the transition animations.
android.animation.LayoutTransition.setAnimateParentHierarchy,For example layouts with wrap_content will adjust their bounds according to the dimensions of their children.
android.animation.LayoutTransition.setAnimateParentHierarchy,The default changing transitions animate the bounds and scroll positions of the target views.
android.animation.LayoutTransition.setAnimateParentHierarchy,These are the animations that will run on the parent hierarchy not the custom animations that happen to be set on the transition.
android.animation.LayoutTransition.setAnimateParentHierarchy,This allows custom behavior for the children of the transitioning container but uses standard behavior of resizing/rescrolling on any changing parents.
android.animation.LayoutTransition.setAnimator,"Sets the animation used during one of the transition types that may run. Any Animator object can be used but to be most useful in the context of layout transitions the animation should either be a ObjectAnimator or a AnimatorSet of animations including PropertyAnimators. Also these ObjectAnimator objects should be able to get and set values on their target objects automatically. For example a ObjectAnimator that animates the property ""left"" is able to set and get the left property from the View objects being animated by the layout transition. The transition works by setting target objects and properties dynamically according to the pre- and post-layoout values of those objects so having animations that can handle those properties appropriately will work best for custom animation. The dynamic setting of values is only the case for the CHANGE animations; the APPEARING and DISAPPEARING animations are simply run with the values they have. It is also worth noting that any and all animations (and their underlying PropertyValuesHolder objects) will have their start and end values set according to the pre- and post-layout values. So for example a custom animation on ""alpha"" as the CHANGE_APPEARING animation will inherit the real value of alpha on the target object (presumably 1) as its starting and ending value when the animation begins. Animations which need to use values at the beginning and end that may not match the values queried when the transition begins may need to use a different mechanism than a standard ObjectAnimator object."
android.animation.LayoutTransition.setAnimator,Set animator.
android.animation.LayoutTransition.setAnimator,Sets the animation used during one of the transition types that may run.
android.animation.LayoutTransition.setAnimator,Any Animator object can be used but to be most useful in the context of layout transitions the animation should either be a ObjectAnimator or a AnimatorSet of animations including PropertyAnimators.
android.animation.LayoutTransition.setAnimator,Also these ObjectAnimator objects should be able to get and set values on their target objects automatically.
android.animation.LayoutTransition.setAnimator,"For example a ObjectAnimator that animates the property ""left"" is able to set and get the left property from the View objects being animated by the layout transition."
android.animation.LayoutTransition.setAnimator,The transition works by setting target objects and properties dynamically according to the pre- and post-layoout values of those objects so having animations that can handle those properties appropriately will work best for custom animation.
android.animation.LayoutTransition.setAnimator,The dynamic setting of values is only the case for the CHANGE animations; the APPEARING and DISAPPEARING animations are simply run with the values they have.
android.animation.LayoutTransition.setAnimator,It is also worth noting that any and all animations (and their underlying PropertyValuesHolder objects) will have their start and end values set according to the pre- and post-layout values.
android.animation.LayoutTransition.setAnimator,"So for example a custom animation on ""alpha"" as the CHANGE_APPEARING animation will inherit the real value of alpha on the target object (presumably 1) as its starting and ending value when the animation begins."
android.animation.LayoutTransition.setAnimator,Animations which need to use values at the beginning and end that may not match the values queried when the transition begins may need to use a different mechanism than a standard ObjectAnimator object.
android.animation.LayoutTransition.setDuration,Sets the duration on one of the animation objects used by this transition. The transitionType parameter determines the animation whose duration is being set.
android.animation.LayoutTransition.setDuration,Set duration.
android.animation.LayoutTransition.setDuration,Sets the duration on one of the animation objects used by this transition.
android.animation.LayoutTransition.setDuration,The transitionType parameter determines the animation whose duration is being set.
android.animation.LayoutTransition.setDuration,Sets the duration to be used by all animations of this transition object. If you want to set the duration of just one of the animations in particular use the setDuration(int long) method.
android.animation.LayoutTransition.setDuration,Set duration.
android.animation.LayoutTransition.setDuration,Sets the duration to be used by all animations of this transition object.
android.animation.LayoutTransition.setDuration,If you want to set the duration of just one of the animations in particular use the setDuration(int long) method.
android.animation.ObjectAnimator.getPropertyName,Gets the name of the property that will be animated. This name will be used to derive a setter function that will be called to set animated values. For example a property name of foo will result in a call to the function setFoo() on the target object. If either valueFrom or valueTo is null then a getter function will also be derived and called. If this animator was created with a Property object instead of the string name of a property then this method will return the Property#getName() of that Property object instead. If this animator was created with one or more PropertyValuesHolder objects then this method will return the PropertyValuesHolder#getPropertyName() of that object (if there was just one) or a comma-separated list of all of the names (if there are more than one).
android.animation.ObjectAnimator.getPropertyName,Get property name.
android.animation.ObjectAnimator.getPropertyName,Gets the name of the property that will be animated.
android.animation.ObjectAnimator.getPropertyName,This name will be used to derive a setter function that will be called to set animated values.
android.animation.ObjectAnimator.getPropertyName,For example a property name of foo will result in a call to the function setFoo() on the target object.
android.animation.ObjectAnimator.getPropertyName,If either valueFrom or valueTo is null then a getter function will also be derived and called.
android.animation.ObjectAnimator.getPropertyName,If this animator was created with a Property object instead of the string name of a property then this method will return the Property#getName() of that Property object instead.
android.animation.ObjectAnimator.getPropertyName,If this animator was created with one or more PropertyValuesHolder objects then this method will return the PropertyValuesHolder#getPropertyName() of that object (if there was just one) or a comma-separated list of all of the names (if there are more than one).
android.animation.ObjectAnimator.setDuration,Sets the length of the animation. The default duration is 300 milliseconds.
android.animation.ObjectAnimator.setDuration,Set duration.
android.animation.ObjectAnimator.setDuration,Sets the length of the animation.
android.animation.ObjectAnimator.setDuration,The default duration is 300 milliseconds.
android.animation.ObjectAnimator.setProperty,Sets the property that will be animated. Property objects will take precedence over properties specified by the setPropertyName(java.lang.String) method. Animations should be set up to use one or the other not both.
android.animation.ObjectAnimator.setProperty,Set property.
android.animation.ObjectAnimator.setProperty,Sets the property that will be animated.
android.animation.ObjectAnimator.setProperty,Property objects will take precedence over properties specified by the setPropertyName(java.lang.String) method.
android.animation.ObjectAnimator.setProperty,Animations should be set up to use one or the other not both.
android.animation.ObjectAnimator.setPropertyName,Sets the name of the property that will be animated. This name is used to derive a setter function that will be called to set animated values. For example a property name of foo will result in a call to the function setFoo() on the target object. If either valueFrom or valueTo is null then a getter function will also be derived and called. For best performance of the mechanism that calls the setter function determined by the name of the property being animated use float or int typed values and make the setter function for those properties have a void return value. This will cause the code to take an optimized path for these constrained circumstances. Other property types and return types will work but will have more overhead in processing the requests due to normal reflection mechanisms. Note that the setter function derived from this property name must take the same parameter type as the valueFrom and valueTo properties otherwise the call to the setter function will fail. If this ObjectAnimator has been set up to animate several properties together using more than one PropertyValuesHolder objects then setting the propertyName simply sets the propertyName in the first of those PropertyValuesHolder objects.
android.animation.ObjectAnimator.setPropertyName,Set property name.
android.animation.ObjectAnimator.setPropertyName,Sets the name of the property that will be animated.
android.animation.ObjectAnimator.setPropertyName,This name is used to derive a setter function that will be called to set animated values.
android.animation.ObjectAnimator.setPropertyName,For example a property name of foo will result in a call to the function setFoo() on the target object.
android.animation.ObjectAnimator.setPropertyName,If either valueFrom or valueTo is null then a getter function will also be derived and called.
android.animation.ObjectAnimator.setPropertyName,For best performance of the mechanism that calls the setter function determined by the name of the property being animated use float or int typed values and make the setter function for those properties have a void return value.
android.animation.ObjectAnimator.setPropertyName,This will cause the code to take an optimized path for these constrained circumstances.
android.animation.ObjectAnimator.setPropertyName,Other property types and return types will work but will have more overhead in processing the requests due to normal reflection mechanisms.
android.animation.ObjectAnimator.setPropertyName,Note that the setter function derived from this property name must take the same parameter type as the valueFrom and valueTo properties otherwise the call to the setter function will fail.
android.animation.ObjectAnimator.setPropertyName,If this ObjectAnimator has been set up to animate several properties together using more than one PropertyValuesHolder objects then setting the propertyName simply sets the propertyName in the first of those PropertyValuesHolder objects.
android.animation.ValueAnimator.getAnimatedFraction,Returns the current animation fraction which is the elapsed/interpolated fraction used in the most recent frame update on the animation.
android.animation.ValueAnimator.getAnimatedFraction,Get animated fraction.
android.animation.ValueAnimator.getAnimatedValue,The most recent value calculated by this ValueAnimator when there is just one property being animated. This value is only sensible while the animation is running. The main purpose for this read-only property is to retrieve the value from the ValueAnimator during a call to AnimatorUpdateListener#onAnimationUpdate(ValueAnimator) which is called during each animation frame immediately after the value is calculated.
android.animation.ValueAnimator.getAnimatedValue,Get animated value.
android.animation.ValueAnimator.getAnimatedValue,The most recent value calculated by this ValueAnimator when there is just one property being animated.
android.animation.ValueAnimator.getAnimatedValue,This value is only sensible while the animation is running.
android.animation.ValueAnimator.getAnimatedValue,The main purpose for this read-only property is to retrieve the value from the ValueAnimator during a call to AnimatorUpdateListener#onAnimationUpdate(ValueAnimator) which is called during each animation frame immediately after the value is calculated.
android.animation.ValueAnimator.getAnimatedValue,The most recent value calculated by this ValueAnimator for propertyName. The main purpose for this read-only property is to retrieve the value from the ValueAnimator during a call to AnimatorUpdateListener#onAnimationUpdate(ValueAnimator) which is called during each animation frame immediately after the value is calculated.
android.animation.ValueAnimator.getAnimatedValue,Get animated value.
android.animation.ValueAnimator.getAnimatedValue,The most recent value calculated by this ValueAnimator for propertyName.
android.animation.ValueAnimator.getAnimatedValue,The main purpose for this read-only property is to retrieve the value from the ValueAnimator during a call to AnimatorUpdateListener#onAnimationUpdate(ValueAnimator) which is called during each animation frame immediately after the value is calculated.
android.animation.ValueAnimator.getCurrentPlayTime,Gets the current position of the animation in time which is equal to the current time minus the time that the animation started. An animation that is not yet started will return a value of zero unless the animation has has its play time set via setCurrentPlayTime(long) or setCurrentFraction(float) in which case it will return the time that was set.
android.animation.ValueAnimator.getCurrentPlayTime,Get current play time.
android.animation.ValueAnimator.getCurrentPlayTime,Gets the current position of the animation in time which is equal to the current time minus the time that the animation started.
android.animation.ValueAnimator.getCurrentPlayTime,An animation that is not yet started will return a value of zero unless the animation has has its play time set via setCurrentPlayTime(long) or setCurrentFraction(float) in which case it will return the time that was set.
android.animation.ValueAnimator.getDuration,Gets the length of the animation. The default duration is 300 milliseconds.
android.animation.ValueAnimator.getDuration,Get duration.
android.animation.ValueAnimator.getDuration,Gets the length of the animation.
android.animation.ValueAnimator.getDuration,The default duration is 300 milliseconds.
android.animation.ValueAnimator.getFrameDelay,The amount of time in milliseconds between each frame of the animation. This is a requested time that the animation will attempt to honor but the actual delay between frames may be different depending on system load and capabilities. This is a static function because the same delay will be applied to all animations since they are all run off of a single timing loop. The frame delay may be ignored when the animation system uses an external timing source such as the display refresh rate (vsync) to govern animations. Note that this method should be called from the same thread that start() is called in order to check the frame delay for that animation. A runtime exception will be thrown if the calling thread does not have a Looper.
android.animation.ValueAnimator.getFrameDelay,Get frame delay.
android.animation.ValueAnimator.getFrameDelay,The amount of time in milliseconds between each frame of the animation.
android.animation.ValueAnimator.getFrameDelay,This is a requested time that the animation will attempt to honor but the actual delay between frames may be different depending on system load and capabilities.
android.animation.ValueAnimator.getFrameDelay,This is a static function because the same delay will be applied to all animations since they are all run off of a single timing loop.
android.animation.ValueAnimator.getFrameDelay,The frame delay may be ignored when the animation system uses an external timing source such as the display refresh rate (vsync) to govern animations.
android.animation.ValueAnimator.getFrameDelay,Note that this method should be called from the same thread that start() is called in order to check the frame delay for that animation.
android.animation.ValueAnimator.getFrameDelay,A runtime exception will be thrown if the calling thread does not have a Looper.
android.animation.ValueAnimator.removeAllUpdateListeners,Removes all listeners from the set listening to frame updates for this animation.
android.animation.ValueAnimator.removeAllUpdateListeners,Remove all update listeners.
android.animation.ValueAnimator.reverse,Plays the ValueAnimator in reverse. If the animation is already running it will stop itself and play backwards from the point reached when reverse was called. If the animation is not currently running then it will start from the end and play backwards. This behavior is only set for the current animation; future playing of the animation will use the default behavior of playing forward.
android.animation.ValueAnimator.reverse,Reverse.
android.animation.ValueAnimator.reverse,Plays the ValueAnimator in reverse.
android.animation.ValueAnimator.reverse,If the animation is already running it will stop itself and play backwards from the point reached when reverse was called.
android.animation.ValueAnimator.reverse,If the animation is not currently running then it will start from the end and play backwards.
android.animation.ValueAnimator.reverse,This behavior is only set for the current animation; future playing of the animation will use the default behavior of playing forward.
android.animation.ValueAnimator.setCurrentPlayTime,Sets the position of the animation to the specified point in time. This time should be between 0 and the total duration of the animation including any repetition. If the animation has not yet been started then it will not advance forward after it is set to this time; it will simply set the time to this value and perform any appropriate actions based on that time. If the animation is already running then setCurrentPlayTime() will set the current playing time to this value and continue playing from that point.
android.animation.ValueAnimator.setCurrentPlayTime,Set current play time.
android.animation.ValueAnimator.setCurrentPlayTime,Sets the position of the animation to the specified point in time.
android.animation.ValueAnimator.setCurrentPlayTime,This time should be between 0 and the total duration of the animation including any repetition.
android.animation.ValueAnimator.setCurrentPlayTime,If the animation has not yet been started then it will not advance forward after it is set to this time; it will simply set the time to this value and perform any appropriate actions based on that time.
android.animation.ValueAnimator.setCurrentPlayTime,If the animation is already running then setCurrentPlayTime() will set the current playing time to this value and continue playing from that point.
android.animation.ValueAnimator.setInterpolator,The time interpolator used in calculating the elapsed fraction of this animation. The interpolator determines whether the animation runs with linear or non-linear motion such as acceleration and deceleration. The default value is AccelerateDecelerateInterpolator.
android.animation.ValueAnimator.setInterpolator,Set interpolator.
android.animation.ValueAnimator.setInterpolator,The time interpolator used in calculating the elapsed fraction of this animation.
android.animation.ValueAnimator.setInterpolator,The interpolator determines whether the animation runs with linear or non-linear motion such as acceleration and deceleration.
android.animation.ValueAnimator.setInterpolator,The default value is AccelerateDecelerateInterpolator.
android.animation.ValueAnimator.setRepeatCount,Sets how many times the animation should be repeated. If the repeat count is 0 the animation is never repeated. If the repeat count is greater than 0 or INFINITE the repeat mode will be taken into account. The repeat count is 0 by default.
android.animation.ValueAnimator.setRepeatCount,Set repeat count.
android.animation.ValueAnimator.setRepeatCount,Sets how many times the animation should be repeated.
android.animation.ValueAnimator.setRepeatCount,If the repeat count is 0 the animation is never repeated.
android.animation.ValueAnimator.setRepeatCount,If the repeat count is greater than 0 or INFINITE the repeat mode will be taken into account.
android.animation.ValueAnimator.setRepeatCount,The repeat count is 0 by default.
android.animation.ValueAnimator.setRepeatMode,Defines what this animation should do when it reaches the end. This setting is applied only when the repeat count is either greater than 0 or INFINITE. Defaults to RESTART.
android.animation.ValueAnimator.setRepeatMode,Set repeat mode.
android.animation.ValueAnimator.setRepeatMode,Defines what this animation should do when it reaches the end.
android.animation.ValueAnimator.setRepeatMode,This setting is applied only when the repeat count is either greater than 0 or INFINITE.
android.animation.ValueAnimator.setRepeatMode,Defaults to RESTART.
android.appwidget.AppWidgetHost.allocateAppWidgetId,Get a appWidgetId for a host in the calling process.
android.appwidget.AppWidgetHost.allocateAppWidgetId,Allocate app widget id.
android.appwidget.AppWidgetHost.stopListening,Stop receiving onAppWidgetChanged calls for your AppWidgets. Call this when your activity is no longer visible i.e. from onStop() in your Activity.
android.appwidget.AppWidgetHost.stopListening,Stop listening.
android.appwidget.AppWidgetHost.stopListening,Stop receiving onAppWidgetChanged calls for your AppWidgets.
android.appwidget.AppWidgetHost.stopListening,Call this when your activity is no longer visible i.e.
android.appwidget.AppWidgetHost.stopListening,from onStop() in your Activity.
android.appwidget.AppWidgetHostView.getDefaultPaddingForWidget,As of ICE_CREAM_SANDWICH we are automatically adding padding to widgets targeting ICE_CREAM_SANDWICH and higher. The new widget design guidelines strongly recommend that widget developers do not add extra padding to their widgets. This will help achieve consistency among widgets. Note: this method is only needed by developers of AppWidgetHosts. The method is provided in order for the AppWidgetHost to account for the automatic padding when computing the number of cells to allocate to a particular widget.
android.appwidget.AppWidgetHostView.getDefaultPaddingForWidget,Get default padding for widget.
android.appwidget.AppWidgetHostView.getDefaultPaddingForWidget,As of ICE_CREAM_SANDWICH we are automatically adding padding to widgets targeting ICE_CREAM_SANDWICH and higher.
android.appwidget.AppWidgetHostView.getDefaultPaddingForWidget,The new widget design guidelines strongly recommend that widget developers do not add extra padding to their widgets.
android.appwidget.AppWidgetHostView.getDefaultPaddingForWidget,This will help achieve consistency among widgets.
android.appwidget.AppWidgetHostView.getDefaultPaddingForWidget,Note: this method is only needed by developers of AppWidgetHosts.
android.appwidget.AppWidgetHostView.getDefaultPaddingForWidget,The method is provided in order for the AppWidgetHost to account for the automatic padding when computing the number of cells to allocate to a particular widget.
android.appwidget.AppWidgetHostView.updateAppWidget,Process a set of RemoteViews coming in as an update from the AppWidget provider. Will animate into these new views as needed.
android.appwidget.AppWidgetHostView.updateAppWidget,Update app widget.
android.appwidget.AppWidgetHostView.updateAppWidget,Process a set of RemoteViews coming in as an update from the AppWidget provider.
android.appwidget.AppWidgetHostView.updateAppWidget,Will animate into these new views as needed.
android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed,Set the component for a given appWidgetId. You need the BIND_APPWIDGET permission or the user must have enabled binding widgets always for your component. Should be used by apps that host widgets; if this method returns false call ACTION_APPWIDGET_BIND to request permission to bind.
android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed,Bind app widget id if allowed.
android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed,Set the component for a given appWidgetId.
android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed,You need the BIND_APPWIDGET permission or the user must have enabled binding widgets always for your component.
android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed,Should be used by apps that host widgets; if this method returns false call ACTION_APPWIDGET_BIND to request permission to bind.
android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed,Set the provider for a given appWidgetId if the caller has a permission. Note: You need the Manifest.permission.BIND_APPWIDGET permission or the user must have enabled binding widgets always for your component. Should be used by apps that host widgets. If this method returns false call ACTION_APPWIDGET_BIND to request permission to bind.
android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed,Bind app widget id if allowed.
android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed,Set the provider for a given appWidgetId if the caller has a permission.
android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed,Note: You need the Manifest.permission.BIND_APPWIDGET permission or the user must have enabled binding widgets always for your component.
android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed,Should be used by apps that host widgets.
android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed,If this method returns false call ACTION_APPWIDGET_BIND to request permission to bind.
android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed,Set the component for a given appWidgetId. You need the BIND_APPWIDGET permission or the user must have enabled binding widgets always for your component. Should be used by apps that host widgets; if this method returns false call ACTION_APPWIDGET_BIND to request permission to bind.
android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed,Bind app widget id if allowed.
android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed,Set the component for a given appWidgetId.
android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed,You need the BIND_APPWIDGET permission or the user must have enabled binding widgets always for your component.
android.appwidget.AppWidgetManager.bindAppWidgetIdIfAllowed,Should be used by apps that host widgets; if this method returns false call ACTION_APPWIDGET_BIND to request permission to bind.
android.appwidget.AppWidgetManager.getAppWidgetIds,Get the list of appWidgetIds that have been bound to the given AppWidget provider.
android.appwidget.AppWidgetManager.getAppWidgetIds,Get app widget ids.
android.appwidget.AppWidgetManager.getAppWidgetInfo,Get the available info about the AppWidget.
android.appwidget.AppWidgetManager.getAppWidgetInfo,Get app widget info.
android.appwidget.AppWidgetManager.getInstance,Get the AppWidgetManager instance to use for the supplied Context object.
android.appwidget.AppWidgetManager.getInstance,Get instance.
android.appwidget.AppWidgetManager.updateAppWidget,Set the RemoteViews to use for all AppWidget instances for the supplied AppWidget provider. It is okay to call this method both inside an ACTION_APPWIDGET_UPDATE broadcast and outside of the handler. This method will only work when called from the uid that owns the AppWidget provider.
android.appwidget.AppWidgetManager.updateAppWidget,Update app widget.
android.appwidget.AppWidgetManager.updateAppWidget,Set the RemoteViews to use for all AppWidget instances for the supplied AppWidget provider.
android.appwidget.AppWidgetManager.updateAppWidget,It is okay to call this method both inside an ACTION_APPWIDGET_UPDATE broadcast and outside of the handler.
android.appwidget.AppWidgetManager.updateAppWidget,This method will only work when called from the uid that owns the AppWidget provider.
android.appwidget.AppWidgetManager.updateAppWidget,Set the RemoteViews to use for the specified appWidgetIds. Note that the RemoteViews parameter will be cached by the AppWidgetService and hence should contain a complete representation of the widget. For performing partial widget updates see partiallyUpdateAppWidget(int[] android.widget.RemoteViews). It is okay to call this method both inside an ACTION_APPWIDGET_UPDATE broadcast and outside of the handler. This method will only work when called from the uid that owns the AppWidget provider. The total Bitmap memory used by the RemoteViews object cannot exceed that required to fill the screen 1.5 times ie. (screen width x screen height x 4 x 1.5) bytes.
android.appwidget.AppWidgetManager.updateAppWidget,Update app widget.
android.appwidget.AppWidgetManager.updateAppWidget,Set the RemoteViews to use for the specified appWidgetIds.
android.appwidget.AppWidgetManager.updateAppWidget,Note that the RemoteViews parameter will be cached by the AppWidgetService and hence should contain a complete representation of the widget.
android.appwidget.AppWidgetManager.updateAppWidget,For performing partial widget updates see partiallyUpdateAppWidget(int[] android.widget.RemoteViews).
android.appwidget.AppWidgetManager.updateAppWidget,It is okay to call this method both inside an ACTION_APPWIDGET_UPDATE broadcast and outside of the handler.
android.appwidget.AppWidgetManager.updateAppWidget,This method will only work when called from the uid that owns the AppWidget provider.
android.appwidget.AppWidgetManager.updateAppWidget,The total Bitmap memory used by the RemoteViews object cannot exceed that required to fill the screen 1.5 times ie.
android.appwidget.AppWidgetManager.updateAppWidget,(screen width x screen height x 4 x 1.5) bytes.
android.appwidget.AppWidgetManager.updateAppWidget,Set the RemoteViews to use for the specified appWidgetId. Note that the RemoteViews parameter will be cached by the AppWidgetService and hence should contain a complete representation of the widget. For performing partial widget updates see partiallyUpdateAppWidget(int android.widget.RemoteViews). It is okay to call this method both inside an ACTION_APPWIDGET_UPDATE broadcast and outside of the handler. This method will only work when called from the uid that owns the AppWidget provider. The total Bitmap memory used by the RemoteViews object cannot exceed that required to fill the screen 1.5 times ie. (screen width x screen height x 4 x 1.5) bytes.
android.appwidget.AppWidgetManager.updateAppWidget,Update app widget.
android.appwidget.AppWidgetManager.updateAppWidget,Set the RemoteViews to use for the specified appWidgetId.
android.appwidget.AppWidgetManager.updateAppWidget,Note that the RemoteViews parameter will be cached by the AppWidgetService and hence should contain a complete representation of the widget.
android.appwidget.AppWidgetManager.updateAppWidget,For performing partial widget updates see partiallyUpdateAppWidget(int android.widget.RemoteViews).
android.appwidget.AppWidgetManager.updateAppWidget,It is okay to call this method both inside an ACTION_APPWIDGET_UPDATE broadcast and outside of the handler.
android.appwidget.AppWidgetManager.updateAppWidget,This method will only work when called from the uid that owns the AppWidget provider.
android.appwidget.AppWidgetManager.updateAppWidget,The total Bitmap memory used by the RemoteViews object cannot exceed that required to fill the screen 1.5 times ie.
android.appwidget.AppWidgetManager.updateAppWidget,(screen width x screen height x 4 x 1.5) bytes.
android.appwidget.AppWidgetProvider.onAppWidgetOptionsChanged,Called in response to the AppWidgetManager#ACTION_APPWIDGET_OPTIONS_CHANGED broadcast when this widget has been layed out at a new size.
android.appwidget.AppWidgetProvider.onAppWidgetOptionsChanged,On app widget options changed.
android.appwidget.AppWidgetProvider.onDeleted,Called in response to the AppWidgetManager#ACTION_APPWIDGET_DELETED broadcast when one or more AppWidget instances have been deleted. Override this method to implement your own AppWidget functionality.
android.appwidget.AppWidgetProvider.onDeleted,On deleted.
android.appwidget.AppWidgetProvider.onDeleted,Called in response to the AppWidgetManager#ACTION_APPWIDGET_DELETED broadcast when one or more AppWidget instances have been deleted.
android.appwidget.AppWidgetProvider.onDeleted,Override this method to implement your own AppWidget functionality.
android.appwidget.AppWidgetProvider.onDisabled,Called in response to the AppWidgetManager#ACTION_APPWIDGET_DISABLED broadcast which is sent when the last AppWidget instance for this provider is deleted. Override this method to implement your own AppWidget functionality.
android.appwidget.AppWidgetProvider.onDisabled,On disabled.
android.appwidget.AppWidgetProvider.onDisabled,Called in response to the AppWidgetManager#ACTION_APPWIDGET_DISABLED broadcast which is sent when the last AppWidget instance for this provider is deleted.
android.appwidget.AppWidgetProvider.onDisabled,Override this method to implement your own AppWidget functionality.
android.appwidget.AppWidgetProvider.onEnabled,Called in response to the AppWidgetManager#ACTION_APPWIDGET_ENABLED broadcast when the a AppWidget for this provider is instantiated. Override this method to implement your own AppWidget functionality. When the last AppWidget for this provider is deleted AppWidgetManager#ACTION_APPWIDGET_DISABLED is sent by the AppWidget manager and onDisabled(Context) is called. If after that an AppWidget for this provider is created again onEnabled() will be called again.
android.appwidget.AppWidgetProvider.onEnabled,On enabled.
android.appwidget.AppWidgetProvider.onEnabled,Called in response to the AppWidgetManager#ACTION_APPWIDGET_ENABLED broadcast when the a AppWidget for this provider is instantiated.
android.appwidget.AppWidgetProvider.onEnabled,Override this method to implement your own AppWidget functionality.
android.appwidget.AppWidgetProvider.onEnabled,When the last AppWidget for this provider is deleted AppWidgetManager#ACTION_APPWIDGET_DISABLED is sent by the AppWidget manager and onDisabled(Context) is called.
android.appwidget.AppWidgetProvider.onEnabled,If after that an AppWidget for this provider is created again onEnabled() will be called again.
android.appwidget.AppWidgetProvider.onReceive,Implements BroadcastReceiver#onReceive to dispatch calls to the various other methods on AppWidgetProvider.
android.appwidget.AppWidgetProvider.onReceive,On receive.
android.appwidget.AppWidgetProvider.onUpdate,Called in response to the AppWidgetManager#ACTION_APPWIDGET_UPDATE and AppWidgetManager#ACTION_APPWIDGET_RESTORED broadcasts when this AppWidget provider is being asked to provide RemoteViews for a set of AppWidgets. Override this method to implement your own AppWidget functionality.
android.appwidget.AppWidgetProvider.onUpdate,On update.
android.appwidget.AppWidgetProvider.onUpdate,Called in response to the AppWidgetManager#ACTION_APPWIDGET_UPDATE and AppWidgetManager#ACTION_APPWIDGET_RESTORED broadcasts when this AppWidget provider is being asked to provide RemoteViews for a set of AppWidgets.
android.appwidget.AppWidgetProvider.onUpdate,Override this method to implement your own AppWidget functionality.
android.app.usage.UsageEvents.hasNextEvent,Returns whether or not there are more events to read using getNextEvent(android.app.usage.UsageEvents.Event).
android.app.usage.UsageEvents.hasNextEvent,Has next event.
android.app.usage.UsageStatsManager.queryEvents,Query for events in the given time range. Events are only kept by the system for a few days. The caller must have Manifest.permission.PACKAGE_USAGE_STATS.
android.app.usage.UsageStatsManager.queryEvents,Query events.
android.app.usage.UsageStatsManager.queryEvents,Query for events in the given time range.
android.app.usage.UsageStatsManager.queryEvents,Events are only kept by the system for a few days.
android.app.usage.UsageStatsManager.queryEvents,The caller must have Manifest.permission.PACKAGE_USAGE_STATS.
android.content.res.AssetFileDescriptor.close,Convenience for calling getParcelFileDescriptor().close().
android.content.res.AssetFileDescriptor.close,Close.
android.content.res.AssetFileDescriptor.createInputStream,Create and return a new auto-close input stream for this asset. This will either return a full asset AutoCloseInputStream or an underlying ParcelFileDescriptor.AutoCloseInputStream depending on whether the the object represents a complete file or sub-section of a file. You should only call this once for a particular asset.
android.content.res.AssetFileDescriptor.createInputStream,Create input stream.
android.content.res.AssetFileDescriptor.createInputStream,Create and return a new auto-close input stream for this asset.
android.content.res.AssetFileDescriptor.createInputStream,This will either return a full asset AutoCloseInputStream or an underlying ParcelFileDescriptor.AutoCloseInputStream depending on whether the the object represents a complete file or sub-section of a file.
android.content.res.AssetFileDescriptor.createInputStream,You should only call this once for a particular asset.
android.content.res.AssetFileDescriptor.createOutputStream,Create and return a new auto-close output stream for this asset. This will either return a full asset AutoCloseOutputStream or an underlying ParcelFileDescriptor.AutoCloseOutputStream depending on whether the the object represents a complete file or sub-section of a file. You should only call this once for a particular asset.
android.content.res.AssetFileDescriptor.createOutputStream,Create output stream.
android.content.res.AssetFileDescriptor.createOutputStream,Create and return a new auto-close output stream for this asset.
android.content.res.AssetFileDescriptor.createOutputStream,This will either return a full asset AutoCloseOutputStream or an underlying ParcelFileDescriptor.AutoCloseOutputStream depending on whether the the object represents a complete file or sub-section of a file.
android.content.res.AssetFileDescriptor.createOutputStream,You should only call this once for a particular asset.
android.content.res.AssetFileDescriptor.getFileDescriptor,Returns the FileDescriptor that can be used to read the data in the file.
android.content.res.AssetFileDescriptor.getFileDescriptor,Get file descriptor.
android.content.res.AssetFileDescriptor.getLength,Returns the total number of bytes of this asset entry's data. May be UNKNOWN_LENGTH if the asset extends to the end of the file. If the AssetFileDescriptor was constructed with UNKNOWN_LENGTH this will use ParcelFileDescriptor#getStatSize() to find the total size of the file returning that number if found or UNKNOWN_LENGTH if it could not be determined.
android.content.res.AssetFileDescriptor.getLength,Get length.
android.content.res.AssetFileDescriptor.getLength,Returns the total number of bytes of this asset entry's data.
android.content.res.AssetFileDescriptor.getLength,May be UNKNOWN_LENGTH if the asset extends to the end of the file.
android.content.res.AssetFileDescriptor.getLength,If the AssetFileDescriptor was constructed with UNKNOWN_LENGTH this will use ParcelFileDescriptor#getStatSize() to find the total size of the file returning that number if found or UNKNOWN_LENGTH if it could not be determined.
android.content.res.AssetFileDescriptor.getParcelFileDescriptor,The AssetFileDescriptor contains its own ParcelFileDescriptor which in addition to the normal FileDescriptor object also allows you to close the descriptor when you are done with it.
android.content.res.AssetFileDescriptor.getParcelFileDescriptor,Get parcel file descriptor.
android.content.res.AssetFileDescriptor.getStartOffset,Returns the byte offset where this asset entry's data starts.
android.content.res.AssetFileDescriptor.getStartOffset,Get start offset.
android.content.res.AssetManager.close,Close this asset manager.
android.content.res.AssetManager.close,Close.
android.content.res.AssetManager.list,Return a String array of all the assets at the given path.
android.content.res.AssetManager.list,List.
android.content.res.AssetManager.open,"Open an asset using an explicit access mode returning an InputStream to read its contents. This provides access to files that have been bundled with an application as assets -- that is files placed in to the ""assets"" directory."
android.content.res.AssetManager.open,Open.
android.content.res.AssetManager.open,Open an asset using an explicit access mode returning an InputStream to read its contents.
android.content.res.AssetManager.open,"This provides access to files that have been bundled with an application as assets -- that is files placed in to the ""assets"" directory."
android.content.res.AssetManager.open,"Open an asset using ACCESS_STREAMING mode. This provides access to files that have been bundled with an application as assets -- that is files placed in to the ""assets"" directory."
android.content.res.AssetManager.open,Open.
android.content.res.AssetManager.open,Open an asset using ACCESS_STREAMING mode.
android.content.res.AssetManager.open,"This provides access to files that have been bundled with an application as assets -- that is files placed in to the ""assets"" directory."
android.content.res.AssetManager.openXmlResourceParser,Retrieve a parser for a compiled XML file.
android.content.res.AssetManager.openXmlResourceParser,Open xml resource parser.
android.content.res.AssetManager.openXmlResourceParser,Retrieve a parser for a compiled XML file.
android.content.res.AssetManager.openXmlResourceParser,Open xml resource parser.
android.content.res.ColorStateList.getColorForState,Return the color associated with the given set of View states.
android.content.res.ColorStateList.getColorForState,Get color for state.
android.content.res.ColorStateList.getDefaultColor,Return the default color in this ColorStateList.
android.content.res.ColorStateList.getDefaultColor,Get default color.
android.content.res.ColorStateList.isStateful,Indicates whether this color state list contains at least one state spec and the first spec is not empty (e.g. match-all).
android.content.res.ColorStateList.isStateful,Is stateful.
android.content.res.ColorStateList.isStateful,Indicates whether this color state list contains at least one state spec and the first spec is not empty (e.g.
android.content.res.ColorStateList.isStateful,match-all).
android.content.res.ColorStateList.valueOf,.
android.content.res.ColorStateList.valueOf,Value of.
android.content.res.ColorStateList.withAlpha,Creates a new ColorStateList that has the same states and colors as this one but where each color has the specified alpha value (0-255).
android.content.res.ColorStateList.withAlpha,With alpha.
android.content.res.Configuration.setToDefaults,Set this object to the system defaults.
android.content.res.Configuration.setToDefaults,Set to defaults.
android.content.res.Resources.getAnimation,Return an XmlResourceParser through which you can read an animation description for the given resource ID. This parser has limited functionality -- in particular you can't change its input and only the high-level events are available. This function is really a simple wrapper for calling getXml(int) with an animation resource.
android.content.res.Resources.getAnimation,Get animation.
android.content.res.Resources.getAnimation,Return an XmlResourceParser through which you can read an animation description for the given resource ID.
android.content.res.Resources.getAnimation,This parser has limited functionality -- in particular you can't change its input and only the high-level events are available.
android.content.res.Resources.getAnimation,This function is really a simple wrapper for calling getXml(int) with an animation resource.
android.content.res.Resources.getAssets,Retrieve underlying AssetManager storage for these resources.
android.content.res.Resources.getAssets,Get assets.
android.content.res.Resources.getBoolean,Return a boolean associated with a particular resource ID. This can be used with any integral resource value and will return true if it is non-zero.
android.content.res.Resources.getBoolean,Get boolean.
android.content.res.Resources.getBoolean,Return a boolean associated with a particular resource ID.
android.content.res.Resources.getBoolean,This can be used with any integral resource value and will return true if it is non-zero.
android.content.res.Resources.getColor,This method was deprecated in API level 23. Use getColor(int android.content.res.Resources.Theme) instead. Returns a color integer associated with a particular resource ID. If the resource holds a complex ColorStateList then the default color from the set is returned.
android.content.res.Resources.getColor,Get color.
android.content.res.Resources.getColor,This method was deprecated in API level 23.
android.content.res.Resources.getColor,Use getColor(int android.content.res.Resources.Theme) instead.
android.content.res.Resources.getColor,Returns a color integer associated with a particular resource ID.
android.content.res.Resources.getColor,If the resource holds a complex ColorStateList then the default color from the set is returned.
android.content.res.Resources.getColor,Returns a themed color integer associated with a particular resource ID. If the resource holds a complex ColorStateList then the default color from the set is returned.
android.content.res.Resources.getColor,Get color.
android.content.res.Resources.getColor,Returns a themed color integer associated with a particular resource ID.
android.content.res.Resources.getColor,If the resource holds a complex ColorStateList then the default color from the set is returned.
android.content.res.Resources.getColorStateList,Returns a themed color state list associated with a particular resource ID. The resource may contain either a single raw color value or a complex ColorStateList holding multiple possible colors.
android.content.res.Resources.getColorStateList,Get color state list.
android.content.res.Resources.getColorStateList,Returns a themed color state list associated with a particular resource ID.
android.content.res.Resources.getColorStateList,The resource may contain either a single raw color value or a complex ColorStateList holding multiple possible colors.
android.content.res.Resources.getColorStateList,This method was deprecated in API level 23. Use getColorStateList(int android.content.res.Resources.Theme) instead. Returns a color state list associated with a particular resource ID. The resource may contain either a single raw color value or a complex ColorStateList holding multiple possible colors.
android.content.res.Resources.getColorStateList,Get color state list.
android.content.res.Resources.getColorStateList,This method was deprecated in API level 23.
android.content.res.Resources.getColorStateList,Use getColorStateList(int android.content.res.Resources.Theme) instead.
android.content.res.Resources.getColorStateList,Returns a color state list associated with a particular resource ID.
android.content.res.Resources.getColorStateList,The resource may contain either a single raw color value or a complex ColorStateList holding multiple possible colors.
android.content.res.Resources.getConfiguration,Return the current configuration that is in effect for this resource object. The returned object should be treated as read-only.
android.content.res.Resources.getConfiguration,Get configuration.
android.content.res.Resources.getConfiguration,Return the current configuration that is in effect for this resource object.
android.content.res.Resources.getConfiguration,The returned object should be treated as read-only.
android.content.res.Resources.getDimension,Retrieve a dimensional for a particular resource ID. Unit conversions are based on the current DisplayMetrics associated with the resources.
android.content.res.Resources.getDimension,Get dimension.
android.content.res.Resources.getDimension,Retrieve a dimensional for a particular resource ID.
android.content.res.Resources.getDimension,Unit conversions are based on the current DisplayMetrics associated with the resources.
android.content.res.Resources.getDimensionPixelOffset,Retrieve a dimensional for a particular resource ID for use as an offset in raw pixels. This is the same as getDimension(int) except the returned value is converted to integer pixels for you. An offset conversion involves simply truncating the base value to an integer.
android.content.res.Resources.getDimensionPixelOffset,Get dimension pixel offset.
android.content.res.Resources.getDimensionPixelOffset,Retrieve a dimensional for a particular resource ID for use as an offset in raw pixels.
android.content.res.Resources.getDimensionPixelOffset,This is the same as getDimension(int) except the returned value is converted to integer pixels for you.
android.content.res.Resources.getDimensionPixelOffset,An offset conversion involves simply truncating the base value to an integer.
android.content.res.Resources.getDimensionPixelSize,Retrieve a dimensional for a particular resource ID for use as a size in raw pixels. This is the same as getDimension(int) except the returned value is converted to integer pixels for use as a size. A size conversion involves rounding the base value and ensuring that a non-zero base value is at least one pixel in size.
android.content.res.Resources.getDimensionPixelSize,Get dimension pixel size.
android.content.res.Resources.getDimensionPixelSize,Retrieve a dimensional for a particular resource ID for use as a size in raw pixels.
android.content.res.Resources.getDimensionPixelSize,This is the same as getDimension(int) except the returned value is converted to integer pixels for use as a size.
android.content.res.Resources.getDimensionPixelSize,A size conversion involves rounding the base value and ensuring that a non-zero base value is at least one pixel in size.
android.content.res.Resources.getDisplayMetrics,Return the current display metrics that are in effect for this resource object. The returned object should be treated as read-only.
android.content.res.Resources.getDisplayMetrics,Get display metrics.
android.content.res.Resources.getDisplayMetrics,Return the current display metrics that are in effect for this resource object.
android.content.res.Resources.getDisplayMetrics,The returned object should be treated as read-only.
android.content.res.Resources.getDrawable,Return a drawable object associated with a particular resource ID and styled for the specified theme. Various types of objects will be returned depending on the underlying resource -- for example a solid color PNG image scalable image etc.
android.content.res.Resources.getDrawable,Get drawable.
android.content.res.Resources.getDrawable,Return a drawable object associated with a particular resource ID and styled for the specified theme.
android.content.res.Resources.getDrawable,Various types of objects will be returned depending on the underlying resource -- for example a solid color PNG image scalable image etc.
android.content.res.Resources.getDrawable,This method was deprecated in API level 22. Use getDrawable(int android.content.res.Resources.Theme) instead. Return a drawable object associated with a particular resource ID. Various types of objects will be returned depending on the underlying resource -- for example a solid color PNG image scalable image etc. The Drawable API hides these implementation details. Note: Prior to Build.VERSION_CODES.JELLY_BEAN this function would not correctly retrieve the final configuration density when the resource ID passed here is an alias to another Drawable resource. This means that if the density configuration of the alias resource is different than the actual resource the density of the returned Drawable would be incorrect resulting in bad scaling. To work around this you can instead manually resolve the aliased reference by using getValue(int android.util.TypedValue boolean) and passing true for resolveRefs. The resulting TypedValue#resourceId value may be passed to this method. Note: To obtain a themed drawable use Context.getDrawable(int) or getDrawable(int android.content.res.Resources.Theme) passing the desired theme.
android.content.res.Resources.getDrawable,Get drawable.
android.content.res.Resources.getDrawable,This method was deprecated in API level 22.
android.content.res.Resources.getDrawable,Use getDrawable(int android.content.res.Resources.Theme) instead.
android.content.res.Resources.getDrawable,Return a drawable object associated with a particular resource ID.
android.content.res.Resources.getDrawable,Various types of objects will be returned depending on the underlying resource -- for example a solid color PNG image scalable image etc.
android.content.res.Resources.getDrawable,The Drawable API hides these implementation details.
android.content.res.Resources.getDrawable,Note: Prior to Build.VERSION_CODES.JELLY_BEAN this function would not correctly retrieve the final configuration density when the resource ID passed here is an alias to another Drawable resource.
android.content.res.Resources.getDrawable,This means that if the density configuration of the alias resource is different than the actual resource the density of the returned Drawable would be incorrect resulting in bad scaling.
android.content.res.Resources.getDrawable,To work around this you can instead manually resolve the aliased reference by using getValue(int android.util.TypedValue boolean) and passing true for resolveRefs.
android.content.res.Resources.getDrawable,The resulting TypedValue#resourceId value may be passed to this method.
android.content.res.Resources.getDrawable,Note: To obtain a themed drawable use Context.getDrawable(int) or getDrawable(int android.content.res.Resources.Theme) passing the desired theme.
android.content.res.Resources.getDrawableForDensity,This method was deprecated in API level 22. Use getDrawableForDensity(int int android.content.res.Resources.Theme) instead. Return a drawable object associated with a particular resource ID for the given screen density in DPI. This will set the drawable's density to be the device's density multiplied by the ratio of actual drawable density to requested density. This allows the drawable to be scaled up to the correct size if needed. Various types of objects will be returned depending on the underlying resource -- for example a solid color PNG image scalable image etc. The Drawable API hides these implementation details. Note: To obtain a themed drawable use Context.getDrawable(int) or getDrawableForDensity(int int android.content.res.Resources.Theme) passing the desired theme.
android.content.res.Resources.getDrawableForDensity,Get drawable for density.
android.content.res.Resources.getDrawableForDensity,This method was deprecated in API level 22.
android.content.res.Resources.getDrawableForDensity,Use getDrawableForDensity(int int android.content.res.Resources.Theme) instead.
android.content.res.Resources.getDrawableForDensity,Return a drawable object associated with a particular resource ID for the given screen density in DPI.
android.content.res.Resources.getDrawableForDensity,This will set the drawable's density to be the device's density multiplied by the ratio of actual drawable density to requested density.
android.content.res.Resources.getDrawableForDensity,This allows the drawable to be scaled up to the correct size if needed.
android.content.res.Resources.getDrawableForDensity,Various types of objects will be returned depending on the underlying resource -- for example a solid color PNG image scalable image etc.
android.content.res.Resources.getDrawableForDensity,The Drawable API hides these implementation details.
android.content.res.Resources.getDrawableForDensity,Note: To obtain a themed drawable use Context.getDrawable(int) or getDrawableForDensity(int int android.content.res.Resources.Theme) passing the desired theme.
android.content.res.Resources.getDrawableForDensity,Return a drawable object associated with a particular resource ID for the given screen density in DPI and styled for the specified theme.
android.content.res.Resources.getDrawableForDensity,Get drawable for density.
android.content.res.Resources.getIdentifier,"Return a resource identifier for the given resource name. A fully qualified resource name is of the form ""package:type/entry"". The first two components (package and type) are optional if defType and defPackage respectively are specified here. Note: use of this function is discouraged. It is much more efficient to retrieve resources by identifier than by name."
android.content.res.Resources.getIdentifier,Get identifier.
android.content.res.Resources.getIdentifier,Return a resource identifier for the given resource name.
android.content.res.Resources.getIdentifier,"A fully qualified resource name is of the form ""package:type/entry""."
android.content.res.Resources.getIdentifier,The first two components (package and type) are optional if defType and defPackage respectively are specified here.
android.content.res.Resources.getIdentifier,Note: use of this function is discouraged.
android.content.res.Resources.getIdentifier,It is much more efficient to retrieve resources by identifier than by name.
android.content.res.Resources.getIntArray,Return the int array associated with a particular resource ID.
android.content.res.Resources.getIntArray,Get int array.
android.content.res.Resources.getInteger,Return an integer associated with a particular resource ID.
android.content.res.Resources.getInteger,Get integer.
android.content.res.Resources.getLayout,Return an XmlResourceParser through which you can read a view layout description for the given resource ID. This parser has limited functionality -- in particular you can't change its input and only the high-level events are available. This function is really a simple wrapper for calling getXml(int) with a layout resource.
android.content.res.Resources.getLayout,Get layout.
android.content.res.Resources.getLayout,Return an XmlResourceParser through which you can read a view layout description for the given resource ID.
android.content.res.Resources.getLayout,This parser has limited functionality -- in particular you can't change its input and only the high-level events are available.
android.content.res.Resources.getLayout,This function is really a simple wrapper for calling getXml(int) with a layout resource.
android.content.res.Resources.getQuantityString,Returns the string necessary for grammatically correct pluralization of the given resource ID for the given quantity. Note that the string is selected based solely on grammatical necessity and that such rules differ between languages. Do not assume you know which string will be returned for a given quantity. See String Resources for more detail.
android.content.res.Resources.getQuantityString,Get quantity string.
android.content.res.Resources.getQuantityString,Returns the string necessary for grammatically correct pluralization of the given resource ID for the given quantity.
android.content.res.Resources.getQuantityString,Note that the string is selected based solely on grammatical necessity and that such rules differ between languages.
android.content.res.Resources.getQuantityString,Do not assume you know which string will be returned for a given quantity.
android.content.res.Resources.getQuantityString,See String Resources for more detail.
android.content.res.Resources.getQuantityString,Formats the string necessary for grammatically correct pluralization of the given resource ID for the given quantity using the given arguments. Note that the string is selected based solely on grammatical necessity and that such rules differ between languages. Do not assume you know which string will be returned for a given quantity. See String Resources for more detail. Substitution of format arguments works as if using Formatter and String.format(String Object...). The resulting string will be stripped of any styled text information.
android.content.res.Resources.getQuantityString,Get quantity string.
android.content.res.Resources.getQuantityString,Formats the string necessary for grammatically correct pluralization of the given resource ID for the given quantity using the given arguments.
android.content.res.Resources.getQuantityString,Note that the string is selected based solely on grammatical necessity and that such rules differ between languages.
android.content.res.Resources.getQuantityString,Do not assume you know which string will be returned for a given quantity.
android.content.res.Resources.getQuantityString,See String Resources for more detail.
android.content.res.Resources.getQuantityString,Substitution of format arguments works as if using Formatter and String.format(String Object...).
android.content.res.Resources.getQuantityString,The resulting string will be stripped of any styled text information.
android.content.res.Resources.getResourceEntryName,Return the entry name for a given resource identifier.
android.content.res.Resources.getResourceEntryName,Get resource entry name.
android.content.res.Resources.getResourceName,"Return the full name for a given resource identifier. This name is a single string of the form ""package:type/entry""."
android.content.res.Resources.getResourceName,Get resource name.
android.content.res.Resources.getResourceName,Return the full name for a given resource identifier.
android.content.res.Resources.getResourceName,"This name is a single string of the form ""package:type/entry""."
android.content.res.Resources.getResourcePackageName,Return the package name for a given resource identifier.
android.content.res.Resources.getResourcePackageName,Get resource package name.
android.content.res.Resources.getResourceTypeName,Return the type name for a given resource identifier.
android.content.res.Resources.getResourceTypeName,Get resource type name.
android.content.res.Resources.getString,Return the string value associated with a particular resource ID substituting the format arguments as defined in Formatter and String.format(String Object...). It will be stripped of any styled text information.
android.content.res.Resources.getString,Get string.
android.content.res.Resources.getString,Return the string value associated with a particular resource ID substituting the format arguments as defined in Formatter and String.format(String Object...).
android.content.res.Resources.getString,It will be stripped of any styled text information.
android.content.res.Resources.getString,Return the string value associated with a particular resource ID. It will be stripped of any styled text information.
android.content.res.Resources.getString,Get string.
android.content.res.Resources.getString,Return the string value associated with a particular resource ID.
android.content.res.Resources.getString,It will be stripped of any styled text information.
android.content.res.Resources.getStringArray,Return the string array associated with a particular resource ID.
android.content.res.Resources.getStringArray,Get string array.
android.content.res.Resources.getSystem,Return a global shared Resources object that provides access to only system resources (no application resources) is not configured for the current screen (can not use dimension units does not change based on orientation etc) and is not affected by Runtime Resource Overlay.
android.content.res.Resources.getSystem,Get system.
android.content.res.Resources.getText,Return the string value associated with a particular resource ID. The returned object will be a String if this is a plain string; it will be some other type of CharSequence if it is styled.
android.content.res.Resources.getText,Get text.
android.content.res.Resources.getText,Return the string value associated with a particular resource ID.
android.content.res.Resources.getText,The returned object will be a String if this is a plain string; it will be some other type of CharSequence if it is styled.
android.content.res.Resources.getText,Return the string value associated with a particular resource ID. The returned object will be a String if this is a plain string; it will be some other type of CharSequence if it is styled.
android.content.res.Resources.getText,Get text.
android.content.res.Resources.getText,Return the string value associated with a particular resource ID.
android.content.res.Resources.getText,The returned object will be a String if this is a plain string; it will be some other type of CharSequence if it is styled.
android.content.res.Resources.getTextArray,Return the styled text array associated with a particular resource ID.
android.content.res.Resources.getTextArray,Get text array.
android.content.res.Resources.getValue,Return the raw data associated with a particular resource ID. See getIdentifier() for information on how names are mapped to resource IDs and getString(int) for information on how string resources are retrieved. Note: use of this function is discouraged. It is much more efficient to retrieve resources by identifier than by name.
android.content.res.Resources.getValue,Get value.
android.content.res.Resources.getValue,Return the raw data associated with a particular resource ID.
android.content.res.Resources.getValue,See getIdentifier() for information on how names are mapped to resource IDs and getString(int) for information on how string resources are retrieved.
android.content.res.Resources.getValue,Note: use of this function is discouraged.
android.content.res.Resources.getValue,It is much more efficient to retrieve resources by identifier than by name.
android.content.res.Resources.getValue,Return the raw data associated with a particular resource ID.
android.content.res.Resources.getValue,Get value.
android.content.res.Resources.getValueForDensity,Get the raw value associated with a resource with associated density.
android.content.res.Resources.getValueForDensity,Get value for density.
android.content.res.Resources.getXml,Return an XmlResourceParser through which you can read a generic XML resource for the given resource ID. The XmlPullParser implementation returned here has some limited functionality. In particular you can't change its input and only high-level parsing events are available (since the document was pre-parsed for you at build time which involved merging text and stripping comments).
android.content.res.Resources.getXml,Get xml.
android.content.res.Resources.getXml,Return an XmlResourceParser through which you can read a generic XML resource for the given resource ID.
android.content.res.Resources.getXml,The XmlPullParser implementation returned here has some limited functionality.
android.content.res.Resources.getXml,In particular you can't change its input and only high-level parsing events are available (since the document was pre-parsed for you at build time which involved merging text and stripping comments).
android.content.res.Resources.newTheme,Generate a new Theme object for this set of Resources. It initially starts out empty.
android.content.res.Resources.newTheme,New theme.
android.content.res.Resources.newTheme,Generate a new Theme object for this set of Resources.
android.content.res.Resources.newTheme,It initially starts out empty.
android.content.res.Resources.obtainAttributes,Retrieve a set of basic attribute values from an AttributeSet not performing styling of them using a theme and/or style resources.
android.content.res.Resources.obtainAttributes,Obtain attributes.
android.content.res.Resources.obtainTypedArray,Return an array of heterogeneous values.
android.content.res.Resources.obtainTypedArray,Obtain typed array.
android.content.res.Resources.openRawResource,Open a data stream for reading a raw resource. This can only be used with resources whose value is the name of an asset file -- that is it can be used to open drawable sound and raw resources; it will fail on string and color resources.
android.content.res.Resources.openRawResource,Open raw resource.
android.content.res.Resources.openRawResource,Open a data stream for reading a raw resource.
android.content.res.Resources.openRawResource,This can only be used with resources whose value is the name of an asset file -- that is it can be used to open drawable sound and raw resources; it will fail on string and color resources.
android.content.res.Resources.openRawResource,Open a data stream for reading a raw resource. This can only be used with resources whose value is the name of an asset files -- that is it can be used to open drawable sound and raw resources; it will fail on string and color resources.
android.content.res.Resources.openRawResource,Open raw resource.
android.content.res.Resources.openRawResource,Open a data stream for reading a raw resource.
android.content.res.Resources.openRawResource,This can only be used with resources whose value is the name of an asset files -- that is it can be used to open drawable sound and raw resources; it will fail on string and color resources.
android.content.res.Resources.openRawResourceFd,Open a file descriptor for reading a raw resource. This can only be used with resources whose value is the name of an asset files -- that is it can be used to open drawable sound and raw resources; it will fail on string and color resources. This function only works for resources that are stored in the package as uncompressed data which typically includes things like mp3 files and png images.
android.content.res.Resources.openRawResourceFd,Open raw resource fd.
android.content.res.Resources.openRawResourceFd,Open a file descriptor for reading a raw resource.
android.content.res.Resources.openRawResourceFd,This can only be used with resources whose value is the name of an asset files -- that is it can be used to open drawable sound and raw resources; it will fail on string and color resources.
android.content.res.Resources.openRawResourceFd,This function only works for resources that are stored in the package as uncompressed data which typically includes things like mp3 files and png images.
android.content.res.Resources.updateConfiguration,This method was deprecated in API level 25. See Context.createConfigurationContext(Configuration). Store the newly updated configuration.
android.content.res.Resources.updateConfiguration,Update configuration.
android.content.res.Resources.updateConfiguration,This method was deprecated in API level 25.
android.content.res.Resources.updateConfiguration,See Context.createConfigurationContext(Configuration).
android.content.res.Resources.updateConfiguration,Store the newly updated configuration.
android.content.res.TypedArray.getBoolean,Retrieve the boolean value for the attribute at index. If the attribute is an integer value this method will return whether it is equal to zero. If the attribute is not a boolean or integer value this method will attempt to coerce it to an integer using Integer#decode(String) and return whether it is equal to zero.
android.content.res.TypedArray.getBoolean,Get boolean.
android.content.res.TypedArray.getBoolean,Retrieve the boolean value for the attribute at index.
android.content.res.TypedArray.getBoolean,If the attribute is an integer value this method will return whether it is equal to zero.
android.content.res.TypedArray.getBoolean,If the attribute is not a boolean or integer value this method will attempt to coerce it to an integer using Integer#decode(String) and return whether it is equal to zero.
android.content.res.TypedArray.getColor,Retrieve the color value for the attribute at index. If the attribute references a color resource holding a complex ColorStateList then the default color from the set is returned. This method will throw an exception if the attribute is defined but is not an integer color or color state list.
android.content.res.TypedArray.getColor,Get color.
android.content.res.TypedArray.getColor,Retrieve the color value for the attribute at index.
android.content.res.TypedArray.getColor,If the attribute references a color resource holding a complex ColorStateList then the default color from the set is returned.
android.content.res.TypedArray.getColor,This method will throw an exception if the attribute is defined but is not an integer color or color state list.
android.content.res.TypedArray.getColorStateList,Retrieve the ColorStateList for the attribute at index. The value may be either a single solid color or a reference to a color or complex ColorStateList description. This method will return null if the attribute is not defined or is not an integer color or color state list.
android.content.res.TypedArray.getColorStateList,Get color state list.
android.content.res.TypedArray.getColorStateList,Retrieve the ColorStateList for the attribute at index.
android.content.res.TypedArray.getColorStateList,The value may be either a single solid color or a reference to a color or complex ColorStateList description.
android.content.res.TypedArray.getColorStateList,This method will return null if the attribute is not defined or is not an integer color or color state list.
android.content.res.TypedArray.getDimension,Retrieve a dimensional unit attribute at index. Unit conversions are based on the current DisplayMetrics associated with the resources this TypedArray object came from. This method will throw an exception if the attribute is defined but is not a dimension.
android.content.res.TypedArray.getDimension,Get dimension.
android.content.res.TypedArray.getDimension,Retrieve a dimensional unit attribute at index.
android.content.res.TypedArray.getDimension,Unit conversions are based on the current DisplayMetrics associated with the resources this TypedArray object came from.
android.content.res.TypedArray.getDimension,This method will throw an exception if the attribute is defined but is not a dimension.
android.content.res.TypedArray.getDimensionPixelOffset,Retrieve a dimensional unit attribute at index for use as an offset in raw pixels. This is the same as getDimension(int float) except the returned value is converted to integer pixels for you. An offset conversion involves simply truncating the base value to an integer. This method will throw an exception if the attribute is defined but is not a dimension.
android.content.res.TypedArray.getDimensionPixelOffset,Get dimension pixel offset.
android.content.res.TypedArray.getDimensionPixelOffset,Retrieve a dimensional unit attribute at index for use as an offset in raw pixels.
android.content.res.TypedArray.getDimensionPixelOffset,This is the same as getDimension(int float) except the returned value is converted to integer pixels for you.
android.content.res.TypedArray.getDimensionPixelOffset,An offset conversion involves simply truncating the base value to an integer.
android.content.res.TypedArray.getDimensionPixelOffset,This method will throw an exception if the attribute is defined but is not a dimension.
android.content.res.TypedArray.getDimensionPixelSize,Retrieve a dimensional unit attribute at index for use as a size in raw pixels. This is the same as getDimension(int float) except the returned value is converted to integer pixels for use as a size. A size conversion involves rounding the base value and ensuring that a non-zero base value is at least one pixel in size. This method will throw an exception if the attribute is defined but is not a dimension.
android.content.res.TypedArray.getDimensionPixelSize,Get dimension pixel size.
android.content.res.TypedArray.getDimensionPixelSize,Retrieve a dimensional unit attribute at index for use as a size in raw pixels.
android.content.res.TypedArray.getDimensionPixelSize,This is the same as getDimension(int float) except the returned value is converted to integer pixels for use as a size.
android.content.res.TypedArray.getDimensionPixelSize,A size conversion involves rounding the base value and ensuring that a non-zero base value is at least one pixel in size.
android.content.res.TypedArray.getDimensionPixelSize,This method will throw an exception if the attribute is defined but is not a dimension.
android.content.res.TypedArray.getDrawable,Retrieve the Drawable for the attribute at index. This method will throw an exception if the attribute is defined but is not a color or drawable resource.
android.content.res.TypedArray.getDrawable,Get drawable.
android.content.res.TypedArray.getDrawable,Retrieve the Drawable for the attribute at index.
android.content.res.TypedArray.getDrawable,This method will throw an exception if the attribute is defined but is not a color or drawable resource.
android.content.res.TypedArray.getFloat,Retrieve the float value for the attribute at index. If the attribute is not a float or an integer this method will attempt to coerce it to a float using Float#parseFloat(String).
android.content.res.TypedArray.getFloat,Get float.
android.content.res.TypedArray.getFloat,Retrieve the float value for the attribute at index.
android.content.res.TypedArray.getFloat,If the attribute is not a float or an integer this method will attempt to coerce it to a float using Float#parseFloat(String).
android.content.res.TypedArray.getIndex,Returns an index in the array that has data. Attributes with a value of @empty are included as this is an explicit indicator.
android.content.res.TypedArray.getIndex,Get index.
android.content.res.TypedArray.getIndex,Returns an index in the array that has data.
android.content.res.TypedArray.getIndex,Attributes with a value of @empty are included as this is an explicit indicator.
android.content.res.TypedArray.getIndexCount,Returns the number of indices in the array that actually have data. Attributes with a value of @empty are included as this is an explicit indicator.
android.content.res.TypedArray.getIndexCount,Get index count.
android.content.res.TypedArray.getIndexCount,Returns the number of indices in the array that actually have data.
android.content.res.TypedArray.getIndexCount,Attributes with a value of @empty are included as this is an explicit indicator.
android.content.res.TypedArray.getInt,Retrieve the integer value for the attribute at index. If the attribute is not an integer this method will attempt to coerce it to an integer using Integer#decode(String).
android.content.res.TypedArray.getInt,Get int.
android.content.res.TypedArray.getInt,Retrieve the integer value for the attribute at index.
android.content.res.TypedArray.getInt,If the attribute is not an integer this method will attempt to coerce it to an integer using Integer#decode(String).
android.content.res.TypedArray.getLayoutDimension,Special version of getDimensionPixelSize(int int) for retrieving ViewGroup 's layout_width and layout_height attributes. This is only here for performance reasons; applications should use getDimensionPixelSize(int int).
android.content.res.TypedArray.getLayoutDimension,Get layout dimension.
android.content.res.TypedArray.getLayoutDimension,Special version of getDimensionPixelSize(int int) for retrieving ViewGroup 's layout_width and layout_height attributes.
android.content.res.TypedArray.getLayoutDimension,This is only here for performance reasons; applications should use getDimensionPixelSize(int int).
android.content.res.TypedArray.getLayoutDimension,Special version of getDimensionPixelSize(int int) for retrieving ViewGroup 's layout_width and layout_height attributes. This is only here for performance reasons; applications should use getDimensionPixelSize(int int). This method will throw an exception if the attribute is defined but is not a dimension or integer (enum).
android.content.res.TypedArray.getLayoutDimension,Get layout dimension.
android.content.res.TypedArray.getLayoutDimension,Special version of getDimensionPixelSize(int int) for retrieving ViewGroup 's layout_width and layout_height attributes.
android.content.res.TypedArray.getLayoutDimension,This is only here for performance reasons; applications should use getDimensionPixelSize(int int).
android.content.res.TypedArray.getLayoutDimension,This method will throw an exception if the attribute is defined but is not a dimension or integer (enum).
android.content.res.TypedArray.getNonResourceString,Retrieves the string value for the attribute at index but only if that string comes from an immediate value in an XML file. That is this does not allow references to string resources string attributes or conversions from other types. As such this method will only return strings for TypedArray objects that come from attributes in an XML file.
android.content.res.TypedArray.getNonResourceString,Get non resource string.
android.content.res.TypedArray.getNonResourceString,Retrieves the string value for the attribute at index but only if that string comes from an immediate value in an XML file.
android.content.res.TypedArray.getNonResourceString,That is this does not allow references to string resources string attributes or conversions from other types.
android.content.res.TypedArray.getNonResourceString,As such this method will only return strings for TypedArray objects that come from attributes in an XML file.
android.content.res.TypedArray.getResourceId,Retrieves the resource identifier for the attribute at index. Note that attribute resource as resolved when the overall TypedArray object is retrieved. As a result this function will return the resource identifier of the final resource value that was found not necessarily the original resource that was specified by the attribute.
android.content.res.TypedArray.getResourceId,Get resource id.
android.content.res.TypedArray.getResourceId,Retrieves the resource identifier for the attribute at index.
android.content.res.TypedArray.getResourceId,Note that attribute resource as resolved when the overall TypedArray object is retrieved.
android.content.res.TypedArray.getResourceId,As a result this function will return the resource identifier of the final resource value that was found not necessarily the original resource that was specified by the attribute.
android.content.res.TypedArray.getString,Retrieves the string value for the attribute at index. If the attribute is not a string this method will attempt to coerce it to a string.
android.content.res.TypedArray.getString,Get string.
android.content.res.TypedArray.getString,Retrieves the string value for the attribute at index.
android.content.res.TypedArray.getString,If the attribute is not a string this method will attempt to coerce it to a string.
android.content.res.TypedArray.getText,Retrieves the styled string value for the attribute at index. If the attribute is not a string this method will attempt to coerce it to a string.
android.content.res.TypedArray.getText,Get text.
android.content.res.TypedArray.getText,Retrieves the styled string value for the attribute at index.
android.content.res.TypedArray.getText,If the attribute is not a string this method will attempt to coerce it to a string.
android.content.res.TypedArray.getValue,Retrieve the raw TypedValue for the attribute at index.
android.content.res.TypedArray.getValue,Get value.
android.content.res.TypedArray.hasValue,Determines whether there is an attribute at index. Note: If the attribute was set to @empty or @undefined this method returns false.
android.content.res.TypedArray.hasValue,Has value.
android.content.res.TypedArray.hasValue,Determines whether there is an attribute at index.
android.content.res.TypedArray.hasValue,Note: If the attribute was set to @empty or @undefined this method returns false.
android.content.res.TypedArray.length,Returns the number of values in this array.
android.content.res.TypedArray.length,Length.
android.content.res.TypedArray.peekValue,Retrieve the raw TypedValue for the attribute at index and return a temporary object holding its data. This object is only valid until the next call on to TypedArray.
android.content.res.TypedArray.peekValue,Peek value.
android.content.res.TypedArray.peekValue,Retrieve the raw TypedValue for the attribute at index and return a temporary object holding its data.
android.content.res.TypedArray.peekValue,This object is only valid until the next call on to TypedArray.
android.content.res.TypedArray.recycle,Recycles the TypedArray to be re-used by a later caller. After calling this function you must not ever touch the typed array again.
android.content.res.TypedArray.recycle,Recycle.
android.content.res.TypedArray.recycle,Recycles the TypedArray to be re-used by a later caller.
android.content.res.TypedArray.recycle,After calling this function you must not ever touch the typed array again.
android.bluetooth.BluetoothAdapter.disable,"Turn off the local Bluetooth adapter—do not use without explicit user action to turn off Bluetooth. This gracefully shuts down all Bluetooth connections stops Bluetooth system services and powers down the underlying Bluetooth hardware. Bluetooth should never be disabled without direct user consent. The disable() method is provided only for applications that include a user interface for changing system settings such as a ""power manager"" app. This is an asynchronous call: it will return immediately and clients should listen for ACTION_STATE_CHANGED to be notified of subsequent adapter state changes. If this call returns true then the adapter state will immediately transition from STATE_ON to STATE_TURNING_OFF and some time later transition to either STATE_OFF or STATE_ON. If this call returns false then there was an immediate problem that will prevent the adapter from being turned off - such as the adapter already being turned off. Requires Manifest.permission.BLUETOOTH_ADMIN."
android.bluetooth.BluetoothAdapter.disable,Disable.
android.bluetooth.BluetoothAdapter.disable,Turn off the local Bluetooth adapter—do not use without explicit user action to turn off Bluetooth.
android.bluetooth.BluetoothAdapter.disable,This gracefully shuts down all Bluetooth connections stops Bluetooth system services and powers down the underlying Bluetooth hardware.
android.bluetooth.BluetoothAdapter.disable,Bluetooth should never be disabled without direct user consent.
android.bluetooth.BluetoothAdapter.disable,"The disable() method is provided only for applications that include a user interface for changing system settings such as a ""power manager"" app."
android.bluetooth.BluetoothAdapter.disable,This is an asynchronous call: it will return immediately and clients should listen for ACTION_STATE_CHANGED to be notified of subsequent adapter state changes.
android.bluetooth.BluetoothAdapter.disable,If this call returns true then the adapter state will immediately transition from STATE_ON to STATE_TURNING_OFF and some time later transition to either STATE_OFF or STATE_ON.
android.bluetooth.BluetoothAdapter.disable,If this call returns false then there was an immediate problem that will prevent the adapter from being turned off - such as the adapter already being turned off.
android.bluetooth.BluetoothAdapter.disable,Requires Manifest.permission.BLUETOOTH_ADMIN.
android.bluetooth.BluetoothAdapter.enable,"Turn on the local Bluetooth adapter—do not use without explicit user action to turn on Bluetooth. This powers on the underlying Bluetooth hardware and starts all Bluetooth system services. Bluetooth should never be enabled without direct user consent. If you want to turn on Bluetooth in order to create a wireless connection you should use the ACTION_REQUEST_ENABLE Intent which will raise a dialog that requests user permission to turn on Bluetooth. The enable() method is provided only for applications that include a user interface for changing system settings such as a ""power manager"" app. This is an asynchronous call: it will return immediately and clients should listen for ACTION_STATE_CHANGED to be notified of subsequent adapter state changes. If this call returns true then the adapter state will immediately transition from STATE_OFF to STATE_TURNING_ON and some time later transition to either STATE_OFF or STATE_ON. If this call returns false then there was an immediate problem that will prevent the adapter from being turned on - such as Airplane mode or the adapter is already turned on. Requires Manifest.permission.BLUETOOTH_ADMIN."
android.bluetooth.BluetoothAdapter.enable,Enable.
android.bluetooth.BluetoothAdapter.enable,Turn on the local Bluetooth adapter—do not use without explicit user action to turn on Bluetooth.
android.bluetooth.BluetoothAdapter.enable,This powers on the underlying Bluetooth hardware and starts all Bluetooth system services.
android.bluetooth.BluetoothAdapter.enable,Bluetooth should never be enabled without direct user consent.
android.bluetooth.BluetoothAdapter.enable,If you want to turn on Bluetooth in order to create a wireless connection you should use the ACTION_REQUEST_ENABLE Intent which will raise a dialog that requests user permission to turn on Bluetooth.
android.bluetooth.BluetoothAdapter.enable,"The enable() method is provided only for applications that include a user interface for changing system settings such as a ""power manager"" app."
android.bluetooth.BluetoothAdapter.enable,This is an asynchronous call: it will return immediately and clients should listen for ACTION_STATE_CHANGED to be notified of subsequent adapter state changes.
android.bluetooth.BluetoothAdapter.enable,If this call returns true then the adapter state will immediately transition from STATE_OFF to STATE_TURNING_ON and some time later transition to either STATE_OFF or STATE_ON.
android.bluetooth.BluetoothAdapter.enable,If this call returns false then there was an immediate problem that will prevent the adapter from being turned on - such as Airplane mode or the adapter is already turned on.
android.bluetooth.BluetoothAdapter.enable,Requires Manifest.permission.BLUETOOTH_ADMIN.
android.bluetooth.BluetoothAdapter.getAddress,"Returns the hardware address of the local Bluetooth adapter. For example ""00:11:22:AA:BB:CC"". Requires Manifest.permission.BLUETOOTH."
android.bluetooth.BluetoothAdapter.getAddress,Get address.
android.bluetooth.BluetoothAdapter.getAddress,Returns the hardware address of the local Bluetooth adapter.
android.bluetooth.BluetoothAdapter.getAddress,"For example ""00:11:22:AA:BB:CC""."
android.bluetooth.BluetoothAdapter.getAddress,Requires Manifest.permission.BLUETOOTH.
android.bluetooth.BluetoothAdapter.getBondedDevices,Return the set of BluetoothDevice objects that are bonded (paired) to the local adapter. If Bluetooth state is not STATE_ON this API will return an empty set. After turning on Bluetooth wait for ACTION_STATE_CHANGED with STATE_ON to get the updated value. Requires Manifest.permission.BLUETOOTH.
android.bluetooth.BluetoothAdapter.getBondedDevices,Get bonded devices.
android.bluetooth.BluetoothAdapter.getBondedDevices,Return the set of BluetoothDevice objects that are bonded (paired) to the local adapter.
android.bluetooth.BluetoothAdapter.getBondedDevices,If Bluetooth state is not STATE_ON this API will return an empty set.
android.bluetooth.BluetoothAdapter.getBondedDevices,After turning on Bluetooth wait for ACTION_STATE_CHANGED with STATE_ON to get the updated value.
android.bluetooth.BluetoothAdapter.getBondedDevices,Requires Manifest.permission.BLUETOOTH.
android.bluetooth.BluetoothAdapter.getDefaultAdapter,Get a handle to the default local Bluetooth adapter. Currently Android only supports one Bluetooth adapter but the API could be extended to support more. This will always return the default adapter.
android.bluetooth.BluetoothAdapter.getDefaultAdapter,Get default adapter.
android.bluetooth.BluetoothAdapter.getDefaultAdapter,Get a handle to the default local Bluetooth adapter.
android.bluetooth.BluetoothAdapter.getDefaultAdapter,Currently Android only supports one Bluetooth adapter but the API could be extended to support more.
android.bluetooth.BluetoothAdapter.getDefaultAdapter,This will always return the default adapter.
android.bluetooth.BluetoothAdapter.getState,Get the current state of the local Bluetooth adapter. Possible return values are STATE_OFF STATE_TURNING_ON STATE_ON STATE_TURNING_OFF. Requires Manifest.permission.BLUETOOTH.
android.bluetooth.BluetoothAdapter.getState,Get state.
android.bluetooth.BluetoothAdapter.getState,Get the current state of the local Bluetooth adapter.
android.bluetooth.BluetoothAdapter.getState,Possible return values are STATE_OFF STATE_TURNING_ON STATE_ON STATE_TURNING_OFF.
android.bluetooth.BluetoothAdapter.getState,Requires Manifest.permission.BLUETOOTH.
android.bluetooth.BluetoothAdapter.isEnabled,Return true if Bluetooth is currently enabled and ready for use. Equivalent to: getBluetoothState() == STATE_ON Requires Manifest.permission.BLUETOOTH.
android.bluetooth.BluetoothAdapter.isEnabled,Is enabled.
android.bluetooth.BluetoothAdapter.isEnabled,Return true if Bluetooth is currently enabled and ready for use.
android.bluetooth.BluetoothAdapter.isEnabled,Equivalent to: getBluetoothState() == STATE_ON Requires Manifest.permission.BLUETOOTH.
android.bluetooth.BluetoothClass.getDeviceClass,Return the (major and minor) device class component of this BluetoothClass. Values returned from this function can be compared with the public constants in BluetoothClass.Device to determine which device class is encoded in this Bluetooth class.
android.bluetooth.BluetoothClass.getDeviceClass,Get device class.
android.bluetooth.BluetoothClass.getDeviceClass,Return the (major and minor) device class component of this BluetoothClass.
android.bluetooth.BluetoothClass.getDeviceClass,Values returned from this function can be compared with the public constants in BluetoothClass.Device to determine which device class is encoded in this Bluetooth class.
android.bluetooth.BluetoothClass.getMajorDeviceClass,Return the major device class component of this BluetoothClass. Values returned from this function can be compared with the public constants in BluetoothClass.Device.Major to determine which major class is encoded in this Bluetooth class.
android.bluetooth.BluetoothClass.getMajorDeviceClass,Get major device class.
android.bluetooth.BluetoothClass.getMajorDeviceClass,Return the major device class component of this BluetoothClass.
android.bluetooth.BluetoothClass.getMajorDeviceClass,Values returned from this function can be compared with the public constants in BluetoothClass.Device.Major to determine which major class is encoded in this Bluetooth class.
android.bluetooth.BluetoothDevice.getBluetoothClass,Get the Bluetooth class of the remote device. Requires Manifest.permission.BLUETOOTH.
android.bluetooth.BluetoothDevice.getBluetoothClass,Get bluetooth class.
android.bluetooth.BluetoothDevice.getBluetoothClass,Get the Bluetooth class of the remote device.
android.bluetooth.BluetoothDevice.getBluetoothClass,Requires Manifest.permission.BLUETOOTH.
android.bluetooth.BluetoothDevice.getName,Get the friendly Bluetooth name of the remote device. The local adapter will automatically retrieve remote names when performing a device scan and will cache them. This method just returns the name for this device from the cache. Requires Manifest.permission.BLUETOOTH.
android.bluetooth.BluetoothDevice.getName,Get name.
android.bluetooth.BluetoothDevice.getName,Get the friendly Bluetooth name of the remote device.
android.bluetooth.BluetoothDevice.getName,The local adapter will automatically retrieve remote names when performing a device scan and will cache them.
android.bluetooth.BluetoothDevice.getName,This method just returns the name for this device from the cache.
android.bluetooth.BluetoothDevice.getName,Requires Manifest.permission.BLUETOOTH.
android.database.AbstractCursor.close,Closes the Cursor releasing all of its resources and making it completely invalid. Unlike deactivate() a call to requery() will not make the Cursor valid again.
android.database.AbstractCursor.close,Close.
android.database.AbstractCursor.close,Closes the Cursor releasing all of its resources and making it completely invalid.
android.database.AbstractCursor.close,Unlike deactivate() a call to requery() will not make the Cursor valid again.
android.database.AbstractWindowedCursor.getWindow,If the cursor is backed by a CursorWindow returns a pre-filled window with the contents of the cursor otherwise null.
android.database.AbstractWindowedCursor.getWindow,Get window.
android.database.AbstractWindowedCursor.setWindow,Sets a new cursor window for the cursor to use. The cursor takes ownership of the provided cursor window; the cursor window will be closed when the cursor is closed or when the cursor adopts a new cursor window. If the cursor previously had a cursor window then it is closed when the new cursor window is assigned.
android.database.AbstractWindowedCursor.setWindow,Set window.
android.database.AbstractWindowedCursor.setWindow,Sets a new cursor window for the cursor to use.
android.database.AbstractWindowedCursor.setWindow,The cursor takes ownership of the provided cursor window; the cursor window will be closed when the cursor is closed or when the cursor adopts a new cursor window.
android.database.AbstractWindowedCursor.setWindow,If the cursor previously had a cursor window then it is closed when the new cursor window is assigned.
android.database.ContentObservable.dispatchChange,This method was deprecated in API level 16. Use dispatchChange(boolean android.net.Uri) instead. Invokes ContentObserver#dispatchChange(boolean) on each observer. If selfChange is true only delivers the notification to the observer if it has indicated that it wants to receive self-change notifications by implementing ContentObserver#deliverSelfNotifications to return true.
android.database.ContentObservable.dispatchChange,Dispatch change.
android.database.ContentObservable.dispatchChange,This method was deprecated in API level 16.
android.database.ContentObservable.dispatchChange,Use dispatchChange(boolean android.net.Uri) instead.
android.database.ContentObservable.dispatchChange,Invokes ContentObserver#dispatchChange(boolean) on each observer.
android.database.ContentObservable.dispatchChange,If selfChange is true only delivers the notification to the observer if it has indicated that it wants to receive self-change notifications by implementing ContentObserver#deliverSelfNotifications to return true.
android.database.ContentObservable.dispatchChange,Invokes ContentObserver#dispatchChange(boolean Uri) on each observer. Includes the changed content Uri when available. If selfChange is true only delivers the notification to the observer if it has indicated that it wants to receive self-change notifications by implementing ContentObserver#deliverSelfNotifications to return true.
android.database.ContentObservable.dispatchChange,Dispatch change.
android.database.ContentObservable.dispatchChange,Invokes ContentObserver#dispatchChange(boolean Uri) on each observer.
android.database.ContentObservable.dispatchChange,Includes the changed content Uri when available.
android.database.ContentObservable.dispatchChange,If selfChange is true only delivers the notification to the observer if it has indicated that it wants to receive self-change notifications by implementing ContentObserver#deliverSelfNotifications to return true.
android.database.ContentObservable.registerObserver,Adds an observer to the list. The observer cannot be null and it must not already be registered.
android.database.ContentObservable.registerObserver,Register observer.
android.database.ContentObservable.registerObserver,Adds an observer to the list.
android.database.ContentObservable.registerObserver,The observer cannot be null and it must not already be registered.
android.database.ContentObserver.deliverSelfNotifications,Returns true if this observer is interested receiving self-change notifications. Subclasses should override this method to indicate whether the observer is interested in receiving notifications for changes that it made to the content itself.
android.database.ContentObserver.deliverSelfNotifications,Deliver self notifications.
android.database.ContentObserver.deliverSelfNotifications,Returns true if this observer is interested receiving self-change notifications.
android.database.ContentObserver.deliverSelfNotifications,Subclasses should override this method to indicate whether the observer is interested in receiving notifications for changes that it made to the content itself.
android.database.ContentObserver.dispatchChange,This method was deprecated in API level 16. Use dispatchChange(boolean android.net.Uri) instead. Dispatches a change notification to the observer. If a Handler was supplied to the ContentObserver constructor then a call to the onChange(boolean) method is posted to the handler's message queue. Otherwise the onChange(boolean) method is invoked immediately on this thread.
android.database.ContentObserver.dispatchChange,Dispatch change.
android.database.ContentObserver.dispatchChange,This method was deprecated in API level 16.
android.database.ContentObserver.dispatchChange,Use dispatchChange(boolean android.net.Uri) instead.
android.database.ContentObserver.dispatchChange,Dispatches a change notification to the observer.
android.database.ContentObserver.dispatchChange,If a Handler was supplied to the ContentObserver constructor then a call to the onChange(boolean) method is posted to the handler's message queue.
android.database.ContentObserver.dispatchChange,Otherwise the onChange(boolean) method is invoked immediately on this thread.
android.database.ContentObserver.dispatchChange,Dispatches a change notification to the observer. Includes the changed content Uri when available. If a Handler was supplied to the ContentObserver constructor then a call to the onChange(boolean) method is posted to the handler's message queue. Otherwise the onChange(boolean) method is invoked immediately on this thread.
android.database.ContentObserver.dispatchChange,Dispatch change.
android.database.ContentObserver.dispatchChange,Dispatches a change notification to the observer.
android.database.ContentObserver.dispatchChange,Includes the changed content Uri when available.
android.database.ContentObserver.dispatchChange,If a Handler was supplied to the ContentObserver constructor then a call to the onChange(boolean) method is posted to the handler's message queue.
android.database.ContentObserver.dispatchChange,Otherwise the onChange(boolean) method is invoked immediately on this thread.
android.database.ContentObserver.onChange,This method is called when a content change occurs. Subclasses should override this method to handle content changes.
android.database.ContentObserver.onChange,On change.
android.database.ContentObserver.onChange,This method is called when a content change occurs.
android.database.ContentObserver.onChange,Subclasses should override this method to handle content changes.
android.database.ContentObserver.onChange,This method is called when a content change occurs. Includes the changed content Uri when available. Subclasses should override this method to handle content changes. To ensure correct operation on older versions of the framework that did not provide a Uri argument applications should also implement the onChange(boolean) overload of this method whenever they implement the onChange(boolean android.net.Uri) overload. Example implementation:.
android.database.ContentObserver.onChange,On change.
android.database.ContentObserver.onChange,This method is called when a content change occurs.
android.database.ContentObserver.onChange,Includes the changed content Uri when available.
android.database.ContentObserver.onChange,Subclasses should override this method to handle content changes.
android.database.ContentObserver.onChange,To ensure correct operation on older versions of the framework that did not provide a Uri argument applications should also implement the onChange(boolean) overload of this method whenever they implement the onChange(boolean android.net.Uri) overload.
android.database.ContentObserver.onChange,Example implementation:.
android.database.CursorWindow.allocRow,Allocates a new row at the end of this cursor window.
android.database.CursorWindow.allocRow,Alloc row.
android.database.CursorWindow.copyStringToBuffer,Copies the text of the field at the specified row and column index into a CharArrayBuffer. The buffer is populated as follows: If the buffer is too small for the value to be copied then it is automatically resized. If the field is of type Cursor#FIELD_TYPE_NULL then the buffer is set to an empty string. If the field is of type Cursor#FIELD_TYPE_STRING then the buffer is set to the contents of the string. If the field is of type Cursor#FIELD_TYPE_INTEGER then the buffer is set to a string representation of the integer in decimal obtained by formatting the value with the printf family of functions using format specifier %lld. If the field is of type Cursor#FIELD_TYPE_FLOAT then the buffer is set to a string representation of the floating-point value in decimal obtained by formatting the value with the printf family of functions using format specifier %g. If the field is of type Cursor#FIELD_TYPE_BLOB then a SQLiteException is thrown.
android.database.CursorWindow.copyStringToBuffer,Copy string to buffer.
android.database.CursorWindow.copyStringToBuffer,Copies the text of the field at the specified row and column index into a CharArrayBuffer.
android.database.CursorWindow.copyStringToBuffer,The buffer is populated as follows: If the buffer is too small for the value to be copied then it is automatically resized.
android.database.CursorWindow.copyStringToBuffer,If the field is of type Cursor#FIELD_TYPE_NULL then the buffer is set to an empty string.
android.database.CursorWindow.copyStringToBuffer,If the field is of type Cursor#FIELD_TYPE_STRING then the buffer is set to the contents of the string.
android.database.CursorWindow.copyStringToBuffer,If the field is of type Cursor#FIELD_TYPE_INTEGER then the buffer is set to a string representation of the integer in decimal obtained by formatting the value with the printf family of functions using format specifier %lld.
android.database.CursorWindow.copyStringToBuffer,If the field is of type Cursor#FIELD_TYPE_FLOAT then the buffer is set to a string representation of the floating-point value in decimal obtained by formatting the value with the printf family of functions using format specifier %g.
android.database.CursorWindow.copyStringToBuffer,If the field is of type Cursor#FIELD_TYPE_BLOB then a SQLiteException is thrown.
android.database.CursorWindow.freeLastRow,Frees the last row in this cursor window.
android.database.CursorWindow.freeLastRow,Free last row.
android.database.CursorWindow.getBlob,Gets the value of the field at the specified row and column index as a byte array. The result is determined as follows: If the field is of type Cursor#FIELD_TYPE_NULL then the result is null. If the field is of type Cursor#FIELD_TYPE_BLOB then the result is the blob value. If the field is of type Cursor#FIELD_TYPE_STRING then the result is the array of bytes that make up the internal representation of the string value. If the field is of type Cursor#FIELD_TYPE_INTEGER or Cursor#FIELD_TYPE_FLOAT then a SQLiteException is thrown.
android.database.CursorWindow.getBlob,Get blob.
android.database.CursorWindow.getBlob,Gets the value of the field at the specified row and column index as a byte array.
android.database.CursorWindow.getBlob,The result is determined as follows: If the field is of type Cursor#FIELD_TYPE_NULL then the result is null.
android.database.CursorWindow.getBlob,If the field is of type Cursor#FIELD_TYPE_BLOB then the result is the blob value.
android.database.CursorWindow.getBlob,If the field is of type Cursor#FIELD_TYPE_STRING then the result is the array of bytes that make up the internal representation of the string value.
android.database.CursorWindow.getBlob,If the field is of type Cursor#FIELD_TYPE_INTEGER or Cursor#FIELD_TYPE_FLOAT then a SQLiteException is thrown.
android.database.CursorWindow.getDouble,Gets the value of the field at the specified row and column index as a double. The result is determined as follows: If the field is of type Cursor#FIELD_TYPE_NULL then the result is 0.0. If the field is of type Cursor#FIELD_TYPE_STRING then the result is the value obtained by parsing the string value with strtod. If the field is of type Cursor#FIELD_TYPE_INTEGER then the result is the integer value converted to a double. If the field is of type Cursor#FIELD_TYPE_FLOAT then the result is the double value. If the field is of type Cursor#FIELD_TYPE_BLOB then a SQLiteException is thrown.
android.database.CursorWindow.getDouble,Get double.
android.database.CursorWindow.getDouble,Gets the value of the field at the specified row and column index as a double.
android.database.CursorWindow.getDouble,The result is determined as follows: If the field is of type Cursor#FIELD_TYPE_NULL then the result is 0.0.
android.database.CursorWindow.getDouble,If the field is of type Cursor#FIELD_TYPE_STRING then the result is the value obtained by parsing the string value with strtod.
android.database.CursorWindow.getDouble,If the field is of type Cursor#FIELD_TYPE_INTEGER then the result is the integer value converted to a double.
android.database.CursorWindow.getDouble,If the field is of type Cursor#FIELD_TYPE_FLOAT then the result is the double value.
android.database.CursorWindow.getDouble,If the field is of type Cursor#FIELD_TYPE_BLOB then a SQLiteException is thrown.
android.database.CursorWindow.getFloat,Gets the value of the field at the specified row and column index as a float. The result is determined by invoking getDouble(int int) and converting the result to float.
android.database.CursorWindow.getFloat,Get float.
android.database.CursorWindow.getFloat,Gets the value of the field at the specified row and column index as a float.
android.database.CursorWindow.getFloat,The result is determined by invoking getDouble(int int) and converting the result to float.
android.database.CursorWindow.getInt,Gets the value of the field at the specified row and column index as an int. The result is determined by invoking getLong(int int) and converting the result to int.
android.database.CursorWindow.getInt,Get int.
android.database.CursorWindow.getInt,Gets the value of the field at the specified row and column index as an int.
android.database.CursorWindow.getInt,The result is determined by invoking getLong(int int) and converting the result to int.
android.database.CursorWindow.getLong,Gets the value of the field at the specified row and column index as a long. The result is determined as follows: If the field is of type Cursor#FIELD_TYPE_NULL then the result is 0L. If the field is of type Cursor#FIELD_TYPE_STRING then the result is the value obtained by parsing the string value with strtoll. If the field is of type Cursor#FIELD_TYPE_INTEGER then the result is the long value. If the field is of type Cursor#FIELD_TYPE_FLOAT then the result is the floating-point value converted to a long. If the field is of type Cursor#FIELD_TYPE_BLOB then a SQLiteException is thrown.
android.database.CursorWindow.getLong,Get long.
android.database.CursorWindow.getLong,Gets the value of the field at the specified row and column index as a long.
android.database.CursorWindow.getLong,The result is determined as follows: If the field is of type Cursor#FIELD_TYPE_NULL then the result is 0L.
android.database.CursorWindow.getLong,If the field is of type Cursor#FIELD_TYPE_STRING then the result is the value obtained by parsing the string value with strtoll.
android.database.CursorWindow.getLong,If the field is of type Cursor#FIELD_TYPE_INTEGER then the result is the long value.
android.database.CursorWindow.getLong,If the field is of type Cursor#FIELD_TYPE_FLOAT then the result is the floating-point value converted to a long.
android.database.CursorWindow.getLong,If the field is of type Cursor#FIELD_TYPE_BLOB then a SQLiteException is thrown.
android.database.CursorWindow.getNumRows,Gets the number of rows in this window.
android.database.CursorWindow.getNumRows,Get num rows.
android.database.CursorWindow.getShort,Gets the value of the field at the specified row and column index as a short. The result is determined by invoking getLong(int int) and converting the result to short.
android.database.CursorWindow.getShort,Get short.
android.database.CursorWindow.getShort,Gets the value of the field at the specified row and column index as a short.
android.database.CursorWindow.getShort,The result is determined by invoking getLong(int int) and converting the result to short.
android.database.CursorWindow.getStartPosition,Gets the start position of this cursor window. The start position is the zero-based index of the first row that this window contains relative to the entire result set of the Cursor.
android.database.CursorWindow.getStartPosition,Get start position.
android.database.CursorWindow.getStartPosition,Gets the start position of this cursor window.
android.database.CursorWindow.getStartPosition,The start position is the zero-based index of the first row that this window contains relative to the entire result set of the Cursor.
android.database.CursorWindow.getString,Gets the value of the field at the specified row and column index as a string. The result is determined as follows: If the field is of type Cursor#FIELD_TYPE_NULL then the result is null. If the field is of type Cursor#FIELD_TYPE_STRING then the result is the string value. If the field is of type Cursor#FIELD_TYPE_INTEGER then the result is a string representation of the integer in decimal obtained by formatting the value with the printf family of functions using format specifier %lld. If the field is of type Cursor#FIELD_TYPE_FLOAT then the result is a string representation of the floating-point value in decimal obtained by formatting the value with the printf family of functions using format specifier %g. If the field is of type Cursor#FIELD_TYPE_BLOB then a SQLiteException is thrown.
android.database.CursorWindow.getString,Get string.
android.database.CursorWindow.getString,Gets the value of the field at the specified row and column index as a string.
android.database.CursorWindow.getString,The result is determined as follows: If the field is of type Cursor#FIELD_TYPE_NULL then the result is null.
android.database.CursorWindow.getString,If the field is of type Cursor#FIELD_TYPE_STRING then the result is the string value.
android.database.CursorWindow.getString,If the field is of type Cursor#FIELD_TYPE_INTEGER then the result is a string representation of the integer in decimal obtained by formatting the value with the printf family of functions using format specifier %lld.
android.database.CursorWindow.getString,If the field is of type Cursor#FIELD_TYPE_FLOAT then the result is a string representation of the floating-point value in decimal obtained by formatting the value with the printf family of functions using format specifier %g.
android.database.CursorWindow.getString,If the field is of type Cursor#FIELD_TYPE_BLOB then a SQLiteException is thrown.
android.database.CursorWindow.isNull,This method was deprecated in API level 15. Use getType(int int) instead. Returns true if the field at the specified row and column index has type Cursor#FIELD_TYPE_NULL.
android.database.CursorWindow.isNull,Is null.
android.database.CursorWindow.isNull,This method was deprecated in API level 15.
android.database.CursorWindow.isNull,Use getType(int int) instead.
android.database.CursorWindow.isNull,Returns true if the field at the specified row and column index has type Cursor#FIELD_TYPE_NULL.
android.database.CursorWindow.putBlob,Copies a byte array into the field at the specified row and column index.
android.database.CursorWindow.putBlob,Put blob.
android.database.CursorWindow.putDouble,Puts a double-precision floating point value into the field at the specified row and column index.
android.database.CursorWindow.putDouble,Put double.
android.database.CursorWindow.putLong,Puts a long integer into the field at the specified row and column index.
android.database.CursorWindow.putLong,Put long.
android.database.CursorWindow.putNull,Puts a null value into the field at the specified row and column index.
android.database.CursorWindow.putNull,Put null.
android.database.CursorWindow.putString,Copies a string into the field at the specified row and column index.
android.database.CursorWindow.putString,Put string.
android.database.CursorWindow.setNumColumns,Sets the number of columns in this window. This method must be called before any rows are added to the window otherwise it will fail to set the number of columns if it differs from the current number of columns.
android.database.CursorWindow.setNumColumns,Set num columns.
android.database.CursorWindow.setNumColumns,Sets the number of columns in this window.
android.database.CursorWindow.setNumColumns,This method must be called before any rows are added to the window otherwise it will fail to set the number of columns if it differs from the current number of columns.
android.database.CursorWindow.setStartPosition,Sets the start position of this cursor window. The start position is the zero-based index of the first row that this window contains relative to the entire result set of the Cursor.
android.database.CursorWindow.setStartPosition,Set start position.
android.database.CursorWindow.setStartPosition,Sets the start position of this cursor window.
android.database.CursorWindow.setStartPosition,The start position is the zero-based index of the first row that this window contains relative to the entire result set of the Cursor.
android.database.DatabaseUtils.appendValueToSql,Appends an Object to an SQL string with the proper escaping etc.
android.database.DatabaseUtils.appendValueToSql,Append value to sql.
android.database.DatabaseUtils.bindObjectToProgram,Binds the given Object to the given SQLiteProgram using the proper typing. For example bind numbers as longs/doubles and everything else as a string by call toString() on it.
android.database.DatabaseUtils.bindObjectToProgram,Bind object to program.
android.database.DatabaseUtils.bindObjectToProgram,Binds the given Object to the given SQLiteProgram using the proper typing.
android.database.DatabaseUtils.bindObjectToProgram,For example bind numbers as longs/doubles and everything else as a string by call toString() on it.
android.database.DatabaseUtils.cursorRowToContentValues,Read the entire contents of a cursor row and store them in a ContentValues.
android.database.DatabaseUtils.cursorRowToContentValues,Cursor row to content values.
android.database.DatabaseUtils.dumpCursor,Prints the contents of a Cursor to a PrintSteam. The position is restored after printing.
android.database.DatabaseUtils.dumpCursor,Dump cursor.
android.database.DatabaseUtils.dumpCursor,Prints the contents of a Cursor to a PrintSteam.
android.database.DatabaseUtils.dumpCursor,The position is restored after printing.
android.database.DatabaseUtils.dumpCursor,Prints the contents of a Cursor to System.out. The position is restored after printing.
android.database.DatabaseUtils.dumpCursor,Dump cursor.
android.database.DatabaseUtils.dumpCursor,Prints the contents of a Cursor to System.out.
android.database.DatabaseUtils.dumpCursor,The position is restored after printing.
android.database.DatabaseUtils.dumpCursor,Prints the contents of a Cursor to a StringBuilder. The position is restored after printing.
android.database.DatabaseUtils.dumpCursor,Dump cursor.
android.database.DatabaseUtils.dumpCursor,Prints the contents of a Cursor to a StringBuilder.
android.database.DatabaseUtils.dumpCursor,The position is restored after printing.
android.database.DatabaseUtils.dumpCursorToString,Prints the contents of a Cursor to a String. The position is restored after printing.
android.database.DatabaseUtils.dumpCursorToString,Dump cursor to string.
android.database.DatabaseUtils.dumpCursorToString,Prints the contents of a Cursor to a String.
android.database.DatabaseUtils.dumpCursorToString,The position is restored after printing.
android.database.DatabaseUtils.longForQuery,Utility method to run the query on the db and return the value in the first column of the first row.
android.database.DatabaseUtils.longForQuery,Long for query.
android.database.DatabaseUtils.longForQuery,Utility method to run the pre-compiled query and return the value in the first column of the first row.
android.database.DatabaseUtils.longForQuery,Long for query.
android.database.DatabaseUtils.queryNumEntries,Query the table for the number of rows in the table.
android.database.DatabaseUtils.queryNumEntries,Query num entries.
android.database.DatabaseUtils.queryNumEntries,Query the table for the number of rows in the table.
android.database.DatabaseUtils.queryNumEntries,Query num entries.
android.database.DatabaseUtils.queryNumEntries,Query the table for the number of rows in the table.
android.database.DatabaseUtils.queryNumEntries,Query num entries.
android.database.DatabaseUtils.sqlEscapeString,SQL-escape a string.
android.database.DatabaseUtils.sqlEscapeString,Sql escape string.
android.database.DataSetObservable.notifyChanged,Invokes DataSetObserver#onChanged on each observer. Called when the contents of the data set have changed. The recipient will obtain the new contents the next time it queries the data set.
android.database.DataSetObservable.notifyChanged,Notify changed.
android.database.DataSetObservable.notifyChanged,Invokes DataSetObserver#onChanged on each observer.
android.database.DataSetObservable.notifyChanged,Called when the contents of the data set have changed.
android.database.DataSetObservable.notifyChanged,The recipient will obtain the new contents the next time it queries the data set.
android.database.DataSetObservable.notifyInvalidated,Invokes DataSetObserver#onInvalidated on each observer. Called when the data set is no longer valid and cannot be queried again such as when the data set has been closed.
android.database.DataSetObservable.notifyInvalidated,Notify invalidated.
android.database.DataSetObservable.notifyInvalidated,Invokes DataSetObserver#onInvalidated on each observer.
android.database.DataSetObservable.notifyInvalidated,Called when the data set is no longer valid and cannot be queried again such as when the data set has been closed.
android.database.DataSetObserver.onChanged,This method is called when the entire data set has changed most likely through a call to Cursor#requery() on a Cursor.
android.database.DataSetObserver.onChanged,On changed.
android.database.DataSetObserver.onInvalidated,This method is called when the entire data becomes invalid most likely through a call to Cursor#deactivate() or Cursor#close() on a Cursor.
android.database.DataSetObserver.onInvalidated,On invalidated.
android.database.MatrixCursor.addRow,Adds a new row to the end with the given column values. Not safe for concurrent use.
android.database.MatrixCursor.addRow,Add row.
android.database.MatrixCursor.addRow,Adds a new row to the end with the given column values.
android.database.MatrixCursor.addRow,Not safe for concurrent use.
android.database.MatrixCursor.addRow,Adds a new row to the end with the given column values. Not safe for concurrent use.
android.database.MatrixCursor.addRow,Add row.
android.database.MatrixCursor.addRow,Adds a new row to the end with the given column values.
android.database.MatrixCursor.addRow,Not safe for concurrent use.
android.database.MatrixCursor.newRow,Adds a new row to the end and returns a builder for that row. Not safe for concurrent use.
android.database.MatrixCursor.newRow,New row.
android.database.MatrixCursor.newRow,Adds a new row to the end and returns a builder for that row.
android.database.MatrixCursor.newRow,Not safe for concurrent use.
android.database.sqlite.SQLiteDatabase.beginTransaction,Begins a transaction in EXCLUSIVE mode. Transactions can be nested. When the outer transaction is ended all of the work done in that transaction and all of the nested transactions will be committed or rolled back. The changes will be rolled back if any transaction is ended without being marked as clean (by calling setTransactionSuccessful). Otherwise they will be committed. Here is the standard idiom for transactions:.
android.database.sqlite.SQLiteDatabase.beginTransaction,Begin transaction.
android.database.sqlite.SQLiteDatabase.beginTransaction,Begins a transaction in EXCLUSIVE mode.
android.database.sqlite.SQLiteDatabase.beginTransaction,Transactions can be nested.
android.database.sqlite.SQLiteDatabase.beginTransaction,When the outer transaction is ended all of the work done in that transaction and all of the nested transactions will be committed or rolled back.
android.database.sqlite.SQLiteDatabase.beginTransaction,The changes will be rolled back if any transaction is ended without being marked as clean (by calling setTransactionSuccessful).
android.database.sqlite.SQLiteDatabase.beginTransaction,Otherwise they will be committed.
android.database.sqlite.SQLiteDatabase.beginTransaction,Here is the standard idiom for transactions:.
android.database.sqlite.SQLiteDatabase.beginTransactionNonExclusive,Begins a transaction in IMMEDIATE mode. Transactions can be nested. When the outer transaction is ended all of the work done in that transaction and all of the nested transactions will be committed or rolled back. The changes will be rolled back if any transaction is ended without being marked as clean (by calling setTransactionSuccessful). Otherwise they will be committed. Here is the standard idiom for transactions:.
android.database.sqlite.SQLiteDatabase.beginTransactionNonExclusive,Begin transaction non exclusive.
android.database.sqlite.SQLiteDatabase.beginTransactionNonExclusive,Begins a transaction in IMMEDIATE mode.
android.database.sqlite.SQLiteDatabase.beginTransactionNonExclusive,Transactions can be nested.
android.database.sqlite.SQLiteDatabase.beginTransactionNonExclusive,When the outer transaction is ended all of the work done in that transaction and all of the nested transactions will be committed or rolled back.
android.database.sqlite.SQLiteDatabase.beginTransactionNonExclusive,The changes will be rolled back if any transaction is ended without being marked as clean (by calling setTransactionSuccessful).
android.database.sqlite.SQLiteDatabase.beginTransactionNonExclusive,Otherwise they will be committed.
android.database.sqlite.SQLiteDatabase.beginTransactionNonExclusive,Here is the standard idiom for transactions:.
android.database.sqlite.SQLiteDatabase.compileStatement,Compiles an SQL statement into a reusable pre-compiled statement object. The parameters are identical to execSQL(java.lang.String). You may put ?s in the statement and fill in those values with SQLiteProgram#bindString and SQLiteProgram#bindLong each time you want to run the statement. Statements may not return result sets larger than 1x1. No two threads should be using the same SQLiteStatement at the same time.
android.database.sqlite.SQLiteDatabase.compileStatement,Compile statement.
android.database.sqlite.SQLiteDatabase.compileStatement,Compiles an SQL statement into a reusable pre-compiled statement object.
android.database.sqlite.SQLiteDatabase.compileStatement,The parameters are identical to execSQL(java.lang.String).
android.database.sqlite.SQLiteDatabase.compileStatement,You may put ?s in the statement and fill in those values with SQLiteProgram#bindString and SQLiteProgram#bindLong each time you want to run the statement.
android.database.sqlite.SQLiteDatabase.compileStatement,Statements may not return result sets larger than 1x1.
android.database.sqlite.SQLiteDatabase.compileStatement,No two threads should be using the same SQLiteStatement at the same time.
android.database.sqlite.SQLiteDatabase.delete,Convenience method for deleting rows in the database.
android.database.sqlite.SQLiteDatabase.delete,Delete.
android.database.sqlite.SQLiteDatabase.endTransaction,End a transaction. See beginTransaction for notes about how to use this and when transactions are committed and rolled back.
android.database.sqlite.SQLiteDatabase.endTransaction,End transaction.
android.database.sqlite.SQLiteDatabase.endTransaction,End a transaction.
android.database.sqlite.SQLiteDatabase.endTransaction,See beginTransaction for notes about how to use this and when transactions are committed and rolled back.
android.database.sqlite.SQLiteDatabase.execSQL,"Execute a single SQL statement that is NOT a SELECT or any other SQL statement that returns data. It has no means to return any data (such as the number of affected rows). Instead you're encouraged to use insert(java.lang.String java.lang.String android.content.ContentValues) update(java.lang.String android.content.ContentValues java.lang.String java.lang.String[]) et al when possible. When using enableWriteAheadLogging() journal_mode is automatically managed by this class. So do not set journal_mode using ""PRAGMA journal_mode' "" statement if your app is using enableWriteAheadLogging()."
android.database.sqlite.SQLiteDatabase.execSQL,Exec s q l.
android.database.sqlite.SQLiteDatabase.execSQL,Execute a single SQL statement that is NOT a SELECT or any other SQL statement that returns data.
android.database.sqlite.SQLiteDatabase.execSQL,It has no means to return any data (such as the number of affected rows).
android.database.sqlite.SQLiteDatabase.execSQL,Instead you're encouraged to use insert(java.lang.String java.lang.String android.content.ContentValues) update(java.lang.String android.content.ContentValues java.lang.String java.lang.String[]) et al when possible.
android.database.sqlite.SQLiteDatabase.execSQL,When using enableWriteAheadLogging() journal_mode is automatically managed by this class.
android.database.sqlite.SQLiteDatabase.execSQL,"So do not set journal_mode using ""PRAGMA journal_mode' "" statement if your app is using enableWriteAheadLogging()."
android.database.sqlite.SQLiteDatabase.execSQL,"Execute a single SQL statement that is NOT a SELECT/INSERT/UPDATE/DELETE. For INSERT statements use any of the following instead. insert(java.lang.String java.lang.String android.content.ContentValues) insertOrThrow(java.lang.String java.lang.String android.content.ContentValues) insertWithOnConflict(java.lang.String java.lang.String android.content.ContentValues int) For UPDATE statements use any of the following instead. update(java.lang.String android.content.ContentValues java.lang.String java.lang.String[]) updateWithOnConflict(java.lang.String android.content.ContentValues java.lang.String java.lang.String[] int) For DELETE statements use any of the following instead. delete(java.lang.String java.lang.String java.lang.String[]) For example the following are good candidates for using this method: ALTER TABLE CREATE or DROP table / trigger / view / index / virtual table REINDEX RELEASE SAVEPOINT PRAGMA that returns no data When using enableWriteAheadLogging() journal_mode is automatically managed by this class. So do not set journal_mode using ""PRAGMA journal_mode' "" statement if your app is using enableWriteAheadLogging()."
android.database.sqlite.SQLiteDatabase.execSQL,Exec s q l.
android.database.sqlite.SQLiteDatabase.execSQL,Execute a single SQL statement that is NOT a SELECT/INSERT/UPDATE/DELETE.
android.database.sqlite.SQLiteDatabase.execSQL,For INSERT statements use any of the following instead.
android.database.sqlite.SQLiteDatabase.execSQL,insert(java.lang.String java.lang.String android.content.ContentValues) insertOrThrow(java.lang.String java.lang.String android.content.ContentValues) insertWithOnConflict(java.lang.String java.lang.String android.content.ContentValues int) For UPDATE statements use any of the following instead.
android.database.sqlite.SQLiteDatabase.execSQL,update(java.lang.String android.content.ContentValues java.lang.String java.lang.String[]) updateWithOnConflict(java.lang.String android.content.ContentValues java.lang.String java.lang.String[] int) For DELETE statements use any of the following instead.
android.database.sqlite.SQLiteDatabase.execSQL,delete(java.lang.String java.lang.String java.lang.String[]) For example the following are good candidates for using this method: ALTER TABLE CREATE or DROP table / trigger / view / index / virtual table REINDEX RELEASE SAVEPOINT PRAGMA that returns no data When using enableWriteAheadLogging() journal_mode is automatically managed by this class.
android.database.sqlite.SQLiteDatabase.execSQL,"So do not set journal_mode using ""PRAGMA journal_mode' "" statement if your app is using enableWriteAheadLogging()."
android.database.sqlite.SQLiteDatabase.getPath,Gets the path to the database file.
android.database.sqlite.SQLiteDatabase.getPath,Get path.
android.database.sqlite.SQLiteDatabase.getVersion,Gets the database version.
android.database.sqlite.SQLiteDatabase.getVersion,Get version.
android.database.sqlite.SQLiteDatabase.inTransaction,Returns true if the current thread has a transaction pending.
android.database.sqlite.SQLiteDatabase.inTransaction,In transaction.
android.database.sqlite.SQLiteDatabase.insertOrThrow,Convenience method for inserting a row into the database.
android.database.sqlite.SQLiteDatabase.insertOrThrow,Insert or throw.
android.database.sqlite.SQLiteDatabase.insertWithOnConflict,General method for inserting a row into the database.
android.database.sqlite.SQLiteDatabase.insertWithOnConflict,Insert with on conflict.
android.database.sqlite.SQLiteDatabase.isDbLockedByCurrentThread,"Returns true if the current thread is holding an active connection to the database. The name of this method comes from a time when having an active connection to the database meant that the thread was holding an actual lock on the database. Nowadays there is no longer a true ""database lock"" although threads may block if they cannot acquire a database connection to perform a particular operation."
android.database.sqlite.SQLiteDatabase.isDbLockedByCurrentThread,Is db locked by current thread.
android.database.sqlite.SQLiteDatabase.isDbLockedByCurrentThread,Returns true if the current thread is holding an active connection to the database.
android.database.sqlite.SQLiteDatabase.isDbLockedByCurrentThread,The name of this method comes from a time when having an active connection to the database meant that the thread was holding an actual lock on the database.
android.database.sqlite.SQLiteDatabase.isDbLockedByCurrentThread,"Nowadays there is no longer a true ""database lock"" although threads may block if they cannot acquire a database connection to perform a particular operation."
android.database.sqlite.SQLiteDatabase.isOpen,Returns true if the database is currently open.
android.database.sqlite.SQLiteDatabase.isOpen,Is open.
android.database.sqlite.SQLiteDatabase.isReadOnly,Returns true if the database is opened as read only.
android.database.sqlite.SQLiteDatabase.isReadOnly,Is read only.
android.database.sqlite.SQLiteDatabase.query,Query the given URL returning a Cursor over the result set.
android.database.sqlite.SQLiteDatabase.query,Query.
android.database.sqlite.SQLiteDatabase.query,Query the given table returning a Cursor over the result set.
android.database.sqlite.SQLiteDatabase.query,Query.
android.database.sqlite.SQLiteDatabase.query,Query the given URL returning a Cursor over the result set.
android.database.sqlite.SQLiteDatabase.query,Query.
android.database.sqlite.SQLiteDatabase.query,Query the given table returning a Cursor over the result set.
android.database.sqlite.SQLiteDatabase.query,Query.
android.database.sqlite.SQLiteDatabase.rawQuery,Runs the provided SQL and returns a Cursor over the result set.
android.database.sqlite.SQLiteDatabase.rawQuery,Raw query.
android.database.sqlite.SQLiteDatabase.rawQuery,Runs the provided SQL and returns a Cursor over the result set.
android.database.sqlite.SQLiteDatabase.rawQuery,Raw query.
android.database.sqlite.SQLiteDatabase.releaseMemory,Attempts to release memory that SQLite holds but does not require to operate properly. Typically this memory will come from the page cache.
android.database.sqlite.SQLiteDatabase.releaseMemory,Release memory.
android.database.sqlite.SQLiteDatabase.releaseMemory,Attempts to release memory that SQLite holds but does not require to operate properly.
android.database.sqlite.SQLiteDatabase.releaseMemory,Typically this memory will come from the page cache.
android.database.sqlite.SQLiteDatabase.replace,Convenience method for replacing a row in the database. Inserts a new row if a row does not already exist.
android.database.sqlite.SQLiteDatabase.replace,Replace.
android.database.sqlite.SQLiteDatabase.replace,Convenience method for replacing a row in the database.
android.database.sqlite.SQLiteDatabase.replace,Inserts a new row if a row does not already exist.
android.database.sqlite.SQLiteDatabase.setMaximumSize,Sets the maximum size the database will grow to. The maximum size cannot be set below the current size.
android.database.sqlite.SQLiteDatabase.setMaximumSize,Set maximum size.
android.database.sqlite.SQLiteDatabase.setMaximumSize,Sets the maximum size the database will grow to.
android.database.sqlite.SQLiteDatabase.setMaximumSize,The maximum size cannot be set below the current size.
android.database.sqlite.SQLiteDatabase.setTransactionSuccessful,Marks the current transaction as successful. Do not do any more database work between calling this and calling endTransaction. Do as little non-database work as possible in that situation too. If any errors are encountered between this and endTransaction the transaction will still be committed.
android.database.sqlite.SQLiteDatabase.setTransactionSuccessful,Set transaction successful.
android.database.sqlite.SQLiteDatabase.setTransactionSuccessful,Marks the current transaction as successful.
android.database.sqlite.SQLiteDatabase.setTransactionSuccessful,Do not do any more database work between calling this and calling endTransaction.
android.database.sqlite.SQLiteDatabase.setTransactionSuccessful,Do as little non-database work as possible in that situation too.
android.database.sqlite.SQLiteDatabase.setTransactionSuccessful,If any errors are encountered between this and endTransaction the transaction will still be committed.
android.database.sqlite.SQLiteDatabase.updateWithOnConflict,Convenience method for updating rows in the database.
android.database.sqlite.SQLiteDatabase.updateWithOnConflict,Update with on conflict.
android.database.sqlite.SQLiteDatabase.yieldIfContendedSafely,Temporarily end the transaction to let other threads run. The transaction is assumed to be successful so far. Do not call setTransactionSuccessful before calling this. When this returns a new transaction will have been created but not marked as successful. This assumes that there are no nested transactions (beginTransaction has only been called once) and will throw an exception if that is not the case.
android.database.sqlite.SQLiteDatabase.yieldIfContendedSafely,Yield if contended safely.
android.database.sqlite.SQLiteDatabase.yieldIfContendedSafely,Temporarily end the transaction to let other threads run.
android.database.sqlite.SQLiteDatabase.yieldIfContendedSafely,The transaction is assumed to be successful so far.
android.database.sqlite.SQLiteDatabase.yieldIfContendedSafely,Do not call setTransactionSuccessful before calling this.
android.database.sqlite.SQLiteDatabase.yieldIfContendedSafely,When this returns a new transaction will have been created but not marked as successful.
android.database.sqlite.SQLiteDatabase.yieldIfContendedSafely,This assumes that there are no nested transactions (beginTransaction has only been called once) and will throw an exception if that is not the case.
android.database.sqlite.SQLiteDatabase.yieldIfContendedSafely,Temporarily end the transaction to let other threads run. The transaction is assumed to be successful so far. Do not call setTransactionSuccessful before calling this. When this returns a new transaction will have been created but not marked as successful. This assumes that there are no nested transactions (beginTransaction has only been called once) and will throw an exception if that is not the case.
android.database.sqlite.SQLiteDatabase.yieldIfContendedSafely,Yield if contended safely.
android.database.sqlite.SQLiteDatabase.yieldIfContendedSafely,Temporarily end the transaction to let other threads run.
android.database.sqlite.SQLiteDatabase.yieldIfContendedSafely,The transaction is assumed to be successful so far.
android.database.sqlite.SQLiteDatabase.yieldIfContendedSafely,Do not call setTransactionSuccessful before calling this.
android.database.sqlite.SQLiteDatabase.yieldIfContendedSafely,When this returns a new transaction will have been created but not marked as successful.
android.database.sqlite.SQLiteDatabase.yieldIfContendedSafely,This assumes that there are no nested transactions (beginTransaction has only been called once) and will throw an exception if that is not the case.
android.database.sqlite.SQLiteOpenHelper.close,Close any open database object.
android.database.sqlite.SQLiteOpenHelper.close,Close.
android.database.sqlite.SQLiteOpenHelper.getDatabaseName,Return the name of the SQLite database being opened as given to the constructor.
android.database.sqlite.SQLiteOpenHelper.getDatabaseName,Get database name.
android.database.sqlite.SQLiteOpenHelper.getReadableDatabase,Create and/or open a database. This will be the same object returned by getWritableDatabase() unless some problem such as a full disk requires the database to be opened read-only. In that case a read-only database object will be returned. If the problem is fixed a future call to getWritableDatabase() may succeed in which case the read-only database object will be closed and the read/write object will be returned in the future. Like getWritableDatabase() this method may take a long time to return so you should not call it from the application main thread including from ContentProvider.onCreate().
android.database.sqlite.SQLiteOpenHelper.getReadableDatabase,Get readable database.
android.database.sqlite.SQLiteOpenHelper.getReadableDatabase,Create and/or open a database.
android.database.sqlite.SQLiteOpenHelper.getReadableDatabase,This will be the same object returned by getWritableDatabase() unless some problem such as a full disk requires the database to be opened read-only.
android.database.sqlite.SQLiteOpenHelper.getReadableDatabase,In that case a read-only database object will be returned.
android.database.sqlite.SQLiteOpenHelper.getReadableDatabase,If the problem is fixed a future call to getWritableDatabase() may succeed in which case the read-only database object will be closed and the read/write object will be returned in the future.
android.database.sqlite.SQLiteOpenHelper.getReadableDatabase,Like getWritableDatabase() this method may take a long time to return so you should not call it from the application main thread including from ContentProvider.onCreate().
android.database.sqlite.SQLiteOpenHelper.getWritableDatabase,Create and/or open a database that will be used for reading and writing. The first time this is called the database will be opened and onCreate(SQLiteDatabase) onUpgrade(SQLiteDatabase int int) and/or onOpen(SQLiteDatabase) will be called. Once opened successfully the database is cached so you can call this method every time you need to write to the database. (Make sure to call close() when you no longer need the database.) Errors such as bad permissions or a full disk may cause this method to fail but future attempts may succeed if the problem is fixed. Database upgrade may take a long time you should not call this method from the application main thread including from ContentProvider.onCreate().
android.database.sqlite.SQLiteOpenHelper.getWritableDatabase,Get writable database.
android.database.sqlite.SQLiteOpenHelper.getWritableDatabase,Create and/or open a database that will be used for reading and writing.
android.database.sqlite.SQLiteOpenHelper.getWritableDatabase,The first time this is called the database will be opened and onCreate(SQLiteDatabase) onUpgrade(SQLiteDatabase int int) and/or onOpen(SQLiteDatabase) will be called.
android.database.sqlite.SQLiteOpenHelper.getWritableDatabase,Once opened successfully the database is cached so you can call this method every time you need to write to the database.
android.database.sqlite.SQLiteOpenHelper.getWritableDatabase,(Make sure to call close() when you no longer need the database.) Errors such as bad permissions or a full disk may cause this method to fail but future attempts may succeed if the problem is fixed.
android.database.sqlite.SQLiteOpenHelper.getWritableDatabase,Database upgrade may take a long time you should not call this method from the application main thread including from ContentProvider.onCreate().
android.database.sqlite.SQLiteOpenHelper.onConfigure,Called when the database connection is being configured to enable features such as write-ahead logging or foreign key support. This method is called before onCreate(SQLiteDatabase) onUpgrade(SQLiteDatabase int int) onDowngrade(SQLiteDatabase int int) or onOpen(SQLiteDatabase) are called. It should not modify the database except to configure the database connection as required. This method should only call methods that configure the parameters of the database connection such as SQLiteDatabase#enableWriteAheadLogging SQLiteDatabase#setForeignKeyConstraintsEnabled SQLiteDatabase#setLocale SQLiteDatabase#setMaximumSize or executing PRAGMA statements.
android.database.sqlite.SQLiteOpenHelper.onConfigure,On configure.
android.database.sqlite.SQLiteOpenHelper.onConfigure,Called when the database connection is being configured to enable features such as write-ahead logging or foreign key support.
android.database.sqlite.SQLiteOpenHelper.onConfigure,This method is called before onCreate(SQLiteDatabase) onUpgrade(SQLiteDatabase int int) onDowngrade(SQLiteDatabase int int) or onOpen(SQLiteDatabase) are called.
android.database.sqlite.SQLiteOpenHelper.onConfigure,It should not modify the database except to configure the database connection as required.
android.database.sqlite.SQLiteOpenHelper.onConfigure,This method should only call methods that configure the parameters of the database connection such as SQLiteDatabase#enableWriteAheadLogging SQLiteDatabase#setForeignKeyConstraintsEnabled SQLiteDatabase#setLocale SQLiteDatabase#setMaximumSize or executing PRAGMA statements.
android.database.sqlite.SQLiteOpenHelper.onDowngrade,Called when the database needs to be downgraded. This is strictly similar to onUpgrade(SQLiteDatabase int int) method but is called whenever current version is newer than requested one. However this method is not abstract so it is not mandatory for a customer to implement it. If not overridden default implementation will reject downgrade and throws SQLiteException This method executes within a transaction. If an exception is thrown all changes will automatically be rolled back.
android.database.sqlite.SQLiteOpenHelper.onDowngrade,On downgrade.
android.database.sqlite.SQLiteOpenHelper.onDowngrade,Called when the database needs to be downgraded.
android.database.sqlite.SQLiteOpenHelper.onDowngrade,This is strictly similar to onUpgrade(SQLiteDatabase int int) method but is called whenever current version is newer than requested one.
android.database.sqlite.SQLiteOpenHelper.onDowngrade,However this method is not abstract so it is not mandatory for a customer to implement it.
android.database.sqlite.SQLiteOpenHelper.onDowngrade,If not overridden default implementation will reject downgrade and throws SQLiteException This method executes within a transaction.
android.database.sqlite.SQLiteOpenHelper.onDowngrade,If an exception is thrown all changes will automatically be rolled back.
android.database.sqlite.SQLiteOpenHelper.onOpen,Called when the database has been opened. The implementation should check SQLiteDatabase#isReadOnly before updating the database. This method is called after the database connection has been configured and after the database schema has been created upgraded or downgraded as necessary. If the database connection must be configured in some way before the schema is created upgraded or downgraded do it in onConfigure(SQLiteDatabase) instead.
android.database.sqlite.SQLiteOpenHelper.onOpen,On open.
android.database.sqlite.SQLiteOpenHelper.onOpen,Called when the database has been opened.
android.database.sqlite.SQLiteOpenHelper.onOpen,The implementation should check SQLiteDatabase#isReadOnly before updating the database.
android.database.sqlite.SQLiteOpenHelper.onOpen,This method is called after the database connection has been configured and after the database schema has been created upgraded or downgraded as necessary.
android.database.sqlite.SQLiteOpenHelper.onOpen,If the database connection must be configured in some way before the schema is created upgraded or downgraded do it in onConfigure(SQLiteDatabase) instead.
android.database.sqlite.SQLiteQueryBuilder.appendWhere,Append a chunk to the WHERE clause of the query. All chunks appended are surrounded by parenthesis and AND ed with the selection passed to query(SQLiteDatabase String[] String String[] String String String). The final WHERE clause looks like: WHERE (<append chunk 1><append chunk2>) AND (<query() selection parameter>).
android.database.sqlite.SQLiteQueryBuilder.appendWhere,Append where.
android.database.sqlite.SQLiteQueryBuilder.appendWhere,Append a chunk to the WHERE clause of the query.
android.database.sqlite.SQLiteQueryBuilder.appendWhere,All chunks appended are surrounded by parenthesis and AND ed with the selection passed to query(SQLiteDatabase String[] String String[] String String String).
android.database.sqlite.SQLiteQueryBuilder.appendWhere,The final WHERE clause looks like: WHERE (<append chunk 1><append chunk2>) AND (<query() selection parameter>).
android.database.sqlite.SQLiteQueryBuilder.query,Perform a query by combining all current settings and the information passed into this method.
android.database.sqlite.SQLiteQueryBuilder.query,Query.
android.database.sqlite.SQLiteQueryBuilder.query,Perform a query by combining all current settings and the information passed into this method.
android.database.sqlite.SQLiteQueryBuilder.query,Query.
android.database.sqlite.SQLiteQueryBuilder.query,Perform a query by combining all current settings and the information passed into this method.
android.database.sqlite.SQLiteQueryBuilder.query,Query.
android.database.sqlite.SQLiteQueryBuilder.setProjectionMap,"Sets the projection map for the query. The projection map maps from column names that the caller passes into query to database column names. This is useful for renaming columns as well as disambiguating column names when doing joins. For example you could map ""name"" to ""people.name"". If a projection map is set it must contain all column names the user may request even if the key and value are the same."
android.database.sqlite.SQLiteQueryBuilder.setProjectionMap,Set projection map.
android.database.sqlite.SQLiteQueryBuilder.setProjectionMap,Sets the projection map for the query.
android.database.sqlite.SQLiteQueryBuilder.setProjectionMap,The projection map maps from column names that the caller passes into query to database column names.
android.database.sqlite.SQLiteQueryBuilder.setProjectionMap,This is useful for renaming columns as well as disambiguating column names when doing joins.
android.database.sqlite.SQLiteQueryBuilder.setProjectionMap,"For example you could map ""name"" to ""people.name""."
android.database.sqlite.SQLiteQueryBuilder.setProjectionMap,If a projection map is set it must contain all column names the user may request even if the key and value are the same.
android.database.sqlite.SQLiteQueryBuilder.setTables,"Sets the list of tables to query. Multiple tables can be specified to perform a join. For example: setTables(""foo bar"") setTables(""foo LEFT OUTER JOIN bar ON (foo.id = bar.foo_id)"")."
android.database.sqlite.SQLiteQueryBuilder.setTables,Set tables.
android.database.sqlite.SQLiteQueryBuilder.setTables,Sets the list of tables to query.
android.database.sqlite.SQLiteQueryBuilder.setTables,Multiple tables can be specified to perform a join.
android.database.sqlite.SQLiteQueryBuilder.setTables,"For example: setTables(""foo bar"") setTables(""foo LEFT OUTER JOIN bar ON (foo.id = bar.foo_id)"")."
android.database.sqlite.SQLiteStatement.execute,Execute this SQL statement if it is not a SELECT / INSERT / DELETE / UPDATE for example CREATE / DROP table view trigger index etc.
android.database.sqlite.SQLiteStatement.execute,Execute.
android.database.sqlite.SQLiteStatement.executeInsert,Execute this SQL statement and return the ID of the row inserted due to this call. The SQL statement should be an INSERT for this to be a useful call.
android.database.sqlite.SQLiteStatement.executeInsert,Execute insert.
android.database.sqlite.SQLiteStatement.executeInsert,Execute this SQL statement and return the ID of the row inserted due to this call.
android.database.sqlite.SQLiteStatement.executeInsert,The SQL statement should be an INSERT for this to be a useful call.
android.database.sqlite.SQLiteStatement.simpleQueryForLong,Execute a statement that returns a 1 by 1 table with a numeric value. For example SELECT COUNT(*) FROM table;.
android.database.sqlite.SQLiteStatement.simpleQueryForLong,Simple query for long.
android.database.sqlite.SQLiteStatement.simpleQueryForLong,Execute a statement that returns a 1 by 1 table with a numeric value.
android.database.sqlite.SQLiteStatement.simpleQueryForLong,For example SELECT COUNT(*) FROM table;.
android.gesture.GestureStore.load,Load the gesture library.
android.gesture.GestureStore.load,Load.
android.gesture.GestureStore.load,.
android.gesture.GestureStore.load,Load.
android.gesture.GestureStore.recognize,Recognize a gesture.
android.gesture.GestureStore.recognize,Recognize.
android.graphics.drawable.shapes.RoundRectShape.draw,Draws this shape into the provided Canvas with the provided Paint. Before calling this you must call resize(float float).
android.graphics.drawable.shapes.RoundRectShape.draw,Draw.
android.graphics.drawable.shapes.RoundRectShape.draw,Draws this shape into the provided Canvas with the provided Paint.
android.graphics.drawable.shapes.RoundRectShape.draw,Before calling this you must call resize(float float).
android.content.pm.ConfigurationInfo.getGlEsVersion,This method extracts the major and minor version of reqGLEsVersion attribute and returns it as a string. Say reqGlEsVersion value of 0x00010002 is returned as 1.2.
android.content.pm.ConfigurationInfo.getGlEsVersion,Get gl es version.
android.content.pm.ConfigurationInfo.getGlEsVersion,This method extracts the major and minor version of reqGLEsVersion attribute and returns it as a string.
android.content.pm.ConfigurationInfo.getGlEsVersion,Say reqGlEsVersion value of 0x00010002 is returned as 1.2.
android.content.pm.LabeledIntent.getIconResource,Return any resource identifier that has been given for the label icon.
android.content.pm.LabeledIntent.getIconResource,Get icon resource.
android.content.pm.LabeledIntent.getLabelResource,Return any resource identifier that has been given for the label text.
android.content.pm.LabeledIntent.getLabelResource,Get label resource.
android.content.pm.LabeledIntent.getNonLocalizedLabel,Return any concrete text that has been given for the label text.
android.content.pm.LabeledIntent.getNonLocalizedLabel,Get non localized label.
android.content.pm.LabeledIntent.getSourcePackage,Return the name of the package holding label and icon resources.
android.content.pm.LabeledIntent.getSourcePackage,Get source package.
android.content.pm.PackageItemInfo.loadIcon,Retrieve the current graphical icon associated with this item. This will call back on the given PackageManager to load the icon from the application.
android.content.pm.PackageItemInfo.loadIcon,Load icon.
android.content.pm.PackageItemInfo.loadIcon,Retrieve the current graphical icon associated with this item.
android.content.pm.PackageItemInfo.loadIcon,This will call back on the given PackageManager to load the icon from the application.
android.content.pm.PackageItemInfo.loadLabel,Retrieve the current textual label associated with this item. This will call back on the given PackageManager to load the label from the application.
android.content.pm.PackageItemInfo.loadLabel,Load label.
android.content.pm.PackageItemInfo.loadLabel,Retrieve the current textual label associated with this item.
android.content.pm.PackageItemInfo.loadLabel,This will call back on the given PackageManager to load the label from the application.
android.content.pm.PackageManager.addPermission,"Add a new dynamic permission to the system. For this to work your package must have defined a permission tree through the <permission-tree> tag in its manifest. A package can only add permissions to trees that were defined by either its own package or another with the same user id; a permission is in a tree if it matches the name of the permission tree + ""."": for example ""com.foo.bar"" is a member of the permission tree ""com.foo"". It is good to make your permission tree name descriptive because you are taking possession of that entire set of permission names. Thus it must be under a domain you control with a suffix that will not match any normal permissions that may be declared in any applications that are part of that domain. New permissions must be added before any .apks are installed that use those permissions. Permissions you add through this method are remembered across reboots of the device. If the given permission already exists the info you supply here will be used to update it."
android.content.pm.PackageManager.addPermission,Add permission.
android.content.pm.PackageManager.addPermission,Add a new dynamic permission to the system.
android.content.pm.PackageManager.addPermission,For this to work your package must have defined a permission tree through the <permission-tree> tag in its manifest.
android.content.pm.PackageManager.addPermission,"A package can only add permissions to trees that were defined by either its own package or another with the same user id; a permission is in a tree if it matches the name of the permission tree + ""."": for example ""com.foo.bar"" is a member of the permission tree ""com.foo""."
android.content.pm.PackageManager.addPermission,It is good to make your permission tree name descriptive because you are taking possession of that entire set of permission names.
android.content.pm.PackageManager.addPermission,Thus it must be under a domain you control with a suffix that will not match any normal permissions that may be declared in any applications that are part of that domain.
android.content.pm.PackageManager.addPermission,New permissions must be added before any .apks are installed that use those permissions.
android.content.pm.PackageManager.addPermission,Permissions you add through this method are remembered across reboots of the device.
android.content.pm.PackageManager.addPermission,If the given permission already exists the info you supply here will be used to update it.
android.content.pm.PackageManager.addPermissionAsync,Like addPermission(android.content.pm.PermissionInfo) but asynchronously persists the package manager state after returning from the call allowing it to return quicker and batch a series of adds at the expense of no guarantee the added permission will be retained if the device is rebooted before it is written.
android.content.pm.PackageManager.addPermissionAsync,Add permission async.
android.content.pm.PackageManager.addPreferredActivity,This method was deprecated in API level 15. This function no longer does anything. It is the platform's responsibility to assign preferred activities and this cannot be modified directly. To determine the activities resolved by the platform use resolveActivity(Intent int) or queryIntentActivities(Intent int). To configure an app to be responsible for a particular role and to check current role holders see RoleManager. Add a new preferred activity mapping to the system. This will be used to automatically select the given activity component when Context#startActivity(Intent) finds multiple matching activities and also matches the given filter.
android.content.pm.PackageManager.addPreferredActivity,Add preferred activity.
android.content.pm.PackageManager.addPreferredActivity,This method was deprecated in API level 15.
android.content.pm.PackageManager.addPreferredActivity,This function no longer does anything.
android.content.pm.PackageManager.addPreferredActivity,It is the platform's responsibility to assign preferred activities and this cannot be modified directly.
android.content.pm.PackageManager.addPreferredActivity,To determine the activities resolved by the platform use resolveActivity(Intent int) or queryIntentActivities(Intent int).
android.content.pm.PackageManager.addPreferredActivity,To configure an app to be responsible for a particular role and to check current role holders see RoleManager.
android.content.pm.PackageManager.addPreferredActivity,Add a new preferred activity mapping to the system.
android.content.pm.PackageManager.addPreferredActivity,This will be used to automatically select the given activity component when Context#startActivity(Intent) finds multiple matching activities and also matches the given filter.
android.content.pm.PackageManager.canonicalToCurrentPackageNames,Map from a packages canonical name to the current name in use on the device.
android.content.pm.PackageManager.canonicalToCurrentPackageNames,Canonical to current package names.
android.content.pm.PackageManager.checkPermission,Check whether a particular package has been granted a particular permission.
android.content.pm.PackageManager.checkPermission,Check permission.
android.content.pm.PackageManager.checkSignatures,Compare the signatures of two packages to determine if the same signature appears in both of them. If they do contain the same signature then they are allowed special privileges when working with each other: they can share the same user-id run instrumentation against each other etc.
android.content.pm.PackageManager.checkSignatures,Check signatures.
android.content.pm.PackageManager.checkSignatures,Compare the signatures of two packages to determine if the same signature appears in both of them.
android.content.pm.PackageManager.checkSignatures,If they do contain the same signature then they are allowed special privileges when working with each other: they can share the same user-id run instrumentation against each other etc.
android.content.pm.PackageManager.checkSignatures,Like checkSignatures(java.lang.String java.lang.String) but takes UIDs of the two packages to be checked. This can be useful for example when doing the check in an IPC where the UID is the only identity available. It is functionally identical to determining the package associated with the UIDs and checking their signatures.
android.content.pm.PackageManager.checkSignatures,Check signatures.
android.content.pm.PackageManager.checkSignatures,Like checkSignatures(java.lang.String java.lang.String) but takes UIDs of the two packages to be checked.
android.content.pm.PackageManager.checkSignatures,This can be useful for example when doing the check in an IPC where the UID is the only identity available.
android.content.pm.PackageManager.checkSignatures,It is functionally identical to determining the package associated with the UIDs and checking their signatures.
android.content.pm.PackageManager.clearPackagePreferredActivities,This method was deprecated in API level 29. This function no longer does anything. It is the platform's responsibility to assign preferred activities and this cannot be modified directly. To determine the activities resolved by the platform use resolveActivity(Intent int) or queryIntentActivities(Intent int). To configure an app to be responsible for a particular role and to check current role holders see RoleManager. Remove all preferred activity mappings previously added with addPreferredActivity(IntentFilter int ComponentName[] ComponentName) from the system whose activities are implemented in the given package name. An application can only clear its own package(s).
android.content.pm.PackageManager.clearPackagePreferredActivities,Clear package preferred activities.
android.content.pm.PackageManager.clearPackagePreferredActivities,This method was deprecated in API level 29.
android.content.pm.PackageManager.clearPackagePreferredActivities,This function no longer does anything.
android.content.pm.PackageManager.clearPackagePreferredActivities,It is the platform's responsibility to assign preferred activities and this cannot be modified directly.
android.content.pm.PackageManager.clearPackagePreferredActivities,To determine the activities resolved by the platform use resolveActivity(Intent int) or queryIntentActivities(Intent int).
android.content.pm.PackageManager.clearPackagePreferredActivities,To configure an app to be responsible for a particular role and to check current role holders see RoleManager.
android.content.pm.PackageManager.clearPackagePreferredActivities,Remove all preferred activity mappings previously added with addPreferredActivity(IntentFilter int ComponentName[] ComponentName) from the system whose activities are implemented in the given package name.
android.content.pm.PackageManager.clearPackagePreferredActivities,An application can only clear its own package(s).
android.content.pm.PackageManager.currentToCanonicalPackageNames,Map from the current package names in use on the device to whatever the current canonical name of that package is.
android.content.pm.PackageManager.currentToCanonicalPackageNames,Current to canonical package names.
android.content.pm.PackageManager.extendVerificationTimeout,Allows a package listening to the Intent#ACTION_PACKAGE_NEEDS_VERIFICATION to extend the default timeout for a response and declare what action to perform after the timeout occurs. The response must include the verificationCodeAtTimeout which is one of PackageManager#VERIFICATION_ALLOW or PackageManager#VERIFICATION_REJECT. This method may only be called once per package id. Additional calls will have no effect.
android.content.pm.PackageManager.extendVerificationTimeout,Extend verification timeout.
android.content.pm.PackageManager.extendVerificationTimeout,Allows a package listening to the Intent#ACTION_PACKAGE_NEEDS_VERIFICATION to extend the default timeout for a response and declare what action to perform after the timeout occurs.
android.content.pm.PackageManager.extendVerificationTimeout,The response must include the verificationCodeAtTimeout which is one of PackageManager#VERIFICATION_ALLOW or PackageManager#VERIFICATION_REJECT.
android.content.pm.PackageManager.extendVerificationTimeout,This method may only be called once per package id.
android.content.pm.PackageManager.extendVerificationTimeout,Additional calls will have no effect.
android.content.pm.PackageManager.getActivityIcon,Retrieve the icon associated with an Intent. If intent.getClassName() is set this simply returns the result of getActivityIcon(intent.getClassName()). Otherwise it resolves the intent's component and returns the icon associated with the resolved component. If intent.getClassName() cannot be found or the Intent cannot be resolved to a component NameNotFoundException is thrown.
android.content.pm.PackageManager.getActivityIcon,Get activity icon.
android.content.pm.PackageManager.getActivityIcon,Retrieve the icon associated with an Intent.
android.content.pm.PackageManager.getActivityIcon,If intent.getClassName() is set this simply returns the result of getActivityIcon(intent.getClassName()).
android.content.pm.PackageManager.getActivityIcon,Otherwise it resolves the intent's component and returns the icon associated with the resolved component.
android.content.pm.PackageManager.getActivityIcon,If intent.getClassName() cannot be found or the Intent cannot be resolved to a component NameNotFoundException is thrown.
android.content.pm.PackageManager.getActivityIcon,Retrieve the icon associated with an activity. Given the full name of an activity retrieves the information about it and calls ComponentInfo#loadIcon to return its icon. If the activity cannot be found NameNotFoundException is thrown.
android.content.pm.PackageManager.getActivityIcon,Get activity icon.
android.content.pm.PackageManager.getActivityIcon,Retrieve the icon associated with an activity.
android.content.pm.PackageManager.getActivityIcon,Given the full name of an activity retrieves the information about it and calls ComponentInfo#loadIcon to return its icon.
android.content.pm.PackageManager.getActivityIcon,If the activity cannot be found NameNotFoundException is thrown.
android.content.pm.PackageManager.getActivityInfo,Retrieve all of the information we know about a particular activity class.
android.content.pm.PackageManager.getActivityInfo,Get activity info.
android.content.pm.PackageManager.getActivityLogo,Retrieve the logo associated with an Intent. If intent.getClassName() is set this simply returns the result of getActivityLogo(intent.getClassName()). Otherwise it resolves the intent's component and returns the logo associated with the resolved component. If intent.getClassName() cannot be found or the Intent cannot be resolved to a component NameNotFoundException is thrown.
android.content.pm.PackageManager.getActivityLogo,Get activity logo.
android.content.pm.PackageManager.getActivityLogo,Retrieve the logo associated with an Intent.
android.content.pm.PackageManager.getActivityLogo,If intent.getClassName() is set this simply returns the result of getActivityLogo(intent.getClassName()).
android.content.pm.PackageManager.getActivityLogo,Otherwise it resolves the intent's component and returns the logo associated with the resolved component.
android.content.pm.PackageManager.getActivityLogo,If intent.getClassName() cannot be found or the Intent cannot be resolved to a component NameNotFoundException is thrown.
android.content.pm.PackageManager.getActivityLogo,Retrieve the logo associated with an activity. Given the full name of an activity retrieves the information about it and calls ComponentInfo#loadLogo to return its logo. If the activity cannot be found NameNotFoundException is thrown.
android.content.pm.PackageManager.getActivityLogo,Get activity logo.
android.content.pm.PackageManager.getActivityLogo,Retrieve the logo associated with an activity.
android.content.pm.PackageManager.getActivityLogo,Given the full name of an activity retrieves the information about it and calls ComponentInfo#loadLogo to return its logo.
android.content.pm.PackageManager.getActivityLogo,If the activity cannot be found NameNotFoundException is thrown.
android.content.pm.PackageManager.getAllPermissionGroups,Retrieve all of the known permission groups in the system.
android.content.pm.PackageManager.getAllPermissionGroups,Get all permission groups.
android.content.pm.PackageManager.getApplicationEnabledSetting,Return the enabled setting for an application. This returns the last value set by setApplicationEnabledSetting(java.lang.String int int) ; in most cases this value will be COMPONENT_ENABLED_STATE_DEFAULT since the value originally specified in the manifest has not been modified.
android.content.pm.PackageManager.getApplicationEnabledSetting,Get application enabled setting.
android.content.pm.PackageManager.getApplicationEnabledSetting,Return the enabled setting for an application.
android.content.pm.PackageManager.getApplicationEnabledSetting,This returns the last value set by setApplicationEnabledSetting(java.lang.String int int) ; in most cases this value will be COMPONENT_ENABLED_STATE_DEFAULT since the value originally specified in the manifest has not been modified.
android.content.pm.PackageManager.getApplicationIcon,Retrieve the icon associated with an application. If it has not defined an icon the default app icon is returned. Does not return null.
android.content.pm.PackageManager.getApplicationIcon,Get application icon.
android.content.pm.PackageManager.getApplicationIcon,Retrieve the icon associated with an application.
android.content.pm.PackageManager.getApplicationIcon,If it has not defined an icon the default app icon is returned.
android.content.pm.PackageManager.getApplicationIcon,Does not return null.
android.content.pm.PackageManager.getApplicationIcon,Retrieve the icon associated with an application. Given the name of the application's package retrieves the information about it and calls getApplicationIcon() to return its icon. If the application cannot be found NameNotFoundException is thrown.
android.content.pm.PackageManager.getApplicationIcon,Get application icon.
android.content.pm.PackageManager.getApplicationIcon,Retrieve the icon associated with an application.
android.content.pm.PackageManager.getApplicationIcon,Given the name of the application's package retrieves the information about it and calls getApplicationIcon() to return its icon.
android.content.pm.PackageManager.getApplicationIcon,If the application cannot be found NameNotFoundException is thrown.
android.content.pm.PackageManager.getApplicationInfo,Retrieve all of the information we know about a particular package/application.
android.content.pm.PackageManager.getApplicationInfo,Get application info.
android.content.pm.PackageManager.getApplicationLabel,Return the label to use for this application.
android.content.pm.PackageManager.getApplicationLabel,Get application label.
android.content.pm.PackageManager.getApplicationLogo,Retrieve the logo associated with an application. Given the name of the application's package retrieves the information about it and calls getApplicationLogo() to return its logo. If the application cannot be found NameNotFoundException is thrown.
android.content.pm.PackageManager.getApplicationLogo,Get application logo.
android.content.pm.PackageManager.getApplicationLogo,Retrieve the logo associated with an application.
android.content.pm.PackageManager.getApplicationLogo,Given the name of the application's package retrieves the information about it and calls getApplicationLogo() to return its logo.
android.content.pm.PackageManager.getApplicationLogo,If the application cannot be found NameNotFoundException is thrown.
android.content.pm.PackageManager.getApplicationLogo,Retrieve the logo associated with an application. If it has not specified a logo this method returns null.
android.content.pm.PackageManager.getApplicationLogo,Get application logo.
android.content.pm.PackageManager.getApplicationLogo,Retrieve the logo associated with an application.
android.content.pm.PackageManager.getApplicationLogo,If it has not specified a logo this method returns null.
android.content.pm.PackageManager.getComponentEnabledSetting,Return the enabled setting for a package component (activity receiver service provider). This returns the last value set by setComponentEnabledSetting(android.content.ComponentName int int) ; in most cases this value will be COMPONENT_ENABLED_STATE_DEFAULT since the value originally specified in the manifest has not been modified.
android.content.pm.PackageManager.getComponentEnabledSetting,Get component enabled setting.
android.content.pm.PackageManager.getComponentEnabledSetting,Return the enabled setting for a package component (activity receiver service provider).
android.content.pm.PackageManager.getComponentEnabledSetting,This returns the last value set by setComponentEnabledSetting(android.content.ComponentName int int) ; in most cases this value will be COMPONENT_ENABLED_STATE_DEFAULT since the value originally specified in the manifest has not been modified.
android.content.pm.PackageManager.getDefaultActivityIcon,Return the generic icon for an activity that is used when no specific icon is defined.
android.content.pm.PackageManager.getDefaultActivityIcon,Get default activity icon.
android.content.pm.PackageManager.getDrawable,Retrieve an image from a package. This is a low-level API used by the various package manager info structures (such as ComponentInfo to implement retrieval of their associated icon.
android.content.pm.PackageManager.getDrawable,Get drawable.
android.content.pm.PackageManager.getDrawable,Retrieve an image from a package.
android.content.pm.PackageManager.getDrawable,This is a low-level API used by the various package manager info structures (such as ComponentInfo to implement retrieval of their associated icon.
android.content.pm.PackageManager.getInstalledApplications,Return a List of all application packages that are installed for the current user. If flag GET_UNINSTALLED_PACKAGES has been set a list of all applications including those deleted with DONT_DELETE_DATA (partially installed apps with data directory) will be returned.
android.content.pm.PackageManager.getInstalledApplications,Get installed applications.
android.content.pm.PackageManager.getInstalledApplications,Return a List of all application packages that are installed for the current user.
android.content.pm.PackageManager.getInstalledApplications,If flag GET_UNINSTALLED_PACKAGES has been set a list of all applications including those deleted with DONT_DELETE_DATA (partially installed apps with data directory) will be returned.
android.content.pm.PackageManager.getInstalledPackages,Return a List of all packages that are installed for the current user.
android.content.pm.PackageManager.getInstalledPackages,Get installed packages.
android.content.pm.PackageManager.getInstallerPackageName,Retrieve the package name of the application that installed a package. This identifies which market the package came from.
android.content.pm.PackageManager.getInstallerPackageName,Get installer package name.
android.content.pm.PackageManager.getInstallerPackageName,Retrieve the package name of the application that installed a package.
android.content.pm.PackageManager.getInstallerPackageName,This identifies which market the package came from.
android.content.pm.PackageManager.getInstrumentationInfo,Retrieve all of the information we know about a particular instrumentation class.
android.content.pm.PackageManager.getInstrumentationInfo,Get instrumentation info.
android.content.pm.PackageManager.getLaunchIntentForPackage,"Returns a ""good"" intent to launch a front-door activity in a package. This is used for example to implement an ""open"" button when browsing through packages. The current implementation looks first for a main activity in the category Intent#CATEGORY_INFO and next for a main activity in the category Intent#CATEGORY_LAUNCHER. Returns null if neither are found."
android.content.pm.PackageManager.getLaunchIntentForPackage,Get launch intent for package.
android.content.pm.PackageManager.getLaunchIntentForPackage,"Returns a ""good"" intent to launch a front-door activity in a package."
android.content.pm.PackageManager.getLaunchIntentForPackage,"This is used for example to implement an ""open"" button when browsing through packages."
android.content.pm.PackageManager.getLaunchIntentForPackage,The current implementation looks first for a main activity in the category Intent#CATEGORY_INFO and next for a main activity in the category Intent#CATEGORY_LAUNCHER.
android.content.pm.PackageManager.getLaunchIntentForPackage,Returns null if neither are found.
android.content.pm.PackageManager.getNameForUid,Retrieve the official name associated with a uid. This name is guaranteed to never change though it is possible for the underlying uid to be changed. That is if you are storing information about uids in persistent storage you should use the string returned by this function instead of the raw uid.
android.content.pm.PackageManager.getNameForUid,Get name for uid.
android.content.pm.PackageManager.getNameForUid,Retrieve the official name associated with a uid.
android.content.pm.PackageManager.getNameForUid,This name is guaranteed to never change though it is possible for the underlying uid to be changed.
android.content.pm.PackageManager.getNameForUid,That is if you are storing information about uids in persistent storage you should use the string returned by this function instead of the raw uid.
android.content.pm.PackageManager.getPackageArchiveInfo,Retrieve overall information about an application package defined in a package archive file.
android.content.pm.PackageManager.getPackageArchiveInfo,Get package archive info.
android.content.pm.PackageManager.getPackageGids,Return an array of all of the POSIX secondary group IDs that have been assigned to the given package. Note that the same package may have different GIDs under different UserHandle on the same device.
android.content.pm.PackageManager.getPackageGids,Get package gids.
android.content.pm.PackageManager.getPackageGids,Return an array of all of the POSIX secondary group IDs that have been assigned to the given package.
android.content.pm.PackageManager.getPackageGids,Note that the same package may have different GIDs under different UserHandle on the same device.
android.content.pm.PackageManager.getPackageGids,Return an array of all of the POSIX secondary group IDs that have been assigned to the given package. Note that the same package may have different GIDs under different UserHandle on the same device.
android.content.pm.PackageManager.getPackageGids,Get package gids.
android.content.pm.PackageManager.getPackageGids,Return an array of all of the POSIX secondary group IDs that have been assigned to the given package.
android.content.pm.PackageManager.getPackageGids,Note that the same package may have different GIDs under different UserHandle on the same device.
android.content.pm.PackageManager.getPackageInfo,Retrieve overall information about an application package that is installed on the system.
android.content.pm.PackageManager.getPackageInfo,Get package info.
android.content.pm.PackageManager.getPackageInfo,Retrieve overall information about an application package that is installed on the system. This method can be used for retrieving information about packages for which multiple versions can be installed at the time. Currently only packages hosting static shared libraries can have multiple installed versions. The method can also be used to get info for a package that has a single version installed by passing VERSION_CODE_HIGHEST in the VersionedPackage constructor.
android.content.pm.PackageManager.getPackageInfo,Get package info.
android.content.pm.PackageManager.getPackageInfo,Retrieve overall information about an application package that is installed on the system.
android.content.pm.PackageManager.getPackageInfo,This method can be used for retrieving information about packages for which multiple versions can be installed at the time.
android.content.pm.PackageManager.getPackageInfo,Currently only packages hosting static shared libraries can have multiple installed versions.
android.content.pm.PackageManager.getPackageInfo,The method can also be used to get info for a package that has a single version installed by passing VERSION_CODE_HIGHEST in the VersionedPackage constructor.
android.content.pm.PackageManager.getPackagesForUid,"Retrieve the names of all packages that are associated with a particular user id. In most cases this will be a single package name the package that has been assigned that user id. Where there are multiple packages sharing the same user id through the ""sharedUserId"" mechanism all packages with that id will be returned."
android.content.pm.PackageManager.getPackagesForUid,Get packages for uid.
android.content.pm.PackageManager.getPackagesForUid,Retrieve the names of all packages that are associated with a particular user id.
android.content.pm.PackageManager.getPackagesForUid,In most cases this will be a single package name the package that has been assigned that user id.
android.content.pm.PackageManager.getPackagesForUid,"Where there are multiple packages sharing the same user id through the ""sharedUserId"" mechanism all packages with that id will be returned."
android.content.pm.PackageManager.getPackagesHoldingPermissions,Return a List of all installed packages that are currently holding any of the given permissions.
android.content.pm.PackageManager.getPackagesHoldingPermissions,Get packages holding permissions.
android.content.pm.PackageManager.getPermissionGroupInfo,Retrieve all of the information we know about a particular group of permissions.
android.content.pm.PackageManager.getPermissionGroupInfo,Get permission group info.
android.content.pm.PackageManager.getPermissionInfo,Retrieve all of the information we know about a particular permission.
android.content.pm.PackageManager.getPermissionInfo,Get permission info.
android.content.pm.PackageManager.getPreferredActivities,This method was deprecated in API level 29. This function no longer does anything. It is the platform's responsibility to assign preferred activities and this cannot be modified directly. To determine the activities resolved by the platform use resolveActivity(Intent int) or queryIntentActivities(Intent int). To configure an app to be responsible for a particular role and to check current role holders see RoleManager. Retrieve all preferred activities previously added with addPreferredActivity(IntentFilter int ComponentName[] ComponentName) that are currently registered with the system.
android.content.pm.PackageManager.getPreferredActivities,Get preferred activities.
android.content.pm.PackageManager.getPreferredActivities,This method was deprecated in API level 29.
android.content.pm.PackageManager.getPreferredActivities,This function no longer does anything.
android.content.pm.PackageManager.getPreferredActivities,It is the platform's responsibility to assign preferred activities and this cannot be modified directly.
android.content.pm.PackageManager.getPreferredActivities,To determine the activities resolved by the platform use resolveActivity(Intent int) or queryIntentActivities(Intent int).
android.content.pm.PackageManager.getPreferredActivities,To configure an app to be responsible for a particular role and to check current role holders see RoleManager.
android.content.pm.PackageManager.getPreferredActivities,Retrieve all preferred activities previously added with addPreferredActivity(IntentFilter int ComponentName[] ComponentName) that are currently registered with the system.
android.content.pm.PackageManager.getPreferredPackages,This method was deprecated in API level 29. This function no longer does anything. It is the platform's responsibility to assign preferred activities and this cannot be modified directly. To determine the activities resolved by the platform use resolveActivity(Intent int) or queryIntentActivities(Intent int). To configure an app to be responsible for a particular role and to check current role holders see RoleManager. Retrieve the list of all currently configured preferred packages. The first package on the list is the most preferred the last is the least preferred.
android.content.pm.PackageManager.getPreferredPackages,Get preferred packages.
android.content.pm.PackageManager.getPreferredPackages,This method was deprecated in API level 29.
android.content.pm.PackageManager.getPreferredPackages,This function no longer does anything.
android.content.pm.PackageManager.getPreferredPackages,It is the platform's responsibility to assign preferred activities and this cannot be modified directly.
android.content.pm.PackageManager.getPreferredPackages,To determine the activities resolved by the platform use resolveActivity(Intent int) or queryIntentActivities(Intent int).
android.content.pm.PackageManager.getPreferredPackages,To configure an app to be responsible for a particular role and to check current role holders see RoleManager.
android.content.pm.PackageManager.getPreferredPackages,Retrieve the list of all currently configured preferred packages.
android.content.pm.PackageManager.getPreferredPackages,The first package on the list is the most preferred the last is the least preferred.
android.content.pm.PackageManager.getProviderInfo,Retrieve all of the information we know about a particular content provider class.
android.content.pm.PackageManager.getProviderInfo,Get provider info.
android.content.pm.PackageManager.getReceiverInfo,Retrieve all of the information we know about a particular receiver class.
android.content.pm.PackageManager.getReceiverInfo,Get receiver info.
android.content.pm.PackageManager.getResourcesForActivity,Retrieve the resources associated with an activity. Given the full name of an activity retrieves the information about it and calls getResources() to return its application's resources. If the activity cannot be found NameNotFoundException is thrown.
android.content.pm.PackageManager.getResourcesForActivity,Get resources for activity.
android.content.pm.PackageManager.getResourcesForActivity,Retrieve the resources associated with an activity.
android.content.pm.PackageManager.getResourcesForActivity,Given the full name of an activity retrieves the information about it and calls getResources() to return its application's resources.
android.content.pm.PackageManager.getResourcesForActivity,If the activity cannot be found NameNotFoundException is thrown.
android.content.pm.PackageManager.getResourcesForApplication,Retrieve the resources for an application. Throws NameNotFoundException if the package is no longer installed.
android.content.pm.PackageManager.getResourcesForApplication,Get resources for application.
android.content.pm.PackageManager.getResourcesForApplication,Retrieve the resources for an application.
android.content.pm.PackageManager.getResourcesForApplication,Throws NameNotFoundException if the package is no longer installed.
android.content.pm.PackageManager.getResourcesForApplication,Retrieve the resources associated with an application. Given the full package name of an application retrieves the information about it and calls getResources() to return its application's resources. If the appPackageName cannot be found NameNotFoundException is thrown.
android.content.pm.PackageManager.getResourcesForApplication,Get resources for application.
android.content.pm.PackageManager.getResourcesForApplication,Retrieve the resources associated with an application.
android.content.pm.PackageManager.getResourcesForApplication,Given the full package name of an application retrieves the information about it and calls getResources() to return its application's resources.
android.content.pm.PackageManager.getResourcesForApplication,If the appPackageName cannot be found NameNotFoundException is thrown.
android.content.pm.PackageManager.getServiceInfo,Retrieve all of the information we know about a particular service class.
android.content.pm.PackageManager.getServiceInfo,Get service info.
android.content.pm.PackageManager.getSystemAvailableFeatures,Get a list of features that are available on the system.
android.content.pm.PackageManager.getSystemAvailableFeatures,Get system available features.
android.content.pm.PackageManager.getSystemSharedLibraryNames,Get a list of shared libraries that are available on the system.
android.content.pm.PackageManager.getSystemSharedLibraryNames,Get system shared library names.
android.content.pm.PackageManager.getText,Retrieve text from a package. This is a low-level API used by the various package manager info structures (such as ComponentInfo to implement retrieval of their associated labels and other text.
android.content.pm.PackageManager.getText,Get text.
android.content.pm.PackageManager.getText,Retrieve text from a package.
android.content.pm.PackageManager.getText,This is a low-level API used by the various package manager info structures (such as ComponentInfo to implement retrieval of their associated labels and other text.
android.content.pm.PackageManager.getXml,Retrieve an XML file from a package. This is a low-level API used to retrieve XML meta data.
android.content.pm.PackageManager.getXml,Get xml.
android.content.pm.PackageManager.getXml,Retrieve an XML file from a package.
android.content.pm.PackageManager.getXml,This is a low-level API used to retrieve XML meta data.
android.content.pm.PackageManager.hasSystemFeature,Check whether the given feature name is one of the available features as returned by getSystemAvailableFeatures(). This tests for the presence of any version of the given feature name; use hasSystemFeature(java.lang.String int) to check for a minimum version.
android.content.pm.PackageManager.hasSystemFeature,Has system feature.
android.content.pm.PackageManager.hasSystemFeature,Check whether the given feature name is one of the available features as returned by getSystemAvailableFeatures().
android.content.pm.PackageManager.hasSystemFeature,This tests for the presence of any version of the given feature name; use hasSystemFeature(java.lang.String int) to check for a minimum version.
android.content.pm.PackageManager.hasSystemFeature,Check whether the given feature name and version is one of the available features as returned by getSystemAvailableFeatures(). Since features are defined to always be backwards compatible this returns true if the available feature version is greater than or equal to the requested version.
android.content.pm.PackageManager.hasSystemFeature,Has system feature.
android.content.pm.PackageManager.hasSystemFeature,Check whether the given feature name and version is one of the available features as returned by getSystemAvailableFeatures().
android.content.pm.PackageManager.hasSystemFeature,Since features are defined to always be backwards compatible this returns true if the available feature version is greater than or equal to the requested version.
android.content.pm.PackageManager.isSafeMode,Return whether the device has been booted into safe mode.
android.content.pm.PackageManager.isSafeMode,Is safe mode.
android.content.pm.PackageManager.queryBroadcastReceivers,Retrieve all receivers that can handle a broadcast of the given intent.
android.content.pm.PackageManager.queryBroadcastReceivers,Query broadcast receivers.
android.content.pm.PackageManager.queryContentProviders,Retrieve content provider information. Note: unlike most other methods an empty result set is indicated by a null return instead of an empty list.
android.content.pm.PackageManager.queryContentProviders,Query content providers.
android.content.pm.PackageManager.queryContentProviders,Retrieve content provider information.
android.content.pm.PackageManager.queryContentProviders,Note: unlike most other methods an empty result set is indicated by a null return instead of an empty list.
android.content.pm.PackageManager.queryInstrumentation,Retrieve information about available instrumentation code. May be used to retrieve either all instrumentation code or only the code targeting a particular package.
android.content.pm.PackageManager.queryInstrumentation,Query instrumentation.
android.content.pm.PackageManager.queryInstrumentation,Retrieve information about available instrumentation code.
android.content.pm.PackageManager.queryInstrumentation,May be used to retrieve either all instrumentation code or only the code targeting a particular package.
android.content.pm.PackageManager.queryIntentActivities,Retrieve all activities that can be performed for the given intent.
android.content.pm.PackageManager.queryIntentActivities,Query intent activities.
android.content.pm.PackageManager.queryIntentActivityOptions,Retrieve a set of activities that should be presented to the user as similar options. This is like queryIntentActivities(Intent int) except it also allows you to supply a list of more explicit Intents that you would like to resolve to particular options and takes care of returning the final ResolveInfo list in a reasonable order with no duplicates based on those inputs.
android.content.pm.PackageManager.queryIntentActivityOptions,Query intent activity options.
android.content.pm.PackageManager.queryIntentActivityOptions,Retrieve a set of activities that should be presented to the user as similar options.
android.content.pm.PackageManager.queryIntentActivityOptions,This is like queryIntentActivities(Intent int) except it also allows you to supply a list of more explicit Intents that you would like to resolve to particular options and takes care of returning the final ResolveInfo list in a reasonable order with no duplicates based on those inputs.
android.content.pm.PackageManager.queryIntentContentProviders,Retrieve all providers that can match the given intent.
android.content.pm.PackageManager.queryIntentContentProviders,Query intent content providers.
android.content.pm.PackageManager.queryIntentServices,Retrieve all services that can match the given intent.
android.content.pm.PackageManager.queryIntentServices,Query intent services.
android.content.pm.PackageManager.queryPermissionsByGroup,Query for all of the permissions associated with a particular group.
android.content.pm.PackageManager.queryPermissionsByGroup,Query permissions by group.
android.content.pm.PackageManager.removePackageFromPreferred,This method was deprecated in API level 15. This function no longer does anything. It is the platform's responsibility to assign preferred activities and this cannot be modified directly. To determine the activities resolved by the platform use resolveActivity(Intent int) or queryIntentActivities(Intent int). To configure an app to be responsible for a particular role and to check current role holders see RoleManager.
android.content.pm.PackageManager.removePackageFromPreferred,Remove package from preferred.
android.content.pm.PackageManager.removePackageFromPreferred,This method was deprecated in API level 15.
android.content.pm.PackageManager.removePackageFromPreferred,This function no longer does anything.
android.content.pm.PackageManager.removePackageFromPreferred,It is the platform's responsibility to assign preferred activities and this cannot be modified directly.
android.content.pm.PackageManager.removePackageFromPreferred,To determine the activities resolved by the platform use resolveActivity(Intent int) or queryIntentActivities(Intent int).
android.content.pm.PackageManager.removePackageFromPreferred,To configure an app to be responsible for a particular role and to check current role holders see RoleManager.
android.content.pm.PackageManager.removePermission,Removes a permission that was previously added with addPermission(android.content.pm.PermissionInfo). The same ownership rules apply -- you are only allowed to remove permissions that you are allowed to add.
android.content.pm.PackageManager.removePermission,Remove permission.
android.content.pm.PackageManager.removePermission,Removes a permission that was previously added with addPermission(android.content.pm.PermissionInfo).
android.content.pm.PackageManager.removePermission,The same ownership rules apply -- you are only allowed to remove permissions that you are allowed to add.
android.content.pm.PackageManager.resolveActivity,Determine the best action to perform for a given Intent. This is how Intent#resolveActivity finds an activity if a class has not been explicitly specified. Note: if using an implicit Intent (without an explicit ComponentName specified) be sure to consider whether to set the MATCH_DEFAULT_ONLY only flag. You need to do so to resolve the activity in the same way that Context.startActivity(Intent) and Intent.resolveActivity(PackageManager) do.
android.content.pm.PackageManager.resolveActivity,Resolve activity.
android.content.pm.PackageManager.resolveActivity,Determine the best action to perform for a given Intent.
android.content.pm.PackageManager.resolveActivity,This is how Intent#resolveActivity finds an activity if a class has not been explicitly specified.
android.content.pm.PackageManager.resolveActivity,Note: if using an implicit Intent (without an explicit ComponentName specified) be sure to consider whether to set the MATCH_DEFAULT_ONLY only flag.
android.content.pm.PackageManager.resolveActivity,You need to do so to resolve the activity in the same way that Context.startActivity(Intent) and Intent.resolveActivity(PackageManager) do.
android.content.pm.PackageManager.resolveContentProvider,Find a single content provider by its authority. Example:.
android.content.pm.PackageManager.resolveContentProvider,Resolve content provider.
android.content.pm.PackageManager.resolveContentProvider,Find a single content provider by its authority.
android.content.pm.PackageManager.resolveContentProvider,Example:.
android.content.pm.PackageManager.resolveService,Determine the best service to handle for a given Intent.
android.content.pm.PackageManager.resolveService,Resolve service.
android.content.pm.PackageManager.setApplicationEnabledSetting,Set the enabled setting for an application This setting will override any enabled state which may have been set by the application in its manifest. It also overrides the enabled state set in the manifest for any of the application's components. It does not override any enabled state set by setComponentEnabledSetting(ComponentName int int) for any of the application's components.
android.content.pm.PackageManager.setApplicationEnabledSetting,Set application enabled setting.
android.content.pm.PackageManager.setApplicationEnabledSetting,Set the enabled setting for an application This setting will override any enabled state which may have been set by the application in its manifest.
android.content.pm.PackageManager.setApplicationEnabledSetting,It also overrides the enabled state set in the manifest for any of the application's components.
android.content.pm.PackageManager.setApplicationEnabledSetting,It does not override any enabled state set by setComponentEnabledSetting(ComponentName int int) for any of the application's components.
android.content.pm.PackageManager.setComponentEnabledSetting,Set the enabled setting for a package component (activity receiver service provider). This setting will override any enabled state which may have been set by the component in its manifest.
android.content.pm.PackageManager.setComponentEnabledSetting,Set component enabled setting.
android.content.pm.PackageManager.setComponentEnabledSetting,Set the enabled setting for a package component (activity receiver service provider).
android.content.pm.PackageManager.setComponentEnabledSetting,This setting will override any enabled state which may have been set by the component in its manifest.
android.content.pm.PackageManager.setInstallerPackageName,Change the installer associated with a given package. There are limitations on how the installer package can be changed; in particular: A SecurityException will be thrown if installerPackageName is not signed with the same certificate as the calling application. A SecurityException will be thrown if targetPackage already has an installer package and that installer package is not signed with the same certificate as the calling application.
android.content.pm.PackageManager.setInstallerPackageName,Set installer package name.
android.content.pm.PackageManager.setInstallerPackageName,Change the installer associated with a given package.
android.content.pm.PackageManager.setInstallerPackageName,There are limitations on how the installer package can be changed; in particular: A SecurityException will be thrown if installerPackageName is not signed with the same certificate as the calling application.
android.content.pm.PackageManager.setInstallerPackageName,A SecurityException will be thrown if targetPackage already has an installer package and that installer package is not signed with the same certificate as the calling application.
android.content.pm.PackageManager.verifyPendingInstall,Allows a package listening to the Intent#ACTION_PACKAGE_NEEDS_VERIFICATION to respond to the package manager. The response must include the verificationCode which is one of PackageManager#VERIFICATION_ALLOW or PackageManager#VERIFICATION_REJECT.
android.content.pm.PackageManager.verifyPendingInstall,Verify pending install.
android.content.pm.PackageManager.verifyPendingInstall,Allows a package listening to the Intent#ACTION_PACKAGE_NEEDS_VERIFICATION to respond to the package manager.
android.content.pm.PackageManager.verifyPendingInstall,The response must include the verificationCode which is one of PackageManager#VERIFICATION_ALLOW or PackageManager#VERIFICATION_REJECT.
android.content.pm.ResolveInfo.getIconResource,Return the icon resource identifier to use for this match. If the match defines an icon that is used; else if the activity defines an icon that is used; else the application icon is used.
android.content.pm.ResolveInfo.getIconResource,Get icon resource.
android.content.pm.ResolveInfo.getIconResource,Return the icon resource identifier to use for this match.
android.content.pm.ResolveInfo.getIconResource,If the match defines an icon that is used; else if the activity defines an icon that is used; else the application icon is used.
android.content.pm.ResolveInfo.loadIcon,Retrieve the current graphical icon associated with this resolution. This will call back on the given PackageManager to load the icon from the application.
android.content.pm.ResolveInfo.loadIcon,Load icon.
android.content.pm.ResolveInfo.loadIcon,Retrieve the current graphical icon associated with this resolution.
android.content.pm.ResolveInfo.loadIcon,This will call back on the given PackageManager to load the icon from the application.
android.content.pm.ResolveInfo.loadLabel,Retrieve the current textual label associated with this resolution. This will call back on the given PackageManager to load the label from the application.
android.content.pm.ResolveInfo.loadLabel,Load label.
android.content.pm.ResolveInfo.loadLabel,Retrieve the current textual label associated with this resolution.
android.content.pm.ResolveInfo.loadLabel,This will call back on the given PackageManager to load the label from the application.
android.content.pm.Signature.toCharsString,Return the result of toChars() as a String.
android.content.pm.Signature.toCharsString,To chars string.
android.content.AsyncQueryHandler.startQuery,This method begins an asynchronous query. When the query is done onQueryComplete(int Object Cursor) is called.
android.content.AsyncQueryHandler.startQuery,Start query.
android.content.AsyncQueryHandler.startQuery,This method begins an asynchronous query.
android.content.AsyncQueryHandler.startQuery,When the query is done onQueryComplete(int Object Cursor) is called.
android.content.BroadcastReceiver.abortBroadcast,Sets the flag indicating that this receiver should abort the current broadcast; only works with broadcasts sent through Context#sendOrderedBroadcast(Intent String). This will prevent any other broadcast receivers from receiving the broadcast. It will still call onReceive(Context Intent) of the BroadcastReceiver that the caller of Context#sendOrderedBroadcast(Intent String) passed in. This method does not work with non-ordered broadcasts such as those sent with Context#sendBroadcast(Intent).
android.content.BroadcastReceiver.abortBroadcast,Abort broadcast.
android.content.BroadcastReceiver.abortBroadcast,Sets the flag indicating that this receiver should abort the current broadcast; only works with broadcasts sent through Context#sendOrderedBroadcast(Intent String).
android.content.BroadcastReceiver.abortBroadcast,This will prevent any other broadcast receivers from receiving the broadcast.
android.content.BroadcastReceiver.abortBroadcast,It will still call onReceive(Context Intent) of the BroadcastReceiver that the caller of Context#sendOrderedBroadcast(Intent String) passed in.
android.content.BroadcastReceiver.abortBroadcast,This method does not work with non-ordered broadcasts such as those sent with Context#sendBroadcast(Intent).
android.content.BroadcastReceiver.onReceive,This method is called when the BroadcastReceiver is receiving an Intent broadcast. During this time you can use the other methods on BroadcastReceiver to view/modify the current result values. This method is always called within the main thread of its process unless you explicitly asked for it to be scheduled on a different thread using Context.registerReceiver(BroadcastReceiver IntentFilter String android.os.Handler). When it runs on the main thread you should never perform long-running operations in it (there is a timeout of 10 seconds that the system allows before considering the receiver to be blocked and a candidate to be killed). You cannot launch a popup dialog in your implementation of onReceive(). If this BroadcastReceiver was launched through a <receiver> tag then the object is no longer alive after returning from this function. This means you should not perform any operations that return a result to you asynchronously. If you need to perform any follow up background work schedule a JobService with JobScheduler. If you wish to interact with a service that is already running and previously bound using bindService() you can use peekService(Context Intent). The Intent filters used in Context.registerReceiver(BroadcastReceiver IntentFilter) and in application manifests are not guaranteed to be exclusive. They are hints to the operating system about how to find suitable recipients. It is possible for senders to force delivery to specific recipients bypassing filter resolution. For this reason onReceive() implementations should respond only to known actions ignoring any unexpected Intents that they may receive.
android.content.BroadcastReceiver.onReceive,On receive.
android.content.BroadcastReceiver.onReceive,This method is called when the BroadcastReceiver is receiving an Intent broadcast.
android.content.BroadcastReceiver.onReceive,During this time you can use the other methods on BroadcastReceiver to view/modify the current result values.
android.content.BroadcastReceiver.onReceive,This method is always called within the main thread of its process unless you explicitly asked for it to be scheduled on a different thread using Context.registerReceiver(BroadcastReceiver IntentFilter String android.os.Handler).
android.content.BroadcastReceiver.onReceive,When it runs on the main thread you should never perform long-running operations in it (there is a timeout of 10 seconds that the system allows before considering the receiver to be blocked and a candidate to be killed).
android.content.BroadcastReceiver.onReceive,You cannot launch a popup dialog in your implementation of onReceive().
android.content.BroadcastReceiver.onReceive,If this BroadcastReceiver was launched through a <receiver> tag then the object is no longer alive after returning from this function.
android.content.BroadcastReceiver.onReceive,This means you should not perform any operations that return a result to you asynchronously.
android.content.BroadcastReceiver.onReceive,If you need to perform any follow up background work schedule a JobService with JobScheduler.
android.content.BroadcastReceiver.onReceive,If you wish to interact with a service that is already running and previously bound using bindService() you can use peekService(Context Intent).
android.content.BroadcastReceiver.onReceive,The Intent filters used in Context.registerReceiver(BroadcastReceiver IntentFilter) and in application manifests are not guaranteed to be exclusive.
android.content.BroadcastReceiver.onReceive,They are hints to the operating system about how to find suitable recipients.
android.content.BroadcastReceiver.onReceive,It is possible for senders to force delivery to specific recipients bypassing filter resolution.
android.content.BroadcastReceiver.onReceive,For this reason onReceive() implementations should respond only to known actions ignoring any unexpected Intents that they may receive.
android.content.ClipData.getDescription,Return the ClipDescription associated with this data describing what it contains.
android.content.ClipData.getDescription,Get description.
android.content.ClipData.getItemAt,Return a single item inside of the clip data. The index can range from 0 to getItemCount() -1.
android.content.ClipData.getItemAt,Get item at.
android.content.ClipData.getItemAt,Return a single item inside of the clip data.
android.content.ClipData.getItemAt,The index can range from 0 to getItemCount() -1.
android.content.ClipData.getItemCount,Return the number of items in the clip data.
android.content.ClipData.getItemCount,Get item count.
android.content.ClipData.newPlainText,Create a new ClipData holding data of the type ClipDescription#MIMETYPE_TEXT_PLAIN.
android.content.ClipData.newPlainText,New plain text.
android.content.ClipDescription.getLabel,Return the label for this clip.
android.content.ClipDescription.getLabel,Get label.
android.content.ClipDescription.getMimeType,Return one of the possible clip MIME types.
android.content.ClipDescription.getMimeType,Get mime type.
android.content.ClipDescription.getMimeTypeCount,Return the number of MIME types the clip is available in.
android.content.ClipDescription.getMimeTypeCount,Get mime type count.
android.content.ClipDescription.hasMimeType,Check whether the clip description contains the given MIME type.
android.content.ClipDescription.hasMimeType,Has mime type.
android.content.ComponentName.flattenToShortString,The same as flattenToString() but abbreviates the class name if it is a suffix of the package. The result can still be used with unflattenFromString(java.lang.String).
android.content.ComponentName.flattenToShortString,Flatten to short string.
android.content.ComponentName.flattenToShortString,The same as flattenToString() but abbreviates the class name if it is a suffix of the package.
android.content.ComponentName.flattenToShortString,The result can still be used with unflattenFromString(java.lang.String).
android.content.ComponentName.flattenToString,Return a String that unambiguously describes both the package and class names contained in the ComponentName. You can later recover the ComponentName from this string through unflattenFromString(java.lang.String).
android.content.ComponentName.flattenToString,Flatten to string.
android.content.ComponentName.flattenToString,Return a String that unambiguously describes both the package and class names contained in the ComponentName.
android.content.ComponentName.flattenToString,You can later recover the ComponentName from this string through unflattenFromString(java.lang.String).
android.content.ComponentName.getClassName,Return the class name of this component.
android.content.ComponentName.getClassName,Get class name.
android.content.ComponentName.getPackageName,Return the package name of this component.
android.content.ComponentName.getPackageName,Get package name.
android.content.ComponentName.getShortClassName,Return the class name either fully qualified or in a shortened form (with a leading '.') if it is a suffix of the package.
android.content.ComponentName.getShortClassName,Get short class name.
android.content.ComponentName.toShortString,Return string representation of this class without the class's name as a prefix.
android.content.ComponentName.toShortString,To short string.
android.content.ComponentName.unflattenFromString,"Recover a ComponentName from a String that was previously created with flattenToString(). It splits the string at the first '/' taking the part before as the package name and the part after as the class name. As a special convenience (to use for example when parsing component names on the command line) if the '/' is immediately followed by a '.' then the final class name will be the concatenation of the package name with the string following the '/'. Thus ""com.foo/.Blah"" becomes package=""com.foo"" class=""com.foo.Blah""."
android.content.ComponentName.unflattenFromString,Unflatten from string.
android.content.ComponentName.unflattenFromString,Recover a ComponentName from a String that was previously created with flattenToString().
android.content.ComponentName.unflattenFromString,It splits the string at the first '/' taking the part before as the package name and the part after as the class name.
android.content.ComponentName.unflattenFromString,As a special convenience (to use for example when parsing component names on the command line) if the '/' is immediately followed by a '.' then the final class name will be the concatenation of the package name with the string following the '/'.
android.content.ComponentName.unflattenFromString,"Thus ""com.foo/.Blah"" becomes package=""com.foo"" class=""com.foo.Blah""."
android.content.ComponentName.writeToParcel,Write a ComponentName to a Parcel handling null pointers. Must be read with readFromParcel(android.os.Parcel).
android.content.ComponentName.writeToParcel,Write to parcel.
android.content.ComponentName.writeToParcel,Write a ComponentName to a Parcel handling null pointers.
android.content.ComponentName.writeToParcel,Must be read with readFromParcel(android.os.Parcel).
android.content.ComponentName.writeToParcel,Flatten this object in to a Parcel.
android.content.ComponentName.writeToParcel,Write to parcel.
android.content.ContentProvider.applyBatch,.
android.content.ContentProvider.applyBatch,Apply batch.
android.content.ContentProvider.applyBatch,Override this to handle requests to perform a batch of operations or the default implementation will iterate over the operations and call ContentProviderOperation#apply on each of them. If all calls to ContentProviderOperation#apply succeed then a ContentProviderResult array with as many elements as there were operations will be returned. If any of the calls fail it is up to the implementation how many of the others take effect. This method can be called from multiple threads as described in Processes and Threads.
android.content.ContentProvider.applyBatch,Apply batch.
android.content.ContentProvider.applyBatch,Override this to handle requests to perform a batch of operations or the default implementation will iterate over the operations and call ContentProviderOperation#apply on each of them.
android.content.ContentProvider.applyBatch,If all calls to ContentProviderOperation#apply succeed then a ContentProviderResult array with as many elements as there were operations will be returned.
android.content.ContentProvider.applyBatch,If any of the calls fail it is up to the implementation how many of the others take effect.
android.content.ContentProvider.applyBatch,This method can be called from multiple threads as described in Processes and Threads.
android.content.ContentProvider.attachInfo,After being instantiated this is called to tell the content provider about itself.
android.content.ContentProvider.attachInfo,Attach info.
android.content.ContentProvider.bulkInsert,Override this to handle requests to insert a set of new rows or the default implementation will iterate over the values and call insert(Uri ContentValues) on each of them. As a courtesy call ContentResolver#notifyChange(android.net.Uri android.database.ContentObserver) after inserting. This method can be called from multiple threads as described in Processes and Threads.
android.content.ContentProvider.bulkInsert,Bulk insert.
android.content.ContentProvider.bulkInsert,Override this to handle requests to insert a set of new rows or the default implementation will iterate over the values and call insert(Uri ContentValues) on each of them.
android.content.ContentProvider.bulkInsert,As a courtesy call ContentResolver#notifyChange(android.net.Uri android.database.ContentObserver) after inserting.
android.content.ContentProvider.bulkInsert,This method can be called from multiple threads as described in Processes and Threads.
android.content.ContentProvider.onConfigurationChanged,Called by the system when the device configuration changes while your component is running. Note that unlike activities other components are never restarted when a configuration changes: they must always deal with the results of the change such as by re-retrieving resources. At the time that this function has been called your Resources object will have been updated to return resource values matching the new configuration. For more information read Handling Runtime Changes. This method is always called on the application main thread and must not perform lengthy operations. The default content provider implementation does nothing. Override this method to take appropriate action. (Content providers do not usually care about things like screen orientation but may want to know about locale changes.).
android.content.ContentProvider.onConfigurationChanged,On configuration changed.
android.content.ContentProvider.onConfigurationChanged,Called by the system when the device configuration changes while your component is running.
android.content.ContentProvider.onConfigurationChanged,Note that unlike activities other components are never restarted when a configuration changes: they must always deal with the results of the change such as by re-retrieving resources.
android.content.ContentProvider.onConfigurationChanged,At the time that this function has been called your Resources object will have been updated to return resource values matching the new configuration.
android.content.ContentProvider.onConfigurationChanged,For more information read Handling Runtime Changes.
android.content.ContentProvider.onConfigurationChanged,This method is always called on the application main thread and must not perform lengthy operations.
android.content.ContentProvider.onConfigurationChanged,The default content provider implementation does nothing.
android.content.ContentProvider.onConfigurationChanged,Override this method to take appropriate action.
android.content.ContentProvider.onConfigurationChanged,(Content providers do not usually care about things like screen orientation but may want to know about locale changes.).
android.content.ContentProviderClient.getType,See ContentProvider#getType.
android.content.ContentProviderClient.getType,Get type.
android.content.ContentProviderClient.release,This method was deprecated in API level 24. replaced by close().
android.content.ContentProviderClient.release,Release.
android.content.ContentProviderClient.release,This method was deprecated in API level 24.
android.content.ContentProviderClient.release,replaced by close().
android.content.ContentProviderOperation.apply,Applies this operation using the given provider. The backRefs array is used to resolve any back references that were requested using Builder#withValueBackReferences(ContentValues) and Builder#withSelectionBackReference.
android.content.ContentProviderOperation.apply,Apply.
android.content.ContentProviderOperation.apply,Applies this operation using the given provider.
android.content.ContentProviderOperation.apply,The backRefs array is used to resolve any back references that were requested using Builder#withValueBackReferences(ContentValues) and Builder#withSelectionBackReference.
android.content.ContentProviderOperation.newInsert,Create a Builder suitable for building an insert ContentProviderOperation.
android.content.ContentProviderOperation.newInsert,New insert.
android.content.ContentProviderOperation.newUpdate,Create a Builder suitable for building an update ContentProviderOperation.
android.content.ContentProviderOperation.newUpdate,New update.
android.content.ContentResolver.acquireContentProviderClient,Returns a ContentProviderClient that is associated with the ContentProvider that services the content at uri starting the provider if necessary. Returns null if there is no provider associated wih the uri. The caller must indicate that they are done with the provider by calling ContentProviderClient#release which will allow the system to release the provider if it determines that there is no other reason for keeping it active.
android.content.ContentResolver.acquireContentProviderClient,Acquire content provider client.
android.content.ContentResolver.acquireContentProviderClient,Returns a ContentProviderClient that is associated with the ContentProvider that services the content at uri starting the provider if necessary.
android.content.ContentResolver.acquireContentProviderClient,Returns null if there is no provider associated wih the uri.
android.content.ContentResolver.acquireContentProviderClient,The caller must indicate that they are done with the provider by calling ContentProviderClient#release which will allow the system to release the provider if it determines that there is no other reason for keeping it active.
android.content.ContentResolver.acquireContentProviderClient,Returns a ContentProviderClient that is associated with the ContentProvider with the authority of name starting the provider if necessary. Returns null if there is no provider associated wih the uri. The caller must indicate that they are done with the provider by calling ContentProviderClient#release which will allow the system to release the provider if it determines that there is no other reason for keeping it active.
android.content.ContentResolver.acquireContentProviderClient,Acquire content provider client.
android.content.ContentResolver.acquireContentProviderClient,Returns a ContentProviderClient that is associated with the ContentProvider with the authority of name starting the provider if necessary.
android.content.ContentResolver.acquireContentProviderClient,Returns null if there is no provider associated wih the uri.
android.content.ContentResolver.acquireContentProviderClient,The caller must indicate that they are done with the provider by calling ContentProviderClient#release which will allow the system to release the provider if it determines that there is no other reason for keeping it active.
android.content.ContentResolver.applyBatch,Applies each of the ContentProviderOperation objects and returns an array of their results. Passes through OperationApplicationException which may be thrown by the call to ContentProviderOperation#apply. If all the applications succeed then a ContentProviderResult array with the same number of elements as the operations will be returned. It is implementation-specific how many if any operations will have been successfully applied if a call to apply results in a OperationApplicationException.
android.content.ContentResolver.applyBatch,Apply batch.
android.content.ContentResolver.applyBatch,Applies each of the ContentProviderOperation objects and returns an array of their results.
android.content.ContentResolver.applyBatch,Passes through OperationApplicationException which may be thrown by the call to ContentProviderOperation#apply.
android.content.ContentResolver.applyBatch,If all the applications succeed then a ContentProviderResult array with the same number of elements as the operations will be returned.
android.content.ContentResolver.applyBatch,It is implementation-specific how many if any operations will have been successfully applied if a call to apply results in a OperationApplicationException.
android.content.ContentResolver.bulkInsert,Inserts multiple rows into a table at the given URL. This function make no guarantees about the atomicity of the insertions.
android.content.ContentResolver.bulkInsert,Bulk insert.
android.content.ContentResolver.bulkInsert,Inserts multiple rows into a table at the given URL.
android.content.ContentResolver.bulkInsert,This function make no guarantees about the atomicity of the insertions.
android.content.ContentResolver.call,Call a provider-defined method. This can be used to implement read or write interfaces which are cheaper than using a Cursor and/or do not fit into the traditional table model.
android.content.ContentResolver.call,Call.
android.content.ContentResolver.call,Call a provider-defined method.
android.content.ContentResolver.call,This can be used to implement read or write interfaces which are cheaper than using a Cursor and/or do not fit into the traditional table model.
android.content.ContentResolver.call,.
android.content.ContentResolver.call,Call.
android.content.ContentResolver.delete,Deletes row(s) specified by a content URI. If the content provider supports transactions the deletion will be atomic.
android.content.ContentResolver.delete,Delete.
android.content.ContentResolver.delete,Deletes row(s) specified by a content URI.
android.content.ContentResolver.delete,If the content provider supports transactions the deletion will be atomic.
android.content.ContentResolver.getMasterSyncAutomatically,Gets the master auto-sync setting that applies to all the providers and accounts. If this is false then the per-provider auto-sync setting is ignored. This method requires the caller to hold the permission Manifest.permission.READ_SYNC_SETTINGS.
android.content.ContentResolver.getMasterSyncAutomatically,Get master sync automatically.
android.content.ContentResolver.getMasterSyncAutomatically,Gets the master auto-sync setting that applies to all the providers and accounts.
android.content.ContentResolver.getMasterSyncAutomatically,If this is false then the per-provider auto-sync setting is ignored.
android.content.ContentResolver.getMasterSyncAutomatically,This method requires the caller to hold the permission Manifest.permission.READ_SYNC_SETTINGS.
android.content.ContentResolver.getType,Return the MIME type of the given content URL.
android.content.ContentResolver.getType,Get type.
android.content.ContentResolver.insert,Inserts a row into a table at the given URL. If the content provider supports transactions the insertion will be atomic.
android.content.ContentResolver.insert,Insert.
android.content.ContentResolver.insert,Inserts a row into a table at the given URL.
android.content.ContentResolver.insert,If the content provider supports transactions the insertion will be atomic.
android.content.ContentResolver.notifyChange,Notify registered observers that a row was updated. To observe events sent through this call use registerContentObserver(android.net.Uri boolean android.database.ContentObserver). If syncToNetwork is true this will attempt to schedule a local sync using the sync adapter that's registered for the authority of the provided uri. No account will be passed to the sync adapter so all matching accounts will be synchronized. Starting in Build.VERSION_CODES.O all content notifications must be backed by a valid ContentProvider.
android.content.ContentResolver.notifyChange,Notify change.
android.content.ContentResolver.notifyChange,Notify registered observers that a row was updated.
android.content.ContentResolver.notifyChange,To observe events sent through this call use registerContentObserver(android.net.Uri boolean android.database.ContentObserver).
android.content.ContentResolver.notifyChange,If syncToNetwork is true this will attempt to schedule a local sync using the sync adapter that's registered for the authority of the provided uri.
android.content.ContentResolver.notifyChange,No account will be passed to the sync adapter so all matching accounts will be synchronized.
android.content.ContentResolver.notifyChange,Starting in Build.VERSION_CODES.O all content notifications must be backed by a valid ContentProvider.
android.content.ContentResolver.notifyChange,Notify registered observers that a row was updated. To observe events sent through this call use registerContentObserver(android.net.Uri boolean android.database.ContentObserver). If syncToNetwork is true this will attempt to schedule a local sync using the sync adapter that's registered for the authority of the provided uri. No account will be passed to the sync adapter so all matching accounts will be synchronized. Starting in Build.VERSION_CODES.O all content notifications must be backed by a valid ContentProvider.
android.content.ContentResolver.notifyChange,Notify change.
android.content.ContentResolver.notifyChange,Notify registered observers that a row was updated.
android.content.ContentResolver.notifyChange,To observe events sent through this call use registerContentObserver(android.net.Uri boolean android.database.ContentObserver).
android.content.ContentResolver.notifyChange,If syncToNetwork is true this will attempt to schedule a local sync using the sync adapter that's registered for the authority of the provided uri.
android.content.ContentResolver.notifyChange,No account will be passed to the sync adapter so all matching accounts will be synchronized.
android.content.ContentResolver.notifyChange,Starting in Build.VERSION_CODES.O all content notifications must be backed by a valid ContentProvider.
android.content.ContentResolver.notifyChange,Notify registered observers that a row was updated and attempt to sync changes to the network. To observe events sent through this call use registerContentObserver(android.net.Uri boolean android.database.ContentObserver). Starting in Build.VERSION_CODES.O all content notifications must be backed by a valid ContentProvider.
android.content.ContentResolver.notifyChange,Notify change.
android.content.ContentResolver.notifyChange,Notify registered observers that a row was updated and attempt to sync changes to the network.
android.content.ContentResolver.notifyChange,To observe events sent through this call use registerContentObserver(android.net.Uri boolean android.database.ContentObserver).
android.content.ContentResolver.notifyChange,Starting in Build.VERSION_CODES.O all content notifications must be backed by a valid ContentProvider.
android.content.ContentResolver.openFileDescriptor,"Open a raw file descriptor to access data under a URI. This is like openAssetFileDescriptor(android.net.Uri java.lang.String) but uses the underlying ContentProvider#openFile ContentProvider.openFile()} method so will not work with providers that return sub-sections of files. If at all possible you should use openAssetFileDescriptor(android.net.Uri java.lang.String). You will receive a FileNotFoundException exception if the provider returns a sub-section of a file. content ( SCHEME_CONTENT ) file ( SCHEME_FILE ) See openAssetFileDescriptor(android.net.Uri java.lang.String) for more information on these schemes. If opening with the exclusive ""r"" or ""w"" modes the returned ParcelFileDescriptor could be a pipe or socket pair to enable streaming of data. Opening with the ""rw"" mode implies a file on disk that supports seeking. If possible always use an exclusive mode to give the underlying ContentProvider the most flexibility. If you are writing a file and need to communicate an error to the provider use ParcelFileDescriptor#closeWithError(String)."
android.content.ContentResolver.openFileDescriptor,Open file descriptor.
android.content.ContentResolver.openFileDescriptor,Open a raw file descriptor to access data under a URI.
android.content.ContentResolver.openFileDescriptor,This is like openAssetFileDescriptor(android.net.Uri java.lang.String) but uses the underlying ContentProvider#openFile ContentProvider.openFile()} method so will not work with providers that return sub-sections of files.
android.content.ContentResolver.openFileDescriptor,If at all possible you should use openAssetFileDescriptor(android.net.Uri java.lang.String).
android.content.ContentResolver.openFileDescriptor,You will receive a FileNotFoundException exception if the provider returns a sub-section of a file.
android.content.ContentResolver.openFileDescriptor,content ( SCHEME_CONTENT ) file ( SCHEME_FILE ) See openAssetFileDescriptor(android.net.Uri java.lang.String) for more information on these schemes.
android.content.ContentResolver.openFileDescriptor,"If opening with the exclusive ""r"" or ""w"" modes the returned ParcelFileDescriptor could be a pipe or socket pair to enable streaming of data."
android.content.ContentResolver.openFileDescriptor,"Opening with the ""rw"" mode implies a file on disk that supports seeking."
android.content.ContentResolver.openFileDescriptor,If possible always use an exclusive mode to give the underlying ContentProvider the most flexibility.
android.content.ContentResolver.openFileDescriptor,If you are writing a file and need to communicate an error to the provider use ParcelFileDescriptor#closeWithError(String).
android.content.ContentResolver.openFileDescriptor,"Open a raw file descriptor to access data under a URI. This is like openAssetFileDescriptor(android.net.Uri java.lang.String) but uses the underlying ContentProvider#openFile ContentProvider.openFile()} method so will not work with providers that return sub-sections of files. If at all possible you should use openAssetFileDescriptor(android.net.Uri java.lang.String). You will receive a FileNotFoundException exception if the provider returns a sub-section of a file. content ( SCHEME_CONTENT ) file ( SCHEME_FILE ) See openAssetFileDescriptor(android.net.Uri java.lang.String) for more information on these schemes. If opening with the exclusive ""r"" or ""w"" modes the returned ParcelFileDescriptor could be a pipe or socket pair to enable streaming of data. Opening with the ""rw"" mode implies a file on disk that supports seeking. If possible always use an exclusive mode to give the underlying ContentProvider the most flexibility. If you are writing a file and need to communicate an error to the provider use ParcelFileDescriptor#closeWithError(String)."
android.content.ContentResolver.openFileDescriptor,Open file descriptor.
android.content.ContentResolver.openFileDescriptor,Open a raw file descriptor to access data under a URI.
android.content.ContentResolver.openFileDescriptor,This is like openAssetFileDescriptor(android.net.Uri java.lang.String) but uses the underlying ContentProvider#openFile ContentProvider.openFile()} method so will not work with providers that return sub-sections of files.
android.content.ContentResolver.openFileDescriptor,If at all possible you should use openAssetFileDescriptor(android.net.Uri java.lang.String).
android.content.ContentResolver.openFileDescriptor,You will receive a FileNotFoundException exception if the provider returns a sub-section of a file.
android.content.ContentResolver.openFileDescriptor,content ( SCHEME_CONTENT ) file ( SCHEME_FILE ) See openAssetFileDescriptor(android.net.Uri java.lang.String) for more information on these schemes.
android.content.ContentResolver.openFileDescriptor,"If opening with the exclusive ""r"" or ""w"" modes the returned ParcelFileDescriptor could be a pipe or socket pair to enable streaming of data."
android.content.ContentResolver.openFileDescriptor,"Opening with the ""rw"" mode implies a file on disk that supports seeking."
android.content.ContentResolver.openFileDescriptor,If possible always use an exclusive mode to give the underlying ContentProvider the most flexibility.
android.content.ContentResolver.openFileDescriptor,If you are writing a file and need to communicate an error to the provider use ParcelFileDescriptor#closeWithError(String).
android.content.ContentResolver.openInputStream,Open a stream on to the content associated with a content URI. If there is no data associated with the URI FileNotFoundException is thrown. content ( SCHEME_CONTENT ) android.resource ( SCHEME_ANDROID_RESOURCE ) file ( SCHEME_FILE ) See openAssetFileDescriptor(android.net.Uri java.lang.String) for more information on these schemes.
android.content.ContentResolver.openInputStream,Open input stream.
android.content.ContentResolver.openInputStream,Open a stream on to the content associated with a content URI.
android.content.ContentResolver.openInputStream,If there is no data associated with the URI FileNotFoundException is thrown.
android.content.ContentResolver.openInputStream,content ( SCHEME_CONTENT ) android.resource ( SCHEME_ANDROID_RESOURCE ) file ( SCHEME_FILE ) See openAssetFileDescriptor(android.net.Uri java.lang.String) for more information on these schemes.
android.content.ContentResolver.openOutputStream,"Synonym for openOutputStream(uri ""w"")."
android.content.ContentResolver.openOutputStream,Open output stream.
android.content.ContentResolver.openOutputStream,Open a stream on to the content associated with a content URI. If there is no data associated with the URI FileNotFoundException is thrown. content ( SCHEME_CONTENT ) file ( SCHEME_FILE ) See openAssetFileDescriptor(android.net.Uri java.lang.String) for more information on these schemes.
android.content.ContentResolver.openOutputStream,Open output stream.
android.content.ContentResolver.openOutputStream,Open a stream on to the content associated with a content URI.
android.content.ContentResolver.openOutputStream,If there is no data associated with the URI FileNotFoundException is thrown.
android.content.ContentResolver.openOutputStream,content ( SCHEME_CONTENT ) file ( SCHEME_FILE ) See openAssetFileDescriptor(android.net.Uri java.lang.String) for more information on these schemes.
android.content.ContentResolver.query,Query the given URI returning a Cursor over the result set with support for cancellation. For best performance the caller should follow these guidelines:.
android.content.ContentResolver.query,Query.
android.content.ContentResolver.query,Query the given URI returning a Cursor over the result set with support for cancellation.
android.content.ContentResolver.query,For best performance the caller should follow these guidelines:.
android.content.ContentResolver.query,Query the given URI returning a Cursor over the result set with optional support for cancellation. For best performance the caller should follow these guidelines: Provide an explicit projection to prevent reading data from storage that aren't going to be used. Use question mark parameter markers such as 'phone=?' instead of explicit values in the selection parameter so that queries that differ only by those values will be recognized as the same for caching purposes.
android.content.ContentResolver.query,Query.
android.content.ContentResolver.query,Query the given URI returning a Cursor over the result set with optional support for cancellation.
android.content.ContentResolver.query,For best performance the caller should follow these guidelines: Provide an explicit projection to prevent reading data from storage that aren't going to be used.
android.content.ContentResolver.query,Use question mark parameter markers such as 'phone=?' instead of explicit values in the selection parameter so that queries that differ only by those values will be recognized as the same for caching purposes.
android.content.ContentResolver.query,Query the given URI returning a Cursor over the result set. For best performance the caller should follow these guidelines: Provide an explicit projection to prevent reading data from storage that aren't going to be used. Use question mark parameter markers such as 'phone=?' instead of explicit values in the selection parameter so that queries that differ only by those values will be recognized as the same for caching purposes.
android.content.ContentResolver.query,Query.
android.content.ContentResolver.query,Query the given URI returning a Cursor over the result set.
android.content.ContentResolver.query,For best performance the caller should follow these guidelines: Provide an explicit projection to prevent reading data from storage that aren't going to be used.
android.content.ContentResolver.query,Use question mark parameter markers such as 'phone=?' instead of explicit values in the selection parameter so that queries that differ only by those values will be recognized as the same for caching purposes.
android.content.ContentResolver.registerContentObserver,Register an observer class that gets callbacks when data identified by a given content URI changes. Starting in Build.VERSION_CODES.O all content notifications must be backed by a valid ContentProvider.
android.content.ContentResolver.registerContentObserver,Register content observer.
android.content.ContentResolver.registerContentObserver,Register an observer class that gets callbacks when data identified by a given content URI changes.
android.content.ContentResolver.registerContentObserver,Starting in Build.VERSION_CODES.O all content notifications must be backed by a valid ContentProvider.
android.content.ContentResolver.setMasterSyncAutomatically,Sets the master auto-sync setting that applies to all the providers and accounts. If this is false then the per-provider auto-sync setting is ignored. This method requires the caller to hold the permission Manifest.permission.WRITE_SYNC_SETTINGS.
android.content.ContentResolver.setMasterSyncAutomatically,Set master sync automatically.
android.content.ContentResolver.setMasterSyncAutomatically,Sets the master auto-sync setting that applies to all the providers and accounts.
android.content.ContentResolver.setMasterSyncAutomatically,If this is false then the per-provider auto-sync setting is ignored.
android.content.ContentResolver.setMasterSyncAutomatically,This method requires the caller to hold the permission Manifest.permission.WRITE_SYNC_SETTINGS.
android.content.ContentResolver.unregisterContentObserver,Unregisters a change observer.
android.content.ContentResolver.unregisterContentObserver,Unregister content observer.
android.content.ContentResolver.update,Update row(s) in a content URI. If the content provider supports transactions the update will be atomic.
android.content.ContentResolver.update,Update.
android.content.ContentResolver.update,Update row(s) in a content URI.
android.content.ContentResolver.update,If the content provider supports transactions the update will be atomic.
android.content.ContentResolver.validateSyncExtrasBundle,Check that only values of the following types are in the Bundle: Integer Long Boolean Float Double String Account null.
android.content.ContentResolver.validateSyncExtrasBundle,Validate sync extras bundle.
android.content.ContentUris.parseId,Converts the last path segment to a long. This supports a common convention for content URIs where an ID is stored in the last segment.
android.content.ContentUris.parseId,Parse id.
android.content.ContentUris.parseId,Converts the last path segment to a long.
android.content.ContentUris.parseId,This supports a common convention for content URIs where an ID is stored in the last segment.
android.content.ContentUris.withAppendedId,Appends the given ID to the end of the path.
android.content.ContentUris.withAppendedId,With appended id.
android.content.ContentValues.clear,Removes all values.
android.content.ContentValues.clear,Clear.
android.content.ContentValues.containsKey,Returns true if this object has the named value.
android.content.ContentValues.containsKey,Contains key.
android.content.ContentValues.get,Gets a value. Valid value types are String Boolean Number and byte[] implementations.
android.content.ContentValues.get,Get.
android.content.ContentValues.get,Gets a value.
android.content.ContentValues.get,Valid value types are String Boolean Number and byte[] implementations.
android.content.ContentValues.getAsBoolean,Gets a value and converts it to a Boolean.
android.content.ContentValues.getAsBoolean,Get as boolean.
android.content.ContentValues.getAsByte,Gets a value and converts it to a Byte.
android.content.ContentValues.getAsByte,Get as byte.
android.content.ContentValues.getAsDouble,Gets a value and converts it to a Double.
android.content.ContentValues.getAsDouble,Get as double.
android.content.ContentValues.getAsInteger,Gets a value and converts it to an Integer.
android.content.ContentValues.getAsInteger,Get as integer.
android.content.ContentValues.getAsLong,Gets a value and converts it to a Long.
android.content.ContentValues.getAsLong,Get as long.
android.content.ContentValues.getAsShort,Gets a value and converts it to a Short.
android.content.ContentValues.getAsShort,Get as short.
android.content.ContentValues.getAsString,Gets a value and converts it to a String.
android.content.ContentValues.getAsString,Get as string.
android.content.ContentValues.keySet,Returns a set of all of the keys.
android.content.ContentValues.keySet,Key set.
android.content.ContentValues.put,Adds a value to the set.
android.content.ContentValues.put,Put.
android.content.ContentValues.put,Adds a value to the set.
android.content.ContentValues.put,Put.
android.content.ContentValues.put,Adds a value to the set.
android.content.ContentValues.put,Put.
android.content.ContentValues.put,Adds a value to the set.
android.content.ContentValues.put,Put.
android.content.ContentValues.put,Adds a value to the set.
android.content.ContentValues.put,Put.
android.content.ContentValues.put,Adds a value to the set.
android.content.ContentValues.put,Put.
android.content.ContentValues.put,Adds a value to the set.
android.content.ContentValues.put,Put.
android.content.ContentValues.put,Adds a value to the set.
android.content.ContentValues.put,Put.
android.content.ContentValues.put,Adds a value to the set.
android.content.ContentValues.put,Put.
android.content.ContentValues.putNull,Adds a null value to the set.
android.content.ContentValues.putNull,Put null.
android.content.ContentValues.remove,Remove a single value.
android.content.ContentValues.remove,Remove.
android.content.ContentValues.size,Returns the number of values.
android.content.ContentValues.size,Size.
android.content.ContentValues.valueSet,Returns a set of all of the keys and values.
android.content.ContentValues.valueSet,Value set.
android.content.Context.bindService,Same as bindService(android.content.Intent android.content.ServiceConnection int) with executor to control ServiceConnection callbacks.
android.content.Context.bindService,Bind service.
android.content.Context.bindService,Connect to an application service creating it if needed. This defines a dependency between your application and the service. The given conn will receive the service object when it is created and be told if it dies and restarts. The service will be considered required by the system only for as long as the calling context exists. For example if this Context is an Activity that is stopped the service will not be required to continue running until the Activity is resumed. If the service does not support binding it may return null from its onBind() method. If it does then the ServiceConnection's ServiceConnection#onNullBinding(ComponentName) method will be invoked instead of ServiceConnection#onServiceConnected(ComponentName IBinder). This method will throw SecurityException if the calling app does not have permission to bind to the given service. Note: this method cannot be called from a BroadcastReceiver component. A pattern you can use to communicate from a BroadcastReceiver to a Service is to call startService(Intent) with the arguments containing the command to be sent with the service calling its Service.stopSelf(int) method when done executing that command. See the API demo App/Service/Service Start Arguments Controller for an illustration of this. It is okay however to use this method from a BroadcastReceiver that has been registered with registerReceiver(BroadcastReceiver IntentFilter) since the lifetime of this BroadcastReceiver is tied to another object (the one that registered it).
android.content.Context.bindService,Bind service.
android.content.Context.bindService,Connect to an application service creating it if needed.
android.content.Context.bindService,This defines a dependency between your application and the service.
android.content.Context.bindService,The given conn will receive the service object when it is created and be told if it dies and restarts.
android.content.Context.bindService,The service will be considered required by the system only for as long as the calling context exists.
android.content.Context.bindService,For example if this Context is an Activity that is stopped the service will not be required to continue running until the Activity is resumed.
android.content.Context.bindService,If the service does not support binding it may return null from its onBind() method.
android.content.Context.bindService,If it does then the ServiceConnection's ServiceConnection#onNullBinding(ComponentName) method will be invoked instead of ServiceConnection#onServiceConnected(ComponentName IBinder).
android.content.Context.bindService,This method will throw SecurityException if the calling app does not have permission to bind to the given service.
android.content.Context.bindService,Note: this method cannot be called from a BroadcastReceiver component.
android.content.Context.bindService,A pattern you can use to communicate from a BroadcastReceiver to a Service is to call startService(Intent) with the arguments containing the command to be sent with the service calling its Service.stopSelf(int) method when done executing that command.
android.content.Context.bindService,See the API demo App/Service/Service Start Arguments Controller for an illustration of this.
android.content.Context.bindService,It is okay however to use this method from a BroadcastReceiver that has been registered with registerReceiver(BroadcastReceiver IntentFilter) since the lifetime of this BroadcastReceiver is tied to another object (the one that registered it).
android.content.Context.checkCallingOrSelfPermission,Determine whether the calling process of an IPC or you have been granted a particular permission. This is the same as checkCallingPermission(String) except it grants your own permissions if you are not currently processing an IPC. Use with care!.
android.content.Context.checkCallingOrSelfPermission,Check calling or self permission.
android.content.Context.checkCallingOrSelfPermission,Determine whether the calling process of an IPC or you have been granted a particular permission.
android.content.Context.checkCallingOrSelfPermission,This is the same as checkCallingPermission(String) except it grants your own permissions if you are not currently processing an IPC.
android.content.Context.checkCallingOrSelfPermission,Use with care!.
android.content.Context.checkCallingOrSelfUriPermission,Determine whether the calling process of an IPC or you has been granted permission to access a specific URI. This is the same as checkCallingUriPermission(Uri int) except it grants your own permissions if you are not currently processing an IPC. Use with care!.
android.content.Context.checkCallingOrSelfUriPermission,Check calling or self uri permission.
android.content.Context.checkCallingOrSelfUriPermission,Determine whether the calling process of an IPC or you has been granted permission to access a specific URI.
android.content.Context.checkCallingOrSelfUriPermission,This is the same as checkCallingUriPermission(Uri int) except it grants your own permissions if you are not currently processing an IPC.
android.content.Context.checkCallingOrSelfUriPermission,Use with care!.
android.content.Context.checkCallingPermission,Determine whether the calling process of an IPC you are handling has been granted a particular permission. This is basically the same as calling checkPermission(java.lang.String int int) with the pid and uid returned by Binder.getCallingPid() and Binder.getCallingUid(). One important difference is that if you are not currently processing an IPC this function will always fail. This is done to protect against accidentally leaking permissions; you can use checkCallingOrSelfPermission(String) to avoid this protection.
android.content.Context.checkCallingPermission,Check calling permission.
android.content.Context.checkCallingPermission,Determine whether the calling process of an IPC you are handling has been granted a particular permission.
android.content.Context.checkCallingPermission,This is basically the same as calling checkPermission(java.lang.String int int) with the pid and uid returned by Binder.getCallingPid() and Binder.getCallingUid().
android.content.Context.checkCallingPermission,One important difference is that if you are not currently processing an IPC this function will always fail.
android.content.Context.checkCallingPermission,This is done to protect against accidentally leaking permissions; you can use checkCallingOrSelfPermission(String) to avoid this protection.
android.content.Context.checkPermission,Determine whether the given permission is allowed for a particular process and user ID running in the system.
android.content.Context.checkPermission,Check permission.
android.content.Context.checkUriPermission,Check both a Uri and normal permission. This allows you to perform both checkPermission(String int int) and checkUriPermission(Uri int int int) in one call.
android.content.Context.checkUriPermission,Check uri permission.
android.content.Context.checkUriPermission,Check both a Uri and normal permission.
android.content.Context.checkUriPermission,This allows you to perform both checkPermission(String int int) and checkUriPermission(Uri int int int) in one call.
android.content.Context.checkUriPermission,Determine whether a particular process and user ID has been granted permission to access a specific URI. This only checks for permissions that have been explicitly granted -- if the given process/uid has more general access to the URI's content provider then this check will always fail.
android.content.Context.checkUriPermission,Check uri permission.
android.content.Context.checkUriPermission,Determine whether a particular process and user ID has been granted permission to access a specific URI.
android.content.Context.checkUriPermission,This only checks for permissions that have been explicitly granted -- if the given process/uid has more general access to the URI's content provider then this check will always fail.
android.content.Context.createPackageContext,Return a new Context object for the given application name. This Context is the same as what the named application gets when it is launched containing the same resources and class loader. Each call to this method returns a new instance of a Context object; Context objects are not shared however they share common state (Resources ClassLoader etc) so the Context instance itself is fairly lightweight. Throws PackageManager.NameNotFoundException if there is no application with the given package name. Throws SecurityException if the Context requested can not be loaded into the caller's process for security reasons (see CONTEXT_INCLUDE_CODE for more information}.
android.content.Context.createPackageContext,Create package context.
android.content.Context.createPackageContext,Return a new Context object for the given application name.
android.content.Context.createPackageContext,This Context is the same as what the named application gets when it is launched containing the same resources and class loader.
android.content.Context.createPackageContext,Each call to this method returns a new instance of a Context object; Context objects are not shared however they share common state (Resources ClassLoader etc) so the Context instance itself is fairly lightweight.
android.content.Context.createPackageContext,Throws PackageManager.NameNotFoundException if there is no application with the given package name.
android.content.Context.createPackageContext,Throws SecurityException if the Context requested can not be loaded into the caller's process for security reasons (see CONTEXT_INCLUDE_CODE for more information}.
android.content.Context.deleteDatabase,Delete an existing private SQLiteDatabase associated with this Context's application package.
android.content.Context.deleteDatabase,Delete database.
android.content.Context.deleteFile,Delete the given private file associated with this Context's application package.
android.content.Context.deleteFile,Delete file.
android.content.Context.enforceCallingPermission,If the calling process of an IPC you are handling has not been granted a particular permission throw a SecurityException. This is basically the same as calling enforcePermission(java.lang.String int int java.lang.String) with the pid and uid returned by Binder.getCallingPid() and Binder.getCallingUid(). One important difference is that if you are not currently processing an IPC this function will always throw the SecurityException. This is done to protect against accidentally leaking permissions; you can use enforceCallingOrSelfPermission(String String) to avoid this protection.
android.content.Context.enforceCallingPermission,Enforce calling permission.
android.content.Context.enforceCallingPermission,If the calling process of an IPC you are handling has not been granted a particular permission throw a SecurityException.
android.content.Context.enforceCallingPermission,This is basically the same as calling enforcePermission(java.lang.String int int java.lang.String) with the pid and uid returned by Binder.getCallingPid() and Binder.getCallingUid().
android.content.Context.enforceCallingPermission,One important difference is that if you are not currently processing an IPC this function will always throw the SecurityException.
android.content.Context.enforceCallingPermission,This is done to protect against accidentally leaking permissions; you can use enforceCallingOrSelfPermission(String String) to avoid this protection.
android.content.Context.fileList,Returns an array of strings naming the private files associated with this Context's application package.
android.content.Context.fileList,File list.
android.content.Context.getApplicationContext,Return the context of the single global Application object of the current process. This generally should only be used if you need a Context whose lifecycle is separate from the current context that is tied to the lifetime of the process rather than the current component. Consider for example how this interacts with registerReceiver(android.content.BroadcastReceiver android.content.IntentFilter) : If used from an Activity context the receiver is being registered within that activity. This means that you are expected to unregister before the activity is done being destroyed; in fact if you do not do so the framework will clean up your leaked registration as it removes the activity and log an error. Thus if you use the Activity context to register a receiver that is static (global to the process not associated with an Activity instance) then that registration will be removed on you at whatever point the activity you used is destroyed. If used from the Context returned here the receiver is being registered with the global state associated with your application. Thus it will never be unregistered for you. This is necessary if the receiver is associated with static data not a particular component. However using the ApplicationContext elsewhere can easily lead to serious leaks if you forget to unregister unbind etc.
android.content.Context.getApplicationContext,Get application context.
android.content.Context.getApplicationContext,Return the context of the single global Application object of the current process.
android.content.Context.getApplicationContext,This generally should only be used if you need a Context whose lifecycle is separate from the current context that is tied to the lifetime of the process rather than the current component.
android.content.Context.getApplicationContext,Consider for example how this interacts with registerReceiver(android.content.BroadcastReceiver android.content.IntentFilter) : If used from an Activity context the receiver is being registered within that activity.
android.content.Context.getApplicationContext,This means that you are expected to unregister before the activity is done being destroyed; in fact if you do not do so the framework will clean up your leaked registration as it removes the activity and log an error.
android.content.Context.getApplicationContext,Thus if you use the Activity context to register a receiver that is static (global to the process not associated with an Activity instance) then that registration will be removed on you at whatever point the activity you used is destroyed.
android.content.Context.getApplicationContext,If used from the Context returned here the receiver is being registered with the global state associated with your application.
android.content.Context.getApplicationContext,Thus it will never be unregistered for you.
android.content.Context.getApplicationContext,This is necessary if the receiver is associated with static data not a particular component.
android.content.Context.getApplicationContext,However using the ApplicationContext elsewhere can easily lead to serious leaks if you forget to unregister unbind etc.
android.content.Context.getApplicationInfo,Return the full application info for this context's package.
android.content.Context.getApplicationInfo,Get application info.
android.content.Context.getAssets,Returns an AssetManager instance for the application's package. Note: Implementations of this method should return an AssetManager instance that is consistent with the Resources instance returned by getResources(). For example they should share the same Configuration object.
android.content.Context.getAssets,Get assets.
android.content.Context.getAssets,Returns an AssetManager instance for the application's package.
android.content.Context.getAssets,Note: Implementations of this method should return an AssetManager instance that is consistent with the Resources instance returned by getResources().
android.content.Context.getAssets,For example they should share the same Configuration object.
android.content.Context.getCacheDir,Returns the absolute path to the application specific cache directory on the filesystem. The system will automatically delete files in this directory as disk space is needed elsewhere on the device. The system will always delete older files first as reported by File#lastModified(). If desired you can exert more control over how files are deleted using StorageManager#setCacheBehaviorGroup(File boolean) and StorageManager#setCacheBehaviorTombstone(File boolean). Apps are strongly encouraged to keep their usage of cache space below the quota returned by StorageManager#getCacheQuotaBytes(java.util.UUID). If your app goes above this quota your cached files will be some of the first to be deleted when additional disk space is needed. Conversely if your app stays under this quota your cached files will be some of the last to be deleted when additional disk space is needed. Note that your cache quota will change over time depending on how frequently the user interacts with your app and depending on how much system-wide disk space is used. The returned path may change over time if the calling app is moved to an adopted storage device so only relative paths should be persisted. Apps require no extra permissions to read or write to the returned path since this path lives in their private storage.
android.content.Context.getCacheDir,Get cache dir.
android.content.Context.getCacheDir,Returns the absolute path to the application specific cache directory on the filesystem.
android.content.Context.getCacheDir,The system will automatically delete files in this directory as disk space is needed elsewhere on the device.
android.content.Context.getCacheDir,The system will always delete older files first as reported by File#lastModified().
android.content.Context.getCacheDir,If desired you can exert more control over how files are deleted using StorageManager#setCacheBehaviorGroup(File boolean) and StorageManager#setCacheBehaviorTombstone(File boolean).
android.content.Context.getCacheDir,Apps are strongly encouraged to keep their usage of cache space below the quota returned by StorageManager#getCacheQuotaBytes(java.util.UUID).
android.content.Context.getCacheDir,If your app goes above this quota your cached files will be some of the first to be deleted when additional disk space is needed.
android.content.Context.getCacheDir,Conversely if your app stays under this quota your cached files will be some of the last to be deleted when additional disk space is needed.
android.content.Context.getCacheDir,Note that your cache quota will change over time depending on how frequently the user interacts with your app and depending on how much system-wide disk space is used.
android.content.Context.getCacheDir,The returned path may change over time if the calling app is moved to an adopted storage device so only relative paths should be persisted.
android.content.Context.getCacheDir,Apps require no extra permissions to read or write to the returned path since this path lives in their private storage.
android.content.Context.getClassLoader,Return a class loader you can use to retrieve classes in this package.
android.content.Context.getClassLoader,Get class loader.
android.content.Context.getCodeCacheDir,Returns the absolute path to the application specific cache directory on the filesystem designed for storing cached code. The system will delete any files stored in this location both when your specific application is upgraded and when the entire platform is upgraded. This location is optimal for storing compiled or optimized code generated by your application at runtime. The returned path may change over time if the calling app is moved to an adopted storage device so only relative paths should be persisted. Apps require no extra permissions to read or write to the returned path since this path lives in their private storage.
android.content.Context.getCodeCacheDir,Get code cache dir.
android.content.Context.getCodeCacheDir,Returns the absolute path to the application specific cache directory on the filesystem designed for storing cached code.
android.content.Context.getCodeCacheDir,The system will delete any files stored in this location both when your specific application is upgraded and when the entire platform is upgraded.
android.content.Context.getCodeCacheDir,This location is optimal for storing compiled or optimized code generated by your application at runtime.
android.content.Context.getCodeCacheDir,The returned path may change over time if the calling app is moved to an adopted storage device so only relative paths should be persisted.
android.content.Context.getCodeCacheDir,Apps require no extra permissions to read or write to the returned path since this path lives in their private storage.
android.content.Context.getContentResolver,Return a ContentResolver instance for your application's package.
android.content.Context.getContentResolver,Get content resolver.
android.content.Context.getDatabasePath,Returns the absolute path on the filesystem where a database created with openOrCreateDatabase(String int SQLiteDatabase.CursorFactory) is stored. The returned path may change over time if the calling app is moved to an adopted storage device so only relative paths should be persisted.
android.content.Context.getDatabasePath,Get database path.
android.content.Context.getDatabasePath,Returns the absolute path on the filesystem where a database created with openOrCreateDatabase(String int SQLiteDatabase.CursorFactory) is stored.
android.content.Context.getDatabasePath,The returned path may change over time if the calling app is moved to an adopted storage device so only relative paths should be persisted.
android.content.Context.getDir,Retrieve creating if needed a new directory in which the application can place its own custom data files. You can use the returned File object to create and access files in this directory. Note that files created through a File object will only be accessible by your own application; you can only set the mode of the entire directory not of individual files. The returned path may change over time if the calling app is moved to an adopted storage device so only relative paths should be persisted. Apps require no extra permissions to read or write to the returned path since this path lives in their private storage.
android.content.Context.getDir,Get dir.
android.content.Context.getDir,Retrieve creating if needed a new directory in which the application can place its own custom data files.
android.content.Context.getDir,You can use the returned File object to create and access files in this directory.
android.content.Context.getDir,Note that files created through a File object will only be accessible by your own application; you can only set the mode of the entire directory not of individual files.
android.content.Context.getDir,The returned path may change over time if the calling app is moved to an adopted storage device so only relative paths should be persisted.
android.content.Context.getDir,Apps require no extra permissions to read or write to the returned path since this path lives in their private storage.
android.content.Context.getDrawable,Returns a drawable object associated with a particular resource ID and styled for the current theme.
android.content.Context.getDrawable,Get drawable.
android.content.Context.getExternalCacheDir,Returns absolute path to application-specific directory on the primary shared/external storage device where the application can place cache files it owns. These files are internal to the application and not typically visible to the user as media. This is like getCacheDir() in that these files will be deleted when the application is uninstalled however there are some important differences: The platform does not always monitor the space available in shared storage and thus may not automatically delete these files. Apps should always manage the maximum space used in this location. Currently the only time files here will be deleted by the platform is when running on Build.VERSION_CODES.JELLY_BEAN_MR1 or later and Environment#isExternalStorageEmulated(File) returns true. Shared storage may not always be available since removable media can be ejected by the user. Media state can be checked using Environment#getExternalStorageState(File). There is no security enforced with these files. For example any application holding Manifest.permission.WRITE_EXTERNAL_STORAGE can write to these files. If a shared storage device is emulated (as determined by Environment#isExternalStorageEmulated(File) ) its contents are backed by a private user data partition which means there is little benefit to storing data here instead of the private directory returned by getCacheDir(). Starting in Build.VERSION_CODES.KITKAT no permissions are required to read or write to the returned path; it's always accessible to the calling app. This only applies to paths generated for package name of the calling application. To access paths belonging to other packages Manifest.permission.WRITE_EXTERNAL_STORAGE and/or Manifest.permission.READ_EXTERNAL_STORAGE are required. On devices with multiple users (as described by UserManager ) each user has their own isolated shared storage. Applications only have access to the shared storage for the user they're running as. The returned path may change over time if different shared storage media is inserted so only relative paths should be persisted.
android.content.Context.getExternalCacheDir,Get external cache dir.
android.content.Context.getExternalCacheDir,Returns absolute path to application-specific directory on the primary shared/external storage device where the application can place cache files it owns.
android.content.Context.getExternalCacheDir,These files are internal to the application and not typically visible to the user as media.
android.content.Context.getExternalCacheDir,This is like getCacheDir() in that these files will be deleted when the application is uninstalled however there are some important differences: The platform does not always monitor the space available in shared storage and thus may not automatically delete these files.
android.content.Context.getExternalCacheDir,Apps should always manage the maximum space used in this location.
android.content.Context.getExternalCacheDir,Currently the only time files here will be deleted by the platform is when running on Build.VERSION_CODES.JELLY_BEAN_MR1 or later and Environment#isExternalStorageEmulated(File) returns true.
android.content.Context.getExternalCacheDir,Shared storage may not always be available since removable media can be ejected by the user.
android.content.Context.getExternalCacheDir,Media state can be checked using Environment#getExternalStorageState(File).
android.content.Context.getExternalCacheDir,There is no security enforced with these files.
android.content.Context.getExternalCacheDir,For example any application holding Manifest.permission.WRITE_EXTERNAL_STORAGE can write to these files.
android.content.Context.getExternalCacheDir,If a shared storage device is emulated (as determined by Environment#isExternalStorageEmulated(File) ) its contents are backed by a private user data partition which means there is little benefit to storing data here instead of the private directory returned by getCacheDir().
android.content.Context.getExternalCacheDir,Starting in Build.VERSION_CODES.KITKAT no permissions are required to read or write to the returned path; it's always accessible to the calling app.
android.content.Context.getExternalCacheDir,This only applies to paths generated for package name of the calling application.
android.content.Context.getExternalCacheDir,To access paths belonging to other packages Manifest.permission.WRITE_EXTERNAL_STORAGE and/or Manifest.permission.READ_EXTERNAL_STORAGE are required.
android.content.Context.getExternalCacheDir,On devices with multiple users (as described by UserManager ) each user has their own isolated shared storage.
android.content.Context.getExternalCacheDir,Applications only have access to the shared storage for the user they're running as.
android.content.Context.getExternalCacheDir,The returned path may change over time if different shared storage media is inserted so only relative paths should be persisted.
android.content.Context.getExternalCacheDirs,Returns absolute paths to application-specific directories on all shared/external storage devices where the application can place cache files it owns. These files are internal to the application and not typically visible to the user as media. This is like getCacheDir() in that these files will be deleted when the application is uninstalled however there are some important differences: The platform does not always monitor the space available in shared storage and thus may not automatically delete these files. Apps should always manage the maximum space used in this location. Currently the only time files here will be deleted by the platform is when running on Build.VERSION_CODES.JELLY_BEAN_MR1 or later and Environment#isExternalStorageEmulated(File) returns true. Shared storage may not always be available since removable media can be ejected by the user. Media state can be checked using Environment#getExternalStorageState(File). There is no security enforced with these files. For example any application holding Manifest.permission.WRITE_EXTERNAL_STORAGE can write to these files. If a shared storage device is emulated (as determined by Environment#isExternalStorageEmulated(File) ) it's contents are backed by a private user data partition which means there is little benefit to storing data here instead of the private directory returned by getCacheDir(). Shared storage devices returned here are considered a stable part of the device including physical media slots under a protective cover. The returned paths do not include transient devices such as USB flash drives connected to handheld devices. An application may store data on any or all of the returned devices. For example an app may choose to store large files on the device with the most available space as measured by StatFs. No additional permissions are required for the calling app to read or write files under the returned path. Write access outside of these paths on secondary external storage devices is not available. The returned paths may change over time if different shared storage media is inserted so only relative paths should be persisted.
android.content.Context.getExternalCacheDirs,Get external cache dirs.
android.content.Context.getExternalCacheDirs,Returns absolute paths to application-specific directories on all shared/external storage devices where the application can place cache files it owns.
android.content.Context.getExternalCacheDirs,These files are internal to the application and not typically visible to the user as media.
android.content.Context.getExternalCacheDirs,This is like getCacheDir() in that these files will be deleted when the application is uninstalled however there are some important differences: The platform does not always monitor the space available in shared storage and thus may not automatically delete these files.
android.content.Context.getExternalCacheDirs,Apps should always manage the maximum space used in this location.
android.content.Context.getExternalCacheDirs,Currently the only time files here will be deleted by the platform is when running on Build.VERSION_CODES.JELLY_BEAN_MR1 or later and Environment#isExternalStorageEmulated(File) returns true.
android.content.Context.getExternalCacheDirs,Shared storage may not always be available since removable media can be ejected by the user.
android.content.Context.getExternalCacheDirs,Media state can be checked using Environment#getExternalStorageState(File).
android.content.Context.getExternalCacheDirs,There is no security enforced with these files.
android.content.Context.getExternalCacheDirs,For example any application holding Manifest.permission.WRITE_EXTERNAL_STORAGE can write to these files.
android.content.Context.getExternalCacheDirs,If a shared storage device is emulated (as determined by Environment#isExternalStorageEmulated(File) ) it's contents are backed by a private user data partition which means there is little benefit to storing data here instead of the private directory returned by getCacheDir().
android.content.Context.getExternalCacheDirs,Shared storage devices returned here are considered a stable part of the device including physical media slots under a protective cover.
android.content.Context.getExternalCacheDirs,The returned paths do not include transient devices such as USB flash drives connected to handheld devices.
android.content.Context.getExternalCacheDirs,An application may store data on any or all of the returned devices.
android.content.Context.getExternalCacheDirs,For example an app may choose to store large files on the device with the most available space as measured by StatFs.
android.content.Context.getExternalCacheDirs,No additional permissions are required for the calling app to read or write files under the returned path.
android.content.Context.getExternalCacheDirs,Write access outside of these paths on secondary external storage devices is not available.
android.content.Context.getExternalCacheDirs,The returned paths may change over time if different shared storage media is inserted so only relative paths should be persisted.
android.content.Context.getExternalFilesDir,Returns the absolute path to the directory on the primary shared/external storage device where the application can place persistent files it owns. These files are internal to the applications and not typically visible to the user as media. This is like getFilesDir() in that these files will be deleted when the application is uninstalled however there are some important differences: Shared storage may not always be available since removable media can be ejected by the user. Media state can be checked using Environment#getExternalStorageState(File). There is no security enforced with these files. For example any application holding Manifest.permission.WRITE_EXTERNAL_STORAGE can write to these files. If a shared storage device is emulated (as determined by Environment#isExternalStorageEmulated(File) ) it's contents are backed by a private user data partition which means there is little benefit to storing data here instead of the private directories returned by getFilesDir() etc. Starting in Build.VERSION_CODES.KITKAT no permissions are required to read or write to the returned path; it's always accessible to the calling app. This only applies to paths generated for package name of the calling application. To access paths belonging to other packages Manifest.permission.WRITE_EXTERNAL_STORAGE and/or Manifest.permission.READ_EXTERNAL_STORAGE are required. On devices with multiple users (as described by UserManager ) each user has their own isolated shared storage. Applications only have access to the shared storage for the user they're running as. The returned path may change over time if different shared storage media is inserted so only relative paths should be persisted. Here is an example of typical code to manipulate a file in an application's shared storage: If you supply a non-null type to this function the returned file will be a path to a sub-directory of the given type. Though these files are not automatically scanned by the media scanner you can explicitly add them to the media database with MediaScannerConnection.scanFile. Note that this is not the same as Environment.getExternalStoragePublicDirectory() which provides directories of media shared by all applications. The directories returned here are owned by the application and their contents will be removed when the application is uninstalled. Unlike Environment.getExternalStoragePublicDirectory() the directory returned here will be automatically created for you. Here is an example of typical code to manipulate a picture in an application's shared storage and add it to the media database:.
android.content.Context.getExternalFilesDir,Get external files dir.
android.content.Context.getExternalFilesDir,Returns the absolute path to the directory on the primary shared/external storage device where the application can place persistent files it owns.
android.content.Context.getExternalFilesDir,These files are internal to the applications and not typically visible to the user as media.
android.content.Context.getExternalFilesDir,This is like getFilesDir() in that these files will be deleted when the application is uninstalled however there are some important differences: Shared storage may not always be available since removable media can be ejected by the user.
android.content.Context.getExternalFilesDir,Media state can be checked using Environment#getExternalStorageState(File).
android.content.Context.getExternalFilesDir,There is no security enforced with these files.
android.content.Context.getExternalFilesDir,For example any application holding Manifest.permission.WRITE_EXTERNAL_STORAGE can write to these files.
android.content.Context.getExternalFilesDir,If a shared storage device is emulated (as determined by Environment#isExternalStorageEmulated(File) ) it's contents are backed by a private user data partition which means there is little benefit to storing data here instead of the private directories returned by getFilesDir() etc.
android.content.Context.getExternalFilesDir,Starting in Build.VERSION_CODES.KITKAT no permissions are required to read or write to the returned path; it's always accessible to the calling app.
android.content.Context.getExternalFilesDir,This only applies to paths generated for package name of the calling application.
android.content.Context.getExternalFilesDir,To access paths belonging to other packages Manifest.permission.WRITE_EXTERNAL_STORAGE and/or Manifest.permission.READ_EXTERNAL_STORAGE are required.
android.content.Context.getExternalFilesDir,On devices with multiple users (as described by UserManager ) each user has their own isolated shared storage.
android.content.Context.getExternalFilesDir,Applications only have access to the shared storage for the user they're running as.
android.content.Context.getExternalFilesDir,The returned path may change over time if different shared storage media is inserted so only relative paths should be persisted.
android.content.Context.getExternalFilesDir,Here is an example of typical code to manipulate a file in an application's shared storage: If you supply a non-null type to this function the returned file will be a path to a sub-directory of the given type.
android.content.Context.getExternalFilesDir,Though these files are not automatically scanned by the media scanner you can explicitly add them to the media database with MediaScannerConnection.scanFile.
android.content.Context.getExternalFilesDir,Note that this is not the same as Environment.getExternalStoragePublicDirectory() which provides directories of media shared by all applications.
android.content.Context.getExternalFilesDir,The directories returned here are owned by the application and their contents will be removed when the application is uninstalled.
android.content.Context.getExternalFilesDir,Unlike Environment.getExternalStoragePublicDirectory() the directory returned here will be automatically created for you.
android.content.Context.getExternalFilesDir,Here is an example of typical code to manipulate a picture in an application's shared storage and add it to the media database:.
android.content.Context.getExternalFilesDirs,Returns absolute paths to application-specific directories on all shared/external storage devices where the application can place persistent files it owns. These files are internal to the application and not typically visible to the user as media. This is like getFilesDir() in that these files will be deleted when the application is uninstalled however there are some important differences: Shared storage may not always be available since removable media can be ejected by the user. Media state can be checked using Environment#getExternalStorageState(File). There is no security enforced with these files. For example any application holding Manifest.permission.WRITE_EXTERNAL_STORAGE can write to these files. If a shared storage device is emulated (as determined by Environment#isExternalStorageEmulated(File) ) it's contents are backed by a private user data partition which means there is little benefit to storing data here instead of the private directories returned by getFilesDir() etc. Shared storage devices returned here are considered a stable part of the device including physical media slots under a protective cover. The returned paths do not include transient devices such as USB flash drives connected to handheld devices. An application may store data on any or all of the returned devices. For example an app may choose to store large files on the device with the most available space as measured by StatFs. No additional permissions are required for the calling app to read or write files under the returned path. Write access outside of these paths on secondary external storage devices is not available. The returned path may change over time if different shared storage media is inserted so only relative paths should be persisted.
android.content.Context.getExternalFilesDirs,Get external files dirs.
android.content.Context.getExternalFilesDirs,Returns absolute paths to application-specific directories on all shared/external storage devices where the application can place persistent files it owns.
android.content.Context.getExternalFilesDirs,These files are internal to the application and not typically visible to the user as media.
android.content.Context.getExternalFilesDirs,This is like getFilesDir() in that these files will be deleted when the application is uninstalled however there are some important differences: Shared storage may not always be available since removable media can be ejected by the user.
android.content.Context.getExternalFilesDirs,Media state can be checked using Environment#getExternalStorageState(File).
android.content.Context.getExternalFilesDirs,There is no security enforced with these files.
android.content.Context.getExternalFilesDirs,For example any application holding Manifest.permission.WRITE_EXTERNAL_STORAGE can write to these files.
android.content.Context.getExternalFilesDirs,If a shared storage device is emulated (as determined by Environment#isExternalStorageEmulated(File) ) it's contents are backed by a private user data partition which means there is little benefit to storing data here instead of the private directories returned by getFilesDir() etc.
android.content.Context.getExternalFilesDirs,Shared storage devices returned here are considered a stable part of the device including physical media slots under a protective cover.
android.content.Context.getExternalFilesDirs,The returned paths do not include transient devices such as USB flash drives connected to handheld devices.
android.content.Context.getExternalFilesDirs,An application may store data on any or all of the returned devices.
android.content.Context.getExternalFilesDirs,For example an app may choose to store large files on the device with the most available space as measured by StatFs.
android.content.Context.getExternalFilesDirs,No additional permissions are required for the calling app to read or write files under the returned path.
android.content.Context.getExternalFilesDirs,Write access outside of these paths on secondary external storage devices is not available.
android.content.Context.getExternalFilesDirs,The returned path may change over time if different shared storage media is inserted so only relative paths should be persisted.
android.content.Context.getFileStreamPath,Returns the absolute path on the filesystem where a file created with openFileOutput(String int) is stored. The returned path may change over time if the calling app is moved to an adopted storage device so only relative paths should be persisted.
android.content.Context.getFileStreamPath,Get file stream path.
android.content.Context.getFileStreamPath,Returns the absolute path on the filesystem where a file created with openFileOutput(String int) is stored.
android.content.Context.getFileStreamPath,The returned path may change over time if the calling app is moved to an adopted storage device so only relative paths should be persisted.
android.content.Context.getFilesDir,Returns the absolute path to the directory on the filesystem where files created with openFileOutput(String int) are stored. The returned path may change over time if the calling app is moved to an adopted storage device so only relative paths should be persisted. No additional permissions are required for the calling app to read or write files under the returned path.
android.content.Context.getFilesDir,Get files dir.
android.content.Context.getFilesDir,Returns the absolute path to the directory on the filesystem where files created with openFileOutput(String int) are stored.
android.content.Context.getFilesDir,The returned path may change over time if the calling app is moved to an adopted storage device so only relative paths should be persisted.
android.content.Context.getFilesDir,No additional permissions are required for the calling app to read or write files under the returned path.
android.content.Context.getMainLooper,Return the Looper for the main thread of the current process. This is the thread used to dispatch calls to application components (activities services etc). By definition this method returns the same result as would be obtained by calling Looper#getMainLooper().
android.content.Context.getMainLooper,Get main looper.
android.content.Context.getMainLooper,Return the Looper for the main thread of the current process.
android.content.Context.getMainLooper,This is the thread used to dispatch calls to application components (activities services etc).
android.content.Context.getMainLooper,By definition this method returns the same result as would be obtained by calling Looper#getMainLooper().
android.content.Context.getNoBackupFilesDir,Returns the absolute path to the directory on the filesystem similar to getFilesDir(). The difference is that files placed under this directory will be excluded from automatic backup to remote storage. See BackupAgent for a full discussion of the automatic backup mechanism in Android. The returned path may change over time if the calling app is moved to an adopted storage device so only relative paths should be persisted. No additional permissions are required for the calling app to read or write files under the returned path.
android.content.Context.getNoBackupFilesDir,Get no backup files dir.
android.content.Context.getNoBackupFilesDir,Returns the absolute path to the directory on the filesystem similar to getFilesDir().
android.content.Context.getNoBackupFilesDir,The difference is that files placed under this directory will be excluded from automatic backup to remote storage.
android.content.Context.getNoBackupFilesDir,See BackupAgent for a full discussion of the automatic backup mechanism in Android.
android.content.Context.getNoBackupFilesDir,The returned path may change over time if the calling app is moved to an adopted storage device so only relative paths should be persisted.
android.content.Context.getNoBackupFilesDir,No additional permissions are required for the calling app to read or write files under the returned path.
android.content.Context.getObbDir,"Return the primary shared/external storage directory where this application's OBB files (if there are any) can be found. Note if the application does not have any OBB files this directory may not exist. This is like getFilesDir() in that these files will be deleted when the application is uninstalled however there are some important differences: Shared storage may not always be available since removable media can be ejected by the user. Media state can be checked using Environment#getExternalStorageState(File). There is no security enforced with these files. For example any application holding Manifest.permission.WRITE_EXTERNAL_STORAGE can write to these files. Starting in Build.VERSION_CODES.KITKAT no permissions are required to read or write to the path that this method returns. However starting from Build.VERSION_CODES.M to read the OBB expansion files you must declare the Manifest.permission.READ_EXTERNAL_STORAGE permission in the app manifest and ask for permission at runtime as follows: <uses-permission android:name=""android.permission.READ_EXTERNAL_STORAGE"" android:maxSdkVersion=""23"" /> Starting from Build.VERSION_CODES.N Manifest.permission.READ_EXTERNAL_STORAGE permission is not required so don’t ask for this permission at runtime. To handle both cases your app must first try to read the OBB file and if it fails you must request Manifest.permission.READ_EXTERNAL_STORAGE permission at runtime. The following code snippet shows how to do this:."
android.content.Context.getObbDir,Get obb dir.
android.content.Context.getObbDir,Return the primary shared/external storage directory where this application's OBB files (if there are any) can be found.
android.content.Context.getObbDir,Note if the application does not have any OBB files this directory may not exist.
android.content.Context.getObbDir,This is like getFilesDir() in that these files will be deleted when the application is uninstalled however there are some important differences: Shared storage may not always be available since removable media can be ejected by the user.
android.content.Context.getObbDir,Media state can be checked using Environment#getExternalStorageState(File).
android.content.Context.getObbDir,There is no security enforced with these files.
android.content.Context.getObbDir,For example any application holding Manifest.permission.WRITE_EXTERNAL_STORAGE can write to these files.
android.content.Context.getObbDir,Starting in Build.VERSION_CODES.KITKAT no permissions are required to read or write to the path that this method returns.
android.content.Context.getObbDir,"However starting from Build.VERSION_CODES.M to read the OBB expansion files you must declare the Manifest.permission.READ_EXTERNAL_STORAGE permission in the app manifest and ask for permission at runtime as follows: <uses-permission android:name=""android.permission.READ_EXTERNAL_STORAGE"" android:maxSdkVersion=""23"" /> Starting from Build.VERSION_CODES.N Manifest.permission.READ_EXTERNAL_STORAGE permission is not required so don’t ask for this permission at runtime."
android.content.Context.getObbDir,To handle both cases your app must first try to read the OBB file and if it fails you must request Manifest.permission.READ_EXTERNAL_STORAGE permission at runtime.
android.content.Context.getObbDir,The following code snippet shows how to do this:.
android.content.Context.getObbDirs,Returns absolute paths to application-specific directories on all shared/external storage devices where the application's OBB files (if there are any) can be found. Note if the application does not have any OBB files these directories may not exist. This is like getFilesDir() in that these files will be deleted when the application is uninstalled however there are some important differences: Shared storage may not always be available since removable media can be ejected by the user. Media state can be checked using Environment#getExternalStorageState(File). There is no security enforced with these files. For example any application holding Manifest.permission.WRITE_EXTERNAL_STORAGE can write to these files. Shared storage devices returned here are considered a stable part of the device including physical media slots under a protective cover. The returned paths do not include transient devices such as USB flash drives connected to handheld devices. An application may store data on any or all of the returned devices. For example an app may choose to store large files on the device with the most available space as measured by StatFs. No additional permissions are required for the calling app to read or write files under the returned path. Write access outside of these paths on secondary external storage devices is not available.
android.content.Context.getObbDirs,Get obb dirs.
android.content.Context.getObbDirs,Returns absolute paths to application-specific directories on all shared/external storage devices where the application's OBB files (if there are any) can be found.
android.content.Context.getObbDirs,Note if the application does not have any OBB files these directories may not exist.
android.content.Context.getObbDirs,This is like getFilesDir() in that these files will be deleted when the application is uninstalled however there are some important differences: Shared storage may not always be available since removable media can be ejected by the user.
android.content.Context.getObbDirs,Media state can be checked using Environment#getExternalStorageState(File).
android.content.Context.getObbDirs,There is no security enforced with these files.
android.content.Context.getObbDirs,For example any application holding Manifest.permission.WRITE_EXTERNAL_STORAGE can write to these files.
android.content.Context.getObbDirs,Shared storage devices returned here are considered a stable part of the device including physical media slots under a protective cover.
android.content.Context.getObbDirs,The returned paths do not include transient devices such as USB flash drives connected to handheld devices.
android.content.Context.getObbDirs,An application may store data on any or all of the returned devices.
android.content.Context.getObbDirs,For example an app may choose to store large files on the device with the most available space as measured by StatFs.
android.content.Context.getObbDirs,No additional permissions are required for the calling app to read or write files under the returned path.
android.content.Context.getObbDirs,Write access outside of these paths on secondary external storage devices is not available.
android.content.Context.getPackageCodePath,Return the full path to this context's primary Android package. The Android package is a ZIP file which contains application's primary code and assets. Note: this is not generally useful for applications since they should not be directly accessing the file system.
android.content.Context.getPackageCodePath,Get package code path.
android.content.Context.getPackageCodePath,Return the full path to this context's primary Android package.
android.content.Context.getPackageCodePath,The Android package is a ZIP file which contains application's primary code and assets.
android.content.Context.getPackageCodePath,Note: this is not generally useful for applications since they should not be directly accessing the file system.
android.content.Context.getPackageManager,Return PackageManager instance to find global package information.
android.content.Context.getPackageManager,Get package manager.
android.content.Context.getPackageName,Return the name of this application's package.
android.content.Context.getPackageName,Get package name.
android.content.Context.getResources,Returns a Resources instance for the application's package. Note: Implementations of this method should return a Resources instance that is consistent with the AssetManager instance returned by getAssets(). For example they should share the same Configuration object.
android.content.Context.getResources,Get resources.
android.content.Context.getResources,Returns a Resources instance for the application's package.
android.content.Context.getResources,Note: Implementations of this method should return a Resources instance that is consistent with the AssetManager instance returned by getAssets().
android.content.Context.getResources,For example they should share the same Configuration object.
android.content.Context.getSharedPreferences,Retrieve and hold the contents of the preferences file 'name' returning a SharedPreferences through which you can retrieve and modify its values. Only one instance of the SharedPreferences object is returned to any callers for the same name meaning they will see each other's edits as soon as they are made. This method is thead-safe.
android.content.Context.getSharedPreferences,Get shared preferences.
android.content.Context.getSharedPreferences,Retrieve and hold the contents of the preferences file 'name' returning a SharedPreferences through which you can retrieve and modify its values.
android.content.Context.getSharedPreferences,Only one instance of the SharedPreferences object is returned to any callers for the same name meaning they will see each other's edits as soon as they are made.
android.content.Context.getSharedPreferences,This method is thead-safe.
android.content.Context.getString,Returns a localized formatted string from the application's package's default string table substituting the format arguments as defined in Formatter and String.format(String Object...).
android.content.Context.getString,Get string.
android.content.Context.getString,Returns a localized string from the application's package's default string table.
android.content.Context.getString,Get string.
android.content.Context.getText,Return a localized styled CharSequence from the application's package's default string table.
android.content.Context.getText,Get text.
android.content.Context.getTheme,Return the Theme object associated with this Context.
android.content.Context.getTheme,Get theme.
android.content.Context.grantUriPermission,Grant permission to access a specific Uri to another package regardless of whether that package has general permission to access the Uri's content provider. This can be used to grant specific temporary permissions typically in response to user interaction (such as the user opening an attachment that you would like someone else to display). Normally you should use Intent#FLAG_GRANT_READ_URI_PERMISSION or Intent#FLAG_GRANT_WRITE_URI_PERMISSION with the Intent being used to start an activity instead of this function directly. If you use this function directly you should be sure to call revokeUriPermission(Uri int) when the target should no longer be allowed to access it. To succeed the content provider owning the Uri must have set the grantUriPermissions attribute in its manifest or included the <grant-uri-permissions> tag.
android.content.Context.grantUriPermission,Grant uri permission.
android.content.Context.grantUriPermission,Grant permission to access a specific Uri to another package regardless of whether that package has general permission to access the Uri's content provider.
android.content.Context.grantUriPermission,This can be used to grant specific temporary permissions typically in response to user interaction (such as the user opening an attachment that you would like someone else to display).
android.content.Context.grantUriPermission,Normally you should use Intent#FLAG_GRANT_READ_URI_PERMISSION or Intent#FLAG_GRANT_WRITE_URI_PERMISSION with the Intent being used to start an activity instead of this function directly.
android.content.Context.grantUriPermission,If you use this function directly you should be sure to call revokeUriPermission(Uri int) when the target should no longer be allowed to access it.
android.content.Context.grantUriPermission,To succeed the content provider owning the Uri must have set the grantUriPermissions attribute in its manifest or included the <grant-uri-permissions> tag.
android.content.Context.isRestricted,Indicates whether this Context is restricted.
android.content.Context.isRestricted,Is restricted.
android.content.Context.obtainStyledAttributes,Retrieve styled attribute information in this Context's theme. See Resources.Theme.obtainStyledAttributes(AttributeSet int[] int int) for more information.
android.content.Context.obtainStyledAttributes,Obtain styled attributes.
android.content.Context.obtainStyledAttributes,Retrieve styled attribute information in this Context's theme.
android.content.Context.obtainStyledAttributes,See Resources.Theme.obtainStyledAttributes(AttributeSet int[] int int) for more information.
android.content.Context.obtainStyledAttributes,Retrieve styled attribute information in this Context's theme. See Resources.Theme.obtainStyledAttributes(AttributeSet int[] int int) for more information.
android.content.Context.obtainStyledAttributes,Obtain styled attributes.
android.content.Context.obtainStyledAttributes,Retrieve styled attribute information in this Context's theme.
android.content.Context.obtainStyledAttributes,See Resources.Theme.obtainStyledAttributes(AttributeSet int[] int int) for more information.
android.content.Context.obtainStyledAttributes,Retrieve styled attribute information in this Context's theme. See Resources.Theme.obtainStyledAttributes(int int[]) for more information.
android.content.Context.obtainStyledAttributes,Obtain styled attributes.
android.content.Context.obtainStyledAttributes,Retrieve styled attribute information in this Context's theme.
android.content.Context.obtainStyledAttributes,See Resources.Theme.obtainStyledAttributes(int int[]) for more information.
android.content.Context.obtainStyledAttributes,Retrieve styled attribute information in this Context's theme. See Resources.Theme.obtainStyledAttributes(int[]) for more information.
android.content.Context.obtainStyledAttributes,Obtain styled attributes.
android.content.Context.obtainStyledAttributes,Retrieve styled attribute information in this Context's theme.
android.content.Context.obtainStyledAttributes,See Resources.Theme.obtainStyledAttributes(int[]) for more information.
android.content.Context.openFileInput,Open a private file associated with this Context's application package for reading.
android.content.Context.openFileInput,Open file input.
android.content.Context.openFileOutput,Open a private file associated with this Context's application package for writing. Creates the file if it doesn't already exist. No additional permissions are required for the calling app to read or write the returned file.
android.content.Context.openFileOutput,Open file output.
android.content.Context.openFileOutput,Open a private file associated with this Context's application package for writing.
android.content.Context.openFileOutput,Creates the file if it doesn't already exist.
android.content.Context.openFileOutput,No additional permissions are required for the calling app to read or write the returned file.
android.content.Context.registerReceiver,"Register a BroadcastReceiver to be run in the main activity thread. The receiver will be called with any broadcast Intent that matches filter in the main application thread. The system may broadcast Intents that are ""sticky"" -- these stay around after the broadcast has finished to be sent to any later registrations. If your IntentFilter matches one of these sticky Intents that Intent will be returned by this function and sent to your receiver as if it had just been broadcast. There may be multiple sticky Intents that match filter in which case each of these will be sent to receiver. In this case only one of these can be returned directly by the function; which of these that is returned is arbitrarily decided by the system. If you know the Intent your are registering for is sticky you can supply null for your receiver. In this case no receiver is registered -- the function simply returns the sticky Intent that matches filter. In the case of multiple matches the same rules as described above apply. See BroadcastReceiver for more information on Intent broadcasts. As of Build.VERSION_CODES.ICE_CREAM_SANDWICH receivers registered with this method will correctly respect the Intent#setPackage(String) specified for an Intent being broadcast. Prior to that it would be ignored and delivered to all matching registered receivers. Be careful if using this for security. Note: this method cannot be called from a BroadcastReceiver component; that is from a BroadcastReceiver that is declared in an application's manifest. It is okay however to call this method from another BroadcastReceiver that has itself been registered at run time with registerReceiver(BroadcastReceiver IntentFilter) since the lifetime of such a registered BroadcastReceiver is tied to the object that registered it."
android.content.Context.registerReceiver,Register receiver.
android.content.Context.registerReceiver,Register a BroadcastReceiver to be run in the main activity thread.
android.content.Context.registerReceiver,The receiver will be called with any broadcast Intent that matches filter in the main application thread.
android.content.Context.registerReceiver,"The system may broadcast Intents that are ""sticky"" -- these stay around after the broadcast has finished to be sent to any later registrations."
android.content.Context.registerReceiver,If your IntentFilter matches one of these sticky Intents that Intent will be returned by this function and sent to your receiver as if it had just been broadcast.
android.content.Context.registerReceiver,There may be multiple sticky Intents that match filter in which case each of these will be sent to receiver.
android.content.Context.registerReceiver,In this case only one of these can be returned directly by the function; which of these that is returned is arbitrarily decided by the system.
android.content.Context.registerReceiver,If you know the Intent your are registering for is sticky you can supply null for your receiver.
android.content.Context.registerReceiver,In this case no receiver is registered -- the function simply returns the sticky Intent that matches filter.
android.content.Context.registerReceiver,In the case of multiple matches the same rules as described above apply.
android.content.Context.registerReceiver,See BroadcastReceiver for more information on Intent broadcasts.
android.content.Context.registerReceiver,As of Build.VERSION_CODES.ICE_CREAM_SANDWICH receivers registered with this method will correctly respect the Intent#setPackage(String) specified for an Intent being broadcast.
android.content.Context.registerReceiver,Prior to that it would be ignored and delivered to all matching registered receivers.
android.content.Context.registerReceiver,Be careful if using this for security.
android.content.Context.registerReceiver,Note: this method cannot be called from a BroadcastReceiver component; that is from a BroadcastReceiver that is declared in an application's manifest.
android.content.Context.registerReceiver,It is okay however to call this method from another BroadcastReceiver that has itself been registered at run time with registerReceiver(BroadcastReceiver IntentFilter) since the lifetime of such a registered BroadcastReceiver is tied to the object that registered it.
android.content.Context.registerReceiver,Register to receive intent broadcasts with the receiver optionally being exposed to Instant Apps. See registerReceiver(android.content.BroadcastReceiver android.content.IntentFilter) for more information. By default Instant Apps cannot interact with receivers in other applications this allows you to expose a receiver that Instant Apps can interact with. See BroadcastReceiver for more information on Intent broadcasts. As of Build.VERSION_CODES.ICE_CREAM_SANDWICH receivers registered with this method will correctly respect the Intent#setPackage(String) specified for an Intent being broadcast. Prior to that it would be ignored and delivered to all matching registered receivers. Be careful if using this for security.
android.content.Context.registerReceiver,Register receiver.
android.content.Context.registerReceiver,Register to receive intent broadcasts with the receiver optionally being exposed to Instant Apps.
android.content.Context.registerReceiver,See registerReceiver(android.content.BroadcastReceiver android.content.IntentFilter) for more information.
android.content.Context.registerReceiver,By default Instant Apps cannot interact with receivers in other applications this allows you to expose a receiver that Instant Apps can interact with.
android.content.Context.registerReceiver,See BroadcastReceiver for more information on Intent broadcasts.
android.content.Context.registerReceiver,As of Build.VERSION_CODES.ICE_CREAM_SANDWICH receivers registered with this method will correctly respect the Intent#setPackage(String) specified for an Intent being broadcast.
android.content.Context.registerReceiver,Prior to that it would be ignored and delivered to all matching registered receivers.
android.content.Context.registerReceiver,Be careful if using this for security.
android.content.Context.registerReceiver,Register to receive intent broadcasts to run in the context of scheduler. See registerReceiver(android.content.BroadcastReceiver android.content.IntentFilter int) and registerReceiver(android.content.BroadcastReceiver android.content.IntentFilter java.lang.String android.os.Handler) for more information. See BroadcastReceiver for more information on Intent broadcasts. As of Build.VERSION_CODES.ICE_CREAM_SANDWICH receivers registered with this method will correctly respect the Intent#setPackage(String) specified for an Intent being broadcast. Prior to that it would be ignored and delivered to all matching registered receivers. Be careful if using this for security.
android.content.Context.registerReceiver,Register receiver.
android.content.Context.registerReceiver,Register to receive intent broadcasts to run in the context of scheduler.
android.content.Context.registerReceiver,See registerReceiver(android.content.BroadcastReceiver android.content.IntentFilter int) and registerReceiver(android.content.BroadcastReceiver android.content.IntentFilter java.lang.String android.os.Handler) for more information.
android.content.Context.registerReceiver,See BroadcastReceiver for more information on Intent broadcasts.
android.content.Context.registerReceiver,As of Build.VERSION_CODES.ICE_CREAM_SANDWICH receivers registered with this method will correctly respect the Intent#setPackage(String) specified for an Intent being broadcast.
android.content.Context.registerReceiver,Prior to that it would be ignored and delivered to all matching registered receivers.
android.content.Context.registerReceiver,Be careful if using this for security.
android.content.Context.registerReceiver,Register to receive intent broadcasts to run in the context of scheduler. See registerReceiver(android.content.BroadcastReceiver android.content.IntentFilter) for more information. This allows you to enforce permissions on who can broadcast intents to your receiver or have the receiver run in a different thread than the main application thread. See BroadcastReceiver for more information on Intent broadcasts. As of Build.VERSION_CODES.ICE_CREAM_SANDWICH receivers registered with this method will correctly respect the Intent#setPackage(String) specified for an Intent being broadcast. Prior to that it would be ignored and delivered to all matching registered receivers. Be careful if using this for security.
android.content.Context.registerReceiver,Register receiver.
android.content.Context.registerReceiver,Register to receive intent broadcasts to run in the context of scheduler.
android.content.Context.registerReceiver,See registerReceiver(android.content.BroadcastReceiver android.content.IntentFilter) for more information.
android.content.Context.registerReceiver,This allows you to enforce permissions on who can broadcast intents to your receiver or have the receiver run in a different thread than the main application thread.
android.content.Context.registerReceiver,See BroadcastReceiver for more information on Intent broadcasts.
android.content.Context.registerReceiver,As of Build.VERSION_CODES.ICE_CREAM_SANDWICH receivers registered with this method will correctly respect the Intent#setPackage(String) specified for an Intent being broadcast.
android.content.Context.registerReceiver,Prior to that it would be ignored and delivered to all matching registered receivers.
android.content.Context.registerReceiver,Be careful if using this for security.
android.content.Context.revokeUriPermission,"Remove all permissions to access a particular content provider Uri that were previously added with grantUriPermission(String Uri int) or any other mechanism. The given Uri will match all previously granted Uris that are the same or a sub-path of the given Uri. That is revoking ""content://foo/target"" will revoke both ""content://foo/target"" and ""content://foo/target/sub"" but not ""content://foo"". It will not remove any prefix grants that exist at a higher level. Prior to Build.VERSION_CODES.LOLLIPOP if you did not have regular permission access to a Uri but had received access to it through a specific Uri permission grant you could not revoke that grant with this function and a SecurityException would be thrown. As of Build.VERSION_CODES.LOLLIPOP this function will not throw a security exception but will remove whatever permission grants to the Uri had been given to the app (or none). Unlike revokeUriPermission(java.lang.String android.net.Uri int) this method impacts all permission grants matching the given Uri for any package they had been granted to through any mechanism this had happened (such as indirectly through the clipboard activity launch service start etc). That means this can be potentially dangerous to use as it can revoke grants that another app could be strongly expecting to stick around."
android.content.Context.revokeUriPermission,Revoke uri permission.
android.content.Context.revokeUriPermission,Remove all permissions to access a particular content provider Uri that were previously added with grantUriPermission(String Uri int) or any other mechanism.
android.content.Context.revokeUriPermission,The given Uri will match all previously granted Uris that are the same or a sub-path of the given Uri.
android.content.Context.revokeUriPermission,"That is revoking ""content://foo/target"" will revoke both ""content://foo/target"" and ""content://foo/target/sub"" but not ""content://foo""."
android.content.Context.revokeUriPermission,It will not remove any prefix grants that exist at a higher level.
android.content.Context.revokeUriPermission,Prior to Build.VERSION_CODES.LOLLIPOP if you did not have regular permission access to a Uri but had received access to it through a specific Uri permission grant you could not revoke that grant with this function and a SecurityException would be thrown.
android.content.Context.revokeUriPermission,As of Build.VERSION_CODES.LOLLIPOP this function will not throw a security exception but will remove whatever permission grants to the Uri had been given to the app (or none).
android.content.Context.revokeUriPermission,Unlike revokeUriPermission(java.lang.String android.net.Uri int) this method impacts all permission grants matching the given Uri for any package they had been granted to through any mechanism this had happened (such as indirectly through the clipboard activity launch service start etc).
android.content.Context.revokeUriPermission,That means this can be potentially dangerous to use as it can revoke grants that another app could be strongly expecting to stick around.
android.content.Context.revokeUriPermission,"Remove permissions to access a particular content provider Uri that were previously added with grantUriPermission(String Uri int) for a specific target package. The given Uri will match all previously granted Uris that are the same or a sub-path of the given Uri. That is revoking ""content://foo/target"" will revoke both ""content://foo/target"" and ""content://foo/target/sub"" but not ""content://foo"". It will not remove any prefix grants that exist at a higher level. Unlike revokeUriPermission(android.net.Uri int) this method will only revoke permissions that had been explicitly granted through grantUriPermission(String Uri int) and only for the package specified. Any matching grants that have happened through other mechanisms (clipboard activity launching service starting etc) will not be removed."
android.content.Context.revokeUriPermission,Revoke uri permission.
android.content.Context.revokeUriPermission,Remove permissions to access a particular content provider Uri that were previously added with grantUriPermission(String Uri int) for a specific target package.
android.content.Context.revokeUriPermission,The given Uri will match all previously granted Uris that are the same or a sub-path of the given Uri.
android.content.Context.revokeUriPermission,"That is revoking ""content://foo/target"" will revoke both ""content://foo/target"" and ""content://foo/target/sub"" but not ""content://foo""."
android.content.Context.revokeUriPermission,It will not remove any prefix grants that exist at a higher level.
android.content.Context.revokeUriPermission,Unlike revokeUriPermission(android.net.Uri int) this method will only revoke permissions that had been explicitly granted through grantUriPermission(String Uri int) and only for the package specified.
android.content.Context.revokeUriPermission,Any matching grants that have happened through other mechanisms (clipboard activity launching service starting etc) will not be removed.
android.content.Context.sendBroadcast,Broadcast the given intent to all interested BroadcastReceivers allowing an optional required permission to be enforced. This call is asynchronous; it returns immediately and you will continue executing while the receivers are run. No results are propagated from receivers and receivers can not abort the broadcast. If you want to allow receivers to propagate results or abort the broadcast you must send an ordered broadcast using sendOrderedBroadcast(android.content.Intent java.lang.String). See BroadcastReceiver for more information on Intent broadcasts.
android.content.Context.sendBroadcast,Send broadcast.
android.content.Context.sendBroadcast,Broadcast the given intent to all interested BroadcastReceivers allowing an optional required permission to be enforced.
android.content.Context.sendBroadcast,This call is asynchronous; it returns immediately and you will continue executing while the receivers are run.
android.content.Context.sendBroadcast,No results are propagated from receivers and receivers can not abort the broadcast.
android.content.Context.sendBroadcast,If you want to allow receivers to propagate results or abort the broadcast you must send an ordered broadcast using sendOrderedBroadcast(android.content.Intent java.lang.String).
android.content.Context.sendBroadcast,See BroadcastReceiver for more information on Intent broadcasts.
android.content.Context.sendBroadcast,Broadcast the given intent to all interested BroadcastReceivers. This call is asynchronous; it returns immediately and you will continue executing while the receivers are run. No results are propagated from receivers and receivers can not abort the broadcast. If you want to allow receivers to propagate results or abort the broadcast you must send an ordered broadcast using sendOrderedBroadcast(android.content.Intent java.lang.String). See BroadcastReceiver for more information on Intent broadcasts.
android.content.Context.sendBroadcast,Send broadcast.
android.content.Context.sendBroadcast,Broadcast the given intent to all interested BroadcastReceivers.
android.content.Context.sendBroadcast,This call is asynchronous; it returns immediately and you will continue executing while the receivers are run.
android.content.Context.sendBroadcast,No results are propagated from receivers and receivers can not abort the broadcast.
android.content.Context.sendBroadcast,If you want to allow receivers to propagate results or abort the broadcast you must send an ordered broadcast using sendOrderedBroadcast(android.content.Intent java.lang.String).
android.content.Context.sendBroadcast,See BroadcastReceiver for more information on Intent broadcasts.
android.content.Context.sendOrderedBroadcast,Version of sendBroadcast(android.content.Intent) that allows you to receive data back from the broadcast. This is accomplished by supplying your own BroadcastReceiver when calling which will be treated as a final receiver at the end of the broadcast -- its BroadcastReceiver#onReceive method will be called with the result values collected from the other receivers. The broadcast will be serialized in the same way as calling sendOrderedBroadcast(android.content.Intent java.lang.String). Like sendBroadcast(android.content.Intent) this method is asynchronous; it will return before resultReceiver.onReceive() is called. See BroadcastReceiver for more information on Intent broadcasts.
android.content.Context.sendOrderedBroadcast,Send ordered broadcast.
android.content.Context.sendOrderedBroadcast,Version of sendBroadcast(android.content.Intent) that allows you to receive data back from the broadcast.
android.content.Context.sendOrderedBroadcast,This is accomplished by supplying your own BroadcastReceiver when calling which will be treated as a final receiver at the end of the broadcast -- its BroadcastReceiver#onReceive method will be called with the result values collected from the other receivers.
android.content.Context.sendOrderedBroadcast,The broadcast will be serialized in the same way as calling sendOrderedBroadcast(android.content.Intent java.lang.String).
android.content.Context.sendOrderedBroadcast,Like sendBroadcast(android.content.Intent) this method is asynchronous; it will return before resultReceiver.onReceive() is called.
android.content.Context.sendOrderedBroadcast,See BroadcastReceiver for more information on Intent broadcasts.
android.content.Context.sendOrderedBroadcast,Broadcast the given intent to all interested BroadcastReceivers delivering them one at a time to allow more preferred receivers to consume the broadcast before it is delivered to less preferred receivers. This call is asynchronous; it returns immediately and you will continue executing while the receivers are run. See BroadcastReceiver for more information on Intent broadcasts.
android.content.Context.sendOrderedBroadcast,Send ordered broadcast.
android.content.Context.sendOrderedBroadcast,Broadcast the given intent to all interested BroadcastReceivers delivering them one at a time to allow more preferred receivers to consume the broadcast before it is delivered to less preferred receivers.
android.content.Context.sendOrderedBroadcast,This call is asynchronous; it returns immediately and you will continue executing while the receivers are run.
android.content.Context.sendOrderedBroadcast,See BroadcastReceiver for more information on Intent broadcasts.
android.content.Context.setTheme,Set the base theme for this context. Note that this should be called before any views are instantiated in the Context (for example before calling Activity.setContentView(View) or LayoutInflater.inflate(int ViewGroup) ).
android.content.Context.setTheme,Set theme.
android.content.Context.setTheme,Set the base theme for this context.
android.content.Context.setTheme,Note that this should be called before any views are instantiated in the Context (for example before calling Activity.setContentView(View) or LayoutInflater.inflate(int ViewGroup) ).
android.content.Context.startActivities,Launch multiple new activities. This is generally the same as calling startActivity(android.content.Intent) for the first Intent in the array that activity during its creation calling startActivity(android.content.Intent) for the second entry etc. Note that unlike that approach generally none of the activities except the last in the array will be created at this point but rather will be created when the user first visits them (due to pressing back from the activity on top). This method throws ActivityNotFoundException if there was no Activity found for any given Intent. In this case the state of the activity stack is undefined (some Intents in the list may be on it some not) so you probably want to avoid such situations.
android.content.Context.startActivities,Start activities.
android.content.Context.startActivities,Launch multiple new activities.
android.content.Context.startActivities,This is generally the same as calling startActivity(android.content.Intent) for the first Intent in the array that activity during its creation calling startActivity(android.content.Intent) for the second entry etc.
android.content.Context.startActivities,Note that unlike that approach generally none of the activities except the last in the array will be created at this point but rather will be created when the user first visits them (due to pressing back from the activity on top).
android.content.Context.startActivities,This method throws ActivityNotFoundException if there was no Activity found for any given Intent.
android.content.Context.startActivities,In this case the state of the activity stack is undefined (some Intents in the list may be on it some not) so you probably want to avoid such situations.
android.content.Context.startActivities,Same as startActivities(android.content.Intent[] android.os.Bundle) with no options specified.
android.content.Context.startActivities,Start activities.
android.content.Context.startInstrumentation,Start executing an Instrumentation class. The given Instrumentation component will be run by killing its target application (if currently running) starting the target process instantiating the instrumentation component and then letting it drive the application. This function is not synchronous -- it returns as soon as the instrumentation has started and while it is running. Instrumentation is normally only allowed to run against a package that is either unsigned or signed with a signature that the the instrumentation package is also signed with (ensuring the target trusts the instrumentation).
android.content.Context.startInstrumentation,Start instrumentation.
android.content.Context.startInstrumentation,Start executing an Instrumentation class.
android.content.Context.startInstrumentation,The given Instrumentation component will be run by killing its target application (if currently running) starting the target process instantiating the instrumentation component and then letting it drive the application.
android.content.Context.startInstrumentation,This function is not synchronous -- it returns as soon as the instrumentation has started and while it is running.
android.content.Context.startInstrumentation,Instrumentation is normally only allowed to run against a package that is either unsigned or signed with a signature that the the instrumentation package is also signed with (ensuring the target trusts the instrumentation).
android.content.Context.startService,Request that a given application service be started. The Intent should either contain the complete class name of a specific service implementation to start or a specific package name to target. If the Intent is less specified it logs a warning about this. In this case any of the multiple matching services may be used. If this service is not already running it will be instantiated and started (creating a process for it if needed); if it is running then it remains running. Every call to this method will result in a corresponding call to the target service's Service.onStartCommand(Intent int int) method with the intent given here. This provides a convenient way to submit jobs to a service without having to bind and call on to its interface. Using startService() overrides the default service lifetime that is managed by bindService(Intent ServiceConnection int) : it requires the service to remain running until stopService(Intent) is called regardless of whether any clients are connected to it. Note that calls to startService() do not nest: no matter how many times you call startService() a single call to stopService(Intent) will stop it. The system attempts to keep running services around as much as possible. The only time they should be stopped is if the current foreground application is using so many resources that the service needs to be killed. If any errors happen in the service's process it will automatically be restarted. This function will throw SecurityException if you do not have permission to start the given service. Note: Each call to startService() results in significant work done by the system to manage service lifecycle surrounding the processing of the intent which can take multiple milliseconds of CPU time. Due to this cost startService() should not be used for frequent intent delivery to a service and only for scheduling significant work. Use bound services for high frequency calls.
android.content.Context.startService,Start service.
android.content.Context.startService,Request that a given application service be started.
android.content.Context.startService,The Intent should either contain the complete class name of a specific service implementation to start or a specific package name to target.
android.content.Context.startService,If the Intent is less specified it logs a warning about this.
android.content.Context.startService,In this case any of the multiple matching services may be used.
android.content.Context.startService,If this service is not already running it will be instantiated and started (creating a process for it if needed); if it is running then it remains running.
android.content.Context.startService,Every call to this method will result in a corresponding call to the target service's Service.onStartCommand(Intent int int) method with the intent given here.
android.content.Context.startService,This provides a convenient way to submit jobs to a service without having to bind and call on to its interface.
android.content.Context.startService,Using startService() overrides the default service lifetime that is managed by bindService(Intent ServiceConnection int) : it requires the service to remain running until stopService(Intent) is called regardless of whether any clients are connected to it.
android.content.Context.startService,Note that calls to startService() do not nest: no matter how many times you call startService() a single call to stopService(Intent) will stop it.
android.content.Context.startService,The system attempts to keep running services around as much as possible.
android.content.Context.startService,The only time they should be stopped is if the current foreground application is using so many resources that the service needs to be killed.
android.content.Context.startService,If any errors happen in the service's process it will automatically be restarted.
android.content.Context.startService,This function will throw SecurityException if you do not have permission to start the given service.
android.content.Context.startService,Note: Each call to startService() results in significant work done by the system to manage service lifecycle surrounding the processing of the intent which can take multiple milliseconds of CPU time.
android.content.Context.startService,Due to this cost startService() should not be used for frequent intent delivery to a service and only for scheduling significant work.
android.content.Context.startService,Use bound services for high frequency calls.
android.content.Context.stopService,Request that a given application service be stopped. If the service is not running nothing happens. Otherwise it is stopped. Note that calls to startService() are not counted -- this stops the service no matter how many times it was started. Note that if a stopped service still has ServiceConnection objects bound to it with the BIND_AUTO_CREATE set it will not be destroyed until all of these bindings are removed. See the Service documentation for more details on a service's lifecycle. This function will throw SecurityException if you do not have permission to stop the given service.
android.content.Context.stopService,Stop service.
android.content.Context.stopService,Request that a given application service be stopped.
android.content.Context.stopService,If the service is not running nothing happens.
android.content.Context.stopService,Otherwise it is stopped.
android.content.Context.stopService,Note that calls to startService() are not counted -- this stops the service no matter how many times it was started.
android.content.Context.stopService,Note that if a stopped service still has ServiceConnection objects bound to it with the BIND_AUTO_CREATE set it will not be destroyed until all of these bindings are removed.
android.content.Context.stopService,See the Service documentation for more details on a service's lifecycle.
android.content.Context.stopService,This function will throw SecurityException if you do not have permission to stop the given service.
android.content.Context.unbindService,Disconnect from an application service. You will no longer receive calls as the service is restarted and the service is now allowed to stop at any time.
android.content.Context.unbindService,Unbind service.
android.content.Context.unbindService,Disconnect from an application service.
android.content.Context.unbindService,You will no longer receive calls as the service is restarted and the service is now allowed to stop at any time.
android.content.Context.unregisterComponentCallbacks,Remove a ComponentCallbacks object that was previously registered with registerComponentCallbacks(android.content.ComponentCallbacks).
android.content.Context.unregisterComponentCallbacks,Unregister component callbacks.
android.content.Context.unregisterReceiver,Unregister a previously registered BroadcastReceiver. All filters that have been registered for this BroadcastReceiver will be removed.
android.content.Context.unregisterReceiver,Unregister receiver.
android.content.Context.unregisterReceiver,Unregister a previously registered BroadcastReceiver.
android.content.Context.unregisterReceiver,All filters that have been registered for this BroadcastReceiver will be removed.
android.content.CursorLoader.loadInBackground,Called on a worker thread to perform the actual load and to return the result of the load operation. Implementations should not deliver the result directly but should return them from this method which will eventually end up calling Loader.deliverResult(D) on the UI thread. If implementations need to process the results on the UI thread they may override Loader.deliverResult(D) and do so there. To support cancellation this method should periodically check the value of isLoadInBackgroundCanceled() and terminate when it returns true. Subclasses may also override cancelLoadInBackground() to interrupt the load directly instead of polling isLoadInBackgroundCanceled(). When the load is canceled this method may either return normally or throw OperationCanceledException. In either case the Loader will call onCanceled(D) to perform post-cancellation cleanup and to dispose of the result object if any.
android.content.CursorLoader.loadInBackground,Load in background.
android.content.CursorLoader.loadInBackground,Called on a worker thread to perform the actual load and to return the result of the load operation.
android.content.CursorLoader.loadInBackground,Implementations should not deliver the result directly but should return them from this method which will eventually end up calling Loader.deliverResult(D) on the UI thread.
android.content.CursorLoader.loadInBackground,If implementations need to process the results on the UI thread they may override Loader.deliverResult(D) and do so there.
android.content.CursorLoader.loadInBackground,To support cancellation this method should periodically check the value of isLoadInBackgroundCanceled() and terminate when it returns true.
android.content.CursorLoader.loadInBackground,Subclasses may also override cancelLoadInBackground() to interrupt the load directly instead of polling isLoadInBackgroundCanceled().
android.content.CursorLoader.loadInBackground,When the load is canceled this method may either return normally or throw OperationCanceledException.
android.content.CursorLoader.loadInBackground,In either case the Loader will call onCanceled(D) to perform post-cancellation cleanup and to dispose of the result object if any.
android.content.Intent.addCategory,Add a new category to the intent. Categories provide additional detail about the action the intent performs. When resolving an intent only activities that provide all of the requested categories will be used.
android.content.Intent.addCategory,Add category.
android.content.Intent.addCategory,Add a new category to the intent.
android.content.Intent.addCategory,Categories provide additional detail about the action the intent performs.
android.content.Intent.addCategory,When resolving an intent only activities that provide all of the requested categories will be used.
android.content.Intent.addFlags,Add additional flags to the intent (or with existing flags value).
android.content.Intent.addFlags,Add flags.
android.content.Intent.createChooser,Convenience function for creating a ACTION_CHOOSER Intent. Builds a new ACTION_CHOOSER Intent that wraps the given target intent also optionally supplying a title. If the target intent has specified FLAG_GRANT_READ_URI_PERMISSION or FLAG_GRANT_WRITE_URI_PERMISSION then these flags will also be set in the returned chooser intent with its ClipData set appropriately: either a direct reflection of getClipData() if that is non-null or a new ClipData built from getData(). The caller may optionally supply an IntentSender to receive a callback when the user makes a choice. This can be useful if the calling application wants to remember the last chosen target and surface it as a more prominent or one-touch affordance elsewhere in the UI for next time.
android.content.Intent.createChooser,Create chooser.
android.content.Intent.createChooser,Convenience function for creating a ACTION_CHOOSER Intent.
android.content.Intent.createChooser,Builds a new ACTION_CHOOSER Intent that wraps the given target intent also optionally supplying a title.
android.content.Intent.createChooser,If the target intent has specified FLAG_GRANT_READ_URI_PERMISSION or FLAG_GRANT_WRITE_URI_PERMISSION then these flags will also be set in the returned chooser intent with its ClipData set appropriately: either a direct reflection of getClipData() if that is non-null or a new ClipData built from getData().
android.content.Intent.createChooser,The caller may optionally supply an IntentSender to receive a callback when the user makes a choice.
android.content.Intent.createChooser,This can be useful if the calling application wants to remember the last chosen target and surface it as a more prominent or one-touch affordance elsewhere in the UI for next time.
android.content.Intent.createChooser,Convenience function for creating a ACTION_CHOOSER Intent. Builds a new ACTION_CHOOSER Intent that wraps the given target intent also optionally supplying a title. If the target intent has specified FLAG_GRANT_READ_URI_PERMISSION or FLAG_GRANT_WRITE_URI_PERMISSION then these flags will also be set in the returned chooser intent with its ClipData set appropriately: either a direct reflection of getClipData() if that is non-null or a new ClipData built from getData().
android.content.Intent.createChooser,Create chooser.
android.content.Intent.createChooser,Convenience function for creating a ACTION_CHOOSER Intent.
android.content.Intent.createChooser,Builds a new ACTION_CHOOSER Intent that wraps the given target intent also optionally supplying a title.
android.content.Intent.createChooser,If the target intent has specified FLAG_GRANT_READ_URI_PERMISSION or FLAG_GRANT_WRITE_URI_PERMISSION then these flags will also be set in the returned chooser intent with its ClipData set appropriately: either a direct reflection of getClipData() if that is non-null or a new ClipData built from getData().
android.content.Intent.getAction,Retrieve the general action to be performed such as ACTION_VIEW. The action describes the general way the rest of the information in the intent should be interpreted -- most importantly what to do with the data returned by getData().
android.content.Intent.getAction,Get action.
android.content.Intent.getAction,Retrieve the general action to be performed such as ACTION_VIEW.
android.content.Intent.getAction,The action describes the general way the rest of the information in the intent should be interpreted -- most importantly what to do with the data returned by getData().
android.content.Intent.getCategories,Return the set of all categories in the intent. If there are no categories returns NULL.
android.content.Intent.getCategories,Get categories.
android.content.Intent.getCategories,Return the set of all categories in the intent.
android.content.Intent.getCategories,If there are no categories returns NULL.
android.content.Intent.getClipData,Return the ClipData associated with this Intent. If there is none returns null. See setClipData(ClipData) for more information.
android.content.Intent.getClipData,Get clip data.
android.content.Intent.getClipData,Return the ClipData associated with this Intent.
android.content.Intent.getClipData,If there is none returns null.
android.content.Intent.getClipData,See setClipData(ClipData) for more information.
android.content.Intent.getComponent,Retrieve the concrete component associated with the intent. When receiving an intent this is the component that was found to best handle it (that is yourself) and will always be non-null; in all other cases it will be null unless explicitly set.
android.content.Intent.getComponent,Get component.
android.content.Intent.getComponent,Retrieve the concrete component associated with the intent.
android.content.Intent.getComponent,When receiving an intent this is the component that was found to best handle it (that is yourself) and will always be non-null; in all other cases it will be null unless explicitly set.
android.content.Intent.getData,Retrieve data this intent is operating on. This URI specifies the name of the data; often it uses the content: scheme specifying data in a content provider. Other schemes may be handled by specific activities such as http: by the web browser.
android.content.Intent.getData,Get data.
android.content.Intent.getData,Retrieve data this intent is operating on.
android.content.Intent.getData,This URI specifies the name of the data; often it uses the content: scheme specifying data in a content provider.
android.content.Intent.getData,Other schemes may be handled by specific activities such as http: by the web browser.
android.content.Intent.getDataString,The same as getData() but returns the URI as an encoded String.
android.content.Intent.getDataString,Get data string.
android.content.Intent.getExtras,Retrieves a map of extended data from the intent.
android.content.Intent.getExtras,Get extras.
android.content.Intent.getFlags,Retrieve any special flags associated with this intent. You will normally just set them with setFlags(int) and let the system take the appropriate action with them.
android.content.Intent.getFlags,Get flags.
android.content.Intent.getFlags,Retrieve any special flags associated with this intent.
android.content.Intent.getFlags,You will normally just set them with setFlags(int) and let the system take the appropriate action with them.
android.content.Intent.getLongArrayExtra,Retrieve extended data from the intent.
android.content.Intent.getLongArrayExtra,Get long array extra.
android.content.Intent.getPackage,Retrieve the application package name this Intent is limited to. When resolving an Intent if non-null this limits the resolution to only components in the given application package.
android.content.Intent.getPackage,Get package.
android.content.Intent.getPackage,Retrieve the application package name this Intent is limited to.
android.content.Intent.getPackage,When resolving an Intent if non-null this limits the resolution to only components in the given application package.
android.content.Intent.getScheme,"Return the scheme portion of the intent's data. If the data is null or does not include a scheme null is returned. Otherwise the scheme prefix without the final ':' is returned i.e. ""http"". This is the same as calling getData().getScheme() (and checking for null data)."
android.content.Intent.getScheme,Get scheme.
android.content.Intent.getScheme,Return the scheme portion of the intent's data.
android.content.Intent.getScheme,If the data is null or does not include a scheme null is returned.
android.content.Intent.getScheme,Otherwise the scheme prefix without the final ':' is returned i.e.
android.content.Intent.getScheme,"""http""."
android.content.Intent.getScheme,This is the same as calling getData().getScheme() (and checking for null data).
android.content.Intent.getSourceBounds,Get the bounds of the sender of this intent in screen coordinates. This can be used as a hint to the receiver for animations and the like. Null means that there is no source bounds.
android.content.Intent.getSourceBounds,Get source bounds.
android.content.Intent.getSourceBounds,Get the bounds of the sender of this intent in screen coordinates.
android.content.Intent.getSourceBounds,This can be used as a hint to the receiver for animations and the like.
android.content.Intent.getSourceBounds,Null means that there is no source bounds.
android.content.Intent.getType,Retrieve any explicit MIME type included in the intent. This is usually null as the type is determined by the intent data.
android.content.Intent.getType,Get type.
android.content.Intent.getType,Retrieve any explicit MIME type included in the intent.
android.content.Intent.getType,This is usually null as the type is determined by the intent data.
android.content.Intent.hasCategory,Check if a category exists in the intent.
android.content.Intent.hasCategory,Has category.
android.content.Intent.hasExtra,Returns true if an extra value is associated with the given name.
android.content.Intent.hasExtra,Has extra.
android.content.Intent.makeMainActivity,Create an intent to launch the main (root) activity of a task. This is the Intent that is started when the application's is launched from Home. For anything else that wants to launch an application in the same way it is important that they use an Intent structured the same way and can use this function to ensure this is the case. The returned Intent has the given Activity component as its explicit component ACTION_MAIN as its action and includes the category CATEGORY_LAUNCHER. This does not have FLAG_ACTIVITY_NEW_TASK set though typically you will want to do that through addFlags(int) on the returned Intent.
android.content.Intent.makeMainActivity,Make main activity.
android.content.Intent.makeMainActivity,Create an intent to launch the main (root) activity of a task.
android.content.Intent.makeMainActivity,This is the Intent that is started when the application's is launched from Home.
android.content.Intent.makeMainActivity,For anything else that wants to launch an application in the same way it is important that they use an Intent structured the same way and can use this function to ensure this is the case.
android.content.Intent.makeMainActivity,The returned Intent has the given Activity component as its explicit component ACTION_MAIN as its action and includes the category CATEGORY_LAUNCHER.
android.content.Intent.makeMainActivity,This does not have FLAG_ACTIVITY_NEW_TASK set though typically you will want to do that through addFlags(int) on the returned Intent.
android.content.Intent.makeMainSelectorActivity,Make an Intent for the main activity of an application without specifying a specific activity to run but giving a selector to find the activity. This results in a final Intent that is structured the same as when the application is launched from Home. For anything else that wants to launch an application in the same way it is important that they use an Intent structured the same way and can use this function to ensure this is the case. The returned Intent has ACTION_MAIN as its action and includes the category CATEGORY_LAUNCHER. This does not have FLAG_ACTIVITY_NEW_TASK set though typically you will want to do that through addFlags(int) on the returned Intent.
android.content.Intent.makeMainSelectorActivity,Make main selector activity.
android.content.Intent.makeMainSelectorActivity,Make an Intent for the main activity of an application without specifying a specific activity to run but giving a selector to find the activity.
android.content.Intent.makeMainSelectorActivity,This results in a final Intent that is structured the same as when the application is launched from Home.
android.content.Intent.makeMainSelectorActivity,For anything else that wants to launch an application in the same way it is important that they use an Intent structured the same way and can use this function to ensure this is the case.
android.content.Intent.makeMainSelectorActivity,The returned Intent has ACTION_MAIN as its action and includes the category CATEGORY_LAUNCHER.
android.content.Intent.makeMainSelectorActivity,This does not have FLAG_ACTIVITY_NEW_TASK set though typically you will want to do that through addFlags(int) on the returned Intent.
android.content.Intent.makeRestartActivityTask,Make an Intent that can be used to re-launch an application's task in its base state. This is like makeMainActivity(android.content.ComponentName) but also sets the flags FLAG_ACTIVITY_NEW_TASK and FLAG_ACTIVITY_CLEAR_TASK.
android.content.Intent.makeRestartActivityTask,Make restart activity task.
android.content.Intent.makeRestartActivityTask,Make an Intent that can be used to re-launch an application's task in its base state.
android.content.Intent.makeRestartActivityTask,This is like makeMainActivity(android.content.ComponentName) but also sets the flags FLAG_ACTIVITY_NEW_TASK and FLAG_ACTIVITY_CLEAR_TASK.
android.content.Intent.parseUri,Create an intent from a URI. This URI may encode the action category and other intent fields if it was returned by toUri(int). If the Intent was not generate by toUri() its data will be the entire URI and its action will be ACTION_VIEW. The URI given here must not be relative -- that is it must include the scheme and full path.
android.content.Intent.parseUri,Parse uri.
android.content.Intent.parseUri,Create an intent from a URI.
android.content.Intent.parseUri,This URI may encode the action category and other intent fields if it was returned by toUri(int).
android.content.Intent.parseUri,If the Intent was not generate by toUri() its data will be the entire URI and its action will be ACTION_VIEW.
android.content.Intent.parseUri,The URI given here must not be relative -- that is it must include the scheme and full path.
android.content.Intent.putExtra,"Add extended data to the intent. The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,Put extra.
android.content.Intent.putExtra,Add extended data to the intent.
android.content.Intent.putExtra,"The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,"Add extended data to the intent. The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,Put extra.
android.content.Intent.putExtra,Add extended data to the intent.
android.content.Intent.putExtra,"The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,"Add extended data to the intent. The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,Put extra.
android.content.Intent.putExtra,Add extended data to the intent.
android.content.Intent.putExtra,"The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,"Add extended data to the intent. The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,Put extra.
android.content.Intent.putExtra,Add extended data to the intent.
android.content.Intent.putExtra,"The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,"Add extended data to the intent. The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,Put extra.
android.content.Intent.putExtra,Add extended data to the intent.
android.content.Intent.putExtra,"The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,"Add extended data to the intent. The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,Put extra.
android.content.Intent.putExtra,Add extended data to the intent.
android.content.Intent.putExtra,"The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,"Add extended data to the intent. The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,Put extra.
android.content.Intent.putExtra,Add extended data to the intent.
android.content.Intent.putExtra,"The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,"Add extended data to the intent. The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,Put extra.
android.content.Intent.putExtra,Add extended data to the intent.
android.content.Intent.putExtra,"The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,"Add extended data to the intent. The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,Put extra.
android.content.Intent.putExtra,Add extended data to the intent.
android.content.Intent.putExtra,"The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,"Add extended data to the intent. The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,Put extra.
android.content.Intent.putExtra,Add extended data to the intent.
android.content.Intent.putExtra,"The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,"Add extended data to the intent. The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,Put extra.
android.content.Intent.putExtra,Add extended data to the intent.
android.content.Intent.putExtra,"The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,"Add extended data to the intent. The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,Put extra.
android.content.Intent.putExtra,Add extended data to the intent.
android.content.Intent.putExtra,"The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,"Add extended data to the intent. The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,Put extra.
android.content.Intent.putExtra,Add extended data to the intent.
android.content.Intent.putExtra,"The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,"Add extended data to the intent. The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,Put extra.
android.content.Intent.putExtra,Add extended data to the intent.
android.content.Intent.putExtra,"The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,"Add extended data to the intent. The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,Put extra.
android.content.Intent.putExtra,Add extended data to the intent.
android.content.Intent.putExtra,"The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,"Add extended data to the intent. The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,Put extra.
android.content.Intent.putExtra,Add extended data to the intent.
android.content.Intent.putExtra,"The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,"Add extended data to the intent. The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,Put extra.
android.content.Intent.putExtra,Add extended data to the intent.
android.content.Intent.putExtra,"The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,"Add extended data to the intent. The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,Put extra.
android.content.Intent.putExtra,Add extended data to the intent.
android.content.Intent.putExtra,"The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,"Add extended data to the intent. The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,Put extra.
android.content.Intent.putExtra,Add extended data to the intent.
android.content.Intent.putExtra,"The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,"Add extended data to the intent. The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,Put extra.
android.content.Intent.putExtra,Add extended data to the intent.
android.content.Intent.putExtra,"The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,"Add extended data to the intent. The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,Put extra.
android.content.Intent.putExtra,Add extended data to the intent.
android.content.Intent.putExtra,"The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,"Add extended data to the intent. The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,Put extra.
android.content.Intent.putExtra,Add extended data to the intent.
android.content.Intent.putExtra,"The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,"Add extended data to the intent. The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,Put extra.
android.content.Intent.putExtra,Add extended data to the intent.
android.content.Intent.putExtra,"The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,"Add extended data to the intent. The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtra,Put extra.
android.content.Intent.putExtra,Add extended data to the intent.
android.content.Intent.putExtra,"The name must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtras,Copy all extras in 'src' in to this intent.
android.content.Intent.putExtras,Put extras.
android.content.Intent.putExtras,"Add a set of extended data to the intent. The keys must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.putExtras,Put extras.
android.content.Intent.putExtras,Add a set of extended data to the intent.
android.content.Intent.putExtras,"The keys must include a package prefix for example the app com.android.contacts would use names like ""com.android.contacts.ShowAll""."
android.content.Intent.removeExtra,Remove extended data from the intent.
android.content.Intent.removeExtra,Remove extra.
android.content.Intent.resolveActivity,"Return the Activity component that should be used to handle this intent. The appropriate component is determined based on the information in the intent evaluated as follows: If getComponent() returns an explicit class that is returned without any further consideration. The activity must handle the Intent#CATEGORY_DEFAULT Intent category to be considered. If getAction() is non-NULL the activity must handle this action. If resolveType(ContentResolver) returns non-NULL the activity must handle this type. If addCategory(String) has added any categories the activity must handle ALL of the categories specified. If getPackage() is non-NULL only activity components in that application package will be considered. If there are no activities that satisfy all of these conditions a null string is returned. If multiple activities are found to satisfy the intent the one with the highest priority will be used. If there are multiple activities with the same priority the system will either pick the best activity based on user preference or resolve to a system class that will allow the user to pick an activity and forward from there. This method is implemented simply by calling PackageManager#resolveActivity with the ""defaultOnly"" parameter true. This API is called for you as part of starting an activity from an intent. You do not normally need to call it yourself."
android.content.Intent.resolveActivity,Resolve activity.
android.content.Intent.resolveActivity,Return the Activity component that should be used to handle this intent.
android.content.Intent.resolveActivity,The appropriate component is determined based on the information in the intent evaluated as follows: If getComponent() returns an explicit class that is returned without any further consideration.
android.content.Intent.resolveActivity,The activity must handle the Intent#CATEGORY_DEFAULT Intent category to be considered.
android.content.Intent.resolveActivity,If getAction() is non-NULL the activity must handle this action.
android.content.Intent.resolveActivity,If resolveType(ContentResolver) returns non-NULL the activity must handle this type.
android.content.Intent.resolveActivity,If addCategory(String) has added any categories the activity must handle ALL of the categories specified.
android.content.Intent.resolveActivity,If getPackage() is non-NULL only activity components in that application package will be considered.
android.content.Intent.resolveActivity,If there are no activities that satisfy all of these conditions a null string is returned.
android.content.Intent.resolveActivity,If multiple activities are found to satisfy the intent the one with the highest priority will be used.
android.content.Intent.resolveActivity,If there are multiple activities with the same priority the system will either pick the best activity based on user preference or resolve to a system class that will allow the user to pick an activity and forward from there.
android.content.Intent.resolveActivity,"This method is implemented simply by calling PackageManager#resolveActivity with the ""defaultOnly"" parameter true."
android.content.Intent.resolveActivity,This API is called for you as part of starting an activity from an intent.
android.content.Intent.resolveActivity,You do not normally need to call it yourself.
android.content.Intent.resolveActivityInfo,Resolve the Intent into an ActivityInfo describing the activity that should execute the intent. Resolution follows the same rules as described for resolveActivity(PackageManager) but you get back the completely information about the resolved activity instead of just its class name.
android.content.Intent.resolveActivityInfo,Resolve activity info.
android.content.Intent.resolveActivityInfo,Resolve the Intent into an ActivityInfo describing the activity that should execute the intent.
android.content.Intent.resolveActivityInfo,Resolution follows the same rules as described for resolveActivity(PackageManager) but you get back the completely information about the resolved activity instead of just its class name.
android.content.Intent.resolveType,Return the MIME data type of this intent. If the type field is explicitly set that is simply returned. Otherwise if the data is set the type of that data is returned. If neither fields are set a null is returned.
android.content.Intent.resolveType,Resolve type.
android.content.Intent.resolveType,Return the MIME data type of this intent.
android.content.Intent.resolveType,If the type field is explicitly set that is simply returned.
android.content.Intent.resolveType,Otherwise if the data is set the type of that data is returned.
android.content.Intent.resolveType,If neither fields are set a null is returned.
android.content.Intent.resolveType,Return the MIME data type of this intent. If the type field is explicitly set that is simply returned. Otherwise if the data is set the type of that data is returned. If neither fields are set a null is returned.
android.content.Intent.resolveType,Resolve type.
android.content.Intent.resolveType,Return the MIME data type of this intent.
android.content.Intent.resolveType,If the type field is explicitly set that is simply returned.
android.content.Intent.resolveType,Otherwise if the data is set the type of that data is returned.
android.content.Intent.resolveType,If neither fields are set a null is returned.
android.content.Intent.resolveTypeIfNeeded,Return the MIME data type of this intent only if it will be needed for intent resolution. This is not generally useful for application code; it is used by the frameworks for communicating with back-end system services.
android.content.Intent.resolveTypeIfNeeded,Resolve type if needed.
android.content.Intent.resolveTypeIfNeeded,Return the MIME data type of this intent only if it will be needed for intent resolution.
android.content.Intent.resolveTypeIfNeeded,This is not generally useful for application code; it is used by the frameworks for communicating with back-end system services.
android.content.Intent.setAction,Set the general action to be performed.
android.content.Intent.setAction,Set action.
android.content.Intent.setClass,Convenience for calling setComponent(android.content.ComponentName) with the name returned by a Class object.
android.content.Intent.setClass,Set class.
android.content.Intent.setClassName,Convenience for calling setComponent(ComponentName) with an explicit application package name and class name.
android.content.Intent.setClassName,Set class name.
android.content.Intent.setClassName,Convenience for calling setComponent(ComponentName) with an explicit class name.
android.content.Intent.setClassName,Set class name.
android.content.Intent.setClipData,"Set a ClipData associated with this Intent. This replaces any previously set ClipData. The ClipData in an intent is not used for Intent matching or other such operations. Semantically it is like extras used to transmit additional data with the Intent. The main feature of using this over the extras for data is that FLAG_GRANT_READ_URI_PERMISSION and FLAG_GRANT_WRITE_URI_PERMISSION will operate on any URI items included in the clip data. This is useful in particular if you want to transmit an Intent containing multiple content: URIs for which the recipient may not have global permission to access the content provider. If the ClipData contains items that are themselves Intents any grant flags in those Intents will be ignored. Only the top-level flags of the main Intent are respected and will be applied to all Uri or Intent items in the clip (or sub-items of the clip). The MIME type label and icon in the ClipData object are not directly used by Intent. Applications should generally rely on the MIME type of the Intent itself not what it may find in the ClipData. A common practice is to construct a ClipData for use with an Intent with a MIME type of ""*/*""."
android.content.Intent.setClipData,Set clip data.
android.content.Intent.setClipData,Set a ClipData associated with this Intent.
android.content.Intent.setClipData,This replaces any previously set ClipData.
android.content.Intent.setClipData,The ClipData in an intent is not used for Intent matching or other such operations.
android.content.Intent.setClipData,Semantically it is like extras used to transmit additional data with the Intent.
android.content.Intent.setClipData,The main feature of using this over the extras for data is that FLAG_GRANT_READ_URI_PERMISSION and FLAG_GRANT_WRITE_URI_PERMISSION will operate on any URI items included in the clip data.
android.content.Intent.setClipData,This is useful in particular if you want to transmit an Intent containing multiple content: URIs for which the recipient may not have global permission to access the content provider.
android.content.Intent.setClipData,If the ClipData contains items that are themselves Intents any grant flags in those Intents will be ignored.
android.content.Intent.setClipData,Only the top-level flags of the main Intent are respected and will be applied to all Uri or Intent items in the clip (or sub-items of the clip).
android.content.Intent.setClipData,The MIME type label and icon in the ClipData object are not directly used by Intent.
android.content.Intent.setClipData,Applications should generally rely on the MIME type of the Intent itself not what it may find in the ClipData.
android.content.Intent.setClipData,"A common practice is to construct a ClipData for use with an Intent with a MIME type of ""*/*""."
android.content.Intent.setComponent,(Usually optional) Explicitly set the component to handle the intent. If left with the default value of null the system will determine the appropriate class to use based on the other fields (action data type categories) in the Intent. If this class is defined the specified class will always be used regardless of the other fields. You should only set this value when you know you absolutely want a specific class to be used; otherwise it is better to let the system find the appropriate class so that you will respect the installed applications and user preferences.
android.content.Intent.setComponent,Set component.
android.content.Intent.setComponent,(Usually optional) Explicitly set the component to handle the intent.
android.content.Intent.setComponent,If left with the default value of null the system will determine the appropriate class to use based on the other fields (action data type categories) in the Intent.
android.content.Intent.setComponent,If this class is defined the specified class will always be used regardless of the other fields.
android.content.Intent.setComponent,You should only set this value when you know you absolutely want a specific class to be used; otherwise it is better to let the system find the appropriate class so that you will respect the installed applications and user preferences.
android.content.Intent.setData,Set the data this intent is operating on. This method automatically clears any type that was previously set by setType(String) or setTypeAndNormalize(String). Note: scheme matching in the Android framework is case-sensitive unlike the formal RFC. As a result you should always write your Uri with a lower case scheme or use Uri#normalizeScheme or setDataAndNormalize(Uri) to ensure that the scheme is converted to lower case.
android.content.Intent.setData,Set data.
android.content.Intent.setData,Set the data this intent is operating on.
android.content.Intent.setData,This method automatically clears any type that was previously set by setType(String) or setTypeAndNormalize(String).
android.content.Intent.setData,Note: scheme matching in the Android framework is case-sensitive unlike the formal RFC.
android.content.Intent.setData,As a result you should always write your Uri with a lower case scheme or use Uri#normalizeScheme or setDataAndNormalize(Uri) to ensure that the scheme is converted to lower case.
android.content.Intent.setDataAndType,(Usually optional) Set the data for the intent along with an explicit MIME data type. This method should very rarely be used -- it allows you to override the MIME type that would ordinarily be inferred from the data with your own type given here. Note: MIME type and Uri scheme matching in the Android framework is case-sensitive unlike the formal RFC definitions. As a result you should always write these elements with lower case letters or use normalizeMimeType(String) or Uri.normalizeScheme() or setDataAndTypeAndNormalize(Uri String) to ensure that they are converted to lower case.
android.content.Intent.setDataAndType,Set data and type.
android.content.Intent.setDataAndType,(Usually optional) Set the data for the intent along with an explicit MIME data type.
android.content.Intent.setDataAndType,This method should very rarely be used -- it allows you to override the MIME type that would ordinarily be inferred from the data with your own type given here.
android.content.Intent.setDataAndType,Note: MIME type and Uri scheme matching in the Android framework is case-sensitive unlike the formal RFC definitions.
android.content.Intent.setDataAndType,As a result you should always write these elements with lower case letters or use normalizeMimeType(String) or Uri.normalizeScheme() or setDataAndTypeAndNormalize(Uri String) to ensure that they are converted to lower case.
android.content.Intent.setExtrasClassLoader,Sets the ClassLoader that will be used when unmarshalling any Parcelable values from the extras of this Intent.
android.content.Intent.setExtrasClassLoader,Set extras class loader.
android.content.Intent.setFlags,Set special flags controlling how this intent is handled. Most values here depend on the type of component being executed by the Intent specifically the FLAG_ACTIVITY_* flags are all for use with Context#startActivity and the FLAG_RECEIVER_* flags are all for use with Context#sendBroadcast(Intent). See the Tasks and Back Stack documentation for important information on how some of these options impact the behavior of your application.
android.content.Intent.setFlags,Set flags.
android.content.Intent.setFlags,Set special flags controlling how this intent is handled.
android.content.Intent.setFlags,Most values here depend on the type of component being executed by the Intent specifically the FLAG_ACTIVITY_* flags are all for use with Context#startActivity and the FLAG_RECEIVER_* flags are all for use with Context#sendBroadcast(Intent).
android.content.Intent.setFlags,See the Tasks and Back Stack documentation for important information on how some of these options impact the behavior of your application.
android.content.Intent.setPackage,(Usually optional) Set an explicit application package name that limits the components this Intent will resolve to. If left to the default value of null all components in all applications will considered. If non-null the Intent can only match the components in the given application package.
android.content.Intent.setPackage,Set package.
android.content.Intent.setPackage,(Usually optional) Set an explicit application package name that limits the components this Intent will resolve to.
android.content.Intent.setPackage,If left to the default value of null all components in all applications will considered.
android.content.Intent.setPackage,If non-null the Intent can only match the components in the given application package.
android.content.Intent.setSelector,Set a selector for this Intent. This is a modification to the kinds of things the Intent will match. If the selector is set it will be used when trying to find entities that can handle the Intent instead of the main contents of the Intent. This allows you build an Intent containing a generic protocol while targeting it more specifically. An example of where this may be used is with things like CATEGORY_APP_BROWSER. This category allows you to build an Intent that will launch the Browser application. However the correct main entry point of an application is actually ACTION_MAIN CATEGORY_LAUNCHER with setComponent(android.content.ComponentName) used to specify the actual Activity to launch. If you launch the browser with something different undesired behavior may happen if the user has previously or later launches it the normal way since they do not match. Instead you can build an Intent with the MAIN action (but no ComponentName yet specified) and set a selector with ACTION_MAIN and CATEGORY_APP_BROWSER to point it specifically to the browser activity. Setting a selector does not impact the behavior of filterEquals(android.content.Intent) and filterHashCode(). This is part of the desired behavior of a selector -- it does not impact the base meaning of the Intent just what kinds of things will be matched against it when determining who can handle it. You can not use both a selector and setPackage(java.lang.String) on the same base Intent.
android.content.Intent.setSelector,Set selector.
android.content.Intent.setSelector,Set a selector for this Intent.
android.content.Intent.setSelector,This is a modification to the kinds of things the Intent will match.
android.content.Intent.setSelector,If the selector is set it will be used when trying to find entities that can handle the Intent instead of the main contents of the Intent.
android.content.Intent.setSelector,This allows you build an Intent containing a generic protocol while targeting it more specifically.
android.content.Intent.setSelector,An example of where this may be used is with things like CATEGORY_APP_BROWSER.
android.content.Intent.setSelector,This category allows you to build an Intent that will launch the Browser application.
android.content.Intent.setSelector,However the correct main entry point of an application is actually ACTION_MAIN CATEGORY_LAUNCHER with setComponent(android.content.ComponentName) used to specify the actual Activity to launch.
android.content.Intent.setSelector,If you launch the browser with something different undesired behavior may happen if the user has previously or later launches it the normal way since they do not match.
android.content.Intent.setSelector,Instead you can build an Intent with the MAIN action (but no ComponentName yet specified) and set a selector with ACTION_MAIN and CATEGORY_APP_BROWSER to point it specifically to the browser activity.
android.content.Intent.setSelector,Setting a selector does not impact the behavior of filterEquals(android.content.Intent) and filterHashCode().
android.content.Intent.setSelector,This is part of the desired behavior of a selector -- it does not impact the base meaning of the Intent just what kinds of things will be matched against it when determining who can handle it.
android.content.Intent.setSelector,You can not use both a selector and setPackage(java.lang.String) on the same base Intent.
android.content.Intent.setSourceBounds,Set the bounds of the sender of this intent in screen coordinates. This can be used as a hint to the receiver for animations and the like. Null means that there is no source bounds.
android.content.Intent.setSourceBounds,Set source bounds.
android.content.Intent.setSourceBounds,Set the bounds of the sender of this intent in screen coordinates.
android.content.Intent.setSourceBounds,This can be used as a hint to the receiver for animations and the like.
android.content.Intent.setSourceBounds,Null means that there is no source bounds.
android.content.Intent.setType,Set an explicit MIME data type. This is used to create intents that only specify a type and not data for example to indicate the type of data to return. This method automatically clears any data that was previously set (for example by setData(Uri) ). Note: MIME type matching in the Android framework is case-sensitive unlike formal RFC MIME types. As a result you should always write your MIME types with lower case letters or use normalizeMimeType(String) or setTypeAndNormalize(String) to ensure that it is converted to lower case.
android.content.Intent.setType,Set type.
android.content.Intent.setType,Set an explicit MIME data type.
android.content.Intent.setType,This is used to create intents that only specify a type and not data for example to indicate the type of data to return.
android.content.Intent.setType,This method automatically clears any data that was previously set (for example by setData(Uri) ).
android.content.Intent.setType,Note: MIME type matching in the Android framework is case-sensitive unlike formal RFC MIME types.
android.content.Intent.setType,As a result you should always write your MIME types with lower case letters or use normalizeMimeType(String) or setTypeAndNormalize(String) to ensure that it is converted to lower case.
android.content.Intent.toURI,This method was deprecated in API level 15. Use toUri(int) instead. Call toUri(int) with 0 flags.
android.content.Intent.toURI,To u r i.
android.content.Intent.toURI,This method was deprecated in API level 15.
android.content.Intent.toURI,Use toUri(int) instead.
android.content.Intent.toURI,Call toUri(int) with 0 flags.
android.content.Intent.toUri,Convert this Intent into a String holding a URI representation of it. The returned URI string has been properly URI encoded so it can be used with Uri#parse. The URI contains the Intent's data as the base URI with an additional fragment describing the action categories type flags package component and extras. You can convert the returned string back to an Intent with getIntent(String).
android.content.Intent.toUri,To uri.
android.content.Intent.toUri,Convert this Intent into a String holding a URI representation of it.
android.content.Intent.toUri,The returned URI string has been properly URI encoded so it can be used with Uri#parse.
android.content.Intent.toUri,The URI contains the Intent's data as the base URI with an additional fragment describing the action categories type flags package component and extras.
android.content.Intent.toUri,You can convert the returned string back to an Intent with getIntent(String).
android.content.IntentFilter.actionsIterator,Return an iterator over the filter's actions. If there are no actions returns null.
android.content.IntentFilter.actionsIterator,Actions iterator.
android.content.IntentFilter.actionsIterator,Return an iterator over the filter's actions.
android.content.IntentFilter.actionsIterator,If there are no actions returns null.
android.content.IntentFilter.addAction,Add a new Intent action to match against. If any actions are included in the filter then an Intent's action must be one of those values for it to match. If no actions are included the Intent action is ignored.
android.content.IntentFilter.addAction,Add action.
android.content.IntentFilter.addAction,Add a new Intent action to match against.
android.content.IntentFilter.addAction,If any actions are included in the filter then an Intent's action must be one of those values for it to match.
android.content.IntentFilter.addAction,If no actions are included the Intent action is ignored.
android.content.IntentFilter.addCategory,Add a new Intent category to match against. The semantics of categories is the opposite of actions -- an Intent includes the categories that it requires all of which must be included in the filter in order to match. In other words adding a category to the filter has no impact on matching unless that category is specified in the intent.
android.content.IntentFilter.addCategory,Add category.
android.content.IntentFilter.addCategory,Add a new Intent category to match against.
android.content.IntentFilter.addCategory,The semantics of categories is the opposite of actions -- an Intent includes the categories that it requires all of which must be included in the filter in order to match.
android.content.IntentFilter.addCategory,In other words adding a category to the filter has no impact on matching unless that category is specified in the intent.
android.content.IntentFilter.addDataAuthority,Add a new Intent data authority to match against. The filter must include one or more schemes (via addDataScheme(String) ) for the authority to be considered. If any authorities are included in the filter then an Intent's data must match one of them. If no authorities are included then only the scheme must match. Note: host name in the Android framework is case-sensitive unlike formal RFC host names. As a result you should always write your host names with lower case letters and any host names you receive from outside of Android should be converted to lower case before supplying them here.
android.content.IntentFilter.addDataAuthority,Add data authority.
android.content.IntentFilter.addDataAuthority,Add a new Intent data authority to match against.
android.content.IntentFilter.addDataAuthority,The filter must include one or more schemes (via addDataScheme(String) ) for the authority to be considered.
android.content.IntentFilter.addDataAuthority,If any authorities are included in the filter then an Intent's data must match one of them.
android.content.IntentFilter.addDataAuthority,If no authorities are included then only the scheme must match.
android.content.IntentFilter.addDataAuthority,Note: host name in the Android framework is case-sensitive unlike formal RFC host names.
android.content.IntentFilter.addDataAuthority,As a result you should always write your host names with lower case letters and any host names you receive from outside of Android should be converted to lower case before supplying them here.
android.content.IntentFilter.addDataPath,Add a new Intent data path to match against. The filter must include one or more schemes (via addDataScheme(String) ) and one or more authorities (via addDataAuthority(String String) ) for the path to be considered. If any paths are included in the filter then an Intent's data must match one of them. If no paths are included then only the scheme/authority must match. The path given here can either be a literal that must directly match or match against a prefix or it can be a simple globbing pattern. If the latter you can use '*' anywhere in the pattern to match zero or more instances of the previous character '.' as a wildcard to match any character and '\' to escape the next character.
android.content.IntentFilter.addDataPath,Add data path.
android.content.IntentFilter.addDataPath,Add a new Intent data path to match against.
android.content.IntentFilter.addDataPath,The filter must include one or more schemes (via addDataScheme(String) ) and one or more authorities (via addDataAuthority(String String) ) for the path to be considered.
android.content.IntentFilter.addDataPath,If any paths are included in the filter then an Intent's data must match one of them.
android.content.IntentFilter.addDataPath,If no paths are included then only the scheme/authority must match.
android.content.IntentFilter.addDataPath,The path given here can either be a literal that must directly match or match against a prefix or it can be a simple globbing pattern.
android.content.IntentFilter.addDataPath,If the latter you can use '*' anywhere in the pattern to match zero or more instances of the previous character '.' as a wildcard to match any character and '\' to escape the next character.
android.content.IntentFilter.addDataScheme,Add a new Intent data scheme to match against. If any schemes are included in the filter then an Intent's data must be either one of these schemes or a matching data type. If no schemes are included then an Intent will match only if it includes no data. Note: scheme matching in the Android framework is case-sensitive unlike formal RFC schemes. As a result you should always write your schemes with lower case letters and any schemes you receive from outside of Android should be converted to lower case before supplying them here.
android.content.IntentFilter.addDataScheme,Add data scheme.
android.content.IntentFilter.addDataScheme,Add a new Intent data scheme to match against.
android.content.IntentFilter.addDataScheme,If any schemes are included in the filter then an Intent's data must be either one of these schemes or a matching data type.
android.content.IntentFilter.addDataScheme,If no schemes are included then an Intent will match only if it includes no data.
android.content.IntentFilter.addDataScheme,Note: scheme matching in the Android framework is case-sensitive unlike formal RFC schemes.
android.content.IntentFilter.addDataScheme,As a result you should always write your schemes with lower case letters and any schemes you receive from outside of Android should be converted to lower case before supplying them here.
android.content.IntentFilter.addDataType,Add a new Intent data type to match against. If any types are included in the filter then an Intent's data must be either one of these types or a matching scheme. If no data types are included then an Intent will only match if it specifies no data. Note: MIME type matching in the Android framework is case-sensitive unlike formal RFC MIME types. As a result you should always write your MIME types with lower case letters and any MIME types you receive from outside of Android should be converted to lower case before supplying them here. Throws MalformedMimeTypeException if the given MIME type is not syntactically correct.
android.content.IntentFilter.addDataType,Add data type.
android.content.IntentFilter.addDataType,Add a new Intent data type to match against.
android.content.IntentFilter.addDataType,If any types are included in the filter then an Intent's data must be either one of these types or a matching scheme.
android.content.IntentFilter.addDataType,If no data types are included then an Intent will only match if it specifies no data.
android.content.IntentFilter.addDataType,Note: MIME type matching in the Android framework is case-sensitive unlike formal RFC MIME types.
android.content.IntentFilter.addDataType,As a result you should always write your MIME types with lower case letters and any MIME types you receive from outside of Android should be converted to lower case before supplying them here.
android.content.IntentFilter.addDataType,Throws MalformedMimeTypeException if the given MIME type is not syntactically correct.
android.content.IntentFilter.countActions,Return the number of actions in the filter.
android.content.IntentFilter.countActions,Count actions.
android.content.IntentFilter.countDataAuthorities,Return the number of data authorities in the filter.
android.content.IntentFilter.countDataAuthorities,Count data authorities.
android.content.IntentFilter.countDataPaths,Return the number of data paths in the filter.
android.content.IntentFilter.countDataPaths,Count data paths.
android.content.IntentFilter.getAction,Return an action in the filter.
android.content.IntentFilter.getAction,Get action.
android.content.IntentFilter.hasAction,Is the given action included in the filter? Note that if the filter does not include any actions false will always be returned.
android.content.IntentFilter.hasAction,Has action.
android.content.IntentFilter.hasCategory,Is the given category included in the filter?.
android.content.IntentFilter.hasCategory,Has category.
android.content.IntentFilter.hasDataScheme,Is the given data scheme included in the filter? Note that if the filter does not include any scheme false will always be returned.
android.content.IntentFilter.hasDataScheme,Has data scheme.
android.content.IntentFilter.match,Test whether this filter matches the given intent data. A match is only successful if the actions and categories in the Intent match against the filter as described in IntentFilter ; in that case the match result returned will be as per matchData(String String Uri).
android.content.IntentFilter.match,Match.
android.content.IntentFilter.match,Test whether this filter matches the given intent data.
android.content.IntentFilter.match,A match is only successful if the actions and categories in the Intent match against the filter as described in IntentFilter ; in that case the match result returned will be as per matchData(String String Uri).
android.content.IntentFilter.match,Test whether this filter matches the given intent.
android.content.IntentFilter.match,Match.
android.content.IntentFilter.setPriority,Modify priority of this filter. This only affects receiver filters. The priority of activity filters are set in XML and cannot be changed programmatically. The default priority is 0. Positive values will be before the default lower values will be after it. Applications should use a value that is larger than SYSTEM_LOW_PRIORITY and smaller than SYSTEM_HIGH_PRIORITY.
android.content.IntentFilter.setPriority,Set priority.
android.content.IntentFilter.setPriority,Modify priority of this filter.
android.content.IntentFilter.setPriority,This only affects receiver filters.
android.content.IntentFilter.setPriority,The priority of activity filters are set in XML and cannot be changed programmatically.
android.content.IntentFilter.setPriority,The default priority is 0.
android.content.IntentFilter.setPriority,Positive values will be before the default lower values will be after it.
android.content.IntentFilter.setPriority,Applications should use a value that is larger than SYSTEM_LOW_PRIORITY and smaller than SYSTEM_HIGH_PRIORITY.
android.content.MutableContextWrapper.setBaseContext,Change the base context for this ContextWrapper. All calls will then be delegated to the base context. Unlike ContextWrapper the base context can be changed even after one is already set.
android.content.MutableContextWrapper.setBaseContext,Set base context.
android.content.MutableContextWrapper.setBaseContext,Change the base context for this ContextWrapper.
android.content.MutableContextWrapper.setBaseContext,All calls will then be delegated to the base context.
android.content.MutableContextWrapper.setBaseContext,Unlike ContextWrapper the base context can be changed even after one is already set.
android.content.RestrictionEntry.setChoiceEntries,Sets a list of strings that will be presented as choices to the user. This is similar to setChoiceEntries(java.lang.String[]).
android.content.RestrictionEntry.setChoiceEntries,Set choice entries.
android.content.RestrictionEntry.setChoiceEntries,Sets a list of strings that will be presented as choices to the user.
android.content.RestrictionEntry.setChoiceEntries,This is similar to setChoiceEntries(java.lang.String[]).
android.content.RestrictionEntry.setChoiceEntries,Sets a list of strings that will be presented as choices to the user. When the user selects one or more of these choices the corresponding value from the possible values are stored as the selected strings. The size of this array must match the size of the array set in setChoiceValues(java.lang.String[]). This method is not relevant for types other than TYPE_CHOICE and TYPE_MULTI_SELECT.
android.content.RestrictionEntry.setChoiceEntries,Set choice entries.
android.content.RestrictionEntry.setChoiceEntries,Sets a list of strings that will be presented as choices to the user.
android.content.RestrictionEntry.setChoiceEntries,When the user selects one or more of these choices the corresponding value from the possible values are stored as the selected strings.
android.content.RestrictionEntry.setChoiceEntries,The size of this array must match the size of the array set in setChoiceValues(java.lang.String[]).
android.content.RestrictionEntry.setChoiceEntries,This method is not relevant for types other than TYPE_CHOICE and TYPE_MULTI_SELECT.
android.content.RestrictionEntry.setChoiceValues,Sets a list of string values that can be selected by the user. If no user-visible entries are set by a call to setChoiceEntries(java.lang.String[]) these values will be the ones shown to the user. Values will be chosen from this list as the user's selection and the selected values can be retrieved by a call to getAllSelectedStrings() or getSelectedString() depending on whether it is a multi-select type or choice type. This method is not relevant for types other than TYPE_CHOICE and TYPE_MULTI_SELECT.
android.content.RestrictionEntry.setChoiceValues,Set choice values.
android.content.RestrictionEntry.setChoiceValues,Sets a list of string values that can be selected by the user.
android.content.RestrictionEntry.setChoiceValues,If no user-visible entries are set by a call to setChoiceEntries(java.lang.String[]) these values will be the ones shown to the user.
android.content.RestrictionEntry.setChoiceValues,Values will be chosen from this list as the user's selection and the selected values can be retrieved by a call to getAllSelectedStrings() or getSelectedString() depending on whether it is a multi-select type or choice type.
android.content.RestrictionEntry.setChoiceValues,This method is not relevant for types other than TYPE_CHOICE and TYPE_MULTI_SELECT.
android.content.RestrictionEntry.setChoiceValues,Sets a list of string values that can be selected by the user similar to setChoiceValues(java.lang.String[]).
android.content.RestrictionEntry.setChoiceValues,Set choice values.
android.content.RestrictionEntry.setDescription,Sets the user-visible description of the entry as a possible sub-text for the title. You can use this to describe the entry in more detail or to display the current state of the restriction.
android.content.RestrictionEntry.setDescription,Set description.
android.content.RestrictionEntry.setDescription,Sets the user-visible description of the entry as a possible sub-text for the title.
android.content.RestrictionEntry.setDescription,You can use this to describe the entry in more detail or to display the current state of the restriction.
android.content.RestrictionEntry.setTitle,Sets the user-visible title for the entry.
android.content.RestrictionEntry.setTitle,Set title.
android.content.UriMatcher.addURI,"Add a URI to match and the code to return when this URI is matched. URI nodes may be exact match string the token ""*"" that matches any text or the token ""#"" that matches only numbers. Starting from API level Build.VERSION_CODES.JELLY_BEAN_MR2 this method will accept a leading slash in the path."
android.content.UriMatcher.addURI,Add u r i.
android.content.UriMatcher.addURI,Add a URI to match and the code to return when this URI is matched.
android.content.UriMatcher.addURI,"URI nodes may be exact match string the token ""*"" that matches any text or the token ""#"" that matches only numbers."
android.content.UriMatcher.addURI,Starting from API level Build.VERSION_CODES.JELLY_BEAN_MR2 this method will accept a leading slash in the path.
android.content.UriMatcher.match,Try to match against the path in a url.
android.content.UriMatcher.match,Match.
android.graphics.drawable.AnimationDrawable.addFrame,Adds a frame to the animation.
android.graphics.drawable.AnimationDrawable.addFrame,Add frame.
android.graphics.drawable.AnimationDrawable.isRunning,Indicates whether the animation is currently running or not.
android.graphics.drawable.AnimationDrawable.isRunning,Is running.
android.graphics.drawable.AnimationDrawable.run,This method exists for implementation purpose only and should not be called directly. Invoke start() instead.
android.graphics.drawable.AnimationDrawable.run,Run.
android.graphics.drawable.AnimationDrawable.run,This method exists for implementation purpose only and should not be called directly.
android.graphics.drawable.AnimationDrawable.run,Invoke start() instead.
android.graphics.drawable.AnimationDrawable.setOneShot,Sets whether the animation should play once or repeat.
android.graphics.drawable.AnimationDrawable.setOneShot,Set one shot.
android.graphics.drawable.AnimationDrawable.start,Starts the animation from the first frame looping if necessary. This method has no effect if the animation is running. Note: Do not call this in the Activity.onCreate(Bundle) method of your activity because the AnimationDrawable is not yet fully attached to the window. If you want to play the animation immediately without requiring interaction then you might want to call it from the Activity.onWindowFocusChanged(boolean) method in your activity which will get called when Android brings your window into focus.
android.graphics.drawable.AnimationDrawable.start,Start.
android.graphics.drawable.AnimationDrawable.start,Starts the animation from the first frame looping if necessary.
android.graphics.drawable.AnimationDrawable.start,This method has no effect if the animation is running.
android.graphics.drawable.AnimationDrawable.start,Note: Do not call this in the Activity.onCreate(Bundle) method of your activity because the AnimationDrawable is not yet fully attached to the window.
android.graphics.drawable.AnimationDrawable.start,If you want to play the animation immediately without requiring interaction then you might want to call it from the Activity.onWindowFocusChanged(boolean) method in your activity which will get called when Android brings your window into focus.
android.graphics.drawable.AnimationDrawable.stop,Stops the animation at the current frame. This method has no effect if the animation is not running.
android.graphics.drawable.AnimationDrawable.stop,Stop.
android.graphics.drawable.AnimationDrawable.stop,Stops the animation at the current frame.
android.graphics.drawable.AnimationDrawable.stop,This method has no effect if the animation is not running.
android.graphics.drawable.BitmapDrawable.draw,Draw in its bounds (set via setBounds) respecting optional effects such as alpha (set via setAlpha) and color filter (set via setColorFilter).
android.graphics.drawable.BitmapDrawable.draw,Draw.
android.graphics.drawable.BitmapDrawable.getBitmap,Returns the bitmap used by this drawable to render. May be null.
android.graphics.drawable.BitmapDrawable.getBitmap,Get bitmap.
android.graphics.drawable.BitmapDrawable.getBitmap,Returns the bitmap used by this drawable to render.
android.graphics.drawable.BitmapDrawable.getBitmap,May be null.
android.graphics.drawable.BitmapDrawable.getIntrinsicHeight,Returns the drawable's intrinsic height. Intrinsic height is the height at which the drawable would like to be laid out including any inherent padding. If the drawable has no intrinsic height such as a solid color this method returns -1.
android.graphics.drawable.BitmapDrawable.getIntrinsicHeight,Get intrinsic height.
android.graphics.drawable.BitmapDrawable.getIntrinsicHeight,Returns the drawable's intrinsic height.
android.graphics.drawable.BitmapDrawable.getIntrinsicHeight,Intrinsic height is the height at which the drawable would like to be laid out including any inherent padding.
android.graphics.drawable.BitmapDrawable.getIntrinsicHeight,If the drawable has no intrinsic height such as a solid color this method returns -1.
android.graphics.drawable.BitmapDrawable.getIntrinsicWidth,Returns the drawable's intrinsic width. Intrinsic width is the width at which the drawable would like to be laid out including any inherent padding. If the drawable has no intrinsic width such as a solid color this method returns -1.
android.graphics.drawable.BitmapDrawable.getIntrinsicWidth,Get intrinsic width.
android.graphics.drawable.BitmapDrawable.getIntrinsicWidth,Returns the drawable's intrinsic width.
android.graphics.drawable.BitmapDrawable.getIntrinsicWidth,Intrinsic width is the width at which the drawable would like to be laid out including any inherent padding.
android.graphics.drawable.BitmapDrawable.getIntrinsicWidth,If the drawable has no intrinsic width such as a solid color this method returns -1.
android.graphics.drawable.BitmapDrawable.getOpacity,This method is deprecated. This method is no longer used in graphics optimizations Return the opacity/transparency of this Drawable. The returned value is one of the abstract format constants in PixelFormat : PixelFormat.UNKNOWN PixelFormat.TRANSLUCENT PixelFormat.TRANSPARENT or PixelFormat.OPAQUE. An OPAQUE drawable is one that draws all all content within its bounds completely covering anything behind the drawable. A TRANSPARENT drawable is one that draws nothing within its bounds allowing everything behind it to show through. A TRANSLUCENT drawable is a drawable in any other state where the drawable will draw some but not all of the content within its bounds and at least some content behind the drawable will be visible. If the visibility of the drawable's contents cannot be determined the safest/best return value is TRANSLUCENT. Generally a Drawable should be as conservative as possible with the value it returns. For example if it contains multiple child drawables and only shows one of them at a time if only one of the children is TRANSLUCENT and the others are OPAQUE then TRANSLUCENT should be returned. You can use the method resolveOpacity(int int) to perform a standard reduction of two opacities to the appropriate single output. Note that the returned value does not necessarily take into account a custom alpha or color filter that has been applied by the client through the setAlpha(int) or setColorFilter(ColorFilter) methods. Some subclasses such as BitmapDrawable ColorDrawable and GradientDrawable do account for the value of setAlpha(int) but the general behavior is dependent upon the implementation of the subclass.
android.graphics.drawable.BitmapDrawable.getOpacity,Get opacity.
android.graphics.drawable.BitmapDrawable.getOpacity,This method is deprecated.
android.graphics.drawable.BitmapDrawable.getOpacity,This method is no longer used in graphics optimizations Return the opacity/transparency of this Drawable.
android.graphics.drawable.BitmapDrawable.getOpacity,The returned value is one of the abstract format constants in PixelFormat : PixelFormat.UNKNOWN PixelFormat.TRANSLUCENT PixelFormat.TRANSPARENT or PixelFormat.OPAQUE.
android.graphics.drawable.BitmapDrawable.getOpacity,An OPAQUE drawable is one that draws all all content within its bounds completely covering anything behind the drawable.
android.graphics.drawable.BitmapDrawable.getOpacity,A TRANSPARENT drawable is one that draws nothing within its bounds allowing everything behind it to show through.
android.graphics.drawable.BitmapDrawable.getOpacity,A TRANSLUCENT drawable is a drawable in any other state where the drawable will draw some but not all of the content within its bounds and at least some content behind the drawable will be visible.
android.graphics.drawable.BitmapDrawable.getOpacity,If the visibility of the drawable's contents cannot be determined the safest/best return value is TRANSLUCENT.
android.graphics.drawable.BitmapDrawable.getOpacity,Generally a Drawable should be as conservative as possible with the value it returns.
android.graphics.drawable.BitmapDrawable.getOpacity,For example if it contains multiple child drawables and only shows one of them at a time if only one of the children is TRANSLUCENT and the others are OPAQUE then TRANSLUCENT should be returned.
android.graphics.drawable.BitmapDrawable.getOpacity,You can use the method resolveOpacity(int int) to perform a standard reduction of two opacities to the appropriate single output.
android.graphics.drawable.BitmapDrawable.getOpacity,Note that the returned value does not necessarily take into account a custom alpha or color filter that has been applied by the client through the setAlpha(int) or setColorFilter(ColorFilter) methods.
android.graphics.drawable.BitmapDrawable.getOpacity,Some subclasses such as BitmapDrawable ColorDrawable and GradientDrawable do account for the value of setAlpha(int) but the general behavior is dependent upon the implementation of the subclass.
android.graphics.drawable.BitmapDrawable.getPaint,Returns the paint used to render this drawable.
android.graphics.drawable.BitmapDrawable.getPaint,Get paint.
android.graphics.drawable.BitmapDrawable.mutate,A mutable BitmapDrawable still shares its Bitmap with any other Drawable that comes from the same resource.
android.graphics.drawable.BitmapDrawable.mutate,Mutate.
android.graphics.drawable.BitmapDrawable.setAlpha,Specify an alpha value for the drawable. 0 means fully transparent and 255 means fully opaque.
android.graphics.drawable.BitmapDrawable.setAlpha,Set alpha.
android.graphics.drawable.BitmapDrawable.setAlpha,Specify an alpha value for the drawable.
android.graphics.drawable.BitmapDrawable.setAlpha,0 means fully transparent and 255 means fully opaque.
android.graphics.drawable.BitmapDrawable.setAntiAlias,Enables or disables anti-aliasing for this drawable. Anti-aliasing affects the edges of the bitmap only so it applies only when the drawable is rotated.
android.graphics.drawable.BitmapDrawable.setAntiAlias,Set anti alias.
android.graphics.drawable.BitmapDrawable.setAntiAlias,Enables or disables anti-aliasing for this drawable.
android.graphics.drawable.BitmapDrawable.setAntiAlias,Anti-aliasing affects the edges of the bitmap only so it applies only when the drawable is rotated.
android.graphics.drawable.BitmapDrawable.setColorFilter,Specify an optional color filter for the drawable. If a Drawable has a ColorFilter each output pixel of the Drawable's drawing contents will be modified by the color filter before it is blended onto the render target of a Canvas. Pass null to remove any existing color filter. Note: Setting a non- null color filter disables tint.
android.graphics.drawable.BitmapDrawable.setColorFilter,Set color filter.
android.graphics.drawable.BitmapDrawable.setColorFilter,Specify an optional color filter for the drawable.
android.graphics.drawable.BitmapDrawable.setColorFilter,If a Drawable has a ColorFilter each output pixel of the Drawable's drawing contents will be modified by the color filter before it is blended onto the render target of a Canvas.
android.graphics.drawable.BitmapDrawable.setColorFilter,Pass null to remove any existing color filter.
android.graphics.drawable.BitmapDrawable.setColorFilter,Note: Setting a non- null color filter disables tint.
android.graphics.drawable.BitmapDrawable.setDither,This method is deprecated. This property is ignored. Set to true to have the drawable dither its colors when drawn to a device with fewer than 8-bits per color component.
android.graphics.drawable.BitmapDrawable.setDither,Set dither.
android.graphics.drawable.BitmapDrawable.setDither,This method is deprecated.
android.graphics.drawable.BitmapDrawable.setDither,This property is ignored.
android.graphics.drawable.BitmapDrawable.setDither,Set to true to have the drawable dither its colors when drawn to a device with fewer than 8-bits per color component.
android.graphics.drawable.BitmapDrawable.setFilterBitmap,Set to true to have the drawable filter its bitmaps with bilinear sampling when they are scaled or rotated. This can improve appearance when bitmaps are rotated. If the drawable does not use bitmaps this call is ignored.
android.graphics.drawable.BitmapDrawable.setFilterBitmap,Set filter bitmap.
android.graphics.drawable.BitmapDrawable.setFilterBitmap,Set to true to have the drawable filter its bitmaps with bilinear sampling when they are scaled or rotated.
android.graphics.drawable.BitmapDrawable.setFilterBitmap,This can improve appearance when bitmaps are rotated.
android.graphics.drawable.BitmapDrawable.setFilterBitmap,If the drawable does not use bitmaps this call is ignored.
android.graphics.drawable.BitmapDrawable.setGravity,Set the gravity used to position/stretch the bitmap within its bounds. See android.view.Gravity.
android.graphics.drawable.BitmapDrawable.setGravity,Set gravity.
android.graphics.drawable.BitmapDrawable.setGravity,Set the gravity used to position/stretch the bitmap within its bounds.
android.graphics.drawable.BitmapDrawable.setGravity,See android.view.Gravity.
android.graphics.drawable.BitmapDrawable.setTargetDensity,Set the density scale at which this drawable will be rendered.
android.graphics.drawable.BitmapDrawable.setTargetDensity,Set target density.
android.graphics.drawable.BitmapDrawable.setTargetDensity,Set the density scale at which this drawable will be rendered. This method assumes the drawable will be rendered at the same density as the specified canvas.
android.graphics.drawable.BitmapDrawable.setTargetDensity,Set target density.
android.graphics.drawable.BitmapDrawable.setTargetDensity,Set the density scale at which this drawable will be rendered.
android.graphics.drawable.BitmapDrawable.setTargetDensity,This method assumes the drawable will be rendered at the same density as the specified canvas.
android.graphics.drawable.BitmapDrawable.setTargetDensity,Set the density at which this drawable will be rendered.
android.graphics.drawable.BitmapDrawable.setTargetDensity,Set target density.
android.graphics.drawable.ColorDrawable.setAlpha,Applies the given alpha to the underlying color. Note if the color already has an alpha applied to it this will apply this alpha to the existing value instead of overwriting it.
android.graphics.drawable.ColorDrawable.setAlpha,Set alpha.
android.graphics.drawable.ColorDrawable.setAlpha,Applies the given alpha to the underlying color.
android.graphics.drawable.ColorDrawable.setAlpha,Note if the color already has an alpha applied to it this will apply this alpha to the existing value instead of overwriting it.
android.graphics.drawable.ColorDrawable.setColor,Sets the drawable's color value. This action will clobber the results of prior calls to setAlpha(int) on this object which side-affected the underlying color.
android.graphics.drawable.ColorDrawable.setColor,Set color.
android.graphics.drawable.ColorDrawable.setColor,Sets the drawable's color value.
android.graphics.drawable.ColorDrawable.setColor,This action will clobber the results of prior calls to setAlpha(int) on this object which side-affected the underlying color.
android.graphics.drawable.Drawable.clearColorFilter,Removes the color filter for this drawable.
android.graphics.drawable.Drawable.clearColorFilter,Clear color filter.
android.graphics.drawable.Drawable.copyBounds,Return a copy of the drawable's bounds in a new Rect. This returns the same values as getBounds() but the returned object is guaranteed to not be changed later by the drawable (i.e. it retains no reference to this rect). If the caller already has a Rect allocated call copyBounds(rect).
android.graphics.drawable.Drawable.copyBounds,Copy bounds.
android.graphics.drawable.Drawable.copyBounds,Return a copy of the drawable's bounds in a new Rect.
android.graphics.drawable.Drawable.copyBounds,This returns the same values as getBounds() but the returned object is guaranteed to not be changed later by the drawable (i.e.
android.graphics.drawable.Drawable.copyBounds,it retains no reference to this rect).
android.graphics.drawable.Drawable.copyBounds,If the caller already has a Rect allocated call copyBounds(rect).
android.graphics.drawable.Drawable.copyBounds,Return a copy of the drawable's bounds in the specified Rect (allocated by the caller). The bounds specify where this will draw when its draw() method is called.
android.graphics.drawable.Drawable.copyBounds,Copy bounds.
android.graphics.drawable.Drawable.copyBounds,Return a copy of the drawable's bounds in the specified Rect (allocated by the caller).
android.graphics.drawable.Drawable.copyBounds,The bounds specify where this will draw when its draw() method is called.
android.graphics.drawable.Drawable.createFromPath,Create a drawable from file path name.
android.graphics.drawable.Drawable.createFromPath,Create from path.
android.graphics.drawable.Drawable.createFromStream,Create a drawable from an inputstream.
android.graphics.drawable.Drawable.createFromStream,Create from stream.
android.graphics.drawable.Drawable.getBounds,Return the drawable's bounds Rect. Note: for efficiency the returned object may be the same object stored in the drawable (though this is not guaranteed) so if a persistent copy of the bounds is needed call copyBounds(rect) instead. You should also not change the object returned by this method as it may be the same object stored in the drawable.
android.graphics.drawable.Drawable.getBounds,Get bounds.
android.graphics.drawable.Drawable.getBounds,Return the drawable's bounds Rect.
android.graphics.drawable.Drawable.getBounds,Note: for efficiency the returned object may be the same object stored in the drawable (though this is not guaranteed) so if a persistent copy of the bounds is needed call copyBounds(rect) instead.
android.graphics.drawable.Drawable.getBounds,You should also not change the object returned by this method as it may be the same object stored in the drawable.
android.graphics.drawable.Drawable.getChangingConfigurations,Return a mask of the configuration parameters for which this drawable may change requiring that it be re-created. The default implementation returns whatever was provided through setChangingConfigurations(int) or 0 by default. Subclasses may extend this to or in the changing configurations of any other drawables they hold.
android.graphics.drawable.Drawable.getChangingConfigurations,Get changing configurations.
android.graphics.drawable.Drawable.getChangingConfigurations,Return a mask of the configuration parameters for which this drawable may change requiring that it be re-created.
android.graphics.drawable.Drawable.getChangingConfigurations,The default implementation returns whatever was provided through setChangingConfigurations(int) or 0 by default.
android.graphics.drawable.Drawable.getChangingConfigurations,Subclasses may extend this to or in the changing configurations of any other drawables they hold.
android.graphics.drawable.Drawable.getConstantState,Return a ConstantState instance that holds the shared state of this Drawable.
android.graphics.drawable.Drawable.getConstantState,Get constant state.
android.graphics.drawable.Drawable.getLevel,Retrieve the current level.
android.graphics.drawable.Drawable.getLevel,Get level.
android.graphics.drawable.Drawable.getMinimumHeight,Returns the minimum height suggested by this Drawable. If a View uses this Drawable as a background it is suggested that the View use at least this value for its height. (There will be some scenarios where this will not be possible.) This value should INCLUDE any padding.
android.graphics.drawable.Drawable.getMinimumHeight,Get minimum height.
android.graphics.drawable.Drawable.getMinimumHeight,Returns the minimum height suggested by this Drawable.
android.graphics.drawable.Drawable.getMinimumHeight,If a View uses this Drawable as a background it is suggested that the View use at least this value for its height.
android.graphics.drawable.Drawable.getMinimumHeight,(There will be some scenarios where this will not be possible.) This value should INCLUDE any padding.
android.graphics.drawable.Drawable.getMinimumWidth,Returns the minimum width suggested by this Drawable. If a View uses this Drawable as a background it is suggested that the View use at least this value for its width. (There will be some scenarios where this will not be possible.) This value should INCLUDE any padding.
android.graphics.drawable.Drawable.getMinimumWidth,Get minimum width.
android.graphics.drawable.Drawable.getMinimumWidth,Returns the minimum width suggested by this Drawable.
android.graphics.drawable.Drawable.getMinimumWidth,If a View uses this Drawable as a background it is suggested that the View use at least this value for its width.
android.graphics.drawable.Drawable.getMinimumWidth,(There will be some scenarios where this will not be possible.) This value should INCLUDE any padding.
android.graphics.drawable.Drawable.getPadding,Return in padding the insets suggested by this Drawable for placing content inside the drawable's bounds. Positive values move toward the center of the Drawable (set Rect.inset).
android.graphics.drawable.Drawable.getPadding,Get padding.
android.graphics.drawable.Drawable.getPadding,Return in padding the insets suggested by this Drawable for placing content inside the drawable's bounds.
android.graphics.drawable.Drawable.getPadding,Positive values move toward the center of the Drawable (set Rect.inset).
android.graphics.drawable.Drawable.getState,Describes the current state as a union of primitve states such as R.attr.state_focused R.attr.state_selected etc. Some drawables may modify their imagery based on the selected state.
android.graphics.drawable.Drawable.getState,Get state.
android.graphics.drawable.Drawable.getState,Describes the current state as a union of primitve states such as R.attr.state_focused R.attr.state_selected etc.
android.graphics.drawable.Drawable.getState,Some drawables may modify their imagery based on the selected state.
android.graphics.drawable.Drawable.getTransparentRegion,Returns a Region representing the part of the Drawable that is completely transparent. This can be used to perform drawing operations identifying which parts of the target will not change when rendering the Drawable. The default implementation returns null indicating no transparent region; subclasses can optionally override this to return an actual Region if they want to supply this optimization information but it is not required that they do so.
android.graphics.drawable.Drawable.getTransparentRegion,Get transparent region.
android.graphics.drawable.Drawable.getTransparentRegion,Returns a Region representing the part of the Drawable that is completely transparent.
android.graphics.drawable.Drawable.getTransparentRegion,This can be used to perform drawing operations identifying which parts of the target will not change when rendering the Drawable.
android.graphics.drawable.Drawable.getTransparentRegion,The default implementation returns null indicating no transparent region; subclasses can optionally override this to return an actual Region if they want to supply this optimization information but it is not required that they do so.
android.graphics.drawable.Drawable.inflate,Inflate this Drawable from an XML resource optionally styled by a theme. This can't be called more than once for each Drawable. Note that framework may have called this once to create the Drawable instance from XML resource.
android.graphics.drawable.Drawable.inflate,Inflate.
android.graphics.drawable.Drawable.inflate,Inflate this Drawable from an XML resource optionally styled by a theme.
android.graphics.drawable.Drawable.inflate,This can't be called more than once for each Drawable.
android.graphics.drawable.Drawable.inflate,Note that framework may have called this once to create the Drawable instance from XML resource.
android.graphics.drawable.Drawable.inflate,Inflate this Drawable from an XML resource. Does not apply a theme.
android.graphics.drawable.Drawable.inflate,Inflate.
android.graphics.drawable.Drawable.inflate,Inflate this Drawable from an XML resource.
android.graphics.drawable.Drawable.inflate,Does not apply a theme.
android.graphics.drawable.Drawable.invalidateSelf,Use the current Callback implementation to have this Drawable redrawn. Does nothing if there is no Callback attached to the Drawable.
android.graphics.drawable.Drawable.invalidateSelf,Invalidate self.
android.graphics.drawable.Drawable.invalidateSelf,Use the current Callback implementation to have this Drawable redrawn.
android.graphics.drawable.Drawable.invalidateSelf,Does nothing if there is no Callback attached to the Drawable.
android.graphics.drawable.Drawable.isAutoMirrored,Tells if this Drawable will be automatically mirrored when its layout direction is RTL right-to-left. See LayoutDirection.
android.graphics.drawable.Drawable.isAutoMirrored,Is auto mirrored.
android.graphics.drawable.Drawable.isAutoMirrored,Tells if this Drawable will be automatically mirrored when its layout direction is RTL right-to-left.
android.graphics.drawable.Drawable.isAutoMirrored,See LayoutDirection.
android.graphics.drawable.Drawable.isStateful,Indicates whether this drawable will change its appearance based on state. Clients can use this to determine whether it is necessary to calculate their state and call setState.
android.graphics.drawable.Drawable.isStateful,Is stateful.
android.graphics.drawable.Drawable.isStateful,Indicates whether this drawable will change its appearance based on state.
android.graphics.drawable.Drawable.isStateful,Clients can use this to determine whether it is necessary to calculate their state and call setState.
android.graphics.drawable.Drawable.jumpToCurrentState,If this Drawable does transition animations between states ask that it immediately jump to the current state and skip any active animations.
android.graphics.drawable.Drawable.jumpToCurrentState,Jump to current state.
android.graphics.drawable.Drawable.mutate,Make this drawable mutable. This operation cannot be reversed. A mutable drawable is guaranteed to not share its state with any other drawable. This is especially useful when you need to modify properties of drawables loaded from resources. By default all drawables instances loaded from the same resource share a common state; if you modify the state of one instance all the other instances will receive the same modification. Calling this method on a mutable Drawable will have no effect.
android.graphics.drawable.Drawable.mutate,Mutate.
android.graphics.drawable.Drawable.mutate,Make this drawable mutable.
android.graphics.drawable.Drawable.mutate,This operation cannot be reversed.
android.graphics.drawable.Drawable.mutate,A mutable drawable is guaranteed to not share its state with any other drawable.
android.graphics.drawable.Drawable.mutate,This is especially useful when you need to modify properties of drawables loaded from resources.
android.graphics.drawable.Drawable.mutate,By default all drawables instances loaded from the same resource share a common state; if you modify the state of one instance all the other instances will receive the same modification.
android.graphics.drawable.Drawable.mutate,Calling this method on a mutable Drawable will have no effect.
android.graphics.drawable.Drawable.resolveOpacity,Return the appropriate opacity value for two source opacities. If either is UNKNOWN that is returned; else if either is TRANSLUCENT that is returned; else if either is TRANSPARENT that is returned; else OPAQUE is returned. This is to help in implementing getOpacity().
android.graphics.drawable.Drawable.resolveOpacity,Resolve opacity.
android.graphics.drawable.Drawable.resolveOpacity,Return the appropriate opacity value for two source opacities.
android.graphics.drawable.Drawable.resolveOpacity,If either is UNKNOWN that is returned; else if either is TRANSLUCENT that is returned; else if either is TRANSPARENT that is returned; else OPAQUE is returned.
android.graphics.drawable.Drawable.resolveOpacity,This is to help in implementing getOpacity().
android.graphics.drawable.Drawable.setAutoMirrored,Set whether this Drawable is automatically mirrored when its layout direction is RTL (right-to left). See LayoutDirection.
android.graphics.drawable.Drawable.setAutoMirrored,Set auto mirrored.
android.graphics.drawable.Drawable.setAutoMirrored,Set whether this Drawable is automatically mirrored when its layout direction is RTL (right-to left).
android.graphics.drawable.Drawable.setAutoMirrored,See LayoutDirection.
android.graphics.drawable.Drawable.setBounds,Specify a bounding rectangle for the Drawable. This is where the drawable will draw when its draw() method is called.
android.graphics.drawable.Drawable.setBounds,Set bounds.
android.graphics.drawable.Drawable.setBounds,Specify a bounding rectangle for the Drawable.
android.graphics.drawable.Drawable.setBounds,This is where the drawable will draw when its draw() method is called.
android.graphics.drawable.Drawable.setBounds,Specify a bounding rectangle for the Drawable. This is where the drawable will draw when its draw() method is called.
android.graphics.drawable.Drawable.setBounds,Set bounds.
android.graphics.drawable.Drawable.setBounds,Specify a bounding rectangle for the Drawable.
android.graphics.drawable.Drawable.setBounds,This is where the drawable will draw when its draw() method is called.
android.graphics.drawable.Drawable.setChangingConfigurations,Set a mask of the configuration parameters for which this drawable may change requiring that it be re-created.
android.graphics.drawable.Drawable.setChangingConfigurations,Set changing configurations.
android.graphics.drawable.Drawable.setColorFilter,This method was deprecated in API level 29. use setColorFilter(android.graphics.ColorFilter) with an instance of BlendModeColorFilter Specify a color and Porter-Duff mode to be the color filter for this drawable. Convenience for setColorFilter(android.graphics.ColorFilter) which constructs a PorterDuffColorFilter. Note: Setting a color filter disables tint.
android.graphics.drawable.Drawable.setColorFilter,Set color filter.
android.graphics.drawable.Drawable.setColorFilter,This method was deprecated in API level 29.
android.graphics.drawable.Drawable.setColorFilter,use setColorFilter(android.graphics.ColorFilter) with an instance of BlendModeColorFilter Specify a color and Porter-Duff mode to be the color filter for this drawable.
android.graphics.drawable.Drawable.setColorFilter,Convenience for setColorFilter(android.graphics.ColorFilter) which constructs a PorterDuffColorFilter.
android.graphics.drawable.Drawable.setColorFilter,Note: Setting a color filter disables tint.
android.graphics.drawable.Drawable.setColorFilter,Specify an optional color filter for the drawable. If a Drawable has a ColorFilter each output pixel of the Drawable's drawing contents will be modified by the color filter before it is blended onto the render target of a Canvas. Pass null to remove any existing color filter. Note: Setting a non- null color filter disables tint.
android.graphics.drawable.Drawable.setColorFilter,Set color filter.
android.graphics.drawable.Drawable.setColorFilter,Specify an optional color filter for the drawable.
android.graphics.drawable.Drawable.setColorFilter,If a Drawable has a ColorFilter each output pixel of the Drawable's drawing contents will be modified by the color filter before it is blended onto the render target of a Canvas.
android.graphics.drawable.Drawable.setColorFilter,Pass null to remove any existing color filter.
android.graphics.drawable.Drawable.setColorFilter,Note: Setting a non- null color filter disables tint.
android.graphics.drawable.Drawable.setHotspot,Specifies the hotspot's location within the drawable.
android.graphics.drawable.Drawable.setHotspot,Set hotspot.
android.graphics.drawable.Drawable.setHotspotBounds,Sets the bounds to which the hotspot is constrained if they should be different from the drawable bounds.
android.graphics.drawable.Drawable.setHotspotBounds,Set hotspot bounds.
android.graphics.drawable.Drawable.setLevel,Specify the level for the drawable. This allows a drawable to vary its imagery based on a continuous controller for example to show progress or volume level. If the new level you are supplying causes the appearance of the Drawable to change then it is responsible for calling invalidateSelf() in order to have itself redrawn and true will be returned from this function.
android.graphics.drawable.Drawable.setLevel,Set level.
android.graphics.drawable.Drawable.setLevel,Specify the level for the drawable.
android.graphics.drawable.Drawable.setLevel,This allows a drawable to vary its imagery based on a continuous controller for example to show progress or volume level.
android.graphics.drawable.Drawable.setLevel,If the new level you are supplying causes the appearance of the Drawable to change then it is responsible for calling invalidateSelf() in order to have itself redrawn and true will be returned from this function.
android.graphics.drawable.Drawable.setState,Specify a set of states for the drawable. These are use-case specific so see the relevant documentation. As an example the background for widgets like Button understand the following states: [ R.attr.state_focused R.attr.state_pressed ]. If the new state you are supplying causes the appearance of the Drawable to change then it is responsible for calling invalidateSelf() in order to have itself redrawn and true will be returned from this function. Note: The Drawable holds a reference on to stateSet until a new state array is given to it so you must not modify this array during that time.
android.graphics.drawable.Drawable.setState,Set state.
android.graphics.drawable.Drawable.setState,Specify a set of states for the drawable.
android.graphics.drawable.Drawable.setState,These are use-case specific so see the relevant documentation.
android.graphics.drawable.Drawable.setState,As an example the background for widgets like Button understand the following states: [ R.attr.state_focused R.attr.state_pressed ].
android.graphics.drawable.Drawable.setState,If the new state you are supplying causes the appearance of the Drawable to change then it is responsible for calling invalidateSelf() in order to have itself redrawn and true will be returned from this function.
android.graphics.drawable.Drawable.setState,Note: The Drawable holds a reference on to stateSet until a new state array is given to it so you must not modify this array during that time.
android.graphics.drawable.Drawable.setTint,Specifies tint color for this drawable. A Drawable's drawing content will be blended together with its tint before it is drawn to the screen. This functions similarly to setColorFilter(int android.graphics.PorterDuff.Mode). To clear the tint pass null to setTintList(android.content.res.ColorStateList). Note: Setting a color filter via setColorFilter(android.graphics.ColorFilter) or setColorFilter(int android.graphics.PorterDuff.Mode) overrides tint.
android.graphics.drawable.Drawable.setTint,Set tint.
android.graphics.drawable.Drawable.setTint,Specifies tint color for this drawable.
android.graphics.drawable.Drawable.setTint,A Drawable's drawing content will be blended together with its tint before it is drawn to the screen.
android.graphics.drawable.Drawable.setTint,This functions similarly to setColorFilter(int android.graphics.PorterDuff.Mode).
android.graphics.drawable.Drawable.setTint,To clear the tint pass null to setTintList(android.content.res.ColorStateList).
android.graphics.drawable.Drawable.setTint,Note: Setting a color filter via setColorFilter(android.graphics.ColorFilter) or setColorFilter(int android.graphics.PorterDuff.Mode) overrides tint.
android.graphics.drawable.Drawable.setTintList,Specifies tint color for this drawable as a color state list. A Drawable's drawing content will be blended together with its tint before it is drawn to the screen. This functions similarly to setColorFilter(int android.graphics.PorterDuff.Mode). Note: Setting a color filter via setColorFilter(android.graphics.ColorFilter) or setColorFilter(int android.graphics.PorterDuff.Mode) overrides tint.
android.graphics.drawable.Drawable.setTintList,Set tint list.
android.graphics.drawable.Drawable.setTintList,Specifies tint color for this drawable as a color state list.
android.graphics.drawable.Drawable.setTintList,A Drawable's drawing content will be blended together with its tint before it is drawn to the screen.
android.graphics.drawable.Drawable.setTintList,This functions similarly to setColorFilter(int android.graphics.PorterDuff.Mode).
android.graphics.drawable.Drawable.setTintList,Note: Setting a color filter via setColorFilter(android.graphics.ColorFilter) or setColorFilter(int android.graphics.PorterDuff.Mode) overrides tint.
android.graphics.drawable.Drawable.setVisible,Set whether this Drawable is visible. This generally does not impact the Drawable's behavior but is a hint that can be used by some Drawables for example to decide whether run animations.
android.graphics.drawable.Drawable.setVisible,Set visible.
android.graphics.drawable.Drawable.setVisible,Set whether this Drawable is visible.
android.graphics.drawable.Drawable.setVisible,This generally does not impact the Drawable's behavior but is a hint that can be used by some Drawables for example to decide whether run animations.
android.graphics.drawable.GradientDrawable.setColor,Changes this drawable to use a single color state list instead of a gradient. Calling this method with a null argument will clear the color and is equivalent to calling setColor(int) with the argument Color#TRANSPARENT. Note : changing color will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing the color.
android.graphics.drawable.GradientDrawable.setColor,Set color.
android.graphics.drawable.GradientDrawable.setColor,Changes this drawable to use a single color state list instead of a gradient.
android.graphics.drawable.GradientDrawable.setColor,Calling this method with a null argument will clear the color and is equivalent to calling setColor(int) with the argument Color#TRANSPARENT.
android.graphics.drawable.GradientDrawable.setColor,Note : changing color will affect all instances of a drawable loaded from a resource.
android.graphics.drawable.GradientDrawable.setColor,It is recommended to invoke mutate() before changing the color.
android.graphics.drawable.GradientDrawable.setColor,Changes this drawable to use a single color instead of a gradient. Note : changing color will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing the color.
android.graphics.drawable.GradientDrawable.setColor,Set color.
android.graphics.drawable.GradientDrawable.setColor,Changes this drawable to use a single color instead of a gradient.
android.graphics.drawable.GradientDrawable.setColor,Note : changing color will affect all instances of a drawable loaded from a resource.
android.graphics.drawable.GradientDrawable.setColor,It is recommended to invoke mutate() before changing the color.
android.graphics.drawable.GradientDrawable.setCornerRadii,Specifies radii for each of the 4 corners. For each corner the array contains 2 values [X_radius Y_radius]. The corners are ordered top-left top-right bottom-right bottom-left. This property is honored only when the shape is of type RECTANGLE. Note : changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property.
android.graphics.drawable.GradientDrawable.setCornerRadii,Set corner radii.
android.graphics.drawable.GradientDrawable.setCornerRadii,Specifies radii for each of the 4 corners.
android.graphics.drawable.GradientDrawable.setCornerRadii,For each corner the array contains 2 values [X_radius Y_radius].
android.graphics.drawable.GradientDrawable.setCornerRadii,The corners are ordered top-left top-right bottom-right bottom-left.
android.graphics.drawable.GradientDrawable.setCornerRadii,This property is honored only when the shape is of type RECTANGLE.
android.graphics.drawable.GradientDrawable.setCornerRadii,Note : changing this property will affect all instances of a drawable loaded from a resource.
android.graphics.drawable.GradientDrawable.setCornerRadii,It is recommended to invoke mutate() before changing this property.
android.graphics.drawable.GradientDrawable.setCornerRadius,Specifies the radius for the corners of the gradient. If this is > 0 then the drawable is drawn in a round-rectangle rather than a rectangle. This property is honored only when the shape is of type RECTANGLE. Note : changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property.
android.graphics.drawable.GradientDrawable.setCornerRadius,Set corner radius.
android.graphics.drawable.GradientDrawable.setCornerRadius,Specifies the radius for the corners of the gradient.
android.graphics.drawable.GradientDrawable.setCornerRadius,If this is > 0 then the drawable is drawn in a round-rectangle rather than a rectangle.
android.graphics.drawable.GradientDrawable.setCornerRadius,This property is honored only when the shape is of type RECTANGLE.
android.graphics.drawable.GradientDrawable.setCornerRadius,Note : changing this property will affect all instances of a drawable loaded from a resource.
android.graphics.drawable.GradientDrawable.setCornerRadius,It is recommended to invoke mutate() before changing this property.
android.graphics.drawable.GradientDrawable.setGradientCenter,Sets the position of the center of the gradient as a fraction of the width and height. The default value is (0.5 0.5). Note : changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property.
android.graphics.drawable.GradientDrawable.setGradientCenter,Set gradient center.
android.graphics.drawable.GradientDrawable.setGradientCenter,Sets the position of the center of the gradient as a fraction of the width and height.
android.graphics.drawable.GradientDrawable.setGradientCenter,The default value is (0.5 0.5).
android.graphics.drawable.GradientDrawable.setGradientCenter,Note : changing this property will affect all instances of a drawable loaded from a resource.
android.graphics.drawable.GradientDrawable.setGradientCenter,It is recommended to invoke mutate() before changing this property.
android.graphics.drawable.GradientDrawable.setGradientRadius,Sets the radius of the gradient. The radius is honored only when the gradient type is set to RADIAL_GRADIENT. Note : changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property.
android.graphics.drawable.GradientDrawable.setGradientRadius,Set gradient radius.
android.graphics.drawable.GradientDrawable.setGradientRadius,Sets the radius of the gradient.
android.graphics.drawable.GradientDrawable.setGradientRadius,The radius is honored only when the gradient type is set to RADIAL_GRADIENT.
android.graphics.drawable.GradientDrawable.setGradientRadius,Note : changing this property will affect all instances of a drawable loaded from a resource.
android.graphics.drawable.GradientDrawable.setGradientRadius,It is recommended to invoke mutate() before changing this property.
android.graphics.drawable.GradientDrawable.setGradientType,Sets the type of gradient used by this drawable. Note : changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property.
android.graphics.drawable.GradientDrawable.setGradientType,Set gradient type.
android.graphics.drawable.GradientDrawable.setGradientType,Sets the type of gradient used by this drawable.
android.graphics.drawable.GradientDrawable.setGradientType,Note : changing this property will affect all instances of a drawable loaded from a resource.
android.graphics.drawable.GradientDrawable.setGradientType,It is recommended to invoke mutate() before changing this property.
android.graphics.drawable.GradientDrawable.setShape,Sets the type of shape used to draw the gradient. Note : changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property.
android.graphics.drawable.GradientDrawable.setShape,Set shape.
android.graphics.drawable.GradientDrawable.setShape,Sets the type of shape used to draw the gradient.
android.graphics.drawable.GradientDrawable.setShape,Note : changing this property will affect all instances of a drawable loaded from a resource.
android.graphics.drawable.GradientDrawable.setShape,It is recommended to invoke mutate() before changing this property.
android.graphics.drawable.GradientDrawable.setSize,Sets the size of the shape drawn by this drawable. Note : changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property.
android.graphics.drawable.GradientDrawable.setSize,Set size.
android.graphics.drawable.GradientDrawable.setSize,Sets the size of the shape drawn by this drawable.
android.graphics.drawable.GradientDrawable.setSize,Note : changing this property will affect all instances of a drawable loaded from a resource.
android.graphics.drawable.GradientDrawable.setSize,It is recommended to invoke mutate() before changing this property.
android.graphics.drawable.GradientDrawable.setStroke,Set the stroke width and color state list for the drawable. If width is zero then no stroke is drawn. Note : changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property.
android.graphics.drawable.GradientDrawable.setStroke,Set stroke.
android.graphics.drawable.GradientDrawable.setStroke,Set the stroke width and color state list for the drawable.
android.graphics.drawable.GradientDrawable.setStroke,If width is zero then no stroke is drawn.
android.graphics.drawable.GradientDrawable.setStroke,Note : changing this property will affect all instances of a drawable loaded from a resource.
android.graphics.drawable.GradientDrawable.setStroke,It is recommended to invoke mutate() before changing this property.
android.graphics.drawable.GradientDrawable.setStroke,Set the stroke width and color state list for the drawable. If width is zero then no stroke is drawn. This method can also be used to dash the stroke. Note : changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property.
android.graphics.drawable.GradientDrawable.setStroke,Set stroke.
android.graphics.drawable.GradientDrawable.setStroke,Set the stroke width and color state list for the drawable.
android.graphics.drawable.GradientDrawable.setStroke,If width is zero then no stroke is drawn.
android.graphics.drawable.GradientDrawable.setStroke,This method can also be used to dash the stroke.
android.graphics.drawable.GradientDrawable.setStroke,Note : changing this property will affect all instances of a drawable loaded from a resource.
android.graphics.drawable.GradientDrawable.setStroke,It is recommended to invoke mutate() before changing this property.
android.graphics.drawable.GradientDrawable.setStroke,Set the stroke width and color for the drawable. If width is zero then no stroke is drawn. This method can also be used to dash the stroke. Note : changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property.
android.graphics.drawable.GradientDrawable.setStroke,Set stroke.
android.graphics.drawable.GradientDrawable.setStroke,Set the stroke width and color for the drawable.
android.graphics.drawable.GradientDrawable.setStroke,If width is zero then no stroke is drawn.
android.graphics.drawable.GradientDrawable.setStroke,This method can also be used to dash the stroke.
android.graphics.drawable.GradientDrawable.setStroke,Note : changing this property will affect all instances of a drawable loaded from a resource.
android.graphics.drawable.GradientDrawable.setStroke,It is recommended to invoke mutate() before changing this property.
android.graphics.drawable.GradientDrawable.setStroke,Set the stroke width and color for the drawable. If width is zero then no stroke is drawn. Note : changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property.
android.graphics.drawable.GradientDrawable.setStroke,Set stroke.
android.graphics.drawable.GradientDrawable.setStroke,Set the stroke width and color for the drawable.
android.graphics.drawable.GradientDrawable.setStroke,If width is zero then no stroke is drawn.
android.graphics.drawable.GradientDrawable.setStroke,Note : changing this property will affect all instances of a drawable loaded from a resource.
android.graphics.drawable.GradientDrawable.setStroke,It is recommended to invoke mutate() before changing this property.
android.graphics.drawable.GradientDrawable.setUseLevel,"Sets whether this drawable's level property will be used to scale the gradient. If a gradient is not used this property has no effect. Scaling behavior varies based on gradient type: LINEAR_GRADIENT adjusts the ending position along the gradient's axis of orientation (see getOrientation() ) RADIAL_GRADIENT adjusts the outer radius SWEEP_GRADIENT adjusts the ending angle The default value for this property is false. Note : This property corresponds to the android:useLevel attribute on the inner <gradient> tag NOT the android:useLevel attribute on the outer <shape> tag. For example <shape ...> <gradient ... android:useLevel=""true"" /> </shape> Note : Changing this property will affect all instances of a drawable loaded from a resource. It is recommended to invoke mutate() before changing this property. Related XML Attributes: android:useLevel Parameters useLevel boolean : true if the gradient should be scaled based on level false otherwise See also: mutate() Drawable.setLevel(int) Drawable.getLevel() getUseLevel() android:useLevel mutate() Drawable.setLevel(int) Drawable.getLevel() getUseLevel()."
android.graphics.drawable.GradientDrawable.setUseLevel,Set use level.
android.graphics.drawable.GradientDrawable.setUseLevel,Sets whether this drawable's level property will be used to scale the gradient.
android.graphics.drawable.GradientDrawable.setUseLevel,If a gradient is not used this property has no effect.
android.graphics.drawable.GradientDrawable.setUseLevel,Scaling behavior varies based on gradient type: LINEAR_GRADIENT adjusts the ending position along the gradient's axis of orientation (see getOrientation() ) RADIAL_GRADIENT adjusts the outer radius SWEEP_GRADIENT adjusts the ending angle The default value for this property is false.
android.graphics.drawable.GradientDrawable.setUseLevel,Note : This property corresponds to the android:useLevel attribute on the inner <gradient> tag NOT the android:useLevel attribute on the outer <shape> tag.
android.graphics.drawable.GradientDrawable.setUseLevel,For example <shape ...> <gradient .
android.graphics.drawable.GradientDrawable.setUseLevel,"android:useLevel=""true"" /> </shape> Note : Changing this property will affect all instances of a drawable loaded from a resource."
android.graphics.drawable.GradientDrawable.setUseLevel,It is recommended to invoke mutate() before changing this property.
android.graphics.drawable.GradientDrawable.setUseLevel,Related XML Attributes: android:useLevel Parameters useLevel boolean : true if the gradient should be scaled based on level false otherwise See also: mutate() Drawable.setLevel(int) Drawable.getLevel() getUseLevel() android:useLevel mutate() Drawable.setLevel(int) Drawable.getLevel() getUseLevel().
android.graphics.drawable.LayerDrawable.findDrawableByLayerId,Looks for a layer with the given ID and returns its Drawable. If multiple layers are found for the given ID returns the Drawable for the matching layer at the highest index.
android.graphics.drawable.LayerDrawable.findDrawableByLayerId,Find drawable by layer id.
android.graphics.drawable.LayerDrawable.findDrawableByLayerId,Looks for a layer with the given ID and returns its Drawable.
android.graphics.drawable.LayerDrawable.findDrawableByLayerId,If multiple layers are found for the given ID returns the Drawable for the matching layer at the highest index.
android.graphics.drawable.LayerDrawable.getDrawable,Returns the drawable for the layer at the specified index. Related XML Attributes: android:drawable.
android.graphics.drawable.LayerDrawable.getDrawable,Get drawable.
android.graphics.drawable.LayerDrawable.getDrawable,Returns the drawable for the layer at the specified index.
android.graphics.drawable.LayerDrawable.getDrawable,Related XML Attributes: android:drawable.
android.graphics.drawable.LayerDrawable.getId,Returns the ID of the specified layer. Related XML Attributes: android:id.
android.graphics.drawable.LayerDrawable.getId,Get id.
android.graphics.drawable.LayerDrawable.getId,Returns the ID of the specified layer.
android.graphics.drawable.LayerDrawable.getId,Related XML Attributes: android:id.
android.graphics.drawable.LayerDrawable.getNumberOfLayers,Returns the number of layers contained within this layer drawable.
android.graphics.drawable.LayerDrawable.getNumberOfLayers,Get number of layers.
android.graphics.drawable.LayerDrawable.setDrawableByLayerId,Replaces the Drawable for the layer with the given id.
android.graphics.drawable.LayerDrawable.setDrawableByLayerId,Set drawable by layer id.
android.graphics.drawable.LayerDrawable.setId,Sets the ID of a layer. Related XML Attributes: android:id.
android.graphics.drawable.LayerDrawable.setId,Set id.
android.graphics.drawable.LayerDrawable.setId,Sets the ID of a layer.
android.graphics.drawable.LayerDrawable.setId,Related XML Attributes: android:id.
android.graphics.drawable.LayerDrawable.setLayerInset,Specifies the insets in pixels for the drawable at the specified index. Related XML Attributes: android:left android:top android:right android:bottom.
android.graphics.drawable.LayerDrawable.setLayerInset,Set layer inset.
android.graphics.drawable.LayerDrawable.setLayerInset,Specifies the insets in pixels for the drawable at the specified index.
android.graphics.drawable.LayerDrawable.setLayerInset,Related XML Attributes: android:left android:top android:right android:bottom.
android.graphics.drawable.RippleDrawable.setPaddingMode,Specifies how layer padding should affect the bounds of subsequent layers. The default and recommended value for RippleDrawable is LayerDrawable.PADDING_MODE_STACK.
android.graphics.drawable.RippleDrawable.setPaddingMode,Set padding mode.
android.graphics.drawable.RippleDrawable.setPaddingMode,Specifies how layer padding should affect the bounds of subsequent layers.
android.graphics.drawable.RippleDrawable.setPaddingMode,The default and recommended value for RippleDrawable is LayerDrawable.PADDING_MODE_STACK.
android.graphics.drawable.ShapeDrawable.getPaint,Returns the Paint used to draw the shape.
android.graphics.drawable.ShapeDrawable.getPaint,Get paint.
android.graphics.drawable.ShapeDrawable.setAlpha,Set the alpha level for this drawable [0..255]. Note that this drawable also has a color in its paint which has an alpha as well. These two values are automatically combined during drawing. Thus if the color's alpha is 75% (i.e. 192) and the drawable's alpha is 50% (i.e. 128) then the combined alpha that will be used during drawing will be 37.5% (i.e. 96).
android.graphics.drawable.ShapeDrawable.setAlpha,Set alpha.
android.graphics.drawable.ShapeDrawable.setAlpha,Set the alpha level for this drawable [0..255].
android.graphics.drawable.ShapeDrawable.setAlpha,Note that this drawable also has a color in its paint which has an alpha as well.
android.graphics.drawable.ShapeDrawable.setAlpha,These two values are automatically combined during drawing.
android.graphics.drawable.ShapeDrawable.setAlpha,Thus if the color's alpha is 75% (i.e.
android.graphics.drawable.ShapeDrawable.setAlpha,192) and the drawable's alpha is 50% (i.e.
android.graphics.drawable.ShapeDrawable.setAlpha,128) then the combined alpha that will be used during drawing will be 37.5% (i.e.
android.graphics.drawable.ShapeDrawable.setAlpha,96).
android.graphics.drawable.ShapeDrawable.setIntrinsicHeight,Sets the intrinsic (default) height for this shape.
android.graphics.drawable.ShapeDrawable.setIntrinsicHeight,Set intrinsic height.
android.graphics.drawable.ShapeDrawable.setIntrinsicWidth,Sets the intrinsic (default) width for this shape.
android.graphics.drawable.ShapeDrawable.setIntrinsicWidth,Set intrinsic width.
android.graphics.drawable.ShapeDrawable.setPadding,Sets padding for this shape defined by a Rect object. Define the padding in the Rect object as: left top right bottom.
android.graphics.drawable.ShapeDrawable.setPadding,Set padding.
android.graphics.drawable.ShapeDrawable.setPadding,Sets padding for this shape defined by a Rect object.
android.graphics.drawable.ShapeDrawable.setPadding,Define the padding in the Rect object as: left top right bottom.
android.graphics.drawable.ShapeDrawable.setPadding,Sets padding for the shape.
android.graphics.drawable.ShapeDrawable.setPadding,Set padding.
android.graphics.drawable.ShapeDrawable.setShape,Sets the Shape of this ShapeDrawable.
android.graphics.drawable.ShapeDrawable.setShape,Set shape.
android.graphics.drawable.StateListDrawable.addState,Add a new image/string ID to the set of images.
android.graphics.drawable.StateListDrawable.addState,Add state.
android.graphics.drawable.TransitionDrawable.resetTransition,Show only the first layer.
android.graphics.drawable.TransitionDrawable.resetTransition,Reset transition.
android.graphics.drawable.TransitionDrawable.setCrossFadeEnabled,Enables or disables the cross fade of the drawables. When cross fade is disabled the first drawable is always drawn opaque. With cross fade enabled the first drawable is drawn with the opposite alpha of the second drawable. Cross fade is disabled by default.
android.graphics.drawable.TransitionDrawable.setCrossFadeEnabled,Set cross fade enabled.
android.graphics.drawable.TransitionDrawable.setCrossFadeEnabled,Enables or disables the cross fade of the drawables.
android.graphics.drawable.TransitionDrawable.setCrossFadeEnabled,When cross fade is disabled the first drawable is always drawn opaque.
android.graphics.drawable.TransitionDrawable.setCrossFadeEnabled,With cross fade enabled the first drawable is drawn with the opposite alpha of the second drawable.
android.graphics.drawable.TransitionDrawable.setCrossFadeEnabled,Cross fade is disabled by default.
android.graphics.drawable.TransitionDrawable.startTransition,Begin the second layer on top of the first layer.
android.graphics.drawable.TransitionDrawable.startTransition,Start transition.
android.hardware.Camera.addCallbackBuffer,Adds a pre-allocated buffer to the preview callback buffer queue. Applications can add one or more buffers to the queue. When a preview frame arrives and there is still at least one available buffer the buffer will be used and removed from the queue. Then preview callback is invoked with the buffer. If a frame arrives and there is no buffer left the frame is discarded. Applications should add buffers back when they finish processing the data in them. For formats besides YV12 the size of the buffer is determined by multiplying the preview image width height and bytes per pixel. The width and height can be read from Camera.Parameters#getPreviewSize(). Bytes per pixel can be computed from ImageFormat.getBitsPerPixel(int) / 8 using the image format from Camera.Parameters#getPreviewFormat(). If using the ImageFormat.YV12 format the size can be calculated using the equations listed in Camera.Parameters#setPreviewFormat. This method is only necessary when setPreviewCallbackWithBuffer(android.hardware.Camera.PreviewCallback) is used. When setPreviewCallback(android.hardware.Camera.PreviewCallback) or setOneShotPreviewCallback(android.hardware.Camera.PreviewCallback) are used buffers are automatically allocated. When a supplied buffer is too small to hold the preview frame data preview callback will return null and the buffer will be removed from the buffer queue.
android.hardware.Camera.addCallbackBuffer,Add callback buffer.
android.hardware.Camera.addCallbackBuffer,Adds a pre-allocated buffer to the preview callback buffer queue.
android.hardware.Camera.addCallbackBuffer,Applications can add one or more buffers to the queue.
android.hardware.Camera.addCallbackBuffer,When a preview frame arrives and there is still at least one available buffer the buffer will be used and removed from the queue.
android.hardware.Camera.addCallbackBuffer,Then preview callback is invoked with the buffer.
android.hardware.Camera.addCallbackBuffer,If a frame arrives and there is no buffer left the frame is discarded.
android.hardware.Camera.addCallbackBuffer,Applications should add buffers back when they finish processing the data in them.
android.hardware.Camera.addCallbackBuffer,For formats besides YV12 the size of the buffer is determined by multiplying the preview image width height and bytes per pixel.
android.hardware.Camera.addCallbackBuffer,The width and height can be read from Camera.Parameters#getPreviewSize().
android.hardware.Camera.addCallbackBuffer,Bytes per pixel can be computed from ImageFormat.getBitsPerPixel(int) / 8 using the image format from Camera.Parameters#getPreviewFormat().
android.hardware.Camera.addCallbackBuffer,If using the ImageFormat.YV12 format the size can be calculated using the equations listed in Camera.Parameters#setPreviewFormat.
android.hardware.Camera.addCallbackBuffer,This method is only necessary when setPreviewCallbackWithBuffer(android.hardware.Camera.PreviewCallback) is used.
android.hardware.Camera.addCallbackBuffer,When setPreviewCallback(android.hardware.Camera.PreviewCallback) or setOneShotPreviewCallback(android.hardware.Camera.PreviewCallback) are used buffers are automatically allocated.
android.hardware.Camera.addCallbackBuffer,When a supplied buffer is too small to hold the preview frame data preview callback will return null and the buffer will be removed from the buffer queue.
android.hardware.Camera.cancelAutoFocus,Cancels any auto-focus function in progress. Whether or not auto-focus is currently in progress this function will return the focus position to the default. If the camera does not support auto-focus this is a no-op.
android.hardware.Camera.cancelAutoFocus,Cancel auto focus.
android.hardware.Camera.cancelAutoFocus,Cancels any auto-focus function in progress.
android.hardware.Camera.cancelAutoFocus,Whether or not auto-focus is currently in progress this function will return the focus position to the default.
android.hardware.Camera.cancelAutoFocus,If the camera does not support auto-focus this is a no-op.
android.hardware.Camera.getNumberOfCameras,Returns the number of physical cameras available on this device. The return value of this method might change dynamically if the device supports external cameras and an external camera is connected or disconnected. If there is a logical multi-camera in the system to maintain app backward compatibility this method will only expose one camera per facing for all logical camera and physical camera groups. Use camera2 API to see all cameras.
android.hardware.Camera.getNumberOfCameras,Get number of cameras.
android.hardware.Camera.getNumberOfCameras,Returns the number of physical cameras available on this device.
android.hardware.Camera.getNumberOfCameras,The return value of this method might change dynamically if the device supports external cameras and an external camera is connected or disconnected.
android.hardware.Camera.getNumberOfCameras,If there is a logical multi-camera in the system to maintain app backward compatibility this method will only expose one camera per facing for all logical camera and physical camera groups.
android.hardware.Camera.getNumberOfCameras,Use camera2 API to see all cameras.
android.hardware.Camera.getParameters,Returns the current settings for this Camera service. If modifications are made to the returned Parameters they must be passed to setParameters(android.hardware.Camera.Parameters) to take effect.
android.hardware.Camera.getParameters,Get parameters.
android.hardware.Camera.getParameters,Returns the current settings for this Camera service.
android.hardware.Camera.getParameters,If modifications are made to the returned Parameters they must be passed to setParameters(android.hardware.Camera.Parameters) to take effect.
android.hardware.Camera.lock,Re-locks the camera to prevent other processes from accessing it. Camera objects are locked by default unless unlock() is called. Normally reconnect() is used instead. Since API level 14 camera is automatically locked for applications in MediaRecorder.start(). Applications can use the camera (ex: zoom) after recording starts. There is no need to call this after recording starts or stops. If you are not recording video you probably do not need this method.
android.hardware.Camera.lock,Lock.
android.hardware.Camera.lock,Re-locks the camera to prevent other processes from accessing it.
android.hardware.Camera.lock,Camera objects are locked by default unless unlock() is called.
android.hardware.Camera.lock,Normally reconnect() is used instead.
android.hardware.Camera.lock,Since API level 14 camera is automatically locked for applications in MediaRecorder.start().
android.hardware.Camera.lock,Applications can use the camera (ex: zoom) after recording starts.
android.hardware.Camera.lock,There is no need to call this after recording starts or stops.
android.hardware.Camera.lock,If you are not recording video you probably do not need this method.
android.hardware.Camera.open,Creates a new Camera object to access the first back-facing camera on the device. If the device does not have a back-facing camera this returns null. Otherwise acts like the open(int) call.
android.hardware.Camera.open,Open.
android.hardware.Camera.open,Creates a new Camera object to access the first back-facing camera on the device.
android.hardware.Camera.open,If the device does not have a back-facing camera this returns null.
android.hardware.Camera.open,Otherwise acts like the open(int) call.
android.hardware.Camera.open,Creates a new Camera object to access a particular hardware camera. If the same camera is opened by other applications this will throw a RuntimeException. You must call release() when you are done using the camera otherwise it will remain locked and be unavailable to other applications. Your application should only have one Camera object active at a time for a particular hardware camera. Callbacks from other methods are delivered to the event loop of the thread which called open(). If this thread has no event loop then callbacks are delivered to the main application event loop. If there is no main application event loop callbacks are not delivered. Caution: On some devices this method may take a long time to complete. It is best to call this method from a worker thread (possibly using AsyncTask ) to avoid blocking the main application UI thread.
android.hardware.Camera.open,Open.
android.hardware.Camera.open,Creates a new Camera object to access a particular hardware camera.
android.hardware.Camera.open,If the same camera is opened by other applications this will throw a RuntimeException.
android.hardware.Camera.open,You must call release() when you are done using the camera otherwise it will remain locked and be unavailable to other applications.
android.hardware.Camera.open,Your application should only have one Camera object active at a time for a particular hardware camera.
android.hardware.Camera.open,Callbacks from other methods are delivered to the event loop of the thread which called open().
android.hardware.Camera.open,If this thread has no event loop then callbacks are delivered to the main application event loop.
android.hardware.Camera.open,If there is no main application event loop callbacks are not delivered.
android.hardware.Camera.open,Caution: On some devices this method may take a long time to complete.
android.hardware.Camera.open,It is best to call this method from a worker thread (possibly using AsyncTask ) to avoid blocking the main application UI thread.
android.hardware.Camera.reconnect,Reconnects to the camera service after another process used it. After unlock() is called another process may use the camera; when the process is done you must reconnect to the camera which will re-acquire the lock and allow you to continue using the camera. Since API level 14 camera is automatically locked for applications in MediaRecorder.start(). Applications can use the camera (ex: zoom) after recording starts. There is no need to call this after recording starts or stops. If you are not recording video you probably do not need this method.
android.hardware.Camera.reconnect,Reconnect.
android.hardware.Camera.reconnect,Reconnects to the camera service after another process used it.
android.hardware.Camera.reconnect,After unlock() is called another process may use the camera; when the process is done you must reconnect to the camera which will re-acquire the lock and allow you to continue using the camera.
android.hardware.Camera.reconnect,Since API level 14 camera is automatically locked for applications in MediaRecorder.start().
android.hardware.Camera.reconnect,Applications can use the camera (ex: zoom) after recording starts.
android.hardware.Camera.reconnect,There is no need to call this after recording starts or stops.
android.hardware.Camera.reconnect,If you are not recording video you probably do not need this method.
android.hardware.Camera.release,Disconnects and releases the Camera object resources. You must call this as soon as you're done with the Camera object.
android.hardware.Camera.release,Release.
android.hardware.Camera.release,Disconnects and releases the Camera object resources.
android.hardware.Camera.release,You must call this as soon as you're done with the Camera object.
android.hardware.Camera.setDisplayOrientation,Set the clockwise rotation of preview display in degrees. This affects the preview frames and the picture displayed after snapshot. This method is useful for portrait mode applications. Note that preview display of front-facing cameras is flipped horizontally before the rotation that is the image is reflected along the central vertical axis of the camera sensor. So the users can see themselves as looking into a mirror. This does not affect the order of byte array passed in PreviewCallback#onPreviewFrame JPEG pictures or recorded videos. This method is not allowed to be called during preview. If you want to make the camera image show in the same orientation as the display you can use the following code. Starting from API level 14 this method can be called when preview is active. Note: Before API level 24 the default value for orientation is 0. Starting in API level 24 the default orientation will be such that applications in forced-landscape mode will have correct preview orientation which may be either a default of 0 or 180. Applications that operate in portrait mode or allow for changing orientation must still call this method after each orientation change to ensure correct preview display in all cases.
android.hardware.Camera.setDisplayOrientation,Set display orientation.
android.hardware.Camera.setDisplayOrientation,Set the clockwise rotation of preview display in degrees.
android.hardware.Camera.setDisplayOrientation,This affects the preview frames and the picture displayed after snapshot.
android.hardware.Camera.setDisplayOrientation,This method is useful for portrait mode applications.
android.hardware.Camera.setDisplayOrientation,Note that preview display of front-facing cameras is flipped horizontally before the rotation that is the image is reflected along the central vertical axis of the camera sensor.
android.hardware.Camera.setDisplayOrientation,So the users can see themselves as looking into a mirror.
android.hardware.Camera.setDisplayOrientation,This does not affect the order of byte array passed in PreviewCallback#onPreviewFrame JPEG pictures or recorded videos.
android.hardware.Camera.setDisplayOrientation,This method is not allowed to be called during preview.
android.hardware.Camera.setDisplayOrientation,If you want to make the camera image show in the same orientation as the display you can use the following code.
android.hardware.Camera.setDisplayOrientation,Starting from API level 14 this method can be called when preview is active.
android.hardware.Camera.setDisplayOrientation,Note: Before API level 24 the default value for orientation is 0.
android.hardware.Camera.setDisplayOrientation,Starting in API level 24 the default orientation will be such that applications in forced-landscape mode will have correct preview orientation which may be either a default of 0 or 180.
android.hardware.Camera.setDisplayOrientation,Applications that operate in portrait mode or allow for changing orientation must still call this method after each orientation change to ensure correct preview display in all cases.
android.hardware.Camera.setPreviewDisplay,Sets the Surface to be used for live preview. Either a surface or surface texture is necessary for preview and preview is necessary to take pictures. The same surface can be re-set without harm. Setting a preview surface will un-set any preview surface texture that was set via setPreviewTexture(SurfaceTexture). The SurfaceHolder must already contain a surface when this method is called. If you are using SurfaceView you will need to register a SurfaceHolder.Callback with SurfaceHolder#addCallback(SurfaceHolder.Callback) and wait for SurfaceHolder.Callback#surfaceCreated(SurfaceHolder) before calling setPreviewDisplay() or starting preview. This method must be called before startPreview(). The one exception is that if the preview surface is not set (or set to null) before startPreview() is called then this method may be called once with a non-null parameter to set the preview surface. (This allows camera setup and surface creation to happen in parallel saving time.) The preview surface may not otherwise change while preview is running.
android.hardware.Camera.setPreviewDisplay,Set preview display.
android.hardware.Camera.setPreviewDisplay,Sets the Surface to be used for live preview.
android.hardware.Camera.setPreviewDisplay,Either a surface or surface texture is necessary for preview and preview is necessary to take pictures.
android.hardware.Camera.setPreviewDisplay,The same surface can be re-set without harm.
android.hardware.Camera.setPreviewDisplay,Setting a preview surface will un-set any preview surface texture that was set via setPreviewTexture(SurfaceTexture).
android.hardware.Camera.setPreviewDisplay,The SurfaceHolder must already contain a surface when this method is called.
android.hardware.Camera.setPreviewDisplay,If you are using SurfaceView you will need to register a SurfaceHolder.Callback with SurfaceHolder#addCallback(SurfaceHolder.Callback) and wait for SurfaceHolder.Callback#surfaceCreated(SurfaceHolder) before calling setPreviewDisplay() or starting preview.
android.hardware.Camera.setPreviewDisplay,This method must be called before startPreview().
android.hardware.Camera.setPreviewDisplay,The one exception is that if the preview surface is not set (or set to null) before startPreview() is called then this method may be called once with a non-null parameter to set the preview surface.
android.hardware.Camera.setPreviewDisplay,(This allows camera setup and surface creation to happen in parallel saving time.) The preview surface may not otherwise change while preview is running.
android.hardware.Camera.setPreviewTexture,Sets the SurfaceTexture to be used for live preview. Either a surface or surface texture is necessary for preview and preview is necessary to take pictures. The same surface texture can be re-set without harm. Setting a preview surface texture will un-set any preview surface that was set via setPreviewDisplay(SurfaceHolder). This method must be called before startPreview(). The one exception is that if the preview surface texture is not set (or set to null) before startPreview() is called then this method may be called once with a non-null parameter to set the preview surface. (This allows camera setup and surface creation to happen in parallel saving time.) The preview surface texture may not otherwise change while preview is running. The timestamps provided by SurfaceTexture#getTimestamp() for a SurfaceTexture set as the preview texture have an unspecified zero point and cannot be directly compared between different cameras or different instances of the same camera or across multiple runs of the same program. If you are using the preview data to create video or still images strongly consider using MediaActionSound to properly indicate image capture or recording start/stop to the user.
android.hardware.Camera.setPreviewTexture,Set preview texture.
android.hardware.Camera.setPreviewTexture,Sets the SurfaceTexture to be used for live preview.
android.hardware.Camera.setPreviewTexture,Either a surface or surface texture is necessary for preview and preview is necessary to take pictures.
android.hardware.Camera.setPreviewTexture,The same surface texture can be re-set without harm.
android.hardware.Camera.setPreviewTexture,Setting a preview surface texture will un-set any preview surface that was set via setPreviewDisplay(SurfaceHolder).
android.hardware.Camera.setPreviewTexture,This method must be called before startPreview().
android.hardware.Camera.setPreviewTexture,The one exception is that if the preview surface texture is not set (or set to null) before startPreview() is called then this method may be called once with a non-null parameter to set the preview surface.
android.hardware.Camera.setPreviewTexture,(This allows camera setup and surface creation to happen in parallel saving time.) The preview surface texture may not otherwise change while preview is running.
android.hardware.Camera.setPreviewTexture,The timestamps provided by SurfaceTexture#getTimestamp() for a SurfaceTexture set as the preview texture have an unspecified zero point and cannot be directly compared between different cameras or different instances of the same camera or across multiple runs of the same program.
android.hardware.Camera.setPreviewTexture,If you are using the preview data to create video or still images strongly consider using MediaActionSound to properly indicate image capture or recording start/stop to the user.
android.hardware.Camera.startPreview,Starts capturing and drawing preview frames to the screen. Preview will not actually start until a surface is supplied with setPreviewDisplay(android.view.SurfaceHolder) or setPreviewTexture(android.graphics.SurfaceTexture). If setPreviewCallback(android.hardware.Camera.PreviewCallback) setOneShotPreviewCallback(android.hardware.Camera.PreviewCallback) or setPreviewCallbackWithBuffer(android.hardware.Camera.PreviewCallback) were called Camera.PreviewCallback#onPreviewFrame(byte[] Camera) will be called when preview data becomes available.
android.hardware.Camera.startPreview,Start preview.
android.hardware.Camera.startPreview,Starts capturing and drawing preview frames to the screen.
android.hardware.Camera.startPreview,Preview will not actually start until a surface is supplied with setPreviewDisplay(android.view.SurfaceHolder) or setPreviewTexture(android.graphics.SurfaceTexture).
android.hardware.Camera.startPreview,If setPreviewCallback(android.hardware.Camera.PreviewCallback) setOneShotPreviewCallback(android.hardware.Camera.PreviewCallback) or setPreviewCallbackWithBuffer(android.hardware.Camera.PreviewCallback) were called Camera.PreviewCallback#onPreviewFrame(byte[] Camera) will be called when preview data becomes available.
android.hardware.Camera.startSmoothZoom,Zooms to the requested value smoothly. The driver will notify OnZoomChangeListener of the zoom value and whether zoom is stopped at the time. For example suppose the current zoom is 0 and startSmoothZoom is called with value 3. The Camera.OnZoomChangeListener#onZoomChange(int boolean Camera) method will be called three times with zoom values 1 2 and 3. Applications can call stopSmoothZoom() to stop the zoom earlier. Applications should not call startSmoothZoom again or change the zoom value before zoom stops. If the supplied zoom value equals to the current zoom value no zoom callback will be generated. This method is supported if Camera.Parameters.isSmoothZoomSupported() returns true.
android.hardware.Camera.startSmoothZoom,Start smooth zoom.
android.hardware.Camera.startSmoothZoom,Zooms to the requested value smoothly.
android.hardware.Camera.startSmoothZoom,The driver will notify OnZoomChangeListener of the zoom value and whether zoom is stopped at the time.
android.hardware.Camera.startSmoothZoom,For example suppose the current zoom is 0 and startSmoothZoom is called with value 3.
android.hardware.Camera.startSmoothZoom,The Camera.OnZoomChangeListener#onZoomChange(int boolean Camera) method will be called three times with zoom values 1 2 and 3.
android.hardware.Camera.startSmoothZoom,Applications can call stopSmoothZoom() to stop the zoom earlier.
android.hardware.Camera.startSmoothZoom,Applications should not call startSmoothZoom again or change the zoom value before zoom stops.
android.hardware.Camera.startSmoothZoom,If the supplied zoom value equals to the current zoom value no zoom callback will be generated.
android.hardware.Camera.startSmoothZoom,This method is supported if Camera.Parameters.isSmoothZoomSupported() returns true.
android.hardware.Camera.stopPreview,Stops capturing and drawing preview frames to the surface and resets the camera for a future call to startPreview().
android.hardware.Camera.stopPreview,Stop preview.
android.hardware.Camera.unlock,Unlocks the camera to allow another process to access it. Normally the camera is locked to the process with an active Camera object until release() is called. To allow rapid handoff between processes you can call this method to release the camera temporarily for another process to use; once the other process is done you can call reconnect() to reclaim the camera. This must be done before calling MediaRecorder.setCamera(Camera). This cannot be called after recording starts. If you are not recording video you probably do not need this method.
android.hardware.Camera.unlock,Unlock.
android.hardware.Camera.unlock,Unlocks the camera to allow another process to access it.
android.hardware.Camera.unlock,Normally the camera is locked to the process with an active Camera object until release() is called.
android.hardware.Camera.unlock,To allow rapid handoff between processes you can call this method to release the camera temporarily for another process to use; once the other process is done you can call reconnect() to reclaim the camera.
android.hardware.Camera.unlock,This must be done before calling MediaRecorder.setCamera(Camera).
android.hardware.Camera.unlock,This cannot be called after recording starts.
android.hardware.Camera.unlock,If you are not recording video you probably do not need this method.
android.hardware.SensorManager.getDefaultSensor,Use this method to get the default sensor for a given type. Note that the returned sensor could be a composite sensor and its data could be averaged or filtered. If you need to access the raw sensors use SensorManager#getSensorList(int).
android.hardware.SensorManager.getDefaultSensor,Get default sensor.
android.hardware.SensorManager.getDefaultSensor,Use this method to get the default sensor for a given type.
android.hardware.SensorManager.getDefaultSensor,Note that the returned sensor could be a composite sensor and its data could be averaged or filtered.
android.hardware.SensorManager.getDefaultSensor,If you need to access the raw sensors use SensorManager#getSensorList(int).
android.hardware.SensorManager.getDefaultSensor,Return a Sensor with the given type and wakeUp properties. If multiple sensors of this type exist any one of them may be returned. For example getDefaultSensor( Sensor#TYPE_ACCELEROMETER true) returns a wake-up accelerometer sensor if it exists. getDefaultSensor( Sensor#TYPE_PROXIMITY false) returns a non wake-up proximity sensor if it exists. getDefaultSensor( Sensor#TYPE_PROXIMITY true) returns a wake-up proximity sensor which is the same as the Sensor returned by getDefaultSensor(int). Note: Sensors like Sensor#TYPE_PROXIMITY and Sensor#TYPE_SIGNIFICANT_MOTION are declared as wake-up sensors by default.
android.hardware.SensorManager.getDefaultSensor,Get default sensor.
android.hardware.SensorManager.getDefaultSensor,Return a Sensor with the given type and wakeUp properties.
android.hardware.SensorManager.getDefaultSensor,If multiple sensors of this type exist any one of them may be returned.
android.hardware.SensorManager.getDefaultSensor,For example getDefaultSensor( Sensor#TYPE_ACCELEROMETER true) returns a wake-up accelerometer sensor if it exists.
android.hardware.SensorManager.getDefaultSensor,getDefaultSensor( Sensor#TYPE_PROXIMITY false) returns a non wake-up proximity sensor if it exists.
android.hardware.SensorManager.getDefaultSensor,getDefaultSensor( Sensor#TYPE_PROXIMITY true) returns a wake-up proximity sensor which is the same as the Sensor returned by getDefaultSensor(int).
android.hardware.SensorManager.getDefaultSensor,Note: Sensors like Sensor#TYPE_PROXIMITY and Sensor#TYPE_SIGNIFICANT_MOTION are declared as wake-up sensors by default.
android.hardware.SensorManager.getOrientation,Computes the device's orientation based on the rotation matrix. When it returns the array values are as follows: values[0]: Azimuth angle of rotation about the -z axis. This value represents the angle between the device's y axis and the magnetic north pole. When facing north this angle is 0 when facing south this angle is π. Likewise when facing east this angle is π/2 and when facing west this angle is -π/2. The range of values is -π to π. values[1]: Pitch angle of rotation about the x axis. This value represents the angle between a plane parallel to the device's screen and a plane parallel to the ground. Assuming that the bottom edge of the device faces the user and that the screen is face-up tilting the top edge of the device toward the ground creates a positive pitch angle. The range of values is -π to π. values[2]: Roll angle of rotation about the y axis. This value represents the angle between a plane perpendicular to the device's screen and a plane perpendicular to the ground. Assuming that the bottom edge of the device faces the user and that the screen is face-up tilting the left edge of the device toward the ground creates a positive roll angle. The range of values is -π/2 to π/2. Applying these three rotations in the azimuth pitch roll order transforms an identity matrix to the rotation matrix passed into this method. Also note that all three orientation angles are expressed in radians.
android.hardware.SensorManager.getOrientation,Get orientation.
android.hardware.SensorManager.getOrientation,Computes the device's orientation based on the rotation matrix.
android.hardware.SensorManager.getOrientation,When it returns the array values are as follows: values[0]: Azimuth angle of rotation about the -z axis.
android.hardware.SensorManager.getOrientation,This value represents the angle between the device's y axis and the magnetic north pole.
android.hardware.SensorManager.getOrientation,When facing north this angle is 0 when facing south this angle is π.
android.hardware.SensorManager.getOrientation,Likewise when facing east this angle is π/2 and when facing west this angle is -π/2.
android.hardware.SensorManager.getOrientation,The range of values is -π to π.
android.hardware.SensorManager.getOrientation,values[1]: Pitch angle of rotation about the x axis.
android.hardware.SensorManager.getOrientation,This value represents the angle between a plane parallel to the device's screen and a plane parallel to the ground.
android.hardware.SensorManager.getOrientation,Assuming that the bottom edge of the device faces the user and that the screen is face-up tilting the top edge of the device toward the ground creates a positive pitch angle.
android.hardware.SensorManager.getOrientation,The range of values is -π to π.
android.hardware.SensorManager.getOrientation,values[2]: Roll angle of rotation about the y axis.
android.hardware.SensorManager.getOrientation,This value represents the angle between a plane perpendicular to the device's screen and a plane perpendicular to the ground.
android.hardware.SensorManager.getOrientation,Assuming that the bottom edge of the device faces the user and that the screen is face-up tilting the left edge of the device toward the ground creates a positive roll angle.
android.hardware.SensorManager.getOrientation,The range of values is -π/2 to π/2.
android.hardware.SensorManager.getOrientation,Applying these three rotations in the azimuth pitch roll order transforms an identity matrix to the rotation matrix passed into this method.
android.hardware.SensorManager.getOrientation,Also note that all three orientation angles are expressed in radians.
android.hardware.SensorManager.getRotationMatrix,Computes the inclination matrix I as well as the rotation matrix R transforming a vector from the device coordinate system to the world's coordinate system which is defined as a direct orthonormal basis where: X is defined as the vector product Y.Z (It is tangential to the ground at the device's current location and roughly points East). Y is tangential to the ground at the device's current location and points towards the magnetic North Pole. Z points towards the sky and is perpendicular to the ground. By definition: [0 0 g] = R * gravity (g = magnitude of gravity) [0 m 0] = I * R * geomagnetic (m = magnitude of geomagnetic field) R is the identity matrix when the device is aligned with the world's coordinate system that is when the device's X axis points toward East the Y axis points to the North Pole and the device is facing the sky. I is a rotation matrix transforming the geomagnetic vector into the same coordinate space as gravity (the world's coordinate space). I is a simple rotation around the X axis. The inclination angle in radians can be computed with getInclination(float[]). Each matrix is returned either as a 3x3 or 4x4 row-major matrix depending on the length of the passed array: If the array length is 16: Note that because OpenGL matrices are column-major matrices you must transpose the matrix before using it. However since the matrix is a rotation matrix its transpose is also its inverse conveniently it is often the inverse of the rotation that is needed for rendering; it can therefore be used with OpenGL ES directly. Also note that the returned matrices always have this form: If the array length is 9: The inverse of each matrix can be computed easily by taking its transpose. The matrices returned by this function are meaningful only when the device is not free-falling and it is not close to the magnetic north. If the device is accelerating or placed into a strong magnetic field the returned matrices may be inaccurate.
android.hardware.SensorManager.getRotationMatrix,Get rotation matrix.
android.hardware.SensorManager.getRotationMatrix,Computes the inclination matrix I as well as the rotation matrix R transforming a vector from the device coordinate system to the world's coordinate system which is defined as a direct orthonormal basis where: X is defined as the vector product Y.Z (It is tangential to the ground at the device's current location and roughly points East).
android.hardware.SensorManager.getRotationMatrix,Y is tangential to the ground at the device's current location and points towards the magnetic North Pole.
android.hardware.SensorManager.getRotationMatrix,Z points towards the sky and is perpendicular to the ground.
android.hardware.SensorManager.getRotationMatrix,By definition: [0 0 g] = R * gravity (g = magnitude of gravity) [0 m 0] = I * R * geomagnetic (m = magnitude of geomagnetic field) R is the identity matrix when the device is aligned with the world's coordinate system that is when the device's X axis points toward East the Y axis points to the North Pole and the device is facing the sky.
android.hardware.SensorManager.getRotationMatrix,I is a rotation matrix transforming the geomagnetic vector into the same coordinate space as gravity (the world's coordinate space).
android.hardware.SensorManager.getRotationMatrix,I is a simple rotation around the X axis.
android.hardware.SensorManager.getRotationMatrix,The inclination angle in radians can be computed with getInclination(float[]).
android.hardware.SensorManager.getRotationMatrix,Each matrix is returned either as a 3x3 or 4x4 row-major matrix depending on the length of the passed array: If the array length is 16: Note that because OpenGL matrices are column-major matrices you must transpose the matrix before using it.
android.hardware.SensorManager.getRotationMatrix,However since the matrix is a rotation matrix its transpose is also its inverse conveniently it is often the inverse of the rotation that is needed for rendering; it can therefore be used with OpenGL ES directly.
android.hardware.SensorManager.getRotationMatrix,Also note that the returned matrices always have this form: If the array length is 9: The inverse of each matrix can be computed easily by taking its transpose.
android.hardware.SensorManager.getRotationMatrix,The matrices returned by this function are meaningful only when the device is not free-falling and it is not close to the magnetic north.
android.hardware.SensorManager.getRotationMatrix,If the device is accelerating or placed into a strong magnetic field the returned matrices may be inaccurate.
android.hardware.SensorManager.getSensorList,Use this method to get the list of available sensors of a certain type. Make multiple calls to get sensors of different types or use Sensor.TYPE_ALL to get all the sensors. NOTE: Both wake-up and non wake-up sensors matching the given type are returned. Check Sensor#isWakeUpSensor() to know the wake-up properties of the returned Sensor.
android.hardware.SensorManager.getSensorList,Get sensor list.
android.hardware.SensorManager.getSensorList,Use this method to get the list of available sensors of a certain type.
android.hardware.SensorManager.getSensorList,Make multiple calls to get sensors of different types or use Sensor.TYPE_ALL to get all the sensors.
android.hardware.SensorManager.getSensorList,NOTE: Both wake-up and non wake-up sensors matching the given type are returned.
android.hardware.SensorManager.getSensorList,Check Sensor#isWakeUpSensor() to know the wake-up properties of the returned Sensor.
android.hardware.SensorManager.registerListener,Registers a SensorEventListener for the given sensor at the given sampling frequency. The events will be delivered to the provided SensorEventListener as soon as they are available. To reduce the power consumption applications can use registerListener(android.hardware.SensorEventListener android.hardware.Sensor int int) instead and specify a positive non-zero maximum reporting latency. In the case of non-wake-up sensors the events are only delivered while the Application Processor (AP) is not in suspend mode. See Sensor#isWakeUpSensor() for more details. To ensure delivery of events from non-wake-up sensors even when the screen is OFF the application registering to the sensor must hold a partial wake-lock to keep the AP awake otherwise some events might be lost while the AP is asleep. Note that although events might be lost while the AP is asleep the sensor will still consume power if it is not explicitly deactivated by the application. Applications must unregister their SensorEventListener s in their activity's onPause() method to avoid consuming power while the device is inactive. See registerListener(android.hardware.SensorEventListener android.hardware.Sensor int int) for more details on hardware FIFO (queueing) capabilities and when some sensor events might be lost. In the case of wake-up sensors each event generated by the sensor will cause the AP to wake-up ensuring that each event can be delivered. Because of this registering to a wake-up sensor has very significant power implications. Call Sensor#isWakeUpSensor() to check whether a sensor is a wake-up sensor. See registerListener(android.hardware.SensorEventListener android.hardware.Sensor int int) for information on how to reduce the power impact of registering to wake-up sensors. Note: Don't use this method with one-shot trigger sensors such as Sensor#TYPE_SIGNIFICANT_MOTION. Use requestTriggerSensor(android.hardware.TriggerEventListener android.hardware.Sensor) instead. Use Sensor#getReportingMode() to obtain the reporting mode of a given sensor.
android.hardware.SensorManager.registerListener,Register listener.
android.hardware.SensorManager.registerListener,Registers a SensorEventListener for the given sensor at the given sampling frequency.
android.hardware.SensorManager.registerListener,The events will be delivered to the provided SensorEventListener as soon as they are available.
android.hardware.SensorManager.registerListener,To reduce the power consumption applications can use registerListener(android.hardware.SensorEventListener android.hardware.Sensor int int) instead and specify a positive non-zero maximum reporting latency.
android.hardware.SensorManager.registerListener,In the case of non-wake-up sensors the events are only delivered while the Application Processor (AP) is not in suspend mode.
android.hardware.SensorManager.registerListener,See Sensor#isWakeUpSensor() for more details.
android.hardware.SensorManager.registerListener,To ensure delivery of events from non-wake-up sensors even when the screen is OFF the application registering to the sensor must hold a partial wake-lock to keep the AP awake otherwise some events might be lost while the AP is asleep.
android.hardware.SensorManager.registerListener,Note that although events might be lost while the AP is asleep the sensor will still consume power if it is not explicitly deactivated by the application.
android.hardware.SensorManager.registerListener,Applications must unregister their SensorEventListener s in their activity's onPause() method to avoid consuming power while the device is inactive.
android.hardware.SensorManager.registerListener,See registerListener(android.hardware.SensorEventListener android.hardware.Sensor int int) for more details on hardware FIFO (queueing) capabilities and when some sensor events might be lost.
android.hardware.SensorManager.registerListener,In the case of wake-up sensors each event generated by the sensor will cause the AP to wake-up ensuring that each event can be delivered.
android.hardware.SensorManager.registerListener,Because of this registering to a wake-up sensor has very significant power implications.
android.hardware.SensorManager.registerListener,Call Sensor#isWakeUpSensor() to check whether a sensor is a wake-up sensor.
android.hardware.SensorManager.registerListener,See registerListener(android.hardware.SensorEventListener android.hardware.Sensor int int) for information on how to reduce the power impact of registering to wake-up sensors.
android.hardware.SensorManager.registerListener,Note: Don't use this method with one-shot trigger sensors such as Sensor#TYPE_SIGNIFICANT_MOTION.
android.hardware.SensorManager.registerListener,Use requestTriggerSensor(android.hardware.TriggerEventListener android.hardware.Sensor) instead.
android.hardware.SensorManager.registerListener,Use Sensor#getReportingMode() to obtain the reporting mode of a given sensor.
android.hardware.SensorManager.registerListener,Registers a SensorEventListener for the given sensor at the given sampling frequency and the given maximum reporting latency. This function is similar to registerListener(android.hardware.SensorEventListener android.hardware.Sensor int) but it allows events to stay temporarily in the hardware FIFO (queue) before being delivered. The events can be stored in the hardware FIFO up to maxReportLatencyUs microseconds. Once one of the events in the FIFO needs to be reported all of the events in the FIFO are reported sequentially. This means that some events will be reported before the maximum reporting latency has elapsed. When maxReportLatencyUs is 0 the call is equivalent to a call to registerListener(android.hardware.SensorEventListener android.hardware.Sensor int) as it requires the events to be delivered as soon as possible. When sensor.maxFifoEventCount() is 0 the sensor does not use a FIFO so the call will also be equivalent to registerListener(android.hardware.SensorEventListener android.hardware.Sensor int). Setting maxReportLatencyUs to a positive value allows to reduce the number of interrupts the AP (Application Processor) receives hence reducing power consumption as the AP can switch to a lower power state while the sensor is capturing the data. This is especially important when registering to wake-up sensors for which each interrupt causes the AP to wake up if it was in suspend mode. See Sensor#isWakeUpSensor() for more information on wake-up sensors.
android.hardware.SensorManager.registerListener,Register listener.
android.hardware.SensorManager.registerListener,Registers a SensorEventListener for the given sensor at the given sampling frequency and the given maximum reporting latency.
android.hardware.SensorManager.registerListener,This function is similar to registerListener(android.hardware.SensorEventListener android.hardware.Sensor int) but it allows events to stay temporarily in the hardware FIFO (queue) before being delivered.
android.hardware.SensorManager.registerListener,The events can be stored in the hardware FIFO up to maxReportLatencyUs microseconds.
android.hardware.SensorManager.registerListener,Once one of the events in the FIFO needs to be reported all of the events in the FIFO are reported sequentially.
android.hardware.SensorManager.registerListener,This means that some events will be reported before the maximum reporting latency has elapsed.
android.hardware.SensorManager.registerListener,When maxReportLatencyUs is 0 the call is equivalent to a call to registerListener(android.hardware.SensorEventListener android.hardware.Sensor int) as it requires the events to be delivered as soon as possible.
android.hardware.SensorManager.registerListener,When sensor.maxFifoEventCount() is 0 the sensor does not use a FIFO so the call will also be equivalent to registerListener(android.hardware.SensorEventListener android.hardware.Sensor int).
android.hardware.SensorManager.registerListener,Setting maxReportLatencyUs to a positive value allows to reduce the number of interrupts the AP (Application Processor) receives hence reducing power consumption as the AP can switch to a lower power state while the sensor is capturing the data.
android.hardware.SensorManager.registerListener,This is especially important when registering to wake-up sensors for which each interrupt causes the AP to wake up if it was in suspend mode.
android.hardware.SensorManager.registerListener,See Sensor#isWakeUpSensor() for more information on wake-up sensors.
android.hardware.SensorManager.registerListener,Registers a SensorEventListener for the given sensor. Events are delivered in continuous mode as soon as they are available. To reduce the power consumption applications can use registerListener(android.hardware.SensorEventListener android.hardware.Sensor int int) instead and specify a positive non-zero maximum reporting latency.
android.hardware.SensorManager.registerListener,Register listener.
android.hardware.SensorManager.registerListener,Registers a SensorEventListener for the given sensor.
android.hardware.SensorManager.registerListener,Events are delivered in continuous mode as soon as they are available.
android.hardware.SensorManager.registerListener,To reduce the power consumption applications can use registerListener(android.hardware.SensorEventListener android.hardware.Sensor int int) instead and specify a positive non-zero maximum reporting latency.
android.hardware.SensorManager.registerListener,This method was deprecated in API level 15. This method is deprecated use SensorManager#registerListener(SensorEventListener Sensor int) instead. Registers a listener for given sensors.
android.hardware.SensorManager.registerListener,Register listener.
android.hardware.SensorManager.registerListener,This method was deprecated in API level 15.
android.hardware.SensorManager.registerListener,This method is deprecated use SensorManager#registerListener(SensorEventListener Sensor int) instead.
android.hardware.SensorManager.registerListener,Registers a listener for given sensors.
android.hardware.SensorManager.registerListener,This method was deprecated in API level 15. This method is deprecated use SensorManager#registerListener(SensorEventListener Sensor int) instead. Registers a SensorListener for given sensors.
android.hardware.SensorManager.registerListener,Register listener.
android.hardware.SensorManager.registerListener,This method was deprecated in API level 15.
android.hardware.SensorManager.registerListener,This method is deprecated use SensorManager#registerListener(SensorEventListener Sensor int) instead.
android.hardware.SensorManager.registerListener,Registers a SensorListener for given sensors.
android.hardware.SensorManager.registerListener,Registers a SensorEventListener for the given sensor at the given sampling frequency and the given maximum reporting latency.
android.hardware.SensorManager.registerListener,Register listener.
android.hardware.SensorManager.unregisterListener,Unregisters a listener for all sensors.
android.hardware.SensorManager.unregisterListener,Unregister listener.
android.hardware.SensorManager.unregisterListener,Unregisters a listener for the sensors with which it is registered.
android.hardware.SensorManager.unregisterListener,Unregister listener.
android.hardware.SensorManager.unregisterListener,This method was deprecated in API level 15. This method is deprecated use SensorManager#unregisterListener(SensorEventListener) instead. Unregisters a listener for all sensors.
android.hardware.SensorManager.unregisterListener,Unregister listener.
android.hardware.SensorManager.unregisterListener,This method was deprecated in API level 15.
android.hardware.SensorManager.unregisterListener,This method is deprecated use SensorManager#unregisterListener(SensorEventListener) instead.
android.hardware.SensorManager.unregisterListener,Unregisters a listener for all sensors.
android.hardware.SensorManager.unregisterListener,This method was deprecated in API level 15. This method is deprecated use SensorManager#unregisterListener(SensorEventListener Sensor) instead. Unregisters a listener for the sensors with which it is registered.
android.hardware.SensorManager.unregisterListener,Unregister listener.
android.hardware.SensorManager.unregisterListener,This method was deprecated in API level 15.
android.hardware.SensorManager.unregisterListener,This method is deprecated use SensorManager#unregisterListener(SensorEventListener Sensor) instead.
android.hardware.SensorManager.unregisterListener,Unregisters a listener for the sensors with which it is registered.
android.hardware.input.InputManager.getInputDevice,Gets information about the input device with the specified id.
android.hardware.input.InputManager.getInputDevice,Get input device.
android.hardware.input.InputManager.getInputDeviceIds,Gets the ids of all input devices in the system.
android.hardware.input.InputManager.getInputDeviceIds,Get input device ids.
android.hardware.display.DisplayManager.getDisplay,Gets information about a logical display. The display metrics may be adjusted to provide compatibility for legacy applications.
android.hardware.display.DisplayManager.getDisplay,Get display.
android.hardware.display.DisplayManager.getDisplay,Gets information about a logical display.
android.hardware.display.DisplayManager.getDisplay,The display metrics may be adjusted to provide compatibility for legacy applications.
android.hardware.display.DisplayManager.getDisplays,Gets all currently valid logical displays.
android.hardware.display.DisplayManager.getDisplays,Get displays.
android.hardware.display.DisplayManager.getDisplays,Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose.
android.hardware.display.DisplayManager.getDisplays,Get displays.
android.hardware.display.DisplayManager.getDisplays,Gets all currently valid logical displays of the specified category.
android.hardware.display.DisplayManager.getDisplays,When there are multiple displays in a category the returned displays are sorted of preference.
android.hardware.display.DisplayManager.getDisplays,For example if the requested category is DISPLAY_CATEGORY_PRESENTATION and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display.
android.hardware.display.DisplayManager.getDisplays,The application may simply use the first display or allow the user to choose.
android.app.ActionBar.getHeight,Retrieve the current height of the ActionBar.
android.app.ActionBar.getHeight,Get height.
android.app.ActionBar.getSubtitle,Returns the current ActionBar subtitle in standard mode. Returns null if getNavigationMode() would not return NAVIGATION_MODE_STANDARD.
android.app.ActionBar.getSubtitle,Get subtitle.
android.app.ActionBar.getSubtitle,Returns the current ActionBar subtitle in standard mode.
android.app.ActionBar.getSubtitle,Returns null if getNavigationMode() would not return NAVIGATION_MODE_STANDARD.
android.app.ActionBar.getThemedContext,Returns a Context with an appropriate theme for creating views that will appear in the action bar. If you are inflating or instantiating custom views that will appear in an action bar you should use the Context returned by this method. (This includes adapters used for list navigation mode.) This will ensure that views contrast properly against the action bar.
android.app.ActionBar.getThemedContext,Get themed context.
android.app.ActionBar.getThemedContext,Returns a Context with an appropriate theme for creating views that will appear in the action bar.
android.app.ActionBar.getThemedContext,If you are inflating or instantiating custom views that will appear in an action bar you should use the Context returned by this method.
android.app.ActionBar.getThemedContext,(This includes adapters used for list navigation mode.) This will ensure that views contrast properly against the action bar.
android.app.ActionBar.getTitle,Returns the current ActionBar title in standard mode. Returns null if getNavigationMode() would not return NAVIGATION_MODE_STANDARD.
android.app.ActionBar.getTitle,Get title.
android.app.ActionBar.getTitle,Returns the current ActionBar title in standard mode.
android.app.ActionBar.getTitle,Returns null if getNavigationMode() would not return NAVIGATION_MODE_STANDARD.
android.app.ActionBar.hide,Hide the ActionBar if it is currently showing. If the window hosting the ActionBar does not have the feature Window#FEATURE_ACTION_BAR_OVERLAY it will resize application content to fit the new space available. Instead of calling this function directly you can also cause an ActionBar using the overlay feature to hide through View#SYSTEM_UI_FLAG_FULLSCREEN. Hiding the ActionBar through this system UI flag allows you to more seamlessly hide it in conjunction with other screen decorations.
android.app.ActionBar.hide,Hide.
android.app.ActionBar.hide,Hide the ActionBar if it is currently showing.
android.app.ActionBar.hide,If the window hosting the ActionBar does not have the feature Window#FEATURE_ACTION_BAR_OVERLAY it will resize application content to fit the new space available.
android.app.ActionBar.hide,Instead of calling this function directly you can also cause an ActionBar using the overlay feature to hide through View#SYSTEM_UI_FLAG_FULLSCREEN.
android.app.ActionBar.hide,Hiding the ActionBar through this system UI flag allows you to more seamlessly hide it in conjunction with other screen decorations.
android.app.ActionBar.setBackgroundDrawable,Set the ActionBar's background. This will be used for the primary action bar.
android.app.ActionBar.setBackgroundDrawable,Set background drawable.
android.app.ActionBar.setBackgroundDrawable,Set the ActionBar's background.
android.app.ActionBar.setBackgroundDrawable,This will be used for the primary action bar.
android.app.ActionBar.setCustomView,Set the action bar into custom navigation mode supplying a view for custom navigation. Custom navigation views appear between the application icon and any action buttons and may use any space available there. Common use cases for custom navigation views might include an auto-suggesting address bar for a browser or other navigation mechanisms that do not translate well to provided navigation modes. The display option DISPLAY_SHOW_CUSTOM must be set for the custom view to be displayed.
android.app.ActionBar.setCustomView,Set custom view.
android.app.ActionBar.setCustomView,Set the action bar into custom navigation mode supplying a view for custom navigation.
android.app.ActionBar.setCustomView,Custom navigation views appear between the application icon and any action buttons and may use any space available there.
android.app.ActionBar.setCustomView,Common use cases for custom navigation views might include an auto-suggesting address bar for a browser or other navigation mechanisms that do not translate well to provided navigation modes.
android.app.ActionBar.setCustomView,The display option DISPLAY_SHOW_CUSTOM must be set for the custom view to be displayed.
android.app.ActionBar.setCustomView,Set the action bar into custom navigation mode supplying a view for custom navigation. Custom navigation views appear between the application icon and any action buttons and may use any space available there. Common use cases for custom navigation views might include an auto-suggesting address bar for a browser or other navigation mechanisms that do not translate well to provided navigation modes.
android.app.ActionBar.setCustomView,Set custom view.
android.app.ActionBar.setCustomView,Set the action bar into custom navigation mode supplying a view for custom navigation.
android.app.ActionBar.setCustomView,Custom navigation views appear between the application icon and any action buttons and may use any space available there.
android.app.ActionBar.setCustomView,Common use cases for custom navigation views might include an auto-suggesting address bar for a browser or other navigation mechanisms that do not translate well to provided navigation modes.
android.app.ActionBar.setCustomView,Set the action bar into custom navigation mode supplying a view for custom navigation. Custom navigation views appear between the application icon and any action buttons and may use any space available there. Common use cases for custom navigation views might include an auto-suggesting address bar for a browser or other navigation mechanisms that do not translate well to provided navigation modes. The display option DISPLAY_SHOW_CUSTOM must be set for the custom view to be displayed.
android.app.ActionBar.setCustomView,Set custom view.
android.app.ActionBar.setCustomView,Set the action bar into custom navigation mode supplying a view for custom navigation.
android.app.ActionBar.setCustomView,Custom navigation views appear between the application icon and any action buttons and may use any space available there.
android.app.ActionBar.setCustomView,Common use cases for custom navigation views might include an auto-suggesting address bar for a browser or other navigation mechanisms that do not translate well to provided navigation modes.
android.app.ActionBar.setCustomView,The display option DISPLAY_SHOW_CUSTOM must be set for the custom view to be displayed.
android.app.ActionBar.setDisplayHomeAsUpEnabled,"Set whether home should be displayed as an ""up"" affordance. Set this to true if selecting ""home"" returns up by a single level in your UI rather than back to the top level or front page. To set several display options at once see the setDisplayOptions methods."
android.app.ActionBar.setDisplayHomeAsUpEnabled,Set display home as up enabled.
android.app.ActionBar.setDisplayHomeAsUpEnabled,"Set whether home should be displayed as an ""up"" affordance."
android.app.ActionBar.setDisplayHomeAsUpEnabled,"Set this to true if selecting ""home"" returns up by a single level in your UI rather than back to the top level or front page."
android.app.ActionBar.setDisplayHomeAsUpEnabled,To set several display options at once see the setDisplayOptions methods.
android.app.ActionBar.setDisplayOptions,Set selected display options. Only the options specified by mask will be changed. To change all display option bits at once see setDisplayOptions(int). Example: setDisplayOptions(0 DISPLAY_SHOW_HOME) will disable the DISPLAY_SHOW_HOME option. setDisplayOptions(DISPLAY_SHOW_HOME DISPLAY_SHOW_HOME | DISPLAY_USE_LOGO) will enable DISPLAY_SHOW_HOME and disable DISPLAY_USE_LOGO.
android.app.ActionBar.setDisplayOptions,Set display options.
android.app.ActionBar.setDisplayOptions,Set selected display options.
android.app.ActionBar.setDisplayOptions,Only the options specified by mask will be changed.
android.app.ActionBar.setDisplayOptions,To change all display option bits at once see setDisplayOptions(int).
android.app.ActionBar.setDisplayOptions,Example: setDisplayOptions(0 DISPLAY_SHOW_HOME) will disable the DISPLAY_SHOW_HOME option.
android.app.ActionBar.setDisplayOptions,setDisplayOptions(DISPLAY_SHOW_HOME DISPLAY_SHOW_HOME | DISPLAY_USE_LOGO) will enable DISPLAY_SHOW_HOME and disable DISPLAY_USE_LOGO.
android.app.ActionBar.setDisplayOptions,Set display options. This changes all display option bits at once. To change a limited subset of display options see setDisplayOptions(int int).
android.app.ActionBar.setDisplayOptions,Set display options.
android.app.ActionBar.setDisplayOptions,Set display options.
android.app.ActionBar.setDisplayOptions,This changes all display option bits at once.
android.app.ActionBar.setDisplayOptions,To change a limited subset of display options see setDisplayOptions(int int).
android.app.ActionBar.setDisplayShowCustomEnabled,Set whether a custom view should be displayed if set. To set several display options at once see the setDisplayOptions methods.
android.app.ActionBar.setDisplayShowCustomEnabled,Set display show custom enabled.
android.app.ActionBar.setDisplayShowCustomEnabled,Set whether a custom view should be displayed if set.
android.app.ActionBar.setDisplayShowCustomEnabled,To set several display options at once see the setDisplayOptions methods.
android.app.ActionBar.setDisplayShowHomeEnabled,Set whether to include the application home affordance in the action bar. Home is presented as either an activity icon or logo. To set several display options at once see the setDisplayOptions methods.
android.app.ActionBar.setDisplayShowHomeEnabled,Set display show home enabled.
android.app.ActionBar.setDisplayShowHomeEnabled,Set whether to include the application home affordance in the action bar.
android.app.ActionBar.setDisplayShowHomeEnabled,Home is presented as either an activity icon or logo.
android.app.ActionBar.setDisplayShowHomeEnabled,To set several display options at once see the setDisplayOptions methods.
android.app.ActionBar.setDisplayShowTitleEnabled,Set whether an activity title/subtitle should be displayed. To set several display options at once see the setDisplayOptions methods.
android.app.ActionBar.setDisplayShowTitleEnabled,Set display show title enabled.
android.app.ActionBar.setDisplayShowTitleEnabled,Set whether an activity title/subtitle should be displayed.
android.app.ActionBar.setDisplayShowTitleEnabled,To set several display options at once see the setDisplayOptions methods.
android.app.ActionBar.setDisplayUseLogoEnabled,Set whether to display the activity logo rather than the activity icon. A logo is often a wider more detailed image. To set several display options at once see the setDisplayOptions methods.
android.app.ActionBar.setDisplayUseLogoEnabled,Set display use logo enabled.
android.app.ActionBar.setDisplayUseLogoEnabled,Set whether to display the activity logo rather than the activity icon.
android.app.ActionBar.setDisplayUseLogoEnabled,A logo is often a wider more detailed image.
android.app.ActionBar.setDisplayUseLogoEnabled,To set several display options at once see the setDisplayOptions methods.
android.app.ActionBar.setHomeActionContentDescription,"Set an alternate description for the Home/Up action when enabled. This description is commonly used for accessibility/screen readers when the Home action is enabled. (See setDisplayHomeAsUpEnabled(boolean) .) Examples of this are ""Navigate Home"" or ""Navigate Up"" depending on the DISPLAY_HOME_AS_UP display option. If you have changed the home-as-up indicator using setHomeAsUpIndicator(int) to indicate more specific functionality such as a sliding drawer you should also set this to accurately describe the action. Setting this to null will use the system default description."
android.app.ActionBar.setHomeActionContentDescription,Set home action content description.
android.app.ActionBar.setHomeActionContentDescription,Set an alternate description for the Home/Up action when enabled.
android.app.ActionBar.setHomeActionContentDescription,This description is commonly used for accessibility/screen readers when the Home action is enabled.
android.app.ActionBar.setHomeActionContentDescription,"(See setDisplayHomeAsUpEnabled(boolean) .) Examples of this are ""Navigate Home"" or ""Navigate Up"" depending on the DISPLAY_HOME_AS_UP display option."
android.app.ActionBar.setHomeActionContentDescription,If you have changed the home-as-up indicator using setHomeAsUpIndicator(int) to indicate more specific functionality such as a sliding drawer you should also set this to accurately describe the action.
android.app.ActionBar.setHomeActionContentDescription,Setting this to null will use the system default description.
android.app.ActionBar.setHomeActionContentDescription,"Set an alternate description for the Home/Up action when enabled. This description is commonly used for accessibility/screen readers when the Home action is enabled. (See setDisplayHomeAsUpEnabled(boolean) .) Examples of this are ""Navigate Home"" or ""Navigate Up"" depending on the DISPLAY_HOME_AS_UP display option. If you have changed the home-as-up indicator using setHomeAsUpIndicator(int) to indicate more specific functionality such as a sliding drawer you should also set this to accurately describe the action. Setting this to 0 will use the system default description."
android.app.ActionBar.setHomeActionContentDescription,Set home action content description.
android.app.ActionBar.setHomeActionContentDescription,Set an alternate description for the Home/Up action when enabled.
android.app.ActionBar.setHomeActionContentDescription,This description is commonly used for accessibility/screen readers when the Home action is enabled.
android.app.ActionBar.setHomeActionContentDescription,"(See setDisplayHomeAsUpEnabled(boolean) .) Examples of this are ""Navigate Home"" or ""Navigate Up"" depending on the DISPLAY_HOME_AS_UP display option."
android.app.ActionBar.setHomeActionContentDescription,If you have changed the home-as-up indicator using setHomeAsUpIndicator(int) to indicate more specific functionality such as a sliding drawer you should also set this to accurately describe the action.
android.app.ActionBar.setHomeActionContentDescription,Setting this to 0 will use the system default description.
android.app.ActionBar.setHomeAsUpIndicator,Set an alternate drawable to display next to the icon/logo/title when DISPLAY_HOME_AS_UP is enabled. This can be useful if you are using this mode to display an alternate selection for up navigation such as a sliding drawer. If you pass 0 to this method the default drawable from the theme will be used. If you implement alternate or intermediate behavior around Up you should also call setHomeActionContentDescription() to provide a correct description of the action for accessibility support.
android.app.ActionBar.setHomeAsUpIndicator,Set home as up indicator.
android.app.ActionBar.setHomeAsUpIndicator,Set an alternate drawable to display next to the icon/logo/title when DISPLAY_HOME_AS_UP is enabled.
android.app.ActionBar.setHomeAsUpIndicator,This can be useful if you are using this mode to display an alternate selection for up navigation such as a sliding drawer.
android.app.ActionBar.setHomeAsUpIndicator,If you pass 0 to this method the default drawable from the theme will be used.
android.app.ActionBar.setHomeAsUpIndicator,If you implement alternate or intermediate behavior around Up you should also call setHomeActionContentDescription() to provide a correct description of the action for accessibility support.
android.app.ActionBar.setHomeAsUpIndicator,Set an alternate drawable to display next to the icon/logo/title when DISPLAY_HOME_AS_UP is enabled. This can be useful if you are using this mode to display an alternate selection for up navigation such as a sliding drawer. If you pass null to this method the default drawable from the theme will be used. If you implement alternate or intermediate behavior around Up you should also call setHomeActionContentDescription() to provide a correct description of the action for accessibility support.
android.app.ActionBar.setHomeAsUpIndicator,Set home as up indicator.
android.app.ActionBar.setHomeAsUpIndicator,Set an alternate drawable to display next to the icon/logo/title when DISPLAY_HOME_AS_UP is enabled.
android.app.ActionBar.setHomeAsUpIndicator,This can be useful if you are using this mode to display an alternate selection for up navigation such as a sliding drawer.
android.app.ActionBar.setHomeAsUpIndicator,If you pass null to this method the default drawable from the theme will be used.
android.app.ActionBar.setHomeAsUpIndicator,If you implement alternate or intermediate behavior around Up you should also call setHomeActionContentDescription() to provide a correct description of the action for accessibility support.
android.app.ActionBar.setHomeButtonEnabled,"Enable or disable the ""home"" button in the corner of the action bar. (Note that this is the application home/up affordance on the action bar not the systemwide home button.) This defaults to true for packages targeting < API 14. For packages targeting API 14 or greater the application should call this method to enable interaction with the home/up affordance. Setting the DISPLAY_HOME_AS_UP display option will automatically enable the home button."
android.app.ActionBar.setHomeButtonEnabled,Set home button enabled.
android.app.ActionBar.setHomeButtonEnabled,"Enable or disable the ""home"" button in the corner of the action bar."
android.app.ActionBar.setHomeButtonEnabled,(Note that this is the application home/up affordance on the action bar not the systemwide home button.) This defaults to true for packages targeting < API 14.
android.app.ActionBar.setHomeButtonEnabled,For packages targeting API 14 or greater the application should call this method to enable interaction with the home/up affordance.
android.app.ActionBar.setHomeButtonEnabled,Setting the DISPLAY_HOME_AS_UP display option will automatically enable the home button.
android.app.ActionBar.setIcon,Set the icon to display in the 'home' section of the action bar. The action bar will use an icon specified by its style or the activity icon by default. Whether the home section shows an icon or logo is controlled by the display option DISPLAY_USE_LOGO.
android.app.ActionBar.setIcon,Set icon.
android.app.ActionBar.setIcon,Set the icon to display in the 'home' section of the action bar.
android.app.ActionBar.setIcon,The action bar will use an icon specified by its style or the activity icon by default.
android.app.ActionBar.setIcon,Whether the home section shows an icon or logo is controlled by the display option DISPLAY_USE_LOGO.
android.app.ActionBar.setIcon,Set the icon to display in the 'home' section of the action bar. The action bar will use an icon specified by its style or the activity icon by default. Whether the home section shows an icon or logo is controlled by the display option DISPLAY_USE_LOGO.
android.app.ActionBar.setIcon,Set icon.
android.app.ActionBar.setIcon,Set the icon to display in the 'home' section of the action bar.
android.app.ActionBar.setIcon,The action bar will use an icon specified by its style or the activity icon by default.
android.app.ActionBar.setIcon,Whether the home section shows an icon or logo is controlled by the display option DISPLAY_USE_LOGO.
android.app.ActionBar.setLogo,Set the logo to display in the 'home' section of the action bar. The action bar will use a logo specified by its style or the activity logo by default. Whether the home section shows an icon or logo is controlled by the display option DISPLAY_USE_LOGO.
android.app.ActionBar.setLogo,Set logo.
android.app.ActionBar.setLogo,Set the logo to display in the 'home' section of the action bar.
android.app.ActionBar.setLogo,The action bar will use a logo specified by its style or the activity logo by default.
android.app.ActionBar.setLogo,Whether the home section shows an icon or logo is controlled by the display option DISPLAY_USE_LOGO.
android.app.ActionBar.setLogo,Set the logo to display in the 'home' section of the action bar. The action bar will use a logo specified by its style or the activity logo by default. Whether the home section shows an icon or logo is controlled by the display option DISPLAY_USE_LOGO.
android.app.ActionBar.setLogo,Set logo.
android.app.ActionBar.setLogo,Set the logo to display in the 'home' section of the action bar.
android.app.ActionBar.setLogo,The action bar will use a logo specified by its style or the activity logo by default.
android.app.ActionBar.setLogo,Whether the home section shows an icon or logo is controlled by the display option DISPLAY_USE_LOGO.
android.app.ActionBar.setSelectedNavigationItem,This method was deprecated in API level 21. Action bar navigation modes are deprecated and not supported by inline toolbar action bars. Consider using other common navigation patterns instead. Set the selected navigation item in list or tabbed navigation modes.
android.app.ActionBar.setSelectedNavigationItem,Set selected navigation item.
android.app.ActionBar.setSelectedNavigationItem,This method was deprecated in API level 21.
android.app.ActionBar.setSelectedNavigationItem,Action bar navigation modes are deprecated and not supported by inline toolbar action bars.
android.app.ActionBar.setSelectedNavigationItem,Consider using other common navigation patterns instead.
android.app.ActionBar.setSelectedNavigationItem,Set the selected navigation item in list or tabbed navigation modes.
android.app.ActionBar.setSplitBackgroundDrawable,Set the ActionBar's split background. This will appear in the split action bar containing menu-provided action buttons on some devices and configurations. You can enable split action bar with R.attr.uiOptions.
android.app.ActionBar.setSplitBackgroundDrawable,Set split background drawable.
android.app.ActionBar.setSplitBackgroundDrawable,Set the ActionBar's split background.
android.app.ActionBar.setSplitBackgroundDrawable,This will appear in the split action bar containing menu-provided action buttons on some devices and configurations.
android.app.ActionBar.setSplitBackgroundDrawable,You can enable split action bar with R.attr.uiOptions.
android.app.ActionBar.setStackedBackgroundDrawable,Set the ActionBar's stacked background. This will appear in the second row/stacked bar on some devices and configurations.
android.app.ActionBar.setStackedBackgroundDrawable,Set stacked background drawable.
android.app.ActionBar.setStackedBackgroundDrawable,Set the ActionBar's stacked background.
android.app.ActionBar.setStackedBackgroundDrawable,This will appear in the second row/stacked bar on some devices and configurations.
android.app.ActionBar.setSubtitle,Set the action bar's subtitle. This will only be displayed if DISPLAY_SHOW_TITLE is set. Set to null to disable the subtitle entirely.
android.app.ActionBar.setSubtitle,Set subtitle.
android.app.ActionBar.setSubtitle,Set the action bar's subtitle.
android.app.ActionBar.setSubtitle,This will only be displayed if DISPLAY_SHOW_TITLE is set.
android.app.ActionBar.setSubtitle,Set to null to disable the subtitle entirely.
android.app.ActionBar.setSubtitle,Set the action bar's subtitle. This will only be displayed if DISPLAY_SHOW_TITLE is set.
android.app.ActionBar.setSubtitle,Set subtitle.
android.app.ActionBar.setSubtitle,Set the action bar's subtitle.
android.app.ActionBar.setSubtitle,This will only be displayed if DISPLAY_SHOW_TITLE is set.
android.app.ActionBar.setTitle,Set the action bar's title. This will only be displayed if DISPLAY_SHOW_TITLE is set.
android.app.ActionBar.setTitle,Set title.
android.app.ActionBar.setTitle,Set the action bar's title.
android.app.ActionBar.setTitle,This will only be displayed if DISPLAY_SHOW_TITLE is set.
android.app.ActionBar.setTitle,Set the action bar's title. This will only be displayed if DISPLAY_SHOW_TITLE is set.
android.app.ActionBar.setTitle,Set title.
android.app.ActionBar.setTitle,Set the action bar's title.
android.app.ActionBar.setTitle,This will only be displayed if DISPLAY_SHOW_TITLE is set.
android.app.ActionBar.show,Show the ActionBar if it is not currently showing. If the window hosting the ActionBar does not have the feature Window#FEATURE_ACTION_BAR_OVERLAY it will resize application content to fit the new space available. If you are hiding the ActionBar through View#SYSTEM_UI_FLAG_FULLSCREEN you should not call this function directly.
android.app.ActionBar.show,Show.
android.app.ActionBar.show,Show the ActionBar if it is not currently showing.
android.app.ActionBar.show,If the window hosting the ActionBar does not have the feature Window#FEATURE_ACTION_BAR_OVERLAY it will resize application content to fit the new space available.
android.app.ActionBar.show,If you are hiding the ActionBar through View#SYSTEM_UI_FLAG_FULLSCREEN you should not call this function directly.
android.app.Activity.closeContextMenu,Programmatically closes the most recently opened context menu if showing.
android.app.Activity.closeContextMenu,Close context menu.
android.app.Activity.closeOptionsMenu,Progammatically closes the options menu. If the options menu is already closed this method does nothing.
android.app.Activity.closeOptionsMenu,Close options menu.
android.app.Activity.closeOptionsMenu,Progammatically closes the options menu.
android.app.Activity.closeOptionsMenu,If the options menu is already closed this method does nothing.
android.app.Activity.createPendingResult,Create a new PendingIntent object which you can hand to others for them to use to send result data back to your onActivityResult(int int Intent) callback. The created object will be either one-shot (becoming invalid after a result is sent back) or multiple (allowing any number of results to be sent through it).
android.app.Activity.createPendingResult,Create pending result.
android.app.Activity.createPendingResult,Create a new PendingIntent object which you can hand to others for them to use to send result data back to your onActivityResult(int int Intent) callback.
android.app.Activity.createPendingResult,The created object will be either one-shot (becoming invalid after a result is sent back) or multiple (allowing any number of results to be sent through it).
android.app.Activity.dispatchGenericMotionEvent,Called to process generic motion events. You can override this to intercept all generic motion events before they are dispatched to the window. Be sure to call this implementation for generic motion events that should be handled normally.
android.app.Activity.dispatchGenericMotionEvent,Dispatch generic motion event.
android.app.Activity.dispatchGenericMotionEvent,Called to process generic motion events.
android.app.Activity.dispatchGenericMotionEvent,You can override this to intercept all generic motion events before they are dispatched to the window.
android.app.Activity.dispatchGenericMotionEvent,Be sure to call this implementation for generic motion events that should be handled normally.
android.app.Activity.dispatchKeyEvent,Called to process key events. You can override this to intercept all key events before they are dispatched to the window. Be sure to call this implementation for key events that should be handled normally.
android.app.Activity.dispatchKeyEvent,Dispatch key event.
android.app.Activity.dispatchKeyEvent,Called to process key events.
android.app.Activity.dispatchKeyEvent,You can override this to intercept all key events before they are dispatched to the window.
android.app.Activity.dispatchKeyEvent,Be sure to call this implementation for key events that should be handled normally.
android.app.Activity.dispatchKeyShortcutEvent,Called to process a key shortcut event. You can override this to intercept all key shortcut events before they are dispatched to the window. Be sure to call this implementation for key shortcut events that should be handled normally.
android.app.Activity.dispatchKeyShortcutEvent,Dispatch key shortcut event.
android.app.Activity.dispatchKeyShortcutEvent,Called to process a key shortcut event.
android.app.Activity.dispatchKeyShortcutEvent,You can override this to intercept all key shortcut events before they are dispatched to the window.
android.app.Activity.dispatchKeyShortcutEvent,Be sure to call this implementation for key shortcut events that should be handled normally.
android.app.Activity.dispatchPopulateAccessibilityEvent,Called to process population of AccessibilityEvent s.
android.app.Activity.dispatchPopulateAccessibilityEvent,Dispatch populate accessibility event.
android.app.Activity.dispatchTouchEvent,Called to process touch screen events. You can override this to intercept all touch screen events before they are dispatched to the window. Be sure to call this implementation for touch screen events that should be handled normally.
android.app.Activity.dispatchTouchEvent,Dispatch touch event.
android.app.Activity.dispatchTouchEvent,Called to process touch screen events.
android.app.Activity.dispatchTouchEvent,You can override this to intercept all touch screen events before they are dispatched to the window.
android.app.Activity.dispatchTouchEvent,Be sure to call this implementation for touch screen events that should be handled normally.
android.app.Activity.dispatchTrackballEvent,Called to process trackball events. You can override this to intercept all trackball events before they are dispatched to the window. Be sure to call this implementation for trackball events that should be handled normally.
android.app.Activity.dispatchTrackballEvent,Dispatch trackball event.
android.app.Activity.dispatchTrackballEvent,Called to process trackball events.
android.app.Activity.dispatchTrackballEvent,You can override this to intercept all trackball events before they are dispatched to the window.
android.app.Activity.dispatchTrackballEvent,Be sure to call this implementation for trackball events that should be handled normally.
android.app.Activity.dump,"Print the Activity's state into the given stream. This gets invoked if you run ""adb shell dumpsys activity <activity_component_name>""."
android.app.Activity.dump,Dump.
android.app.Activity.dump,Print the Activity's state into the given stream.
android.app.Activity.dump,"This gets invoked if you run ""adb shell dumpsys activity <activity_component_name>""."
android.app.Activity.findViewById,Finds a view that was identified by the android:id XML attribute that was processed in onCreate(Bundle). Note: In most cases -- depending on compiler support -- the resulting view is automatically cast to the target class type. If the target class type is unconstrained an explicit cast may be necessary.
android.app.Activity.findViewById,Find view by id.
android.app.Activity.findViewById,Finds a view that was identified by the android:id XML attribute that was processed in onCreate(Bundle).
android.app.Activity.findViewById,Note: In most cases -- depending on compiler support -- the resulting view is automatically cast to the target class type.
android.app.Activity.findViewById,If the target class type is unconstrained an explicit cast may be necessary.
android.app.Activity.finish,Call this when your activity is done and should be closed. The ActivityResult is propagated back to whoever launched you via onActivityResult().
android.app.Activity.finish,Finish.
android.app.Activity.finish,Call this when your activity is done and should be closed.
android.app.Activity.finish,The ActivityResult is propagated back to whoever launched you via onActivityResult().
android.app.Activity.finishActivity,Force finish another activity that you had previously started with startActivityForResult(Intent int).
android.app.Activity.finishActivity,Finish activity.
android.app.Activity.finishActivityFromChild,This is called when a child activity of this one calls its finishActivity().
android.app.Activity.finishActivityFromChild,Finish activity from child.
android.app.Activity.finishAffinity,Finish this activity as well as all activities immediately below it in the current task that have the same affinity. This is typically used when an application can be launched on to another task (such as from an ACTION_VIEW of a content type it understands) and the user has used the up navigation to switch out of the current task and in to its own task. In this case if the user has navigated down into any other activities of the second application all of those should be removed from the original task as part of the task switch. Note that this finish does not allow you to deliver results to the previous activity and an exception will be thrown if you are trying to do so.
android.app.Activity.finishAffinity,Finish affinity.
android.app.Activity.finishAffinity,Finish this activity as well as all activities immediately below it in the current task that have the same affinity.
android.app.Activity.finishAffinity,This is typically used when an application can be launched on to another task (such as from an ACTION_VIEW of a content type it understands) and the user has used the up navigation to switch out of the current task and in to its own task.
android.app.Activity.finishAffinity,In this case if the user has navigated down into any other activities of the second application all of those should be removed from the original task as part of the task switch.
android.app.Activity.finishAffinity,Note that this finish does not allow you to deliver results to the previous activity and an exception will be thrown if you are trying to do so.
android.app.Activity.finishAfterTransition,Reverses the Activity Scene entry Transition and triggers the calling Activity to reverse its exit Transition. When the exit Transition completes finish() is called. If no entry Transition was used finish() is called immediately and the Activity exit Transition is run.
android.app.Activity.finishAfterTransition,Finish after transition.
android.app.Activity.finishAfterTransition,Reverses the Activity Scene entry Transition and triggers the calling Activity to reverse its exit Transition.
android.app.Activity.finishAfterTransition,When the exit Transition completes finish() is called.
android.app.Activity.finishAfterTransition,If no entry Transition was used finish() is called immediately and the Activity exit Transition is run.
android.app.Activity.finishFromChild,This is called when a child activity of this one calls its finish() method. The default implementation simply calls finish() on this activity (the parent) finishing the entire group.
android.app.Activity.finishFromChild,Finish from child.
android.app.Activity.finishFromChild,This is called when a child activity of this one calls its finish() method.
android.app.Activity.finishFromChild,The default implementation simply calls finish() on this activity (the parent) finishing the entire group.
android.app.Activity.getActionBar,Retrieve a reference to this activity's ActionBar.
android.app.Activity.getActionBar,Get action bar.
android.app.Activity.getApplication,Return the application that owns this activity.
android.app.Activity.getApplication,Get application.
android.app.Activity.getCallingActivity,Return the name of the activity that invoked this activity. This is who the data in setResult() will be sent to. You can use this information to validate that the recipient is allowed to receive the data. Note: if the calling activity is not expecting a result (that is it did not use the startActivityForResult(Intent int) form that includes a request code) then the calling package will be null.
android.app.Activity.getCallingActivity,Get calling activity.
android.app.Activity.getCallingActivity,Return the name of the activity that invoked this activity.
android.app.Activity.getCallingActivity,This is who the data in setResult() will be sent to.
android.app.Activity.getCallingActivity,You can use this information to validate that the recipient is allowed to receive the data.
android.app.Activity.getCallingActivity,Note: if the calling activity is not expecting a result (that is it did not use the startActivityForResult(Intent int) form that includes a request code) then the calling package will be null.
android.app.Activity.getCallingPackage,Return the name of the package that invoked this activity. This is who the data in setResult() will be sent to. You can use this information to validate that the recipient is allowed to receive the data. Note: if the calling activity is not expecting a result (that is it did not use the startActivityForResult(Intent int) form that includes a request code) then the calling package will be null. Note: prior to Build.VERSION_CODES.JELLY_BEAN_MR2 the result from this method was unstable. If the process hosting the calling package was no longer running it would return null instead of the proper package name. You can use getCallingActivity() and retrieve the package name from that instead.
android.app.Activity.getCallingPackage,Get calling package.
android.app.Activity.getCallingPackage,Return the name of the package that invoked this activity.
android.app.Activity.getCallingPackage,This is who the data in setResult() will be sent to.
android.app.Activity.getCallingPackage,You can use this information to validate that the recipient is allowed to receive the data.
android.app.Activity.getCallingPackage,Note: if the calling activity is not expecting a result (that is it did not use the startActivityForResult(Intent int) form that includes a request code) then the calling package will be null.
android.app.Activity.getCallingPackage,Note: prior to Build.VERSION_CODES.JELLY_BEAN_MR2 the result from this method was unstable.
android.app.Activity.getCallingPackage,If the process hosting the calling package was no longer running it would return null instead of the proper package name.
android.app.Activity.getCallingPackage,You can use getCallingActivity() and retrieve the package name from that instead.
android.app.Activity.getChangingConfigurations,If this activity is being destroyed because it can not handle a configuration parameter being changed (and thus its onConfigurationChanged(android.content.res.Configuration) method is not being called) then you can use this method to discover the set of changes that have occurred while in the process of being destroyed. Note that there is no guarantee that these will be accurate (other changes could have happened at any time) so you should only use this as an optimization hint.
android.app.Activity.getChangingConfigurations,Get changing configurations.
android.app.Activity.getChangingConfigurations,If this activity is being destroyed because it can not handle a configuration parameter being changed (and thus its onConfigurationChanged(android.content.res.Configuration) method is not being called) then you can use this method to discover the set of changes that have occurred while in the process of being destroyed.
android.app.Activity.getChangingConfigurations,Note that there is no guarantee that these will be accurate (other changes could have happened at any time) so you should only use this as an optimization hint.
android.app.Activity.getComponentName,Returns the complete component name of this activity.
android.app.Activity.getComponentName,Get component name.
android.app.Activity.getCurrentFocus,Calls Window.getCurrentFocus() on the Window of this Activity to return the currently focused view.
android.app.Activity.getCurrentFocus,Get current focus.
android.app.Activity.getFragmentManager,This method was deprecated in API level 28. Use FragmentActivity.getSupportFragmentManager() Return the FragmentManager for interacting with fragments associated with this activity.
android.app.Activity.getFragmentManager,Get fragment manager.
android.app.Activity.getFragmentManager,This method was deprecated in API level 28.
android.app.Activity.getFragmentManager,Use FragmentActivity.getSupportFragmentManager() Return the FragmentManager for interacting with fragments associated with this activity.
android.app.Activity.getIntent,Return the intent that started this activity.
android.app.Activity.getIntent,Get intent.
android.app.Activity.getLastNonConfigurationInstance,Retrieve the non-configuration instance data that was previously returned by onRetainNonConfigurationInstance(). This will be available from the initial onCreate(Bundle) and onStart() calls to the new instance allowing you to extract any useful dynamic state from the previous instance. Note that the data you retrieve here should only be used as an optimization for handling configuration changes. You should always be able to handle getting a null pointer back and an activity must still be able to restore itself to its previous state (through the normal onSaveInstanceState(android.os.Bundle) mechanism) even if this function returns null. Note: For most cases you should use the Fragment API Fragment#setRetainInstance(boolean) instead; this is also available on older platforms through the Android support libraries.
android.app.Activity.getLastNonConfigurationInstance,Get last non configuration instance.
android.app.Activity.getLastNonConfigurationInstance,Retrieve the non-configuration instance data that was previously returned by onRetainNonConfigurationInstance().
android.app.Activity.getLastNonConfigurationInstance,This will be available from the initial onCreate(Bundle) and onStart() calls to the new instance allowing you to extract any useful dynamic state from the previous instance.
android.app.Activity.getLastNonConfigurationInstance,Note that the data you retrieve here should only be used as an optimization for handling configuration changes.
android.app.Activity.getLastNonConfigurationInstance,You should always be able to handle getting a null pointer back and an activity must still be able to restore itself to its previous state (through the normal onSaveInstanceState(android.os.Bundle) mechanism) even if this function returns null.
android.app.Activity.getLastNonConfigurationInstance,Note: For most cases you should use the Fragment API Fragment#setRetainInstance(boolean) instead; this is also available on older platforms through the Android support libraries.
android.app.Activity.getLayoutInflater,Convenience for calling Window.getLayoutInflater().
android.app.Activity.getLayoutInflater,Get layout inflater.
android.app.Activity.getLoaderManager,This method was deprecated in API level 28. Use FragmentActivity.getSupportLoaderManager() Return the LoaderManager for this activity creating it if needed.
android.app.Activity.getLoaderManager,Get loader manager.
android.app.Activity.getLoaderManager,This method was deprecated in API level 28.
android.app.Activity.getLoaderManager,Use FragmentActivity.getSupportLoaderManager() Return the LoaderManager for this activity creating it if needed.
android.app.Activity.getLocalClassName,Returns class name for this activity with the package prefix removed. This is the default name used to read and write settings.
android.app.Activity.getLocalClassName,Get local class name.
android.app.Activity.getLocalClassName,Returns class name for this activity with the package prefix removed.
android.app.Activity.getLocalClassName,This is the default name used to read and write settings.
android.app.Activity.getMenuInflater,Returns a MenuInflater with this context.
android.app.Activity.getMenuInflater,Get menu inflater.
android.app.Activity.getParent,Return the parent activity if this view is an embedded child.
android.app.Activity.getParent,Get parent.
android.app.Activity.getParentActivityIntent,Obtain an Intent that will launch an explicit target activity specified by this activity's logical parent. The logical parent is named in the application's manifest by the parentActivityName attribute. Activity subclasses may override this method to modify the Intent returned by super.getParentActivityIntent() or to implement a different mechanism of retrieving the parent intent entirely.
android.app.Activity.getParentActivityIntent,Get parent activity intent.
android.app.Activity.getParentActivityIntent,Obtain an Intent that will launch an explicit target activity specified by this activity's logical parent.
android.app.Activity.getParentActivityIntent,The logical parent is named in the application's manifest by the parentActivityName attribute.
android.app.Activity.getParentActivityIntent,Activity subclasses may override this method to modify the Intent returned by super.getParentActivityIntent() or to implement a different mechanism of retrieving the parent intent entirely.
android.app.Activity.getPreferences,Retrieve a SharedPreferences object for accessing preferences that are private to this activity. This simply calls the underlying ContextWrapper.getSharedPreferences(java.lang.String int) method by passing in this activity's class name as the preferences name.
android.app.Activity.getPreferences,Get preferences.
android.app.Activity.getPreferences,Retrieve a SharedPreferences object for accessing preferences that are private to this activity.
android.app.Activity.getPreferences,This simply calls the underlying ContextWrapper.getSharedPreferences(java.lang.String int) method by passing in this activity's class name as the preferences name.
android.app.Activity.getRequestedOrientation,Return the current requested orientation of the activity. This will either be the orientation requested in its component's manifest or the last requested orientation given to setRequestedOrientation(int).
android.app.Activity.getRequestedOrientation,Get requested orientation.
android.app.Activity.getRequestedOrientation,Return the current requested orientation of the activity.
android.app.Activity.getRequestedOrientation,This will either be the orientation requested in its component's manifest or the last requested orientation given to setRequestedOrientation(int).
android.app.Activity.getSystemService,Return the handle to a system-level service by name. The class of the returned object varies by the requested name. Currently available names are: Note: System services obtained via this API may be closely associated with the Context in which they are obtained from. In general do not share the service objects between various different contexts (Activities Applications Services Providers etc.) Note: Instant apps for which PackageManager#isInstantApp() returns true don't have access to the following system services: DEVICE_POLICY_SERVICE FINGERPRINT_SERVICE KEYGUARD_SERVICE SHORTCUT_SERVICE USB_SERVICE WALLPAPER_SERVICE WIFI_P2P_SERVICE WIFI_SERVICE WIFI_AWARE_SERVICE. For these services this method will return null. Generally if you are running as an instant app you should always check whether the result of this method is null. Note: When implementing this method keep in mind that new services can be added on newer Android releases so if you're looking for just the explicit names mentioned above make sure to return null when you don't recognize the name — if you throw a RuntimeException exception instead you're app might break on new Android releases.
android.app.Activity.getSystemService,Get system service.
android.app.Activity.getSystemService,Return the handle to a system-level service by name.
android.app.Activity.getSystemService,The class of the returned object varies by the requested name.
android.app.Activity.getSystemService,Currently available names are: Note: System services obtained via this API may be closely associated with the Context in which they are obtained from.
android.app.Activity.getSystemService,In general do not share the service objects between various different contexts (Activities Applications Services Providers etc.) Note: Instant apps for which PackageManager#isInstantApp() returns true don't have access to the following system services: DEVICE_POLICY_SERVICE FINGERPRINT_SERVICE KEYGUARD_SERVICE SHORTCUT_SERVICE USB_SERVICE WALLPAPER_SERVICE WIFI_P2P_SERVICE WIFI_SERVICE WIFI_AWARE_SERVICE.
android.app.Activity.getSystemService,For these services this method will return null.
android.app.Activity.getSystemService,Generally if you are running as an instant app you should always check whether the result of this method is null.
android.app.Activity.getSystemService,Note: When implementing this method keep in mind that new services can be added on newer Android releases so if you're looking for just the explicit names mentioned above make sure to return null when you don't recognize the name — if you throw a RuntimeException exception instead you're app might break on new Android releases.
android.app.Activity.getTaskId,Return the identifier of the task this activity is in. This identifier will remain the same for the lifetime of the activity.
android.app.Activity.getTaskId,Get task id.
android.app.Activity.getTaskId,Return the identifier of the task this activity is in.
android.app.Activity.getTaskId,This identifier will remain the same for the lifetime of the activity.
android.app.Activity.getVolumeControlStream,Gets the suggested audio stream whose volume should be changed by the hardware volume controls.
android.app.Activity.getVolumeControlStream,Get volume control stream.
android.app.Activity.getWindow,Retrieve the current Window for the activity. This can be used to directly access parts of the Window API that are not available through Activity/Screen.
android.app.Activity.getWindow,Get window.
android.app.Activity.getWindow,Retrieve the current Window for the activity.
android.app.Activity.getWindow,This can be used to directly access parts of the Window API that are not available through Activity/Screen.
android.app.Activity.getWindowManager,Retrieve the window manager for showing custom windows.
android.app.Activity.getWindowManager,Get window manager.
android.app.Activity.hasWindowFocus,Returns true if this activity's main window currently has window focus. Note that this is not the same as the view itself having focus.
android.app.Activity.hasWindowFocus,Has window focus.
android.app.Activity.hasWindowFocus,Returns true if this activity's main window currently has window focus.
android.app.Activity.hasWindowFocus,Note that this is not the same as the view itself having focus.
android.app.Activity.invalidateOptionsMenu,Declare that the options menu has changed so should be recreated. The onCreateOptionsMenu(android.view.Menu) method will be called the next time it needs to be displayed.
android.app.Activity.invalidateOptionsMenu,Invalidate options menu.
android.app.Activity.invalidateOptionsMenu,Declare that the options menu has changed so should be recreated.
android.app.Activity.invalidateOptionsMenu,The onCreateOptionsMenu(android.view.Menu) method will be called the next time it needs to be displayed.
android.app.Activity.isChangingConfigurations,Check to see whether this activity is in the process of being destroyed in order to be recreated with a new configuration. This is often used in onStop() to determine whether the state needs to be cleaned up or will be passed on to the next instance of the activity via onRetainNonConfigurationInstance().
android.app.Activity.isChangingConfigurations,Is changing configurations.
android.app.Activity.isChangingConfigurations,Check to see whether this activity is in the process of being destroyed in order to be recreated with a new configuration.
android.app.Activity.isChangingConfigurations,This is often used in onStop() to determine whether the state needs to be cleaned up or will be passed on to the next instance of the activity via onRetainNonConfigurationInstance().
android.app.Activity.isChild,Is this activity embedded inside of another activity?.
android.app.Activity.isChild,Is child.
android.app.Activity.isDestroyed,Returns true if the final onDestroy() call has been made on the Activity so this instance is now dead.
android.app.Activity.isDestroyed,Is destroyed.
android.app.Activity.isFinishing,Check to see whether this activity is in the process of finishing either because you called finish() on it or someone else has requested that it finished. This is often used in onPause() to determine whether the activity is simply pausing or completely finishing.
android.app.Activity.isFinishing,Is finishing.
android.app.Activity.isFinishing,Check to see whether this activity is in the process of finishing either because you called finish() on it or someone else has requested that it finished.
android.app.Activity.isFinishing,This is often used in onPause() to determine whether the activity is simply pausing or completely finishing.
android.app.Activity.isTaskRoot,Return whether this activity is the root of a task. The root is the first activity in a task.
android.app.Activity.isTaskRoot,Is task root.
android.app.Activity.isTaskRoot,Return whether this activity is the root of a task.
android.app.Activity.isTaskRoot,The root is the first activity in a task.
android.app.Activity.managedQuery,This method was deprecated in API level 15. Use CursorLoader instead. Wrapper around ContentResolver#query(android.net.Uri String[] String String[] String) that gives the resulting Cursor to call startManagingCursor(Cursor) so that the activity will manage its lifecycle for you. If you are targeting Build.VERSION_CODES.HONEYCOMB or later consider instead using LoaderManager instead available via getLoaderManager(). Warning: Do not call Cursor#close() on a cursor obtained using this method because the activity will do that for you at the appropriate time. However if you call stopManagingCursor(Cursor) on a cursor from a managed query the system will not automatically close the cursor and in that case you must call Cursor#close().
android.app.Activity.managedQuery,Managed query.
android.app.Activity.managedQuery,This method was deprecated in API level 15.
android.app.Activity.managedQuery,Use CursorLoader instead.
android.app.Activity.managedQuery,Wrapper around ContentResolver#query(android.net.Uri String[] String String[] String) that gives the resulting Cursor to call startManagingCursor(Cursor) so that the activity will manage its lifecycle for you.
android.app.Activity.managedQuery,If you are targeting Build.VERSION_CODES.HONEYCOMB or later consider instead using LoaderManager instead available via getLoaderManager().
android.app.Activity.managedQuery,Warning: Do not call Cursor#close() on a cursor obtained using this method because the activity will do that for you at the appropriate time.
android.app.Activity.managedQuery,However if you call stopManagingCursor(Cursor) on a cursor from a managed query the system will not automatically close the cursor and in that case you must call Cursor#close().
android.app.Activity.moveTaskToBack,Move the task containing this activity to the back of the activity stack. The activity's order within the task is unchanged.
android.app.Activity.moveTaskToBack,Move task to back.
android.app.Activity.moveTaskToBack,Move the task containing this activity to the back of the activity stack.
android.app.Activity.moveTaskToBack,The activity's order within the task is unchanged.
android.app.Activity.navigateUpTo,"Navigate from this activity to the activity specified by upIntent finishing this activity in the process. If the activity indicated by upIntent already exists in the task's history this activity and all others before the indicated activity in the history stack will be finished. If the indicated activity does not appear in the history stack this will finish each activity in this task until the root activity of the task is reached resulting in an ""in-app home"" behavior. This can be useful in apps with a complex navigation hierarchy when an activity may be reached by a path not passing through a canonical parent activity. This method should be used when performing up navigation from within the same task as the destination. If up navigation should cross tasks in some cases see shouldUpRecreateTask(android.content.Intent)."
android.app.Activity.navigateUpTo,Navigate up to.
android.app.Activity.navigateUpTo,Navigate from this activity to the activity specified by upIntent finishing this activity in the process.
android.app.Activity.navigateUpTo,If the activity indicated by upIntent already exists in the task's history this activity and all others before the indicated activity in the history stack will be finished.
android.app.Activity.navigateUpTo,"If the indicated activity does not appear in the history stack this will finish each activity in this task until the root activity of the task is reached resulting in an ""in-app home"" behavior."
android.app.Activity.navigateUpTo,This can be useful in apps with a complex navigation hierarchy when an activity may be reached by a path not passing through a canonical parent activity.
android.app.Activity.navigateUpTo,This method should be used when performing up navigation from within the same task as the destination.
android.app.Activity.navigateUpTo,If up navigation should cross tasks in some cases see shouldUpRecreateTask(android.content.Intent).
android.app.Activity.navigateUpToFromChild,This is called when a child activity of this one calls its navigateUpTo(Intent) method. The default implementation simply calls navigateUpTo(upIntent) on this activity (the parent).
android.app.Activity.navigateUpToFromChild,Navigate up to from child.
android.app.Activity.navigateUpToFromChild,This is called when a child activity of this one calls its navigateUpTo(Intent) method.
android.app.Activity.navigateUpToFromChild,The default implementation simply calls navigateUpTo(upIntent) on this activity (the parent).
android.app.Activity.onActionModeFinished,Notifies the activity that an action mode has finished. Activity subclasses overriding this method should call the superclass implementation. If you override this method you must call through to the superclass implementation.
android.app.Activity.onActionModeFinished,On action mode finished.
android.app.Activity.onActionModeFinished,Notifies the activity that an action mode has finished.
android.app.Activity.onActionModeFinished,Activity subclasses overriding this method should call the superclass implementation.
android.app.Activity.onActionModeFinished,If you override this method you must call through to the superclass implementation.
android.app.Activity.onActionModeStarted,Notifies the Activity that an action mode has been started. Activity subclasses overriding this method should call the superclass implementation. If you override this method you must call through to the superclass implementation.
android.app.Activity.onActionModeStarted,On action mode started.
android.app.Activity.onActionModeStarted,Notifies the Activity that an action mode has been started.
android.app.Activity.onActionModeStarted,Activity subclasses overriding this method should call the superclass implementation.
android.app.Activity.onActionModeStarted,If you override this method you must call through to the superclass implementation.
android.app.Activity.onAttachFragment,This method was deprecated in API level 28. Use FragmentActivity.onAttachFragment(android.support.v4.app.Fragment) Called when a Fragment is being attached to this activity immediately after the call to its Fragment#onAttach method and before Fragment#onCreate.
android.app.Activity.onAttachFragment,On attach fragment.
android.app.Activity.onAttachFragment,This method was deprecated in API level 28.
android.app.Activity.onAttachFragment,Use FragmentActivity.onAttachFragment(android.support.v4.app.Fragment) Called when a Fragment is being attached to this activity immediately after the call to its Fragment#onAttach method and before Fragment#onCreate.
android.app.Activity.onAttachedToWindow,Called when the main window associated with the activity has been attached to the window manager. See View#onAttachedToWindow() for more information.
android.app.Activity.onAttachedToWindow,On attached to window.
android.app.Activity.onAttachedToWindow,Called when the main window associated with the activity has been attached to the window manager.
android.app.Activity.onAttachedToWindow,See View#onAttachedToWindow() for more information.
android.app.Activity.onBackPressed,Called when the activity has detected the user's press of the back key. The default implementation simply finishes the current activity but you can override this to do whatever you want.
android.app.Activity.onBackPressed,On back pressed.
android.app.Activity.onBackPressed,Called when the activity has detected the user's press of the back key.
android.app.Activity.onBackPressed,The default implementation simply finishes the current activity but you can override this to do whatever you want.
android.app.Activity.onConfigurationChanged,Called by the system when the device configuration changes while your activity is running. Note that this will only be called if you have selected configurations you would like to handle with the R.attr.configChanges attribute in your manifest. If any configuration change occurs that is not selected to be reported by that attribute then instead of reporting it the system will stop and restart the activity (to have it launched with the new configuration). At the time that this function has been called your Resources object will have been updated to return resource values matching the new configuration.
android.app.Activity.onConfigurationChanged,On configuration changed.
android.app.Activity.onConfigurationChanged,Called by the system when the device configuration changes while your activity is running.
android.app.Activity.onConfigurationChanged,Note that this will only be called if you have selected configurations you would like to handle with the R.attr.configChanges attribute in your manifest.
android.app.Activity.onConfigurationChanged,If any configuration change occurs that is not selected to be reported by that attribute then instead of reporting it the system will stop and restart the activity (to have it launched with the new configuration).
android.app.Activity.onConfigurationChanged,At the time that this function has been called your Resources object will have been updated to return resource values matching the new configuration.
android.app.Activity.onContentChanged,This hook is called whenever the content view of the screen changes (due to a call to Window#setContentView(View android.view.ViewGroup.LayoutParams) or Window#addContentView(View android.view.ViewGroup.LayoutParams) ).
android.app.Activity.onContentChanged,On content changed.
android.app.Activity.onContextItemSelected,This hook is called whenever an item in a context menu is selected. The default implementation simply returns false to have the normal processing happen (calling the item's Runnable or sending a message to its Handler as appropriate). You can use this method for any items for which you would like to do processing without those other facilities. Use MenuItem#getMenuInfo() to get extra information set by the View that added this menu item. Derived classes should call through to the base class for it to perform the default menu handling.
android.app.Activity.onContextItemSelected,On context item selected.
android.app.Activity.onContextItemSelected,This hook is called whenever an item in a context menu is selected.
android.app.Activity.onContextItemSelected,The default implementation simply returns false to have the normal processing happen (calling the item's Runnable or sending a message to its Handler as appropriate).
android.app.Activity.onContextItemSelected,You can use this method for any items for which you would like to do processing without those other facilities.
android.app.Activity.onContextItemSelected,Use MenuItem#getMenuInfo() to get extra information set by the View that added this menu item.
android.app.Activity.onContextItemSelected,Derived classes should call through to the base class for it to perform the default menu handling.
android.app.Activity.onContextMenuClosed,This hook is called whenever the context menu is being closed (either by the user canceling the menu with the back/menu button or when an item is selected).
android.app.Activity.onContextMenuClosed,On context menu closed.
android.app.Activity.onCreateDescription,Generate a new description for this activity. This method is called before stopping the activity and can if desired return some textual description of its current state to be displayed to the user. The default implementation returns null which will cause you to inherit the description from the previous activity. If all activities return null generally the label of the top activity will be used as the description.
android.app.Activity.onCreateDescription,On create description.
android.app.Activity.onCreateDescription,Generate a new description for this activity.
android.app.Activity.onCreateDescription,This method is called before stopping the activity and can if desired return some textual description of its current state to be displayed to the user.
android.app.Activity.onCreateDescription,The default implementation returns null which will cause you to inherit the description from the previous activity.
android.app.Activity.onCreateDescription,If all activities return null generally the label of the top activity will be used as the description.
android.app.Activity.onCreateNavigateUpTaskStack,Define the synthetic task stack that will be generated during Up navigation from a different task. The default implementation of this method adds the parent chain of this activity as specified in the manifest to the supplied TaskStackBuilder. Applications may choose to override this method to construct the desired task stack in a different way. This method will be invoked by the default implementation of onNavigateUp() if shouldUpRecreateTask(android.content.Intent) returns true when supplied with the intent returned by getParentActivityIntent(). Applications that wish to supply extra Intent parameters to the parent stack defined by the manifest should override onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder).
android.app.Activity.onCreateNavigateUpTaskStack,On create navigate up task stack.
android.app.Activity.onCreateNavigateUpTaskStack,Define the synthetic task stack that will be generated during Up navigation from a different task.
android.app.Activity.onCreateNavigateUpTaskStack,The default implementation of this method adds the parent chain of this activity as specified in the manifest to the supplied TaskStackBuilder.
android.app.Activity.onCreateNavigateUpTaskStack,Applications may choose to override this method to construct the desired task stack in a different way.
android.app.Activity.onCreateNavigateUpTaskStack,This method will be invoked by the default implementation of onNavigateUp() if shouldUpRecreateTask(android.content.Intent) returns true when supplied with the intent returned by getParentActivityIntent().
android.app.Activity.onCreateNavigateUpTaskStack,Applications that wish to supply extra Intent parameters to the parent stack defined by the manifest should override onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder).
android.app.Activity.onCreateOptionsMenu,Initialize the contents of the Activity's standard options menu. You should place your menu items in to menu. This is only called once the first time the options menu is displayed. To update the menu every time it is displayed see onPrepareOptionsMenu(Menu). The default implementation populates the menu with standard system menu items. These are placed in the Menu#CATEGORY_SYSTEM group so that they will be correctly ordered with application-defined menu items. Deriving classes should always call through to the base implementation. You can safely hold on to menu (and any items created from it) making modifications to it as desired until the next time onCreateOptionsMenu() is called. When you add items to the menu you can implement the Activity's onOptionsItemSelected(MenuItem) method to handle them there.
android.app.Activity.onCreateOptionsMenu,On create options menu.
android.app.Activity.onCreateOptionsMenu,Initialize the contents of the Activity's standard options menu.
android.app.Activity.onCreateOptionsMenu,You should place your menu items in to menu.
android.app.Activity.onCreateOptionsMenu,This is only called once the first time the options menu is displayed.
android.app.Activity.onCreateOptionsMenu,To update the menu every time it is displayed see onPrepareOptionsMenu(Menu).
android.app.Activity.onCreateOptionsMenu,The default implementation populates the menu with standard system menu items.
android.app.Activity.onCreateOptionsMenu,These are placed in the Menu#CATEGORY_SYSTEM group so that they will be correctly ordered with application-defined menu items.
android.app.Activity.onCreateOptionsMenu,Deriving classes should always call through to the base implementation.
android.app.Activity.onCreateOptionsMenu,You can safely hold on to menu (and any items created from it) making modifications to it as desired until the next time onCreateOptionsMenu() is called.
android.app.Activity.onCreateOptionsMenu,When you add items to the menu you can implement the Activity's onOptionsItemSelected(MenuItem) method to handle them there.
android.app.Activity.onCreatePanelMenu,Default implementation of Window.Callback.onCreatePanelMenu(int Menu) for activities. This calls through to the new onCreateOptionsMenu(Menu) method for the Window.FEATURE_OPTIONS_PANEL panel so that subclasses of Activity don't need to deal with feature codes.
android.app.Activity.onCreatePanelMenu,On create panel menu.
android.app.Activity.onCreatePanelMenu,Default implementation of Window.Callback.onCreatePanelMenu(int Menu) for activities.
android.app.Activity.onCreatePanelMenu,This calls through to the new onCreateOptionsMenu(Menu) method for the Window.FEATURE_OPTIONS_PANEL panel so that subclasses of Activity don't need to deal with feature codes.
android.app.Activity.onCreatePanelView,Default implementation of Window.Callback.onCreatePanelView(int) for activities. This simply returns null so that all panel sub-windows will have the default menu behavior.
android.app.Activity.onCreatePanelView,On create panel view.
android.app.Activity.onCreatePanelView,Default implementation of Window.Callback.onCreatePanelView(int) for activities.
android.app.Activity.onCreatePanelView,This simply returns null so that all panel sub-windows will have the default menu behavior.
android.app.Activity.onCreateThumbnail,This method was deprecated in API level 28. Method doesn't do anything and will be removed in the future.
android.app.Activity.onCreateThumbnail,On create thumbnail.
android.app.Activity.onCreateThumbnail,This method was deprecated in API level 28.
android.app.Activity.onCreateThumbnail,Method doesn't do anything and will be removed in the future.
android.app.Activity.onCreateView,Standard implementation of LayoutInflater.Factory2.onCreateView(View String Context AttributeSet) used when inflating with the LayoutInflater returned by Context.getSystemService(Class ). This implementation handles tags to embed fragments inside of the activity.
android.app.Activity.onCreateView,On create view.
android.app.Activity.onCreateView,Standard implementation of LayoutInflater.Factory2.onCreateView(View String Context AttributeSet) used when inflating with the LayoutInflater returned by Context.getSystemService(Class ).
android.app.Activity.onCreateView,This implementation handles tags to embed fragments inside of the activity.
android.app.Activity.onCreateView,Standard implementation of LayoutInflater.Factory.onCreateView(String Context AttributeSet) used when inflating with the LayoutInflater returned by Context.getSystemService(Class ). This implementation does nothing and is for pre- Build.VERSION_CODES.HONEYCOMB apps. Newer apps should use onCreateView(android.view.View java.lang.String android.content.Context android.util.AttributeSet).
android.app.Activity.onCreateView,On create view.
android.app.Activity.onCreateView,Standard implementation of LayoutInflater.Factory.onCreateView(String Context AttributeSet) used when inflating with the LayoutInflater returned by Context.getSystemService(Class ).
android.app.Activity.onCreateView,This implementation does nothing and is for pre- Build.VERSION_CODES.HONEYCOMB apps.
android.app.Activity.onCreateView,Newer apps should use onCreateView(android.view.View java.lang.String android.content.Context android.util.AttributeSet).
android.app.Activity.onDetachedFromWindow,Called when the main window associated with the activity has been detached from the window manager. See View#onDetachedFromWindow() for more information.
android.app.Activity.onDetachedFromWindow,On detached from window.
android.app.Activity.onDetachedFromWindow,Called when the main window associated with the activity has been detached from the window manager.
android.app.Activity.onDetachedFromWindow,See View#onDetachedFromWindow() for more information.
android.app.Activity.onGenericMotionEvent,Called when a generic motion event was not handled by any of the views inside of the activity. Generic motion events describe joystick movements mouse hovers track pad touches scroll wheel movements and other input events. The MotionEvent#getSource() of the motion event specifies the class of input that was received. Implementations of this method must examine the bits in the source before processing the event. The following code example shows how this is done. Generic motion events with source class InputDevice.SOURCE_CLASS_POINTER are delivered to the view under the pointer. All other generic motion events are delivered to the focused view. See View#onGenericMotionEvent(MotionEvent) for an example of how to handle this event.
android.app.Activity.onGenericMotionEvent,On generic motion event.
android.app.Activity.onGenericMotionEvent,Called when a generic motion event was not handled by any of the views inside of the activity.
android.app.Activity.onGenericMotionEvent,Generic motion events describe joystick movements mouse hovers track pad touches scroll wheel movements and other input events.
android.app.Activity.onGenericMotionEvent,The MotionEvent#getSource() of the motion event specifies the class of input that was received.
android.app.Activity.onGenericMotionEvent,Implementations of this method must examine the bits in the source before processing the event.
android.app.Activity.onGenericMotionEvent,The following code example shows how this is done.
android.app.Activity.onGenericMotionEvent,Generic motion events with source class InputDevice.SOURCE_CLASS_POINTER are delivered to the view under the pointer.
android.app.Activity.onGenericMotionEvent,All other generic motion events are delivered to the focused view.
android.app.Activity.onGenericMotionEvent,See View#onGenericMotionEvent(MotionEvent) for an example of how to handle this event.
android.app.Activity.onKeyDown,Called when a key was pressed down and not handled by any of the views inside of the activity. So for example key presses while the cursor is inside a TextView will not trigger the event (unless it is a navigation to another object) because TextView handles its own key presses. If the focused view didn't want this event this method is called. The default implementation takes care of KeyEvent#KEYCODE_BACK by calling onBackPressed() though the behavior varies based on the application compatibility mode: for Build.VERSION_CODES.ECLAIR or later applications it will set up the dispatch to call onKeyUp(int KeyEvent) where the action will be performed; for earlier applications it will perform the action immediately in on-down as those versions of the platform behaved. Other additional default key handling may be performed if configured with setDefaultKeyMode(int).
android.app.Activity.onKeyDown,On key down.
android.app.Activity.onKeyDown,Called when a key was pressed down and not handled by any of the views inside of the activity.
android.app.Activity.onKeyDown,So for example key presses while the cursor is inside a TextView will not trigger the event (unless it is a navigation to another object) because TextView handles its own key presses.
android.app.Activity.onKeyDown,If the focused view didn't want this event this method is called.
android.app.Activity.onKeyDown,The default implementation takes care of KeyEvent#KEYCODE_BACK by calling onBackPressed() though the behavior varies based on the application compatibility mode: for Build.VERSION_CODES.ECLAIR or later applications it will set up the dispatch to call onKeyUp(int KeyEvent) where the action will be performed; for earlier applications it will perform the action immediately in on-down as those versions of the platform behaved.
android.app.Activity.onKeyDown,Other additional default key handling may be performed if configured with setDefaultKeyMode(int).
android.app.Activity.onKeyLongPress,Default implementation of KeyEvent.Callback#onKeyLongPress(int KeyEvent) : always returns false (doesn't handle the event). To receive this callback you must return true from onKeyDown for the current event stream.
android.app.Activity.onKeyLongPress,On key long press.
android.app.Activity.onKeyLongPress,Default implementation of KeyEvent.Callback#onKeyLongPress(int KeyEvent) : always returns false (doesn't handle the event).
android.app.Activity.onKeyLongPress,To receive this callback you must return true from onKeyDown for the current event stream.
android.app.Activity.onKeyMultiple,Default implementation of KeyEvent.Callback#onKeyMultiple(int int KeyEvent) : always returns false (doesn't handle the event).
android.app.Activity.onKeyMultiple,On key multiple.
android.app.Activity.onKeyShortcut,Called when a key shortcut event is not handled by any of the views in the Activity. Override this method to implement global key shortcuts for the Activity. Key shortcuts can also be implemented by setting the MenuItem#setShortcut(char char) property of menu items.
android.app.Activity.onKeyShortcut,On key shortcut.
android.app.Activity.onKeyShortcut,Called when a key shortcut event is not handled by any of the views in the Activity.
android.app.Activity.onKeyShortcut,Override this method to implement global key shortcuts for the Activity.
android.app.Activity.onKeyShortcut,Key shortcuts can also be implemented by setting the MenuItem#setShortcut(char char) property of menu items.
android.app.Activity.onKeyUp,Called when a key was released and not handled by any of the views inside of the activity. So for example key presses while the cursor is inside a TextView will not trigger the event (unless it is a navigation to another object) because TextView handles its own key presses. The default implementation handles KEYCODE_BACK to stop the activity and go back.
android.app.Activity.onKeyUp,On key up.
android.app.Activity.onKeyUp,Called when a key was released and not handled by any of the views inside of the activity.
android.app.Activity.onKeyUp,So for example key presses while the cursor is inside a TextView will not trigger the event (unless it is a navigation to another object) because TextView handles its own key presses.
android.app.Activity.onKeyUp,The default implementation handles KEYCODE_BACK to stop the activity and go back.
android.app.Activity.onLowMemory,This is called when the overall system is running low on memory and actively running processes should trim their memory usage. While the exact point at which this will be called is not defined generally it will happen when all background process have been killed. That is before reaching the point of killing processes hosting service and foreground UI that we would like to avoid killing. You should implement this method to release any caches or other unnecessary resources you may be holding on to. The system will perform a garbage collection for you after returning from this method. Preferably you should implement ComponentCallbacks2#onTrimMemory from ComponentCallbacks2 to incrementally unload your resources based on various levels of memory demands. That API is available for API level 14 and higher so you should only use this onLowMemory() method as a fallback for older versions which can be treated the same as ComponentCallbacks2#onTrimMemory with the ComponentCallbacks2#TRIM_MEMORY_COMPLETE level.
android.app.Activity.onLowMemory,On low memory.
android.app.Activity.onLowMemory,This is called when the overall system is running low on memory and actively running processes should trim their memory usage.
android.app.Activity.onLowMemory,While the exact point at which this will be called is not defined generally it will happen when all background process have been killed.
android.app.Activity.onLowMemory,That is before reaching the point of killing processes hosting service and foreground UI that we would like to avoid killing.
android.app.Activity.onLowMemory,You should implement this method to release any caches or other unnecessary resources you may be holding on to.
android.app.Activity.onLowMemory,The system will perform a garbage collection for you after returning from this method.
android.app.Activity.onLowMemory,Preferably you should implement ComponentCallbacks2#onTrimMemory from ComponentCallbacks2 to incrementally unload your resources based on various levels of memory demands.
android.app.Activity.onLowMemory,That API is available for API level 14 and higher so you should only use this onLowMemory() method as a fallback for older versions which can be treated the same as ComponentCallbacks2#onTrimMemory with the ComponentCallbacks2#TRIM_MEMORY_COMPLETE level.
android.app.Activity.onMenuItemSelected,Default implementation of Window.Callback.onMenuItemSelected(int MenuItem) for activities. This calls through to the new onOptionsItemSelected(MenuItem) method for the Window.FEATURE_OPTIONS_PANEL panel so that subclasses of Activity don't need to deal with feature codes.
android.app.Activity.onMenuItemSelected,On menu item selected.
android.app.Activity.onMenuItemSelected,Default implementation of Window.Callback.onMenuItemSelected(int MenuItem) for activities.
android.app.Activity.onMenuItemSelected,This calls through to the new onOptionsItemSelected(MenuItem) method for the Window.FEATURE_OPTIONS_PANEL panel so that subclasses of Activity don't need to deal with feature codes.
android.app.Activity.onMenuOpened,Called when a panel's menu is opened by the user. This may also be called when the menu is changing from one type to another (for example from the icon menu to the expanded menu).
android.app.Activity.onMenuOpened,On menu opened.
android.app.Activity.onMenuOpened,Called when a panel's menu is opened by the user.
android.app.Activity.onMenuOpened,This may also be called when the menu is changing from one type to another (for example from the icon menu to the expanded menu).
android.app.Activity.onNavigateUp,This method is called whenever the user chooses to navigate Up within your application's activity hierarchy from the action bar. If the attribute parentActivityName was specified in the manifest for this activity or an activity-alias to it default Up navigation will be handled automatically. If any activity along the parent chain requires extra Intent arguments the Activity subclass should override the method onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder) to supply those arguments. See Tasks and Back Stack from the developer guide and Navigation from the design guide for more information about navigating within your app. See the TaskStackBuilder class and the Activity methods getParentActivityIntent() shouldUpRecreateTask(android.content.Intent) and navigateUpTo(android.content.Intent) for help implementing custom Up navigation. The AppNavigation sample application in the Android SDK is also available for reference.
android.app.Activity.onNavigateUp,On navigate up.
android.app.Activity.onNavigateUp,This method is called whenever the user chooses to navigate Up within your application's activity hierarchy from the action bar.
android.app.Activity.onNavigateUp,If the attribute parentActivityName was specified in the manifest for this activity or an activity-alias to it default Up navigation will be handled automatically.
android.app.Activity.onNavigateUp,If any activity along the parent chain requires extra Intent arguments the Activity subclass should override the method onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder) to supply those arguments.
android.app.Activity.onNavigateUp,See Tasks and Back Stack from the developer guide and Navigation from the design guide for more information about navigating within your app.
android.app.Activity.onNavigateUp,See the TaskStackBuilder class and the Activity methods getParentActivityIntent() shouldUpRecreateTask(android.content.Intent) and navigateUpTo(android.content.Intent) for help implementing custom Up navigation.
android.app.Activity.onNavigateUp,The AppNavigation sample application in the Android SDK is also available for reference.
android.app.Activity.onNavigateUpFromChild,This is called when a child activity of this one attempts to navigate up. The default implementation simply calls onNavigateUp() on this activity (the parent).
android.app.Activity.onNavigateUpFromChild,On navigate up from child.
android.app.Activity.onNavigateUpFromChild,This is called when a child activity of this one attempts to navigate up.
android.app.Activity.onNavigateUpFromChild,The default implementation simply calls onNavigateUp() on this activity (the parent).
android.app.Activity.onOptionsItemSelected,This hook is called whenever an item in your options menu is selected. The default implementation simply returns false to have the normal processing happen (calling the item's Runnable or sending a message to its Handler as appropriate). You can use this method for any items for which you would like to do processing without those other facilities. Derived classes should call through to the base class for it to perform the default menu handling.
android.app.Activity.onOptionsItemSelected,On options item selected.
android.app.Activity.onOptionsItemSelected,This hook is called whenever an item in your options menu is selected.
android.app.Activity.onOptionsItemSelected,The default implementation simply returns false to have the normal processing happen (calling the item's Runnable or sending a message to its Handler as appropriate).
android.app.Activity.onOptionsItemSelected,You can use this method for any items for which you would like to do processing without those other facilities.
android.app.Activity.onOptionsItemSelected,Derived classes should call through to the base class for it to perform the default menu handling.
android.app.Activity.onOptionsMenuClosed,This hook is called whenever the options menu is being closed (either by the user canceling the menu with the back/menu button or when an item is selected).
android.app.Activity.onOptionsMenuClosed,On options menu closed.
android.app.Activity.onPanelClosed,Default implementation of Window.Callback.onPanelClosed(int Menu) for activities. This calls through to onOptionsMenuClosed(android.view.Menu) method for the Window.FEATURE_OPTIONS_PANEL panel so that subclasses of Activity don't need to deal with feature codes. For context menus ( Window#FEATURE_CONTEXT_MENU ) the onContextMenuClosed(android.view.Menu) will be called.
android.app.Activity.onPanelClosed,On panel closed.
android.app.Activity.onPanelClosed,Default implementation of Window.Callback.onPanelClosed(int Menu) for activities.
android.app.Activity.onPanelClosed,This calls through to onOptionsMenuClosed(android.view.Menu) method for the Window.FEATURE_OPTIONS_PANEL panel so that subclasses of Activity don't need to deal with feature codes.
android.app.Activity.onPanelClosed,For context menus ( Window#FEATURE_CONTEXT_MENU ) the onContextMenuClosed(android.view.Menu) will be called.
android.app.Activity.onPrepareNavigateUpTaskStack,Prepare the synthetic task stack that will be generated during Up navigation from a different task. This method receives the TaskStackBuilder with the constructed series of Intents as generated by onCreateNavigateUpTaskStack(android.app.TaskStackBuilder). If any extra data should be added to these intents before launching the new task the application should override this method and add that data here.
android.app.Activity.onPrepareNavigateUpTaskStack,On prepare navigate up task stack.
android.app.Activity.onPrepareNavigateUpTaskStack,Prepare the synthetic task stack that will be generated during Up navigation from a different task.
android.app.Activity.onPrepareNavigateUpTaskStack,This method receives the TaskStackBuilder with the constructed series of Intents as generated by onCreateNavigateUpTaskStack(android.app.TaskStackBuilder).
android.app.Activity.onPrepareNavigateUpTaskStack,If any extra data should be added to these intents before launching the new task the application should override this method and add that data here.
android.app.Activity.onPrepareOptionsMenu,Prepare the Screen's standard options menu to be displayed. This is called right before the menu is shown every time it is shown. You can use this method to efficiently enable/disable items or otherwise dynamically modify the contents. The default implementation updates the system menu items based on the activity's state. Deriving classes should always call through to the base class implementation.
android.app.Activity.onPrepareOptionsMenu,On prepare options menu.
android.app.Activity.onPrepareOptionsMenu,Prepare the Screen's standard options menu to be displayed.
android.app.Activity.onPrepareOptionsMenu,This is called right before the menu is shown every time it is shown.
android.app.Activity.onPrepareOptionsMenu,You can use this method to efficiently enable/disable items or otherwise dynamically modify the contents.
android.app.Activity.onPrepareOptionsMenu,The default implementation updates the system menu items based on the activity's state.
android.app.Activity.onPrepareOptionsMenu,Deriving classes should always call through to the base class implementation.
android.app.Activity.onPreparePanel,Default implementation of Window.Callback.onPreparePanel(int View Menu) for activities. This calls through to the new onPrepareOptionsMenu(Menu) method for the Window.FEATURE_OPTIONS_PANEL panel so that subclasses of Activity don't need to deal with feature codes.
android.app.Activity.onPreparePanel,On prepare panel.
android.app.Activity.onPreparePanel,Default implementation of Window.Callback.onPreparePanel(int View Menu) for activities.
android.app.Activity.onPreparePanel,This calls through to the new onPrepareOptionsMenu(Menu) method for the Window.FEATURE_OPTIONS_PANEL panel so that subclasses of Activity don't need to deal with feature codes.
android.app.Activity.onSearchRequested,This hook is called when the user signals the desire to start a search. You can use this function as a simple way to launch the search UI in response to a menu item search button or other widgets within your activity. Unless overidden calling this function is the same as calling startSearch(nullfalsenullfalse) which launches search for the current activity as specified in its manifest see SearchManager. You can override this function to force global search e.g. in response to a dedicated search key or to block search entirely (by simply returning false). Note: when running in a Configuration#UI_MODE_TYPE_TELEVISION or Configuration#UI_MODE_TYPE_WATCH the default implementation changes to simply return false and you must supply your own custom implementation if you want to support search.
android.app.Activity.onSearchRequested,On search requested.
android.app.Activity.onSearchRequested,This hook is called when the user signals the desire to start a search.
android.app.Activity.onSearchRequested,You can use this function as a simple way to launch the search UI in response to a menu item search button or other widgets within your activity.
android.app.Activity.onSearchRequested,Unless overidden calling this function is the same as calling startSearch(nullfalsenullfalse) which launches search for the current activity as specified in its manifest see SearchManager.
android.app.Activity.onSearchRequested,You can override this function to force global search e.g.
android.app.Activity.onSearchRequested,in response to a dedicated search key or to block search entirely (by simply returning false).
android.app.Activity.onSearchRequested,Note: when running in a Configuration#UI_MODE_TYPE_TELEVISION or Configuration#UI_MODE_TYPE_WATCH the default implementation changes to simply return false and you must supply your own custom implementation if you want to support search.
android.app.Activity.onSearchRequested,Called when the user signals the desire to start a search.
android.app.Activity.onSearchRequested,On search requested.
android.app.Activity.onTouchEvent,Called when a touch screen event was not handled by any of the views under it. This is most useful to process touch events that happen outside of your window bounds where there is no view to receive it.
android.app.Activity.onTouchEvent,On touch event.
android.app.Activity.onTouchEvent,Called when a touch screen event was not handled by any of the views under it.
android.app.Activity.onTouchEvent,This is most useful to process touch events that happen outside of your window bounds where there is no view to receive it.
android.app.Activity.onTrackballEvent,Called when the trackball was moved and not handled by any of the views inside of the activity. So for example if the trackball moves while focus is on a button you will receive a call here because buttons do not normally do anything with trackball events. The call here happens before trackball movements are converted to DPAD key events which then get sent back to the view hierarchy and will be processed at the point for things like focus navigation.
android.app.Activity.onTrackballEvent,On trackball event.
android.app.Activity.onTrackballEvent,Called when the trackball was moved and not handled by any of the views inside of the activity.
android.app.Activity.onTrackballEvent,So for example if the trackball moves while focus is on a button you will receive a call here because buttons do not normally do anything with trackball events.
android.app.Activity.onTrackballEvent,The call here happens before trackball movements are converted to DPAD key events which then get sent back to the view hierarchy and will be processed at the point for things like focus navigation.
android.app.Activity.onTrimMemory,Called when the operating system has determined that it is a good time for a process to trim unneeded memory from its process. This will happen for example when it goes in the background and there is not enough memory to keep as many background processes running as desired. You should never compare to exact values of the level since new intermediate values may be added -- you will typically want to compare if the value is greater or equal to a level you are interested in. To retrieve the processes current trim level at any point you can use ActivityManager.getMyMemoryState(RunningAppProcessInfo).
android.app.Activity.onTrimMemory,On trim memory.
android.app.Activity.onTrimMemory,Called when the operating system has determined that it is a good time for a process to trim unneeded memory from its process.
android.app.Activity.onTrimMemory,This will happen for example when it goes in the background and there is not enough memory to keep as many background processes running as desired.
android.app.Activity.onTrimMemory,You should never compare to exact values of the level since new intermediate values may be added -- you will typically want to compare if the value is greater or equal to a level you are interested in.
android.app.Activity.onTrimMemory,To retrieve the processes current trim level at any point you can use ActivityManager.getMyMemoryState(RunningAppProcessInfo).
android.app.Activity.onUserInteraction,Called whenever a key touch or trackball event is dispatched to the activity. Implement this method if you wish to know that the user has interacted with the device in some way while your activity is running. This callback and onUserLeaveHint() are intended to help activities manage status bar notifications intelligently; specifically for helping activities determine the proper time to cancel a notification. All calls to your activity's onUserLeaveHint() callback will be accompanied by calls to onUserInteraction(). This ensures that your activity will be told of relevant user activity such as pulling down the notification pane and touching an item there. Note that this callback will be invoked for the touch down action that begins a touch gesture but may not be invoked for the touch-moved and touch-up actions that follow.
android.app.Activity.onUserInteraction,On user interaction.
android.app.Activity.onUserInteraction,Called whenever a key touch or trackball event is dispatched to the activity.
android.app.Activity.onUserInteraction,Implement this method if you wish to know that the user has interacted with the device in some way while your activity is running.
android.app.Activity.onUserInteraction,This callback and onUserLeaveHint() are intended to help activities manage status bar notifications intelligently; specifically for helping activities determine the proper time to cancel a notification.
android.app.Activity.onUserInteraction,All calls to your activity's onUserLeaveHint() callback will be accompanied by calls to onUserInteraction().
android.app.Activity.onUserInteraction,This ensures that your activity will be told of relevant user activity such as pulling down the notification pane and touching an item there.
android.app.Activity.onUserInteraction,Note that this callback will be invoked for the touch down action that begins a touch gesture but may not be invoked for the touch-moved and touch-up actions that follow.
android.app.Activity.onWindowFocusChanged,Called when the current Window of the activity gains or loses focus. This is the best indicator of whether this activity is the entity with which the user actively interacts. The default implementation clears the key tracking state so should always be called. Note that this provides information about global focus state which is managed independently of activity lifecycle. As such while focus changes will generally have some relation to lifecycle changes (an activity that is stopped will not generally get window focus) you should not rely on any particular order between the callbacks here and those in the other lifecycle methods such as onResume(). As a general rule however a foreground activity will have window focus... unless it has displayed other dialogs or popups that take input focus in which case the activity itself will not have focus when the other windows have it. Likewise the system may display system-level windows (such as the status bar notification panel or a system alert) which will temporarily take window input focus without pausing the foreground activity. Starting with Build.VERSION_CODES.Q there can be multiple resumed activities at the same time in multi-window mode so resumed state does not guarantee window focus even if there are no overlays above. If the intent is to know when an activity is the topmost active the one the user interacted with last among all activities but not including non-activity windows like dialogs and popups then onTopResumedActivityChanged(boolean) should be used. On platform versions prior to Build.VERSION_CODES.Q onResume() is the best indicator.
android.app.Activity.onWindowFocusChanged,On window focus changed.
android.app.Activity.onWindowFocusChanged,Called when the current Window of the activity gains or loses focus.
android.app.Activity.onWindowFocusChanged,This is the best indicator of whether this activity is the entity with which the user actively interacts.
android.app.Activity.onWindowFocusChanged,The default implementation clears the key tracking state so should always be called.
android.app.Activity.onWindowFocusChanged,Note that this provides information about global focus state which is managed independently of activity lifecycle.
android.app.Activity.onWindowFocusChanged,As such while focus changes will generally have some relation to lifecycle changes (an activity that is stopped will not generally get window focus) you should not rely on any particular order between the callbacks here and those in the other lifecycle methods such as onResume().
android.app.Activity.onWindowFocusChanged,As a general rule however a foreground activity will have window focus.
android.app.Activity.onWindowFocusChanged,unless it has displayed other dialogs or popups that take input focus in which case the activity itself will not have focus when the other windows have it.
android.app.Activity.onWindowFocusChanged,Likewise the system may display system-level windows (such as the status bar notification panel or a system alert) which will temporarily take window input focus without pausing the foreground activity.
android.app.Activity.onWindowFocusChanged,Starting with Build.VERSION_CODES.Q there can be multiple resumed activities at the same time in multi-window mode so resumed state does not guarantee window focus even if there are no overlays above.
android.app.Activity.onWindowFocusChanged,If the intent is to know when an activity is the topmost active the one the user interacted with last among all activities but not including non-activity windows like dialogs and popups then onTopResumedActivityChanged(boolean) should be used.
android.app.Activity.onWindowFocusChanged,On platform versions prior to Build.VERSION_CODES.Q onResume() is the best indicator.
android.app.Activity.openContextMenu,Programmatically opens the context menu for a particular view. The view should have been added via registerForContextMenu(android.view.View).
android.app.Activity.openContextMenu,Open context menu.
android.app.Activity.openContextMenu,Programmatically opens the context menu for a particular view.
android.app.Activity.openContextMenu,The view should have been added via registerForContextMenu(android.view.View).
android.app.Activity.openOptionsMenu,Programmatically opens the options menu. If the options menu is already open this method does nothing.
android.app.Activity.openOptionsMenu,Open options menu.
android.app.Activity.openOptionsMenu,Programmatically opens the options menu.
android.app.Activity.openOptionsMenu,If the options menu is already open this method does nothing.
android.app.Activity.overridePendingTransition,Call immediately after one of the flavors of startActivity(android.content.Intent) or finish() to specify an explicit transition animation to perform next. As of Build.VERSION_CODES.JELLY_BEAN an alternative to using this with starting activities is to supply the desired animation information through a ActivityOptions bundle to startActivity(android.content.Intent android.os.Bundle) or a related function. This allows you to specify a custom animation even when starting an activity from outside the context of the current top activity.
android.app.Activity.overridePendingTransition,Override pending transition.
android.app.Activity.overridePendingTransition,Call immediately after one of the flavors of startActivity(android.content.Intent) or finish() to specify an explicit transition animation to perform next.
android.app.Activity.overridePendingTransition,As of Build.VERSION_CODES.JELLY_BEAN an alternative to using this with starting activities is to supply the desired animation information through a ActivityOptions bundle to startActivity(android.content.Intent android.os.Bundle) or a related function.
android.app.Activity.overridePendingTransition,This allows you to specify a custom animation even when starting an activity from outside the context of the current top activity.
android.app.Activity.postponeEnterTransition,Postpone the entering activity transition when Activity was started with ActivityOptions.makeSceneTransitionAnimation(Activity android.util.Pair[]). This method gives the Activity the ability to delay starting the entering and shared element transitions until all data is loaded. Until then the Activity won't draw into its window leaving the window transparent. This may also cause the returning animation to be delayed until data is ready. This method should be called in onCreate(android.os.Bundle) or in onActivityReenter(int android.content.Intent). startPostponedEnterTransition() must be called to allow the Activity to start the transitions. If the Activity did not use ActivityOptions.makeSceneTransitionAnimation(Activity android.util.Pair[]) then this method does nothing.
android.app.Activity.postponeEnterTransition,Postpone enter transition.
android.app.Activity.postponeEnterTransition,Postpone the entering activity transition when Activity was started with ActivityOptions.makeSceneTransitionAnimation(Activity android.util.Pair[]).
android.app.Activity.postponeEnterTransition,This method gives the Activity the ability to delay starting the entering and shared element transitions until all data is loaded.
android.app.Activity.postponeEnterTransition,Until then the Activity won't draw into its window leaving the window transparent.
android.app.Activity.postponeEnterTransition,This may also cause the returning animation to be delayed until data is ready.
android.app.Activity.postponeEnterTransition,This method should be called in onCreate(android.os.Bundle) or in onActivityReenter(int android.content.Intent).
android.app.Activity.postponeEnterTransition,startPostponedEnterTransition() must be called to allow the Activity to start the transitions.
android.app.Activity.postponeEnterTransition,If the Activity did not use ActivityOptions.makeSceneTransitionAnimation(Activity android.util.Pair[]) then this method does nothing.
android.app.Activity.recreate,Cause this Activity to be recreated with a new instance. This results in essentially the same flow as when the Activity is created due to a configuration change -- the current instance will go through its lifecycle to onDestroy() and a new instance then created after it.
android.app.Activity.recreate,Recreate.
android.app.Activity.recreate,Cause this Activity to be recreated with a new instance.
android.app.Activity.recreate,This results in essentially the same flow as when the Activity is created due to a configuration change -- the current instance will go through its lifecycle to onDestroy() and a new instance then created after it.
android.app.Activity.registerForContextMenu,Registers a context menu to be shown for the given view (multiple views can show the context menu). This method will set the OnCreateContextMenuListener on the view to this activity so onCreateContextMenu(android.view.ContextMenu android.view.View android.view.ContextMenu.ContextMenuInfo) will be called when it is time to show the context menu.
android.app.Activity.registerForContextMenu,Register for context menu.
android.app.Activity.registerForContextMenu,Registers a context menu to be shown for the given view (multiple views can show the context menu).
android.app.Activity.registerForContextMenu,This method will set the OnCreateContextMenuListener on the view to this activity so onCreateContextMenu(android.view.ContextMenu android.view.View android.view.ContextMenu.ContextMenuInfo) will be called when it is time to show the context menu.
android.app.Activity.requestWindowFeature,Enable extended window features. This is a convenience for calling getWindow().requestFeature().
android.app.Activity.requestWindowFeature,Request window feature.
android.app.Activity.requestWindowFeature,Enable extended window features.
android.app.Activity.requestWindowFeature,This is a convenience for calling getWindow().requestFeature().
android.app.Activity.runOnUiThread,Runs the specified action on the UI thread. If the current thread is the UI thread then the action is executed immediately. If the current thread is not the UI thread the action is posted to the event queue of the UI thread.
android.app.Activity.runOnUiThread,Run on ui thread.
android.app.Activity.runOnUiThread,Runs the specified action on the UI thread.
android.app.Activity.runOnUiThread,If the current thread is the UI thread then the action is executed immediately.
android.app.Activity.runOnUiThread,If the current thread is not the UI thread the action is posted to the event queue of the UI thread.
android.app.Activity.setContentView,Set the activity content to an explicit view. This view is placed directly into the activity's view hierarchy. It can itself be a complex view hierarchy.
android.app.Activity.setContentView,Set content view.
android.app.Activity.setContentView,Set the activity content to an explicit view.
android.app.Activity.setContentView,This view is placed directly into the activity's view hierarchy.
android.app.Activity.setContentView,It can itself be a complex view hierarchy.
android.app.Activity.setContentView,Set the activity content to an explicit view. This view is placed directly into the activity's view hierarchy. It can itself be a complex view hierarchy. When calling this method the layout parameters of the specified view are ignored. Both the width and the height of the view are set by default to ViewGroup.LayoutParams#MATCH_PARENT. To use your own layout parameters invoke setContentView(android.view.View android.view.ViewGroup.LayoutParams) instead.
android.app.Activity.setContentView,Set content view.
android.app.Activity.setContentView,Set the activity content to an explicit view.
android.app.Activity.setContentView,This view is placed directly into the activity's view hierarchy.
android.app.Activity.setContentView,It can itself be a complex view hierarchy.
android.app.Activity.setContentView,When calling this method the layout parameters of the specified view are ignored.
android.app.Activity.setContentView,Both the width and the height of the view are set by default to ViewGroup.LayoutParams#MATCH_PARENT.
android.app.Activity.setContentView,To use your own layout parameters invoke setContentView(android.view.View android.view.ViewGroup.LayoutParams) instead.
android.app.Activity.setContentView,Set the activity content from a layout resource. The resource will be inflated adding all top-level views to the activity.
android.app.Activity.setContentView,Set content view.
android.app.Activity.setContentView,Set the activity content from a layout resource.
android.app.Activity.setContentView,The resource will be inflated adding all top-level views to the activity.
android.app.Activity.setEnterSharedElementCallback,When ActivityOptions.makeSceneTransitionAnimation(Activity android.view.View String) was used to start an Activity callback will be called to handle shared elements on the launched Activity. This requires Window#FEATURE_ACTIVITY_TRANSITIONS.
android.app.Activity.setEnterSharedElementCallback,Set enter shared element callback.
android.app.Activity.setEnterSharedElementCallback,When ActivityOptions.makeSceneTransitionAnimation(Activity android.view.View String) was used to start an Activity callback will be called to handle shared elements on the launched Activity.
android.app.Activity.setEnterSharedElementCallback,This requires Window#FEATURE_ACTIVITY_TRANSITIONS.
android.app.Activity.setExitSharedElementCallback,When ActivityOptions.makeSceneTransitionAnimation(Activity android.view.View String) was used to start an Activity callback will be called to handle shared elements on the launching Activity. Most calls will only come when returning from the started Activity. This requires Window#FEATURE_ACTIVITY_TRANSITIONS.
android.app.Activity.setExitSharedElementCallback,Set exit shared element callback.
android.app.Activity.setExitSharedElementCallback,When ActivityOptions.makeSceneTransitionAnimation(Activity android.view.View String) was used to start an Activity callback will be called to handle shared elements on the launching Activity.
android.app.Activity.setExitSharedElementCallback,Most calls will only come when returning from the started Activity.
android.app.Activity.setExitSharedElementCallback,This requires Window#FEATURE_ACTIVITY_TRANSITIONS.
android.app.Activity.setFinishOnTouchOutside,Sets whether this activity is finished when touched outside its window's bounds.
android.app.Activity.setFinishOnTouchOutside,Set finish on touch outside.
android.app.Activity.setIntent,Change the intent returned by getIntent(). This holds a reference to the given intent; it does not copy it. Often used in conjunction with onNewIntent(Intent).
android.app.Activity.setIntent,Set intent.
android.app.Activity.setIntent,Change the intent returned by getIntent().
android.app.Activity.setIntent,This holds a reference to the given intent; it does not copy it.
android.app.Activity.setIntent,Often used in conjunction with onNewIntent(Intent).
android.app.Activity.setProgress,This method was deprecated in API level 24. No longer supported starting in API 21. Sets the progress for the progress bars in the title. In order for the progress bar to be shown the feature must be requested via requestWindowFeature(int).
android.app.Activity.setProgress,Set progress.
android.app.Activity.setProgress,This method was deprecated in API level 24.
android.app.Activity.setProgress,No longer supported starting in API 21.
android.app.Activity.setProgress,Sets the progress for the progress bars in the title.
android.app.Activity.setProgress,In order for the progress bar to be shown the feature must be requested via requestWindowFeature(int).
android.app.Activity.setProgressBarIndeterminate,This method was deprecated in API level 24. No longer supported starting in API 21. Sets whether the horizontal progress bar in the title should be indeterminate (the circular is always indeterminate). In order for the progress bar to be shown the feature must be requested via requestWindowFeature(int).
android.app.Activity.setProgressBarIndeterminate,Set progress bar indeterminate.
android.app.Activity.setProgressBarIndeterminate,This method was deprecated in API level 24.
android.app.Activity.setProgressBarIndeterminate,No longer supported starting in API 21.
android.app.Activity.setProgressBarIndeterminate,Sets whether the horizontal progress bar in the title should be indeterminate (the circular is always indeterminate).
android.app.Activity.setProgressBarIndeterminate,In order for the progress bar to be shown the feature must be requested via requestWindowFeature(int).
android.app.Activity.setProgressBarIndeterminateVisibility,This method was deprecated in API level 24. No longer supported starting in API 21. Sets the visibility of the indeterminate progress bar in the title. In order for the progress bar to be shown the feature must be requested via requestWindowFeature(int).
android.app.Activity.setProgressBarIndeterminateVisibility,Set progress bar indeterminate visibility.
android.app.Activity.setProgressBarIndeterminateVisibility,This method was deprecated in API level 24.
android.app.Activity.setProgressBarIndeterminateVisibility,No longer supported starting in API 21.
android.app.Activity.setProgressBarIndeterminateVisibility,Sets the visibility of the indeterminate progress bar in the title.
android.app.Activity.setProgressBarIndeterminateVisibility,In order for the progress bar to be shown the feature must be requested via requestWindowFeature(int).
android.app.Activity.setProgressBarVisibility,This method was deprecated in API level 24. No longer supported starting in API 21. Sets the visibility of the progress bar in the title. In order for the progress bar to be shown the feature must be requested via requestWindowFeature(int).
android.app.Activity.setProgressBarVisibility,Set progress bar visibility.
android.app.Activity.setProgressBarVisibility,This method was deprecated in API level 24.
android.app.Activity.setProgressBarVisibility,No longer supported starting in API 21.
android.app.Activity.setProgressBarVisibility,Sets the visibility of the progress bar in the title.
android.app.Activity.setProgressBarVisibility,In order for the progress bar to be shown the feature must be requested via requestWindowFeature(int).
android.app.Activity.setRequestedOrientation,Change the desired orientation of this activity. If the activity is currently in the foreground or otherwise impacting the screen orientation the screen will immediately be changed (possibly causing the activity to be restarted). Otherwise this will be used the next time the activity is visible.
android.app.Activity.setRequestedOrientation,Set requested orientation.
android.app.Activity.setRequestedOrientation,Change the desired orientation of this activity.
android.app.Activity.setRequestedOrientation,If the activity is currently in the foreground or otherwise impacting the screen orientation the screen will immediately be changed (possibly causing the activity to be restarted).
android.app.Activity.setRequestedOrientation,Otherwise this will be used the next time the activity is visible.
android.app.Activity.setResult,Call this to set the result that your activity will return to its caller. As of Build.VERSION_CODES.GINGERBREAD the Intent you supply here can have Intent#FLAG_GRANT_READ_URI_PERMISSION and/or Intent#FLAG_GRANT_WRITE_URI_PERMISSION set. This will grant the Activity receiving the result access to the specific URIs in the Intent. Access will remain until the Activity has finished (it will remain across the hosting process being killed and other temporary destruction) and will be added to any existing set of URI permissions it already holds.
android.app.Activity.setResult,Set result.
android.app.Activity.setResult,Call this to set the result that your activity will return to its caller.
android.app.Activity.setResult,As of Build.VERSION_CODES.GINGERBREAD the Intent you supply here can have Intent#FLAG_GRANT_READ_URI_PERMISSION and/or Intent#FLAG_GRANT_WRITE_URI_PERMISSION set.
android.app.Activity.setResult,This will grant the Activity receiving the result access to the specific URIs in the Intent.
android.app.Activity.setResult,Access will remain until the Activity has finished (it will remain across the hosting process being killed and other temporary destruction) and will be added to any existing set of URI permissions it already holds.
android.app.Activity.setResult,Call this to set the result that your activity will return to its caller.
android.app.Activity.setResult,Set result.
android.app.Activity.setSecondaryProgress,This method was deprecated in API level 24. No longer supported starting in API 21. Sets the secondary progress for the progress bar in the title. This progress is drawn between the primary progress (set via setProgress(int) and the background. It can be ideal for media scenarios such as showing the buffering progress while the default progress shows the play progress. In order for the progress bar to be shown the feature must be requested via requestWindowFeature(int).
android.app.Activity.setSecondaryProgress,Set secondary progress.
android.app.Activity.setSecondaryProgress,This method was deprecated in API level 24.
android.app.Activity.setSecondaryProgress,No longer supported starting in API 21.
android.app.Activity.setSecondaryProgress,Sets the secondary progress for the progress bar in the title.
android.app.Activity.setSecondaryProgress,This progress is drawn between the primary progress (set via setProgress(int) and the background.
android.app.Activity.setSecondaryProgress,It can be ideal for media scenarios such as showing the buffering progress while the default progress shows the play progress.
android.app.Activity.setSecondaryProgress,In order for the progress bar to be shown the feature must be requested via requestWindowFeature(int).
android.app.Activity.setTitle,Change the title associated with this activity. If this is a top-level activity the title for its window will change. If it is an embedded activity the parent can do whatever it wants with it.
android.app.Activity.setTitle,Set title.
android.app.Activity.setTitle,Change the title associated with this activity.
android.app.Activity.setTitle,If this is a top-level activity the title for its window will change.
android.app.Activity.setTitle,If it is an embedded activity the parent can do whatever it wants with it.
android.app.Activity.setTitle,Change the title associated with this activity. If this is a top-level activity the title for its window will change. If it is an embedded activity the parent can do whatever it wants with it.
android.app.Activity.setTitle,Set title.
android.app.Activity.setTitle,Change the title associated with this activity.
android.app.Activity.setTitle,If this is a top-level activity the title for its window will change.
android.app.Activity.setTitle,If it is an embedded activity the parent can do whatever it wants with it.
android.app.Activity.setTitleColor,This method was deprecated in API level 21. Use action bar styles instead. Change the color of the title associated with this activity. This method is deprecated starting in API Level 11 and replaced by action bar styles. For information on styling the Action Bar read the Action Bar developer guide.
android.app.Activity.setTitleColor,Set title color.
android.app.Activity.setTitleColor,This method was deprecated in API level 21.
android.app.Activity.setTitleColor,Use action bar styles instead.
android.app.Activity.setTitleColor,Change the color of the title associated with this activity.
android.app.Activity.setTitleColor,This method is deprecated starting in API Level 11 and replaced by action bar styles.
android.app.Activity.setTitleColor,For information on styling the Action Bar read the Action Bar developer guide.
android.app.Activity.setVisible,Control whether this activity's main window is visible. This is intended only for the special case of an activity that is not going to show a UI itself but can't just finish prior to onResume() because it needs to wait for a service binding or such. Setting this to false allows you to prevent your UI from being shown during that time. The default value for this is taken from the R.attr.windowNoDisplay attribute of the activity's theme.
android.app.Activity.setVisible,Set visible.
android.app.Activity.setVisible,Control whether this activity's main window is visible.
android.app.Activity.setVisible,This is intended only for the special case of an activity that is not going to show a UI itself but can't just finish prior to onResume() because it needs to wait for a service binding or such.
android.app.Activity.setVisible,Setting this to false allows you to prevent your UI from being shown during that time.
android.app.Activity.setVisible,The default value for this is taken from the R.attr.windowNoDisplay attribute of the activity's theme.
android.app.Activity.setVolumeControlStream,Suggests an audio stream whose volume should be changed by the hardware volume controls. The suggested audio stream will be tied to the window of this Activity. Volume requests which are received while the Activity is in the foreground will affect this stream. It is not guaranteed that the hardware volume controls will always change this stream's volume (for example if a call is in progress its stream's volume may be changed instead). To reset back to the default use AudioManager#USE_DEFAULT_STREAM_TYPE.
android.app.Activity.setVolumeControlStream,Set volume control stream.
android.app.Activity.setVolumeControlStream,Suggests an audio stream whose volume should be changed by the hardware volume controls.
android.app.Activity.setVolumeControlStream,The suggested audio stream will be tied to the window of this Activity.
android.app.Activity.setVolumeControlStream,Volume requests which are received while the Activity is in the foreground will affect this stream.
android.app.Activity.setVolumeControlStream,It is not guaranteed that the hardware volume controls will always change this stream's volume (for example if a call is in progress its stream's volume may be changed instead).
android.app.Activity.setVolumeControlStream,To reset back to the default use AudioManager#USE_DEFAULT_STREAM_TYPE.
android.app.Activity.shouldUpRecreateTask,Returns true if the app should recreate the task when navigating 'up' from this activity by using targetIntent. If this method returns false the app can trivially call navigateUpTo(android.content.Intent) using the same parameters to correctly perform up navigation. If this method returns false the app should synthesize a new task stack by using TaskStackBuilder or another similar mechanism to perform up navigation.
android.app.Activity.shouldUpRecreateTask,Should up recreate task.
android.app.Activity.shouldUpRecreateTask,Returns true if the app should recreate the task when navigating 'up' from this activity by using targetIntent.
android.app.Activity.shouldUpRecreateTask,If this method returns false the app can trivially call navigateUpTo(android.content.Intent) using the same parameters to correctly perform up navigation.
android.app.Activity.shouldUpRecreateTask,If this method returns false the app should synthesize a new task stack by using TaskStackBuilder or another similar mechanism to perform up navigation.
android.app.Activity.showDialog,This method was deprecated in API level 15. Use the new DialogFragment class with FragmentManager instead; this is also available on older platforms through the Android compatibility package. Show a dialog managed by this activity. A call to onCreateDialog(int android.os.Bundle) will be made with the same id the first time this is called for a given id. From thereafter the dialog will be automatically saved and restored. If you are targeting Build.VERSION_CODES.HONEYCOMB or later consider instead using a DialogFragment instead. Each time a dialog is shown onPrepareDialog(int android.app.Dialog android.os.Bundle) will be made to provide an opportunity to do any timely preparation.
android.app.Activity.showDialog,Show dialog.
android.app.Activity.showDialog,This method was deprecated in API level 15.
android.app.Activity.showDialog,Use the new DialogFragment class with FragmentManager instead; this is also available on older platforms through the Android compatibility package.
android.app.Activity.showDialog,Show a dialog managed by this activity.
android.app.Activity.showDialog,A call to onCreateDialog(int android.os.Bundle) will be made with the same id the first time this is called for a given id.
android.app.Activity.showDialog,From thereafter the dialog will be automatically saved and restored.
android.app.Activity.showDialog,If you are targeting Build.VERSION_CODES.HONEYCOMB or later consider instead using a DialogFragment instead.
android.app.Activity.showDialog,Each time a dialog is shown onPrepareDialog(int android.app.Dialog android.os.Bundle) will be made to provide an opportunity to do any timely preparation.
android.app.Activity.showDialog,This method was deprecated in API level 15. Use the new DialogFragment class with FragmentManager instead; this is also available on older platforms through the Android compatibility package. Simple version of showDialog(int android.os.Bundle) that does not take any arguments. Simply calls showDialog(int android.os.Bundle) with null arguments.
android.app.Activity.showDialog,Show dialog.
android.app.Activity.showDialog,This method was deprecated in API level 15.
android.app.Activity.showDialog,Use the new DialogFragment class with FragmentManager instead; this is also available on older platforms through the Android compatibility package.
android.app.Activity.showDialog,Simple version of showDialog(int android.os.Bundle) that does not take any arguments.
android.app.Activity.showDialog,Simply calls showDialog(int android.os.Bundle) with null arguments.
android.app.Activity.startActivities,Launch a new activity. You will not receive any information about when the activity exits. This implementation overrides the base version providing information about the activity performing the launch. Because of this additional information the Intent#FLAG_ACTIVITY_NEW_TASK launch flag is not required; if not specified the new activity will be added to the task of the caller. This method throws ActivityNotFoundException if there was no Activity found to run the given Intent.
android.app.Activity.startActivities,Start activities.
android.app.Activity.startActivities,Launch a new activity.
android.app.Activity.startActivities,You will not receive any information about when the activity exits.
android.app.Activity.startActivities,This implementation overrides the base version providing information about the activity performing the launch.
android.app.Activity.startActivities,Because of this additional information the Intent#FLAG_ACTIVITY_NEW_TASK launch flag is not required; if not specified the new activity will be added to the task of the caller.
android.app.Activity.startActivities,This method throws ActivityNotFoundException if there was no Activity found to run the given Intent.
android.app.Activity.startActivities,Same as startActivities(android.content.Intent[] android.os.Bundle) with no options specified.
android.app.Activity.startActivities,Start activities.
android.app.Activity.startActivity,Same as startActivity(android.content.Intent android.os.Bundle) with no options specified.
android.app.Activity.startActivity,Start activity.
android.app.Activity.startActivity,Launch a new activity. You will not receive any information about when the activity exits. This implementation overrides the base version providing information about the activity performing the launch. Because of this additional information the Intent#FLAG_ACTIVITY_NEW_TASK launch flag is not required; if not specified the new activity will be added to the task of the caller. This method throws ActivityNotFoundException if there was no Activity found to run the given Intent.
android.app.Activity.startActivity,Start activity.
android.app.Activity.startActivity,Launch a new activity.
android.app.Activity.startActivity,You will not receive any information about when the activity exits.
android.app.Activity.startActivity,This implementation overrides the base version providing information about the activity performing the launch.
android.app.Activity.startActivity,Because of this additional information the Intent#FLAG_ACTIVITY_NEW_TASK launch flag is not required; if not specified the new activity will be added to the task of the caller.
android.app.Activity.startActivity,This method throws ActivityNotFoundException if there was no Activity found to run the given Intent.
android.app.Activity.startActivityForResult,Same as calling startActivityForResult(android.content.Intent int android.os.Bundle) with no options.
android.app.Activity.startActivityForResult,Start activity for result.
android.app.Activity.startActivityForResult,Launch an activity for which you would like a result when it finished. When this activity exits your onActivityResult() method will be called with the given requestCode. Using a negative requestCode is the same as calling startActivity(Intent) (the activity is not launched as a sub-activity). Note that this method should only be used with Intent protocols that are defined to return a result. In other protocols (such as Intent#ACTION_MAIN or Intent#ACTION_VIEW ) you may not get the result when you expect. For example if the activity you are launching uses Intent#FLAG_ACTIVITY_NEW_TASK it will not run in your task and thus you will immediately receive a cancel result. As a special case if you call startActivityForResult() with a requestCode >= 0 during the initial onCreate(Bundle savedInstanceState)/onResume() of your activity then your window will not be displayed until a result is returned back from the started activity. This is to avoid visible flickering when redirecting to another activity. This method throws ActivityNotFoundException if there was no Activity found to run the given Intent.
android.app.Activity.startActivityForResult,Start activity for result.
android.app.Activity.startActivityForResult,Launch an activity for which you would like a result when it finished.
android.app.Activity.startActivityForResult,When this activity exits your onActivityResult() method will be called with the given requestCode.
android.app.Activity.startActivityForResult,Using a negative requestCode is the same as calling startActivity(Intent) (the activity is not launched as a sub-activity).
android.app.Activity.startActivityForResult,Note that this method should only be used with Intent protocols that are defined to return a result.
android.app.Activity.startActivityForResult,In other protocols (such as Intent#ACTION_MAIN or Intent#ACTION_VIEW ) you may not get the result when you expect.
android.app.Activity.startActivityForResult,For example if the activity you are launching uses Intent#FLAG_ACTIVITY_NEW_TASK it will not run in your task and thus you will immediately receive a cancel result.
android.app.Activity.startActivityForResult,As a special case if you call startActivityForResult() with a requestCode >= 0 during the initial onCreate(Bundle savedInstanceState)/onResume() of your activity then your window will not be displayed until a result is returned back from the started activity.
android.app.Activity.startActivityForResult,This is to avoid visible flickering when redirecting to another activity.
android.app.Activity.startActivityForResult,This method throws ActivityNotFoundException if there was no Activity found to run the given Intent.
android.app.Activity.startActivityFromChild,Same as calling startActivityFromChild(android.app.Activity android.content.Intent int android.os.Bundle) with no options.
android.app.Activity.startActivityFromChild,Start activity from child.
android.app.Activity.startActivityFromChild,This is called when a child activity of this one calls its startActivity(Intent) or startActivityForResult(Intent int) method. This method throws ActivityNotFoundException if there was no Activity found to run the given Intent.
android.app.Activity.startActivityFromChild,Start activity from child.
android.app.Activity.startActivityFromChild,This is called when a child activity of this one calls its startActivity(Intent) or startActivityForResult(Intent int) method.
android.app.Activity.startActivityFromChild,This method throws ActivityNotFoundException if there was no Activity found to run the given Intent.
android.app.Activity.startActivityFromFragment,This method was deprecated in API level 28. Use FragmentActivity.startActivityFromFragment(android.support.v4.app.Fragment Intent int Bundle) This is called when a Fragment in this activity calls its Fragment#startActivity or Fragment#startActivityForResult method. This method throws ActivityNotFoundException if there was no Activity found to run the given Intent.
android.app.Activity.startActivityFromFragment,Start activity from fragment.
android.app.Activity.startActivityFromFragment,This method was deprecated in API level 28.
android.app.Activity.startActivityFromFragment,Use FragmentActivity.startActivityFromFragment(android.support.v4.app.Fragment Intent int Bundle) This is called when a Fragment in this activity calls its Fragment#startActivity or Fragment#startActivityForResult method.
android.app.Activity.startActivityFromFragment,This method throws ActivityNotFoundException if there was no Activity found to run the given Intent.
android.app.Activity.startActivityFromFragment,This method was deprecated in API level 28. Use FragmentActivity.startActivityFromFragment(android.support.v4.app.Fragment Intent int) Same as calling startActivityFromFragment(android.app.Fragment android.content.Intent int android.os.Bundle) with no options.
android.app.Activity.startActivityFromFragment,Start activity from fragment.
android.app.Activity.startActivityFromFragment,This method was deprecated in API level 28.
android.app.Activity.startActivityFromFragment,Use FragmentActivity.startActivityFromFragment(android.support.v4.app.Fragment Intent int) Same as calling startActivityFromFragment(android.app.Fragment android.content.Intent int android.os.Bundle) with no options.
android.app.Activity.startActivityIfNeeded,A special variation to launch an activity only if a new activity instance is needed to handle the given Intent. In other words this is just like startActivityForResult(android.content.Intent int) except: if you are using the Intent#FLAG_ACTIVITY_SINGLE_TOP flag or singleTask or singleTop launchMode and the activity that handles intent is the same as your currently running activity then a new instance is not needed. In this case instead of the normal behavior of calling onNewIntent(Intent) this function will return and you can handle the Intent yourself. This function can only be called from a top-level activity; if it is called from a child activity a runtime exception will be thrown.
android.app.Activity.startActivityIfNeeded,Start activity if needed.
android.app.Activity.startActivityIfNeeded,A special variation to launch an activity only if a new activity instance is needed to handle the given Intent.
android.app.Activity.startActivityIfNeeded,In other words this is just like startActivityForResult(android.content.Intent int) except: if you are using the Intent#FLAG_ACTIVITY_SINGLE_TOP flag or singleTask or singleTop launchMode and the activity that handles intent is the same as your currently running activity then a new instance is not needed.
android.app.Activity.startActivityIfNeeded,In this case instead of the normal behavior of calling onNewIntent(Intent) this function will return and you can handle the Intent yourself.
android.app.Activity.startActivityIfNeeded,This function can only be called from a top-level activity; if it is called from a child activity a runtime exception will be thrown.
android.app.Activity.startActivityIfNeeded,Same as calling startActivityIfNeeded(android.content.Intent int android.os.Bundle) with no options.
android.app.Activity.startActivityIfNeeded,Start activity if needed.
android.app.Activity.startIntentSender,Same as calling startIntentSender(android.content.IntentSender android.content.Intent int int int android.os.Bundle) with no options.
android.app.Activity.startIntentSender,Start intent sender.
android.app.Activity.startIntentSender,Like startActivity(android.content.Intent android.os.Bundle) but taking a IntentSender to start; see startIntentSenderForResult(android.content.IntentSender int android.content.Intent int int int android.os.Bundle) for more information.
android.app.Activity.startIntentSender,Start intent sender.
android.app.Activity.startIntentSenderForResult,Same as calling startIntentSenderForResult(android.content.IntentSender int android.content.Intent int int int android.os.Bundle) with no options.
android.app.Activity.startIntentSenderForResult,Start intent sender for result.
android.app.Activity.startIntentSenderForResult,Like startActivityForResult(android.content.Intent int) but allowing you to use a IntentSender to describe the activity to be started. If the IntentSender is for an activity that activity will be started as if you had called the regular startActivityForResult(android.content.Intent int) here; otherwise its associated action will be executed (such as sending a broadcast) as if you had called IntentSender#sendIntent on it.
android.app.Activity.startIntentSenderForResult,Start intent sender for result.
android.app.Activity.startIntentSenderForResult,Like startActivityForResult(android.content.Intent int) but allowing you to use a IntentSender to describe the activity to be started.
android.app.Activity.startIntentSenderForResult,If the IntentSender is for an activity that activity will be started as if you had called the regular startActivityForResult(android.content.Intent int) here; otherwise its associated action will be executed (such as sending a broadcast) as if you had called IntentSender#sendIntent on it.
android.app.Activity.startIntentSenderFromChild,Like startActivityFromChild(android.app.Activity android.content.Intent int) but taking a IntentSender; see startIntentSenderForResult(android.content.IntentSender int android.content.Intent int int int) for more information.
android.app.Activity.startIntentSenderFromChild,Start intent sender from child.
android.app.Activity.startIntentSenderFromChild,Same as calling startIntentSenderFromChild(android.app.Activity android.content.IntentSender int android.content.Intent int int int android.os.Bundle) with no options.
android.app.Activity.startIntentSenderFromChild,Start intent sender from child.
android.app.Activity.startNextMatchingActivity,Special version of starting an activity for use when you are replacing other activity components. You can use this to hand the Intent off to the next Activity that can handle it. You typically call this in onCreate(Bundle) with the Intent returned by getIntent().
android.app.Activity.startNextMatchingActivity,Start next matching activity.
android.app.Activity.startNextMatchingActivity,Special version of starting an activity for use when you are replacing other activity components.
android.app.Activity.startNextMatchingActivity,You can use this to hand the Intent off to the next Activity that can handle it.
android.app.Activity.startNextMatchingActivity,You typically call this in onCreate(Bundle) with the Intent returned by getIntent().
android.app.Activity.startNextMatchingActivity,Same as calling startNextMatchingActivity(android.content.Intent android.os.Bundle) with no options.
android.app.Activity.startNextMatchingActivity,Start next matching activity.
android.app.Activity.startPostponedEnterTransition,Begin postponed transitions after postponeEnterTransition() was called. If postponeEnterTransition() was called you must call startPostponedEnterTransition() to have your Activity start drawing.
android.app.Activity.startPostponedEnterTransition,Start postponed enter transition.
android.app.Activity.startPostponedEnterTransition,Begin postponed transitions after postponeEnterTransition() was called.
android.app.Activity.startPostponedEnterTransition,If postponeEnterTransition() was called you must call startPostponedEnterTransition() to have your Activity start drawing.
android.app.Activity.startSearch,This hook is called to launch the search UI. It is typically called from onSearchRequested() either directly from Activity.onSearchRequested() or from an overridden version in any given Activity. If your goal is simply to activate search it is preferred to call onSearchRequested() which may have been overridden elsewhere in your Activity. If your goal is to inject specific data such as context data it is preferred to override onSearchRequested() so that any callers to it will benefit from the override. Note: when running in a Configuration#UI_MODE_TYPE_WATCH use of this API is not supported.
android.app.Activity.startSearch,Start search.
android.app.Activity.startSearch,This hook is called to launch the search UI.
android.app.Activity.startSearch,It is typically called from onSearchRequested() either directly from Activity.onSearchRequested() or from an overridden version in any given Activity.
android.app.Activity.startSearch,If your goal is simply to activate search it is preferred to call onSearchRequested() which may have been overridden elsewhere in your Activity.
android.app.Activity.startSearch,If your goal is to inject specific data such as context data it is preferred to override onSearchRequested() so that any callers to it will benefit from the override.
android.app.Activity.startSearch,Note: when running in a Configuration#UI_MODE_TYPE_WATCH use of this API is not supported.
android.app.Activity.stopManagingCursor,This method was deprecated in API level 15. Use the new CursorLoader class with LoaderManager instead; this is also available on older platforms through the Android compatibility package. Given a Cursor that was previously given to startManagingCursor(Cursor) stop the activity's management of that cursor. Warning: After calling this method on a cursor from a managed query the system will not automatically close the cursor and you must call Cursor#close().
android.app.Activity.stopManagingCursor,Stop managing cursor.
android.app.Activity.stopManagingCursor,This method was deprecated in API level 15.
android.app.Activity.stopManagingCursor,Use the new CursorLoader class with LoaderManager instead; this is also available on older platforms through the Android compatibility package.
android.app.Activity.stopManagingCursor,Given a Cursor that was previously given to startManagingCursor(Cursor) stop the activity's management of that cursor.
android.app.Activity.stopManagingCursor,Warning: After calling this method on a cursor from a managed query the system will not automatically close the cursor and you must call Cursor#close().
android.app.Activity.takeKeyEvents,Request that key events come to this activity. Use this if your activity has no views with focus but the activity still wants a chance to process key events.
android.app.Activity.takeKeyEvents,Take key events.
android.app.Activity.takeKeyEvents,Request that key events come to this activity.
android.app.Activity.takeKeyEvents,Use this if your activity has no views with focus but the activity still wants a chance to process key events.
android.app.Activity.triggerSearch,Similar to startSearch(String boolean Bundle boolean) but actually fires off the search query after invoking the search dialog. Made available for testing purposes.
android.app.Activity.triggerSearch,Trigger search.
android.app.Activity.triggerSearch,Similar to startSearch(String boolean Bundle boolean) but actually fires off the search query after invoking the search dialog.
android.app.Activity.triggerSearch,Made available for testing purposes.
android.app.Activity.unregisterForContextMenu,Prevents a context menu to be shown for the given view. This method will remove the OnCreateContextMenuListener on the view.
android.app.Activity.unregisterForContextMenu,Unregister for context menu.
android.app.Activity.unregisterForContextMenu,Prevents a context menu to be shown for the given view.
android.app.Activity.unregisterForContextMenu,This method will remove the OnCreateContextMenuListener on the view.
android.app.ActivityManager.getDeviceConfigurationInfo,Get the device configuration attributes.
android.app.ActivityManager.getDeviceConfigurationInfo,Get device configuration info.
android.app.ActivityManager.getLargeMemoryClass,"Return the approximate per-application memory class of the current device when an application is running with a large heap. This is the space available for memory-intensive applications; most applications should not need this amount of memory and should instead stay with the getMemoryClass() limit. The returned value is in megabytes. This may be the same size as getMemoryClass() on memory constrained devices or it may be significantly larger on devices with a large amount of available RAM. This is the size of the application's Dalvik heap if it has specified android:largeHeap=""true"" in its manifest."
android.app.ActivityManager.getLargeMemoryClass,Get large memory class.
android.app.ActivityManager.getLargeMemoryClass,Return the approximate per-application memory class of the current device when an application is running with a large heap.
android.app.ActivityManager.getLargeMemoryClass,This is the space available for memory-intensive applications; most applications should not need this amount of memory and should instead stay with the getMemoryClass() limit.
android.app.ActivityManager.getLargeMemoryClass,The returned value is in megabytes.
android.app.ActivityManager.getLargeMemoryClass,This may be the same size as getMemoryClass() on memory constrained devices or it may be significantly larger on devices with a large amount of available RAM.
android.app.ActivityManager.getLargeMemoryClass,"This is the size of the application's Dalvik heap if it has specified android:largeHeap=""true"" in its manifest."
android.app.ActivityManager.getLauncherLargeIconDensity,Get the preferred density of icons for the launcher. This is used when custom drawables are created (e.g. for shortcuts).
android.app.ActivityManager.getLauncherLargeIconDensity,Get launcher large icon density.
android.app.ActivityManager.getLauncherLargeIconDensity,Get the preferred density of icons for the launcher.
android.app.ActivityManager.getLauncherLargeIconDensity,This is used when custom drawables are created (e.g.
android.app.ActivityManager.getLauncherLargeIconDensity,for shortcuts).
android.app.ActivityManager.getLauncherLargeIconSize,Get the preferred launcher icon size. This is used when custom drawables are created (e.g. for shortcuts).
android.app.ActivityManager.getLauncherLargeIconSize,Get launcher large icon size.
android.app.ActivityManager.getLauncherLargeIconSize,Get the preferred launcher icon size.
android.app.ActivityManager.getLauncherLargeIconSize,This is used when custom drawables are created (e.g.
android.app.ActivityManager.getLauncherLargeIconSize,for shortcuts).
android.app.ActivityManager.getMemoryClass,Return the approximate per-application memory class of the current device. This gives you an idea of how hard a memory limit you should impose on your application to let the overall system work best. The returned value is in megabytes; the baseline Android memory class is 16 (which happens to be the Java heap limit of those devices); some devices with more memory may return 24 or even higher numbers.
android.app.ActivityManager.getMemoryClass,Get memory class.
android.app.ActivityManager.getMemoryClass,Return the approximate per-application memory class of the current device.
android.app.ActivityManager.getMemoryClass,This gives you an idea of how hard a memory limit you should impose on your application to let the overall system work best.
android.app.ActivityManager.getMemoryClass,The returned value is in megabytes; the baseline Android memory class is 16 (which happens to be the Java heap limit of those devices); some devices with more memory may return 24 or even higher numbers.
android.app.ActivityManager.getProcessMemoryInfo,Return information about the memory usage of one or more processes. Note: this method is only intended for debugging or building a user-facing process management UI. As of Android Q for regular apps this method will only return information about the memory info for the processes running as the caller's uid; no other process memory info is available and will be zero. Also of Android Q the sample rate allowed by this API is significantly limited if called faster the limit you will receive the same data as the previous call.
android.app.ActivityManager.getProcessMemoryInfo,Get process memory info.
android.app.ActivityManager.getProcessMemoryInfo,Return information about the memory usage of one or more processes.
android.app.ActivityManager.getProcessMemoryInfo,Note: this method is only intended for debugging or building a user-facing process management UI.
android.app.ActivityManager.getProcessMemoryInfo,As of Android Q for regular apps this method will only return information about the memory info for the processes running as the caller's uid; no other process memory info is available and will be zero.
android.app.ActivityManager.getProcessMemoryInfo,Also of Android Q the sample rate allowed by this API is significantly limited if called faster the limit you will receive the same data as the previous call.
android.app.ActivityManager.getRecentTasks,This method was deprecated in API level 21. As of Build.VERSION_CODES.LOLLIPOP this method is no longer available to third party applications: the introduction of document-centric recents means it can leak personal information to the caller. For backwards compatibility it will still return a small subset of its data: at least the caller's own tasks (though see getAppTasks() for the correct supported way to retrieve that information) and possibly some other tasks such as home that are known to not be sensitive. Note: this method is only intended for debugging and presenting task management user interfaces. This should never be used for core logic in an application such as deciding between different behaviors based on the information found here. Such uses are not supported and will likely break in the future. For example if multiple applications can be actively running at the same time assumptions made about the meaning of the data here for purposes of control flow will be incorrect.
android.app.ActivityManager.getRecentTasks,Get recent tasks.
android.app.ActivityManager.getRecentTasks,This method was deprecated in API level 21.
android.app.ActivityManager.getRecentTasks,As of Build.VERSION_CODES.LOLLIPOP this method is no longer available to third party applications: the introduction of document-centric recents means it can leak personal information to the caller.
android.app.ActivityManager.getRecentTasks,For backwards compatibility it will still return a small subset of its data: at least the caller's own tasks (though see getAppTasks() for the correct supported way to retrieve that information) and possibly some other tasks such as home that are known to not be sensitive.
android.app.ActivityManager.getRecentTasks,Note: this method is only intended for debugging and presenting task management user interfaces.
android.app.ActivityManager.getRecentTasks,This should never be used for core logic in an application such as deciding between different behaviors based on the information found here.
android.app.ActivityManager.getRecentTasks,Such uses are not supported and will likely break in the future.
android.app.ActivityManager.getRecentTasks,For example if multiple applications can be actively running at the same time assumptions made about the meaning of the data here for purposes of control flow will be incorrect.
android.app.ActivityManager.getRunningAppProcesses,Returns a list of application processes that are running on the device. Note: this method is only intended for debugging or building a user-facing process management UI.
android.app.ActivityManager.getRunningAppProcesses,Get running app processes.
android.app.ActivityManager.getRunningAppProcesses,Returns a list of application processes that are running on the device.
android.app.ActivityManager.getRunningAppProcesses,Note: this method is only intended for debugging or building a user-facing process management UI.
android.app.ActivityManager.getRunningServices,This method was deprecated in API level 26. As of Build.VERSION_CODES.O this method is no longer available to third party applications. For backwards compatibility it will still return the caller's own services. Return a list of the services that are currently running. Note: this method is only intended for debugging or implementing service management type user interfaces.
android.app.ActivityManager.getRunningServices,Get running services.
android.app.ActivityManager.getRunningServices,This method was deprecated in API level 26.
android.app.ActivityManager.getRunningServices,As of Build.VERSION_CODES.O this method is no longer available to third party applications.
android.app.ActivityManager.getRunningServices,For backwards compatibility it will still return the caller's own services.
android.app.ActivityManager.getRunningServices,Return a list of the services that are currently running.
android.app.ActivityManager.getRunningServices,Note: this method is only intended for debugging or implementing service management type user interfaces.
android.app.ActivityManager.getRunningTasks,"This method was deprecated in API level 21. As of Build.VERSION_CODES.LOLLIPOP this method is no longer available to third party applications: the introduction of document-centric recents means it can leak person information to the caller. For backwards compatibility it will still return a small subset of its data: at least the caller's own tasks and possibly some other tasks such as home that are known to not be sensitive. Return a list of the tasks that are currently running with the most recent being first and older ones after in order. Note that ""running"" does not mean any of the task's code is currently loaded or activity -- the task may have been frozen by the system so that it can be restarted in its previous state when next brought to the foreground. Note: this method is only intended for debugging and presenting task management user interfaces. This should never be used for core logic in an application such as deciding between different behaviors based on the information found here. Such uses are not supported and will likely break in the future. For example if multiple applications can be actively running at the same time assumptions made about the meaning of the data here for purposes of control flow will be incorrect."
android.app.ActivityManager.getRunningTasks,Get running tasks.
android.app.ActivityManager.getRunningTasks,This method was deprecated in API level 21.
android.app.ActivityManager.getRunningTasks,As of Build.VERSION_CODES.LOLLIPOP this method is no longer available to third party applications: the introduction of document-centric recents means it can leak person information to the caller.
android.app.ActivityManager.getRunningTasks,For backwards compatibility it will still return a small subset of its data: at least the caller's own tasks and possibly some other tasks such as home that are known to not be sensitive.
android.app.ActivityManager.getRunningTasks,Return a list of the tasks that are currently running with the most recent being first and older ones after in order.
android.app.ActivityManager.getRunningTasks,"Note that ""running"" does not mean any of the task's code is currently loaded or activity -- the task may have been frozen by the system so that it can be restarted in its previous state when next brought to the foreground."
android.app.ActivityManager.getRunningTasks,Note: this method is only intended for debugging and presenting task management user interfaces.
android.app.ActivityManager.getRunningTasks,This should never be used for core logic in an application such as deciding between different behaviors based on the information found here.
android.app.ActivityManager.getRunningTasks,Such uses are not supported and will likely break in the future.
android.app.ActivityManager.getRunningTasks,For example if multiple applications can be actively running at the same time assumptions made about the meaning of the data here for purposes of control flow will be incorrect.
android.app.ActivityManager.isLowRamDevice,Returns true if this is a low-RAM device. Exactly whether a device is low-RAM is ultimately up to the device configuration but currently it generally means something with 1GB or less of RAM. This is mostly intended to be used by apps to determine whether they should turn off certain features that require more RAM.
android.app.ActivityManager.isLowRamDevice,Is low ram device.
android.app.ActivityManager.isLowRamDevice,Returns true if this is a low-RAM device.
android.app.ActivityManager.isLowRamDevice,Exactly whether a device is low-RAM is ultimately up to the device configuration but currently it generally means something with 1GB or less of RAM.
android.app.ActivityManager.isLowRamDevice,This is mostly intended to be used by apps to determine whether they should turn off certain features that require more RAM.
android.app.ActivityManager.isUserAMonkey,"Returns ""true"" if the user interface is currently being messed with by a monkey."
android.app.ActivityManager.isUserAMonkey,Is user a monkey.
android.app.ActivityManager.killBackgroundProcesses,Have the system immediately kill all background processes associated with the given package. This is the same as the kernel killing those processes to reclaim memory; the system will take care of restarting these processes in the future as needed. Requires Manifest.permission.KILL_BACKGROUND_PROCESSES.
android.app.ActivityManager.killBackgroundProcesses,Kill background processes.
android.app.ActivityManager.killBackgroundProcesses,Have the system immediately kill all background processes associated with the given package.
android.app.ActivityManager.killBackgroundProcesses,This is the same as the kernel killing those processes to reclaim memory; the system will take care of restarting these processes in the future as needed.
android.app.ActivityManager.killBackgroundProcesses,Requires Manifest.permission.KILL_BACKGROUND_PROCESSES.
android.app.ActivityManager.restartPackage,This method was deprecated in API level 15. This is now just a wrapper for killBackgroundProcesses(java.lang.String) ; the previous behavior here is no longer available to applications because it allows them to break other applications by removing their alarms stopping their services etc.
android.app.ActivityManager.restartPackage,Restart package.
android.app.ActivityManager.restartPackage,This method was deprecated in API level 15.
android.app.ActivityManager.restartPackage,This is now just a wrapper for killBackgroundProcesses(java.lang.String) ; the previous behavior here is no longer available to applications because it allows them to break other applications by removing their alarms stopping their services etc.
android.app.ActivityOptions.makeCustomAnimation,Create an ActivityOptions specifying a custom animation to run when the activity is displayed.
android.app.ActivityOptions.makeCustomAnimation,Make custom animation.
android.app.ActivityOptions.makeScaleUpAnimation,Create an ActivityOptions specifying an animation where the new activity is scaled from a small originating area of the screen to its final full representation. If the Intent this is being used with has not set its Intent.setSourceBounds those bounds will be filled in for you based on the initial bounds passed in here.
android.app.ActivityOptions.makeScaleUpAnimation,Make scale up animation.
android.app.ActivityOptions.makeScaleUpAnimation,Create an ActivityOptions specifying an animation where the new activity is scaled from a small originating area of the screen to its final full representation.
android.app.ActivityOptions.makeScaleUpAnimation,If the Intent this is being used with has not set its Intent.setSourceBounds those bounds will be filled in for you based on the initial bounds passed in here.
android.app.ActivityOptions.makeSceneTransitionAnimation,Create an ActivityOptions to transition between Activities using cross-Activity scene animations. This method carries the position of one shared element to the started Activity. The position of sharedElement will be used as the epicenter for the exit Transition. The position of the shared element in the launched Activity will be the epicenter of its entering Transition. This requires Window.FEATURE_ACTIVITY_TRANSITIONS to be enabled on the calling Activity to cause an exit transition. The same must be in the called Activity to get an entering transition.
android.app.ActivityOptions.makeSceneTransitionAnimation,Make scene transition animation.
android.app.ActivityOptions.makeSceneTransitionAnimation,Create an ActivityOptions to transition between Activities using cross-Activity scene animations.
android.app.ActivityOptions.makeSceneTransitionAnimation,This method carries the position of one shared element to the started Activity.
android.app.ActivityOptions.makeSceneTransitionAnimation,The position of sharedElement will be used as the epicenter for the exit Transition.
android.app.ActivityOptions.makeSceneTransitionAnimation,The position of the shared element in the launched Activity will be the epicenter of its entering Transition.
android.app.ActivityOptions.makeSceneTransitionAnimation,This requires Window.FEATURE_ACTIVITY_TRANSITIONS to be enabled on the calling Activity to cause an exit transition.
android.app.ActivityOptions.makeSceneTransitionAnimation,The same must be in the called Activity to get an entering transition.
android.app.ActivityOptions.makeSceneTransitionAnimation,Create an ActivityOptions to transition between Activities using cross-Activity scene animations. This method carries the position of multiple shared elements to the started Activity. The position of the first element in sharedElements will be used as the epicenter for the exit Transition. The position of the associated shared element in the launched Activity will be the epicenter of its entering Transition. This requires Window.FEATURE_ACTIVITY_TRANSITIONS to be enabled on the calling Activity to cause an exit transition. The same must be in the called Activity to get an entering transition.
android.app.ActivityOptions.makeSceneTransitionAnimation,Make scene transition animation.
android.app.ActivityOptions.makeSceneTransitionAnimation,Create an ActivityOptions to transition between Activities using cross-Activity scene animations.
android.app.ActivityOptions.makeSceneTransitionAnimation,This method carries the position of multiple shared elements to the started Activity.
android.app.ActivityOptions.makeSceneTransitionAnimation,The position of the first element in sharedElements will be used as the epicenter for the exit Transition.
android.app.ActivityOptions.makeSceneTransitionAnimation,The position of the associated shared element in the launched Activity will be the epicenter of its entering Transition.
android.app.ActivityOptions.makeSceneTransitionAnimation,This requires Window.FEATURE_ACTIVITY_TRANSITIONS to be enabled on the calling Activity to cause an exit transition.
android.app.ActivityOptions.makeSceneTransitionAnimation,The same must be in the called Activity to get an entering transition.
android.app.ActivityOptions.makeThumbnailScaleUpAnimation,Create an ActivityOptions specifying an animation where a thumbnail is scaled from a given position to the new activity window that is being started. If the Intent this is being used with has not set its Intent.setSourceBounds those bounds will be filled in for you based on the initial thumbnail location and size provided here.
android.app.ActivityOptions.makeThumbnailScaleUpAnimation,Make thumbnail scale up animation.
android.app.ActivityOptions.makeThumbnailScaleUpAnimation,Create an ActivityOptions specifying an animation where a thumbnail is scaled from a given position to the new activity window that is being started.
android.app.ActivityOptions.makeThumbnailScaleUpAnimation,If the Intent this is being used with has not set its Intent.setSourceBounds those bounds will be filled in for you based on the initial thumbnail location and size provided here.
android.app.ActivityOptions.toBundle,Returns the created options as a Bundle which can be passed to Context.startActivity(Intent Bundle) and related methods. Note that the returned Bundle is still owned by the ActivityOptions object; you must not modify it but can supply it to the startActivity methods that take an options Bundle.
android.app.ActivityOptions.toBundle,To bundle.
android.app.ActivityOptions.toBundle,Returns the created options as a Bundle which can be passed to Context.startActivity(Intent Bundle) and related methods.
android.app.ActivityOptions.toBundle,Note that the returned Bundle is still owned by the ActivityOptions object; you must not modify it but can supply it to the startActivity methods that take an options Bundle.
android.app.ActivityOptions.update,Update the current values in this ActivityOptions from those supplied in otherOptions. Any values defined in otherOptions replace those in the base options.
android.app.ActivityOptions.update,Update.
android.app.ActivityOptions.update,Update the current values in this ActivityOptions from those supplied in otherOptions.
android.app.ActivityOptions.update,Any values defined in otherOptions replace those in the base options.
android.app.AlarmManager.cancel,Remove any alarms with a matching Intent. Any alarm of any type whose Intent matches this one (as defined by Intent#filterEquals ) will be canceled.
android.app.AlarmManager.cancel,Cancel.
android.app.AlarmManager.cancel,Remove any alarms with a matching Intent.
android.app.AlarmManager.cancel,Any alarm of any type whose Intent matches this one (as defined by Intent#filterEquals ) will be canceled.
android.app.AlarmManager.cancel,Remove any alarm scheduled to be delivered to the given OnAlarmListener.
android.app.AlarmManager.cancel,Cancel.
android.app.AlarmManager.set,Schedule an alarm. Note: for timing operations (ticks timeouts etc) it is easier and much more efficient to use Handler. If there is already an alarm scheduled for the same IntentSender that previous alarm will first be canceled. If the stated trigger time is in the past the alarm will be triggered immediately. If there is already an alarm for this Intent scheduled (with the equality of two intents being defined by Intent#filterEquals ) then it will be removed and replaced by this one. The alarm is an Intent broadcast that goes to a broadcast receiver that you registered with Context.registerReceiver(BroadcastReceiver IntentFilter) or through the <receiver> tag in an AndroidManifest.xml file. Alarm intents are delivered with a data extra of type int called Intent#EXTRA_ALARM_COUNT that indicates how many past alarm events have been accumulated into this intent broadcast. Recurring alarms that have gone undelivered because the phone was asleep may have a count greater than one when delivered.
android.app.AlarmManager.set,Set.
android.app.AlarmManager.set,Schedule an alarm.
android.app.AlarmManager.set,Note: for timing operations (ticks timeouts etc) it is easier and much more efficient to use Handler.
android.app.AlarmManager.set,If there is already an alarm scheduled for the same IntentSender that previous alarm will first be canceled.
android.app.AlarmManager.set,If the stated trigger time is in the past the alarm will be triggered immediately.
android.app.AlarmManager.set,If there is already an alarm for this Intent scheduled (with the equality of two intents being defined by Intent#filterEquals ) then it will be removed and replaced by this one.
android.app.AlarmManager.set,The alarm is an Intent broadcast that goes to a broadcast receiver that you registered with Context.registerReceiver(BroadcastReceiver IntentFilter) or through the <receiver> tag in an AndroidManifest.xml file.
android.app.AlarmManager.set,Alarm intents are delivered with a data extra of type int called Intent#EXTRA_ALARM_COUNT that indicates how many past alarm events have been accumulated into this intent broadcast.
android.app.AlarmManager.set,Recurring alarms that have gone undelivered because the phone was asleep may have a count greater than one when delivered.
android.app.AlarmManager.set,Direct callback version of set(int long android.app.PendingIntent). Rather than supplying a PendingIntent to be sent when the alarm time is reached this variant supplies an OnAlarmListener instance that will be invoked at that time. The OnAlarmListener's OnAlarmListener#onAlarm() method will be invoked via the specified target Handler or on the application's main looper if null is passed as the targetHandler parameter.
android.app.AlarmManager.set,Set.
android.app.AlarmManager.set,Direct callback version of set(int long android.app.PendingIntent).
android.app.AlarmManager.set,Rather than supplying a PendingIntent to be sent when the alarm time is reached this variant supplies an OnAlarmListener instance that will be invoked at that time.
android.app.AlarmManager.set,The OnAlarmListener's OnAlarmListener#onAlarm() method will be invoked via the specified target Handler or on the application's main looper if null is passed as the targetHandler parameter.
android.app.AlarmManager.setExact,Schedule an alarm to be delivered precisely at the stated time. This method is like set(int long android.app.PendingIntent) but does not permit the OS to adjust the delivery time. The alarm will be delivered as nearly as possible to the requested trigger time. Note: only alarms for which there is a strong demand for exact-time delivery (such as an alarm clock ringing at the requested time) should be scheduled as exact. Applications are strongly discouraged from using exact alarms unnecessarily as they reduce the OS's ability to minimize battery use.
android.app.AlarmManager.setExact,Set exact.
android.app.AlarmManager.setExact,Schedule an alarm to be delivered precisely at the stated time.
android.app.AlarmManager.setExact,This method is like set(int long android.app.PendingIntent) but does not permit the OS to adjust the delivery time.
android.app.AlarmManager.setExact,The alarm will be delivered as nearly as possible to the requested trigger time.
android.app.AlarmManager.setExact,Note: only alarms for which there is a strong demand for exact-time delivery (such as an alarm clock ringing at the requested time) should be scheduled as exact.
android.app.AlarmManager.setExact,Applications are strongly discouraged from using exact alarms unnecessarily as they reduce the OS's ability to minimize battery use.
android.app.AlarmManager.setExact,Direct callback version of setExact(int long android.app.PendingIntent). Rather than supplying a PendingIntent to be sent when the alarm time is reached this variant supplies an OnAlarmListener instance that will be invoked at that time. The OnAlarmListener's OnAlarmListener#onAlarm() method will be invoked via the specified target Handler or on the application's main looper if null is passed as the targetHandler parameter.
android.app.AlarmManager.setExact,Set exact.
android.app.AlarmManager.setExact,Direct callback version of setExact(int long android.app.PendingIntent).
android.app.AlarmManager.setExact,Rather than supplying a PendingIntent to be sent when the alarm time is reached this variant supplies an OnAlarmListener instance that will be invoked at that time.
android.app.AlarmManager.setExact,The OnAlarmListener's OnAlarmListener#onAlarm() method will be invoked via the specified target Handler or on the application's main looper if null is passed as the targetHandler parameter.
android.app.AlarmManager.setInexactRepeating,Schedule a repeating alarm that has inexact trigger time requirements; for example an alarm that repeats every hour but not necessarily at the top of every hour. These alarms are more power-efficient than the strict recurrences traditionally supplied by setRepeating(int long long PendingIntent) since the system can adjust alarms' delivery times to cause them to fire simultaneously avoiding waking the device from sleep more than necessary. Your alarm's first trigger will not be before the requested time but it might not occur for almost a full interval after that time. In addition while the overall period of the repeating alarm will be as requested the time between any two successive firings of the alarm may vary. If your application demands very low jitter use one-shot alarms with an appropriate window instead; see setWindow(int long long android.app.PendingIntent) and setExact(int long android.app.PendingIntent). As of API 19 all repeating alarms are inexact. Because this method has been available since API 3 your application can safely call it and be assured that it will get similar behavior on both current and older versions of Android.
android.app.AlarmManager.setInexactRepeating,Set inexact repeating.
android.app.AlarmManager.setInexactRepeating,Schedule a repeating alarm that has inexact trigger time requirements; for example an alarm that repeats every hour but not necessarily at the top of every hour.
android.app.AlarmManager.setInexactRepeating,These alarms are more power-efficient than the strict recurrences traditionally supplied by setRepeating(int long long PendingIntent) since the system can adjust alarms' delivery times to cause them to fire simultaneously avoiding waking the device from sleep more than necessary.
android.app.AlarmManager.setInexactRepeating,Your alarm's first trigger will not be before the requested time but it might not occur for almost a full interval after that time.
android.app.AlarmManager.setInexactRepeating,In addition while the overall period of the repeating alarm will be as requested the time between any two successive firings of the alarm may vary.
android.app.AlarmManager.setInexactRepeating,If your application demands very low jitter use one-shot alarms with an appropriate window instead; see setWindow(int long long android.app.PendingIntent) and setExact(int long android.app.PendingIntent).
android.app.AlarmManager.setInexactRepeating,As of API 19 all repeating alarms are inexact.
android.app.AlarmManager.setInexactRepeating,Because this method has been available since API 3 your application can safely call it and be assured that it will get similar behavior on both current and older versions of Android.
android.app.AlarmManager.setRepeating,Schedule a repeating alarm. Note: for timing operations (ticks timeouts etc) it is easier and much more efficient to use Handler. If there is already an alarm scheduled for the same IntentSender it will first be canceled. Like set(int long PendingIntent) except you can also supply a period at which the alarm will automatically repeat. This alarm continues repeating until explicitly removed with cancel(AlarmManager.OnAlarmListener). If the stated trigger time is in the past the alarm will be triggered immediately with an alarm count depending on how far in the past the trigger time is relative to the repeat interval. If an alarm is delayed (by system sleep for example for non _WAKEUP alarm types) a skipped repeat will be delivered as soon as possible. After that future alarms will be delivered according to the original schedule; they do not drift over time. For example if you have set a recurring alarm for the top of every hour but the phone was asleep from 7:45 until 8:45 an alarm will be sent as soon as the phone awakens then the next alarm will be sent at 9:00. If your application wants to allow the delivery times to drift in order to guarantee that at least a certain time interval always elapses between alarms then the approach to take is to use one-time alarms scheduling the next one yourself when handling each alarm delivery. Note: as of API 19 all repeating alarms are inexact. If your application needs precise delivery times then it must use one-time exact alarms rescheduling each time as described above. Legacy applications whose targetSdkVersion is earlier than API 19 will continue to have all of their alarms including repeating alarms treated as exact.
android.app.AlarmManager.setRepeating,Set repeating.
android.app.AlarmManager.setRepeating,Schedule a repeating alarm.
android.app.AlarmManager.setRepeating,Note: for timing operations (ticks timeouts etc) it is easier and much more efficient to use Handler.
android.app.AlarmManager.setRepeating,If there is already an alarm scheduled for the same IntentSender it will first be canceled.
android.app.AlarmManager.setRepeating,Like set(int long PendingIntent) except you can also supply a period at which the alarm will automatically repeat.
android.app.AlarmManager.setRepeating,This alarm continues repeating until explicitly removed with cancel(AlarmManager.OnAlarmListener).
android.app.AlarmManager.setRepeating,If the stated trigger time is in the past the alarm will be triggered immediately with an alarm count depending on how far in the past the trigger time is relative to the repeat interval.
android.app.AlarmManager.setRepeating,If an alarm is delayed (by system sleep for example for non _WAKEUP alarm types) a skipped repeat will be delivered as soon as possible.
android.app.AlarmManager.setRepeating,After that future alarms will be delivered according to the original schedule; they do not drift over time.
android.app.AlarmManager.setRepeating,For example if you have set a recurring alarm for the top of every hour but the phone was asleep from 7:45 until 8:45 an alarm will be sent as soon as the phone awakens then the next alarm will be sent at 9:00.
android.app.AlarmManager.setRepeating,If your application wants to allow the delivery times to drift in order to guarantee that at least a certain time interval always elapses between alarms then the approach to take is to use one-time alarms scheduling the next one yourself when handling each alarm delivery.
android.app.AlarmManager.setRepeating,Note: as of API 19 all repeating alarms are inexact.
android.app.AlarmManager.setRepeating,If your application needs precise delivery times then it must use one-time exact alarms rescheduling each time as described above.
android.app.AlarmManager.setRepeating,Legacy applications whose targetSdkVersion is earlier than API 19 will continue to have all of their alarms including repeating alarms treated as exact.
android.app.AlertDialog.getButton,Gets one of the buttons used in the dialog. Returns null if the specified button does not exist or the dialog has not yet been fully created (for example via Dialog.show() or Dialog.create() ).
android.app.AlertDialog.getButton,Get button.
android.app.AlertDialog.getButton,Gets one of the buttons used in the dialog.
android.app.AlertDialog.getButton,Returns null if the specified button does not exist or the dialog has not yet been fully created (for example via Dialog.show() or Dialog.create() ).
android.app.AlertDialog.getListView,Gets the list view used in the dialog.
android.app.AlertDialog.getListView,Get list view.
android.app.AlertDialog.setIcon,.
android.app.AlertDialog.setIcon,Set icon.
android.app.AlertDialog.setIcon,Set resId to 0 if you don't want an icon.
android.app.AlertDialog.setIcon,Set icon.
android.app.AlertDialog.setTitle,Set the title text for this dialog's window.
android.app.AlertDialog.setTitle,Set title.
android.app.AlertDialog.setView,Set the view to display in that dialog specifying the spacing to appear around that view.
android.app.AlertDialog.setView,Set view.
android.app.AlertDialog.setView,Set the view to display in that dialog.
android.app.AlertDialog.setView,Set view.
android.app.Application.onConfigurationChanged,Called by the system when the device configuration changes while your component is running. Note that unlike activities other components are never restarted when a configuration changes: they must always deal with the results of the change such as by re-retrieving resources. At the time that this function has been called your Resources object will have been updated to return resource values matching the new configuration. For more information read Handling Runtime Changes. If you override this method you must call through to the superclass implementation.
android.app.Application.onConfigurationChanged,On configuration changed.
android.app.Application.onConfigurationChanged,Called by the system when the device configuration changes while your component is running.
android.app.Application.onConfigurationChanged,Note that unlike activities other components are never restarted when a configuration changes: they must always deal with the results of the change such as by re-retrieving resources.
android.app.Application.onConfigurationChanged,At the time that this function has been called your Resources object will have been updated to return resource values matching the new configuration.
android.app.Application.onConfigurationChanged,For more information read Handling Runtime Changes.
android.app.Application.onConfigurationChanged,If you override this method you must call through to the superclass implementation.
android.app.Application.onCreate,Called when the application is starting before any activity service or receiver objects (excluding content providers) have been created. Implementations should be as quick as possible (for example using lazy initialization of state) since the time spent in this function directly impacts the performance of starting the first activity service or receiver in a process. If you override this method be sure to call super.onCreate(). Be aware that direct boot may also affect callback order on Android Build.VERSION_CODES.N and later devices. Until the user unlocks the device only direct boot aware components are allowed to run. You should consider that all direct boot unaware components including such ContentProvider are disabled until user unlock happens especially when component callback order matters.
android.app.Application.onCreate,On create.
android.app.Application.onCreate,Called when the application is starting before any activity service or receiver objects (excluding content providers) have been created.
android.app.Application.onCreate,Implementations should be as quick as possible (for example using lazy initialization of state) since the time spent in this function directly impacts the performance of starting the first activity service or receiver in a process.
android.app.Application.onCreate,If you override this method be sure to call super.onCreate().
android.app.Application.onCreate,Be aware that direct boot may also affect callback order on Android Build.VERSION_CODES.N and later devices.
android.app.Application.onCreate,Until the user unlocks the device only direct boot aware components are allowed to run.
android.app.Application.onCreate,You should consider that all direct boot unaware components including such ContentProvider are disabled until user unlock happens especially when component callback order matters.
android.app.Application.onTerminate,This method is for use in emulated process environments. It will never be called on a production Android device where processes are removed by simply killing them; no user code (including this callback) is executed when doing so. If you override this method you must call through to the superclass implementation.
android.app.Application.onTerminate,On terminate.
android.app.Application.onTerminate,This method is for use in emulated process environments.
android.app.Application.onTerminate,It will never be called on a production Android device where processes are removed by simply killing them; no user code (including this callback) is executed when doing so.
android.app.Application.onTerminate,If you override this method you must call through to the superclass implementation.
android.app.Application.registerComponentCallbacks,Add a new ComponentCallbacks to the base application of the Context which will be called at the same times as the ComponentCallbacks methods of activities and other components are called. Note that you must be sure to use unregisterComponentCallbacks(ComponentCallbacks) when appropriate in the future; this will not be removed for you.
android.app.Application.registerComponentCallbacks,Register component callbacks.
android.app.Application.registerComponentCallbacks,Add a new ComponentCallbacks to the base application of the Context which will be called at the same times as the ComponentCallbacks methods of activities and other components are called.
android.app.Application.registerComponentCallbacks,Note that you must be sure to use unregisterComponentCallbacks(ComponentCallbacks) when appropriate in the future; this will not be removed for you.
android.app.AppOpsManager.checkOp,This method was deprecated in API level 29. Renamed to unsafeCheckOp(java.lang.String int java.lang.String).
android.app.AppOpsManager.checkOp,Check op.
android.app.AppOpsManager.checkOp,This method was deprecated in API level 29.
android.app.AppOpsManager.checkOp,Renamed to unsafeCheckOp(java.lang.String int java.lang.String).
android.app.AppOpsManager.checkOpNoThrow,This method was deprecated in API level 29. Renamed to unsafeCheckOpNoThrow(java.lang.String int java.lang.String).
android.app.AppOpsManager.checkOpNoThrow,Check op no throw.
android.app.AppOpsManager.checkOpNoThrow,This method was deprecated in API level 29.
android.app.AppOpsManager.checkOpNoThrow,Renamed to unsafeCheckOpNoThrow(java.lang.String int java.lang.String).
android.app.AppOpsManager.checkPackage,Do a quick check to validate if a package name belongs to a UID.
android.app.AppOpsManager.checkPackage,Check package.
android.app.DatePickerDialog.updateDate,Sets the current date.
android.app.DatePickerDialog.updateDate,Update date.
android.app.Dialog.cancel,Cancel the dialog. This is essentially the same as calling dismiss() but it will also call your DialogInterface.OnCancelListener (if registered).
android.app.Dialog.cancel,Cancel.
android.app.Dialog.cancel,Cancel the dialog.
android.app.Dialog.cancel,This is essentially the same as calling dismiss() but it will also call your DialogInterface.OnCancelListener (if registered).
android.app.Dialog.dismiss,Dismiss this dialog removing it from the screen. This method can be invoked safely from any thread. Note that you should not override this method to do cleanup when the dialog is dismissed instead implement that in onStop().
android.app.Dialog.dismiss,Dismiss.
android.app.Dialog.dismiss,Dismiss this dialog removing it from the screen.
android.app.Dialog.dismiss,This method can be invoked safely from any thread.
android.app.Dialog.dismiss,Note that you should not override this method to do cleanup when the dialog is dismissed instead implement that in onStop().
android.app.Dialog.findViewById,Finds the first descendant view with the given ID or null if the ID is invalid (< 0) there is no matching view in the hierarchy or the dialog has not yet been fully created (for example via show() or create() ). Note: In most cases -- depending on compiler support -- the resulting view is automatically cast to the target class type. If the target class type is unconstrained an explicit cast may be necessary.
android.app.Dialog.findViewById,Find view by id.
android.app.Dialog.findViewById,Finds the first descendant view with the given ID or null if the ID is invalid (< 0) there is no matching view in the hierarchy or the dialog has not yet been fully created (for example via show() or create() ).
android.app.Dialog.findViewById,Note: In most cases -- depending on compiler support -- the resulting view is automatically cast to the target class type.
android.app.Dialog.findViewById,If the target class type is unconstrained an explicit cast may be necessary.
android.app.Dialog.getContext,Retrieve the Context this Dialog is running in.
android.app.Dialog.getContext,Get context.
android.app.Dialog.hide,Hide the dialog but do not dismiss it.
android.app.Dialog.hide,Hide.
android.app.Dialog.onAttachedToWindow,Called when the window has been attached to the window manager. See View#onAttachedToWindow() for more information.
android.app.Dialog.onAttachedToWindow,On attached to window.
android.app.Dialog.onAttachedToWindow,Called when the window has been attached to the window manager.
android.app.Dialog.onAttachedToWindow,See View#onAttachedToWindow() for more information.
android.app.Dialog.onBackPressed,Called when the dialog has detected the user's press of the back key. The default implementation simply cancels the dialog (only if it is cancelable) but you can override this to do whatever you want.
android.app.Dialog.onBackPressed,On back pressed.
android.app.Dialog.onBackPressed,Called when the dialog has detected the user's press of the back key.
android.app.Dialog.onBackPressed,The default implementation simply cancels the dialog (only if it is cancelable) but you can override this to do whatever you want.
android.app.Dialog.onKeyDown,A key was pressed down. If the focused view didn't want this event this method is called. Default implementation consumes KeyEvent#KEYCODE_BACK and as of P KeyEvent#KEYCODE_ESCAPE to later handle them in onKeyUp(int KeyEvent).
android.app.Dialog.onKeyDown,On key down.
android.app.Dialog.onKeyDown,A key was pressed down.
android.app.Dialog.onKeyDown,If the focused view didn't want this event this method is called.
android.app.Dialog.onKeyDown,Default implementation consumes KeyEvent#KEYCODE_BACK and as of P KeyEvent#KEYCODE_ESCAPE to later handle them in onKeyUp(int KeyEvent).
android.app.Dialog.onKeyUp,A key was released. Default implementation consumes KeyEvent#KEYCODE_BACK and as of P KeyEvent#KEYCODE_ESCAPE to close the dialog.
android.app.Dialog.onKeyUp,On key up.
android.app.Dialog.onKeyUp,A key was released.
android.app.Dialog.onKeyUp,Default implementation consumes KeyEvent#KEYCODE_BACK and as of P KeyEvent#KEYCODE_ESCAPE to close the dialog.
android.app.Dialog.onRestoreInstanceState,Restore the state of the dialog from a previously saved bundle. The default implementation restores the state of the dialog's view hierarchy that was saved in the default implementation of onSaveInstanceState() so be sure to call through to super when overriding unless you want to do all restoring of state yourself.
android.app.Dialog.onRestoreInstanceState,On restore instance state.
android.app.Dialog.onRestoreInstanceState,Restore the state of the dialog from a previously saved bundle.
android.app.Dialog.onRestoreInstanceState,The default implementation restores the state of the dialog's view hierarchy that was saved in the default implementation of onSaveInstanceState() so be sure to call through to super when overriding unless you want to do all restoring of state yourself.
android.app.Dialog.onSaveInstanceState,Saves the state of the dialog into a bundle. The default implementation saves the state of its view hierarchy so you'll likely want to call through to super if you override this to save additional state.
android.app.Dialog.onSaveInstanceState,On save instance state.
android.app.Dialog.onSaveInstanceState,Saves the state of the dialog into a bundle.
android.app.Dialog.onSaveInstanceState,The default implementation saves the state of its view hierarchy so you'll likely want to call through to super if you override this to save additional state.
android.app.Dialog.onWindowFocusChanged,This hook is called whenever the window focus changes. See View#onWindowFocusChanged(boolean) for more information.
android.app.Dialog.onWindowFocusChanged,On window focus changed.
android.app.Dialog.onWindowFocusChanged,This hook is called whenever the window focus changes.
android.app.Dialog.onWindowFocusChanged,See View#onWindowFocusChanged(boolean) for more information.
android.app.Dialog.setCancelable,Sets whether this dialog is cancelable with the KeyEvent#KEYCODE_BACK key.
android.app.Dialog.setCancelable,Set cancelable.
android.app.Dialog.setCanceledOnTouchOutside,Sets whether this dialog is canceled when touched outside the window's bounds. If setting to true the dialog is set to be cancelable if not already set.
android.app.Dialog.setCanceledOnTouchOutside,Set canceled on touch outside.
android.app.Dialog.setCanceledOnTouchOutside,Sets whether this dialog is canceled when touched outside the window's bounds.
android.app.Dialog.setCanceledOnTouchOutside,If setting to true the dialog is set to be cancelable if not already set.
android.app.Dialog.setContentView,Set the screen content from a layout resource. The resource will be inflated adding all top-level views to the screen.
android.app.Dialog.setContentView,Set content view.
android.app.Dialog.setContentView,Set the screen content from a layout resource.
android.app.Dialog.setContentView,The resource will be inflated adding all top-level views to the screen.
android.app.Dialog.setContentView,Set the screen content to an explicit view. This view is placed directly into the screen's view hierarchy. It can itself be a complex view hierarchy.
android.app.Dialog.setContentView,Set content view.
android.app.Dialog.setContentView,Set the screen content to an explicit view.
android.app.Dialog.setContentView,This view is placed directly into the screen's view hierarchy.
android.app.Dialog.setContentView,It can itself be a complex view hierarchy.
android.app.Dialog.setContentView,Set the screen content to an explicit view. This view is placed directly into the screen's view hierarchy. It can itself be a complex view hierarchy.
android.app.Dialog.setContentView,Set content view.
android.app.Dialog.setContentView,Set the screen content to an explicit view.
android.app.Dialog.setContentView,This view is placed directly into the screen's view hierarchy.
android.app.Dialog.setContentView,It can itself be a complex view hierarchy.
android.app.Dialog.setDismissMessage,Set a message to be sent when the dialog is dismissed.
android.app.Dialog.setDismissMessage,Set dismiss message.
android.app.Dialog.setOwnerActivity,Sets the Activity that owns this dialog. An example use: This Dialog will use the suggested volume control stream of the Activity.
android.app.Dialog.setOwnerActivity,Set owner activity.
android.app.Dialog.setOwnerActivity,Sets the Activity that owns this dialog.
android.app.Dialog.setOwnerActivity,An example use: This Dialog will use the suggested volume control stream of the Activity.
android.app.Dialog.show,Start the dialog and display it on screen. The window is placed in the application layer and opaque. Note that you should not override this method to do initialization when the dialog is shown instead implement that in onStart().
android.app.Dialog.show,Show.
android.app.Dialog.show,Start the dialog and display it on screen.
android.app.Dialog.show,The window is placed in the application layer and opaque.
android.app.Dialog.show,Note that you should not override this method to do initialization when the dialog is shown instead implement that in onStart().
android.app.DialogFragment.dismiss,Dismiss the fragment and its dialog. If the fragment was added to the back stack all back stack state up to and including this entry will be popped. Otherwise a new transaction will be committed to remove the fragment.
android.app.DialogFragment.dismiss,Dismiss.
android.app.DialogFragment.dismiss,Dismiss the fragment and its dialog.
android.app.DialogFragment.dismiss,If the fragment was added to the back stack all back stack state up to and including this entry will be popped.
android.app.DialogFragment.dismiss,Otherwise a new transaction will be committed to remove the fragment.
android.app.DialogFragment.onCreate,Called to do initial creation of a fragment. This is called after onAttach(android.app.Activity) and before onCreateView(android.view.LayoutInflater android.view.ViewGroup android.os.Bundle) but is not called if the fragment instance is retained across Activity re-creation (see setRetainInstance(boolean) ). Note that this can be called while the fragment's activity is still in the process of being created. As such you can not rely on things like the activity's content view hierarchy being initialized at this point. If you want to do work once the activity itself is created see onActivityCreated(android.os.Bundle). If your app's targetSdkVersion is Build.VERSION_CODES.M or lower child fragments being restored from the savedInstanceState are restored after onCreate returns. When targeting Build.VERSION_CODES.N or above and running on an N or newer platform version they are restored by Fragment.onCreate.
android.app.DialogFragment.onCreate,On create.
android.app.DialogFragment.onCreate,Called to do initial creation of a fragment.
android.app.DialogFragment.onCreate,This is called after onAttach(android.app.Activity) and before onCreateView(android.view.LayoutInflater android.view.ViewGroup android.os.Bundle) but is not called if the fragment instance is retained across Activity re-creation (see setRetainInstance(boolean) ).
android.app.DialogFragment.onCreate,Note that this can be called while the fragment's activity is still in the process of being created.
android.app.DialogFragment.onCreate,As such you can not rely on things like the activity's content view hierarchy being initialized at this point.
android.app.DialogFragment.onCreate,If you want to do work once the activity itself is created see onActivityCreated(android.os.Bundle).
android.app.DialogFragment.onCreate,If your app's targetSdkVersion is Build.VERSION_CODES.M or lower child fragments being restored from the savedInstanceState are restored after onCreate returns.
android.app.DialogFragment.onCreate,When targeting Build.VERSION_CODES.N or above and running on an N or newer platform version they are restored by Fragment.onCreate.
android.app.DialogFragment.onStart,Called when the Fragment is visible to the user. This is generally tied to Activity#onStart() of the containing Activity's lifecycle. If you override this method you must call through to the superclass implementation.
android.app.DialogFragment.onStart,On start.
android.app.DialogFragment.onStart,Called when the Fragment is visible to the user.
android.app.DialogFragment.onStart,This is generally tied to Activity#onStart() of the containing Activity's lifecycle.
android.app.DialogFragment.onStart,If you override this method you must call through to the superclass implementation.
android.app.DialogFragment.show,Display the dialog adding the fragment to the given FragmentManager. This is a convenience for explicitly creating a transaction adding the fragment to it with the given tag and committing it. This does not add the transaction to the back stack. When the fragment is dismissed a new transaction will be executed to remove it from the activity.
android.app.DialogFragment.show,Show.
android.app.DialogFragment.show,Display the dialog adding the fragment to the given FragmentManager.
android.app.DialogFragment.show,This is a convenience for explicitly creating a transaction adding the fragment to it with the given tag and committing it.
android.app.DialogFragment.show,This does not add the transaction to the back stack.
android.app.DialogFragment.show,When the fragment is dismissed a new transaction will be executed to remove it from the activity.
android.app.DialogFragment.show,Display the dialog adding the fragment using an existing transaction and then committing the transaction.
android.app.DialogFragment.show,Show.
android.app.DownloadManager.getMaxBytesOverMobile,Returns maximum size in bytes of downloads that may go over a mobile connection; or null if there's no limit.
android.app.DownloadManager.getMaxBytesOverMobile,Get max bytes over mobile.
android.app.DownloadManager.getMimeTypeForDownloadedFile,Returns the media type of the given downloaded file id if the file was downloaded successfully. Otherwise null is returned.
android.app.DownloadManager.getMimeTypeForDownloadedFile,Get mime type for downloaded file.
android.app.DownloadManager.getMimeTypeForDownloadedFile,Returns the media type of the given downloaded file id if the file was downloaded successfully.
android.app.DownloadManager.getMimeTypeForDownloadedFile,Otherwise null is returned.
android.app.DownloadManager.getRecommendedMaxBytesOverMobile,Returns recommended maximum size in bytes of downloads that may go over a mobile connection; or null if there's no recommended limit. The user will have the option to bypass this limit.
android.app.DownloadManager.getRecommendedMaxBytesOverMobile,Get recommended max bytes over mobile.
android.app.DownloadManager.getRecommendedMaxBytesOverMobile,Returns recommended maximum size in bytes of downloads that may go over a mobile connection; or null if there's no recommended limit.
android.app.DownloadManager.getRecommendedMaxBytesOverMobile,The user will have the option to bypass this limit.
android.app.DownloadManager.getUriForDownloadedFile,Returns the Uri of the given downloaded file id if the file is downloaded successfully. Otherwise null is returned.
android.app.DownloadManager.getUriForDownloadedFile,Get uri for downloaded file.
android.app.DownloadManager.getUriForDownloadedFile,Returns the Uri of the given downloaded file id if the file is downloaded successfully.
android.app.DownloadManager.getUriForDownloadedFile,Otherwise null is returned.
android.app.Fragment.getActivity,Return the Activity this fragment is currently associated with.
android.app.Fragment.getActivity,Get activity.
android.app.Fragment.getArguments,Return the arguments supplied to setArguments(Bundle) if any.
android.app.Fragment.getArguments,Get arguments.
android.app.Fragment.getId,Return the identifier this fragment is known by. This is either the android:id value supplied in a layout or the container view ID supplied when adding the fragment.
android.app.Fragment.getId,Get id.
android.app.Fragment.getId,Return the identifier this fragment is known by.
android.app.Fragment.getId,This is either the android:id value supplied in a layout or the container view ID supplied when adding the fragment.
android.app.Fragment.getParentFragment,Returns the parent Fragment containing this Fragment. If this Fragment is attached directly to an Activity returns null.
android.app.Fragment.getParentFragment,Get parent fragment.
android.app.Fragment.getParentFragment,Returns the parent Fragment containing this Fragment.
android.app.Fragment.getParentFragment,If this Fragment is attached directly to an Activity returns null.
android.app.Fragment.getResources,Return getActivity().getResources().
android.app.Fragment.getResources,Get resources.
android.app.Fragment.getTag,Get the tag name of the fragment if specified.
android.app.Fragment.getTag,Get tag.
android.app.Fragment.getTargetFragment,Return the target fragment set by setTargetFragment(Fragment int).
android.app.Fragment.getTargetFragment,Get target fragment.
android.app.Fragment.getTargetRequestCode,Return the target request code set by setTargetFragment(Fragment int).
android.app.Fragment.getTargetRequestCode,Get target request code.
android.app.Fragment.getView,Get the root view for the fragment's layout (the one returned by onCreateView(LayoutInflater ViewGroup Bundle) ) if provided.
android.app.Fragment.getView,Get view.
android.app.Fragment.instantiate,Like instantiate(android.content.Context java.lang.String android.os.Bundle) but with a null argument Bundle.
android.app.Fragment.instantiate,Instantiate.
android.app.Fragment.instantiate,Create a new instance of a Fragment with the given class name. This is the same as calling its empty constructor.
android.app.Fragment.instantiate,Instantiate.
android.app.Fragment.instantiate,Create a new instance of a Fragment with the given class name.
android.app.Fragment.instantiate,This is the same as calling its empty constructor.
android.app.Fragment.isAdded,Return true if the fragment is currently added to its activity.
android.app.Fragment.isAdded,Is added.
android.app.Fragment.isDetached,Return true if the fragment has been explicitly detached from the UI. That is FragmentTransaction#detach(Fragment) has been used on it.
android.app.Fragment.isDetached,Is detached.
android.app.Fragment.isDetached,Return true if the fragment has been explicitly detached from the UI.
android.app.Fragment.isDetached,That is FragmentTransaction#detach(Fragment) has been used on it.
android.app.Fragment.isHidden,Return true if the fragment has been hidden. By default fragments are shown. You can find out about changes to this state with onHiddenChanged(boolean). Note that the hidden state is orthogonal to other states -- that is to be visible to the user a fragment must be both started and not hidden.
android.app.Fragment.isHidden,Is hidden.
android.app.Fragment.isHidden,Return true if the fragment has been hidden.
android.app.Fragment.isHidden,By default fragments are shown.
android.app.Fragment.isHidden,You can find out about changes to this state with onHiddenChanged(boolean).
android.app.Fragment.isHidden,Note that the hidden state is orthogonal to other states -- that is to be visible to the user a fragment must be both started and not hidden.
android.app.Fragment.isInLayout,Return true if the layout is included as part of an activity view hierarchy via the <fragment> tag. This will always be true when fragments are created through the <fragment> tag except in the case where an old fragment is restored from a previous state and it does not appear in the layout of the current state.
android.app.Fragment.isInLayout,Is in layout.
android.app.Fragment.isInLayout,Return true if the layout is included as part of an activity view hierarchy via the <fragment> tag.
android.app.Fragment.isInLayout,This will always be true when fragments are created through the <fragment> tag except in the case where an old fragment is restored from a previous state and it does not appear in the layout of the current state.
android.app.Fragment.isRemoving,Return true if this fragment is currently being removed from its activity. This is not whether its activity is finishing but rather whether it is in the process of being removed from its activity.
android.app.Fragment.isRemoving,Is removing.
android.app.Fragment.isRemoving,Return true if this fragment is currently being removed from its activity.
android.app.Fragment.isRemoving,This is not whether its activity is finishing but rather whether it is in the process of being removed from its activity.
android.app.Fragment.isResumed,Return true if the fragment is in the resumed state. This is true for the duration of onResume() and onPause() as well.
android.app.Fragment.isResumed,Is resumed.
android.app.Fragment.isResumed,Return true if the fragment is in the resumed state.
android.app.Fragment.isResumed,This is true for the duration of onResume() and onPause() as well.
android.app.Fragment.isVisible,Return true if the fragment is currently visible to the user. This means it: (1) has been added (2) has its view attached to the window and (3) is not hidden.
android.app.Fragment.isVisible,Is visible.
android.app.Fragment.isVisible,Return true if the fragment is currently visible to the user.
android.app.Fragment.isVisible,This means it: (1) has been added (2) has its view attached to the window and (3) is not hidden.
android.app.Fragment.onActivityCreated,Called when the fragment's activity has been created and this fragment's view hierarchy instantiated. It can be used to do final initialization once these pieces are in place such as retrieving views or restoring state. It is also useful for fragments that use setRetainInstance(boolean) to retain their instance as this callback tells the fragment when it is fully associated with the new activity instance. This is called after onCreateView(LayoutInflater ViewGroup Bundle) and before onViewStateRestored(android.os.Bundle). If you override this method you must call through to the superclass implementation.
android.app.Fragment.onActivityCreated,On activity created.
android.app.Fragment.onActivityCreated,Called when the fragment's activity has been created and this fragment's view hierarchy instantiated.
android.app.Fragment.onActivityCreated,It can be used to do final initialization once these pieces are in place such as retrieving views or restoring state.
android.app.Fragment.onActivityCreated,It is also useful for fragments that use setRetainInstance(boolean) to retain their instance as this callback tells the fragment when it is fully associated with the new activity instance.
android.app.Fragment.onActivityCreated,This is called after onCreateView(LayoutInflater ViewGroup Bundle) and before onViewStateRestored(android.os.Bundle).
android.app.Fragment.onActivityCreated,If you override this method you must call through to the superclass implementation.
android.app.Fragment.onActivityResult,Receive the result from a previous call to startActivityForResult(android.content.Intent int). This follows the related Activity API as described there in Activity#onActivityResult(int int Intent).
android.app.Fragment.onActivityResult,On activity result.
android.app.Fragment.onActivityResult,Receive the result from a previous call to startActivityForResult(android.content.Intent int).
android.app.Fragment.onActivityResult,This follows the related Activity API as described there in Activity#onActivityResult(int int Intent).
android.app.Fragment.onAttach,This method was deprecated in API level 23. Use onAttach(android.content.Context) instead. If you override this method you must call through to the superclass implementation.
android.app.Fragment.onAttach,On attach.
android.app.Fragment.onAttach,This method was deprecated in API level 23.
android.app.Fragment.onAttach,Use onAttach(android.content.Context) instead.
android.app.Fragment.onAttach,If you override this method you must call through to the superclass implementation.
android.app.Fragment.onAttach,Called when a fragment is first attached to its context. onCreate(android.os.Bundle) will be called after this. If you override this method you must call through to the superclass implementation.
android.app.Fragment.onAttach,On attach.
android.app.Fragment.onAttach,Called when a fragment is first attached to its context.
android.app.Fragment.onAttach,onCreate(android.os.Bundle) will be called after this.
android.app.Fragment.onAttach,If you override this method you must call through to the superclass implementation.
android.app.Fragment.onDestroy,Called when the fragment is no longer in use. This is called after onStop() and before onDetach(). If you override this method you must call through to the superclass implementation.
android.app.Fragment.onDestroy,On destroy.
android.app.Fragment.onDestroy,Called when the fragment is no longer in use.
android.app.Fragment.onDestroy,This is called after onStop() and before onDetach().
android.app.Fragment.onDestroy,If you override this method you must call through to the superclass implementation.
android.app.Fragment.onDestroyView,Called when the view previously created by onCreateView(LayoutInflater ViewGroup Bundle) has been detached from the fragment. The next time the fragment needs to be displayed a new view will be created. This is called after onStop() and before onDestroy(). It is called regardless of whether onCreateView(LayoutInflater ViewGroup Bundle) returned a non-null view. Internally it is called after the view's state has been saved but before it has been removed from its parent. If you override this method you must call through to the superclass implementation.
android.app.Fragment.onDestroyView,On destroy view.
android.app.Fragment.onDestroyView,Called when the view previously created by onCreateView(LayoutInflater ViewGroup Bundle) has been detached from the fragment.
android.app.Fragment.onDestroyView,The next time the fragment needs to be displayed a new view will be created.
android.app.Fragment.onDestroyView,This is called after onStop() and before onDestroy().
android.app.Fragment.onDestroyView,It is called regardless of whether onCreateView(LayoutInflater ViewGroup Bundle) returned a non-null view.
android.app.Fragment.onDestroyView,Internally it is called after the view's state has been saved but before it has been removed from its parent.
android.app.Fragment.onDestroyView,If you override this method you must call through to the superclass implementation.
android.app.Fragment.onInflate,This method was deprecated in API level 15. Use onInflate(android.content.Context android.util.AttributeSet android.os.Bundle) instead. If you override this method you must call through to the superclass implementation.
android.app.Fragment.onInflate,On inflate.
android.app.Fragment.onInflate,This method was deprecated in API level 15.
android.app.Fragment.onInflate,Use onInflate(android.content.Context android.util.AttributeSet android.os.Bundle) instead.
android.app.Fragment.onInflate,If you override this method you must call through to the superclass implementation.
android.app.Fragment.onInflate,This method was deprecated in API level 23. Use onInflate(android.content.Context android.util.AttributeSet android.os.Bundle) instead. If you override this method you must call through to the superclass implementation.
android.app.Fragment.onInflate,On inflate.
android.app.Fragment.onInflate,This method was deprecated in API level 23.
android.app.Fragment.onInflate,Use onInflate(android.content.Context android.util.AttributeSet android.os.Bundle) instead.
android.app.Fragment.onInflate,If you override this method you must call through to the superclass implementation.
android.app.Fragment.onInflate,"Called when a fragment is being created as part of a view layout inflation typically from setting the content view of an activity. This may be called immediately after the fragment is created from a tag in a layout file. Note this is before the fragment's onAttach(android.app.Activity) has been called; all you should do here is parse the attributes and save them away. This is called every time the fragment is inflated even if it is being inflated into a new instance with saved state. It typically makes sense to re-parse the parameters each time to allow them to change with different configurations. Here is a typical implementation of a fragment that can take parameters both through attributes supplied here as well from getArguments() : public static class MyFragment extends Fragment { CharSequence mLabel; /** * Create a new instance of MyFragment that will be initialized * with the given arguments. */ static MyFragment newInstance(CharSequence label) { MyFragment f = new MyFragment(); Bundle b = new Bundle(); b.putCharSequence(""label"" label); f.setArguments(b); return f; } /** * Parse attributes during inflation from a view hierarchy into the * arguments we handle. */ @Override public void onInflate(Activity activity AttributeSet attrs Bundle savedInstanceState) { super.onInflate(activity attrs savedInstanceState); TypedArray a = activity.obtainStyledAttributes(attrs R.styleable.FragmentArguments); mLabel = a.getText(R.styleable.FragmentArguments_android_label); a.recycle(); } /** * During creation if arguments have been supplied to the fragment * then parse those out. */ @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Bundle args = getArguments(); if (args != null) { mLabel = args.getCharSequence(""label"" mLabel); } } /** * Create the view for this fragment using the arguments given to it. */ @Override public View onCreateView(LayoutInflater inflater ViewGroup container Bundle savedInstanceState) { View v = inflater.inflate(R.layout.hello_world container false); View tv = v.findViewById(R.id.text); ((TextView)tv).setText(mLabel != null ? mLabel : ""(no label)""); tv.setBackgroundDrawable(getResources().getDrawable(android.R.drawable.gallery_thumb)); return v; } } Note that parsing the XML attributes uses a ""styleable"" resource. The declaration for the styleable used here is: <declare-styleable name=""FragmentArguments""> <attr name=""android:label"" /> </declare-styleable> The fragment can then be declared within its activity's content layout through a tag like this: <fragment class=""com.example.android.apis.app.FragmentArguments$MyFragment"" android:id=""@+id/embedded"" android:layout_width=""0px"" android:layout_height=""wrap_content"" android:layout_weight=""1"" android:label=""@string/fragment_arguments_embedded"" /> This fragment can also be created dynamically from arguments given at runtime in the arguments Bundle; here is an example of doing so at creation of the containing activity: @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.fragment_arguments); if (savedInstanceState == null) { // First-time init; create fragment to embed in activity. FragmentTransaction ft = getFragmentManager().beginTransaction(); Fragment newFragment = MyFragment.newInstance(""From Arguments""); ft.add(R.id.created newFragment); ft.commit(); } } If you override this method you must call through to the superclass implementation."
android.app.Fragment.onInflate,On inflate.
android.app.Fragment.onInflate,Called when a fragment is being created as part of a view layout inflation typically from setting the content view of an activity.
android.app.Fragment.onInflate,This may be called immediately after the fragment is created from a tag in a layout file.
android.app.Fragment.onInflate,Note this is before the fragment's onAttach(android.app.Activity) has been called; all you should do here is parse the attributes and save them away.
android.app.Fragment.onInflate,This is called every time the fragment is inflated even if it is being inflated into a new instance with saved state.
android.app.Fragment.onInflate,It typically makes sense to re-parse the parameters each time to allow them to change with different configurations.
android.app.Fragment.onInflate,Here is a typical implementation of a fragment that can take parameters both through attributes supplied here as well from getArguments() : public static class MyFragment extends Fragment { CharSequence mLabel; /** * Create a new instance of MyFragment that will be initialized * with the given arguments.
android.app.Fragment.onInflate,"*/ static MyFragment newInstance(CharSequence label) { MyFragment f = new MyFragment(); Bundle b = new Bundle(); b.putCharSequence(""label"" label); f.setArguments(b); return f; } /** * Parse attributes during inflation from a view hierarchy into the * arguments we handle."
android.app.Fragment.onInflate,*/ @Override public void onInflate(Activity activity AttributeSet attrs Bundle savedInstanceState) { super.onInflate(activity attrs savedInstanceState); TypedArray a = activity.obtainStyledAttributes(attrs R.styleable.FragmentArguments); mLabel = a.getText(R.styleable.FragmentArguments_android_label); a.recycle(); } /** * During creation if arguments have been supplied to the fragment * then parse those out.
android.app.Fragment.onInflate,"*/ @Override public void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); Bundle args = getArguments(); if (args != null) { mLabel = args.getCharSequence(""label"" mLabel); } } /** * Create the view for this fragment using the arguments given to it."
android.app.Fragment.onInflate,"*/ @Override public View onCreateView(LayoutInflater inflater ViewGroup container Bundle savedInstanceState) { View v = inflater.inflate(R.layout.hello_world container false); View tv = v.findViewById(R.id.text); ((TextView)tv).setText(mLabel != null ? mLabel : ""(no label)""); tv.setBackgroundDrawable(getResources().getDrawable(android.R.drawable.gallery_thumb)); return v; } } Note that parsing the XML attributes uses a ""styleable"" resource."
android.app.Fragment.onInflate,"The declaration for the styleable used here is: <declare-styleable name=""FragmentArguments""> <attr name=""android:label"" /> </declare-styleable> The fragment can then be declared within its activity's content layout through a tag like this: <fragment class=""com.example.android.apis.app.FragmentArguments$MyFragment"" android:id=""@+id/embedded"" android:layout_width=""0px"" android:layout_height=""wrap_content"" android:layout_weight=""1"" android:label=""@string/fragment_arguments_embedded"" /> This fragment can also be created dynamically from arguments given at runtime in the arguments Bundle; here is an example of doing so at creation of the containing activity: @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.fragment_arguments); if (savedInstanceState == null) { // First-time init; create fragment to embed in activity."
android.app.Fragment.onInflate,"FragmentTransaction ft = getFragmentManager().beginTransaction(); Fragment newFragment = MyFragment.newInstance(""From Arguments""); ft.add(R.id.created newFragment); ft.commit(); } } If you override this method you must call through to the superclass implementation."
android.app.Fragment.onPause,Called when the Fragment is no longer resumed. This is generally tied to Activity#onPause() of the containing Activity's lifecycle. If you override this method you must call through to the superclass implementation.
android.app.Fragment.onPause,On pause.
android.app.Fragment.onPause,Called when the Fragment is no longer resumed.
android.app.Fragment.onPause,This is generally tied to Activity#onPause() of the containing Activity's lifecycle.
android.app.Fragment.onPause,If you override this method you must call through to the superclass implementation.
android.app.Fragment.onResume,Called when the fragment is visible to the user and actively running. This is generally tied to Activity#onResume() of the containing Activity's lifecycle. If you override this method you must call through to the superclass implementation.
android.app.Fragment.onResume,On resume.
android.app.Fragment.onResume,Called when the fragment is visible to the user and actively running.
android.app.Fragment.onResume,This is generally tied to Activity#onResume() of the containing Activity's lifecycle.
android.app.Fragment.onResume,If you override this method you must call through to the superclass implementation.
android.app.Fragment.onSaveInstanceState,Called to ask the fragment to save its current dynamic state so it can later be reconstructed in a new instance of its process is restarted. If a new instance of the fragment later needs to be created the data you place in the Bundle here will be available in the Bundle given to onCreate(android.os.Bundle) onCreateView(android.view.LayoutInflater android.view.ViewGroup android.os.Bundle) and onActivityCreated(android.os.Bundle). This corresponds to Activity#onSaveInstanceState(Bundle) and most of the discussion there applies here as well. Note however: this method may be called at any time before onDestroy(). There are many situations where a fragment may be mostly torn down (such as when placed on the back stack with no UI showing) but its state will not be saved until its owning activity actually needs to save its state.
android.app.Fragment.onSaveInstanceState,On save instance state.
android.app.Fragment.onSaveInstanceState,Called to ask the fragment to save its current dynamic state so it can later be reconstructed in a new instance of its process is restarted.
android.app.Fragment.onSaveInstanceState,If a new instance of the fragment later needs to be created the data you place in the Bundle here will be available in the Bundle given to onCreate(android.os.Bundle) onCreateView(android.view.LayoutInflater android.view.ViewGroup android.os.Bundle) and onActivityCreated(android.os.Bundle).
android.app.Fragment.onSaveInstanceState,This corresponds to Activity#onSaveInstanceState(Bundle) and most of the discussion there applies here as well.
android.app.Fragment.onSaveInstanceState,Note however: this method may be called at any time before onDestroy().
android.app.Fragment.onSaveInstanceState,There are many situations where a fragment may be mostly torn down (such as when placed on the back stack with no UI showing) but its state will not be saved until its owning activity actually needs to save its state.
android.app.Fragment.onStop,Called when the Fragment is no longer started. This is generally tied to Activity#onStop() of the containing Activity's lifecycle. If you override this method you must call through to the superclass implementation.
android.app.Fragment.onStop,On stop.
android.app.Fragment.onStop,Called when the Fragment is no longer started.
android.app.Fragment.onStop,This is generally tied to Activity#onStop() of the containing Activity's lifecycle.
android.app.Fragment.onStop,If you override this method you must call through to the superclass implementation.
android.app.Fragment.setArguments,Supply the construction arguments for this fragment. The arguments supplied here will be retained across fragment destroy and creation. This method cannot be called if the fragment is added to a FragmentManager and if isStateSaved() would return true. Prior to Build.VERSION_CODES#O this method may only be called if the fragment has not yet been added to a FragmentManager.
android.app.Fragment.setArguments,Set arguments.
android.app.Fragment.setArguments,Supply the construction arguments for this fragment.
android.app.Fragment.setArguments,The arguments supplied here will be retained across fragment destroy and creation.
android.app.Fragment.setArguments,This method cannot be called if the fragment is added to a FragmentManager and if isStateSaved() would return true.
android.app.Fragment.setArguments,Prior to Build.VERSION_CODES#O this method may only be called if the fragment has not yet been added to a FragmentManager.
android.app.Fragment.setHasOptionsMenu,Report that this fragment would like to participate in populating the options menu by receiving a call to onCreateOptionsMenu(Menu MenuInflater) and related methods.
android.app.Fragment.setHasOptionsMenu,Set has options menu.
android.app.Fragment.setMenuVisibility,Set a hint for whether this fragment's menu should be visible. This is useful if you know that a fragment has been placed in your view hierarchy so that the user can not currently seen it so any menu items it has should also not be shown.
android.app.Fragment.setMenuVisibility,Set menu visibility.
android.app.Fragment.setMenuVisibility,Set a hint for whether this fragment's menu should be visible.
android.app.Fragment.setMenuVisibility,This is useful if you know that a fragment has been placed in your view hierarchy so that the user can not currently seen it so any menu items it has should also not be shown.
android.app.Fragment.setRetainInstance,Control whether a fragment instance is retained across Activity re-creation (such as from a configuration change). This can only be used with fragments not in the back stack. If set the fragment lifecycle will be slightly different when an activity is recreated: onDestroy() will not be called (but onDetach() still will be because the fragment is being detached from its current activity). onCreate(android.os.Bundle) will not be called since the fragment is not being re-created. onAttach(android.app.Activity) and onActivityCreated(android.os.Bundle) will still be called.
android.app.Fragment.setRetainInstance,Set retain instance.
android.app.Fragment.setRetainInstance,Control whether a fragment instance is retained across Activity re-creation (such as from a configuration change).
android.app.Fragment.setRetainInstance,This can only be used with fragments not in the back stack.
android.app.Fragment.setRetainInstance,If set the fragment lifecycle will be slightly different when an activity is recreated: onDestroy() will not be called (but onDetach() still will be because the fragment is being detached from its current activity).
android.app.Fragment.setRetainInstance,onCreate(android.os.Bundle) will not be called since the fragment is not being re-created.
android.app.Fragment.setRetainInstance,onAttach(android.app.Activity) and onActivityCreated(android.os.Bundle) will still be called.
android.app.Fragment.setUserVisibleHint,Set a hint to the system about whether this fragment's UI is currently visible to the user. This hint defaults to true and is persistent across fragment instance state save and restore. An app may set this to false to indicate that the fragment's UI is scrolled out of visibility or is otherwise not directly visible to the user. This may be used by the system to prioritize operations such as fragment lifecycle updates or loader ordering behavior. Note: This method may be called outside of the fragment lifecycle and thus has no ordering guarantees with regard to fragment lifecycle method calls. Note: Prior to Android N there was a platform bug that could cause setUserVisibleHint to bring a fragment up to the started state before its FragmentTransaction had been committed. As some apps relied on this behavior it is preserved for apps that declare a targetSdkVersion of 23 or lower.
android.app.Fragment.setUserVisibleHint,Set user visible hint.
android.app.Fragment.setUserVisibleHint,Set a hint to the system about whether this fragment's UI is currently visible to the user.
android.app.Fragment.setUserVisibleHint,This hint defaults to true and is persistent across fragment instance state save and restore.
android.app.Fragment.setUserVisibleHint,An app may set this to false to indicate that the fragment's UI is scrolled out of visibility or is otherwise not directly visible to the user.
android.app.Fragment.setUserVisibleHint,This may be used by the system to prioritize operations such as fragment lifecycle updates or loader ordering behavior.
android.app.Fragment.setUserVisibleHint,Note: This method may be called outside of the fragment lifecycle and thus has no ordering guarantees with regard to fragment lifecycle method calls.
android.app.Fragment.setUserVisibleHint,Note: Prior to Android N there was a platform bug that could cause setUserVisibleHint to bring a fragment up to the started state before its FragmentTransaction had been committed.
android.app.Fragment.setUserVisibleHint,As some apps relied on this behavior it is preserved for apps that declare a targetSdkVersion of 23 or lower.
android.app.Fragment.startActivity,Call Activity#startActivity(Intent) from the fragment's containing Activity.
android.app.Fragment.startActivity,Start activity.
android.app.Fragment.startActivity,Call Activity#startActivity(Intent Bundle) from the fragment's containing Activity.
android.app.Fragment.startActivity,Start activity.
android.app.Fragment.startActivityForResult,Call Activity#startActivityForResult(Intent int) from the fragment's containing Activity.
android.app.Fragment.startActivityForResult,Start activity for result.
android.app.Fragment.startActivityForResult,Call Activity#startActivityForResult(Intent int Bundle) from the fragment's containing Activity.
android.app.Fragment.startActivityForResult,Start activity for result.
android.app.FragmentManager.beginTransaction,Start a series of edit operations on the Fragments associated with this FragmentManager. Note: A fragment transaction can only be created/committed prior to an activity saving its state. If you try to commit a transaction after Activity#onSaveInstanceState (and prior to a following Activity#onStart or Activity#onResume you will get an error. This is because the framework takes care of saving your current fragments in the state and if changes are made after the state is saved then they will be lost.
android.app.FragmentManager.beginTransaction,Begin transaction.
android.app.FragmentManager.beginTransaction,Start a series of edit operations on the Fragments associated with this FragmentManager.
android.app.FragmentManager.beginTransaction,Note: A fragment transaction can only be created/committed prior to an activity saving its state.
android.app.FragmentManager.beginTransaction,If you try to commit a transaction after Activity#onSaveInstanceState (and prior to a following Activity#onStart or Activity#onResume you will get an error.
android.app.FragmentManager.beginTransaction,This is because the framework takes care of saving your current fragments in the state and if changes are made after the state is saved then they will be lost.
android.app.FragmentManager.executePendingTransactions,After a FragmentTransaction is committed with FragmentTransaction#commit it is scheduled to be executed asynchronously on the process's main thread. If you want to immediately executing any such pending operations you can call this function (only from the main thread) to do so. Note that all callbacks and other related behavior will be done from within this call so be careful about where this is called from. This also forces the start of any postponed Transactions where Fragment#postponeEnterTransition() has been called.
android.app.FragmentManager.executePendingTransactions,Execute pending transactions.
android.app.FragmentManager.executePendingTransactions,After a FragmentTransaction is committed with FragmentTransaction#commit it is scheduled to be executed asynchronously on the process's main thread.
android.app.FragmentManager.executePendingTransactions,If you want to immediately executing any such pending operations you can call this function (only from the main thread) to do so.
android.app.FragmentManager.executePendingTransactions,Note that all callbacks and other related behavior will be done from within this call so be careful about where this is called from.
android.app.FragmentManager.executePendingTransactions,This also forces the start of any postponed Transactions where Fragment#postponeEnterTransition() has been called.
android.app.FragmentManager.findFragmentByTag,Finds a fragment that was identified by the given tag either when inflated from XML or as supplied when added in a transaction. This first searches through fragments that are currently added to the manager's activity; if no such fragment is found then all fragments currently on the back stack are searched.
android.app.FragmentManager.findFragmentByTag,Find fragment by tag.
android.app.FragmentManager.findFragmentByTag,Finds a fragment that was identified by the given tag either when inflated from XML or as supplied when added in a transaction.
android.app.FragmentManager.findFragmentByTag,This first searches through fragments that are currently added to the manager's activity; if no such fragment is found then all fragments currently on the back stack are searched.
android.app.FragmentManager.getBackStackEntryCount,Return the number of entries currently in the back stack.
android.app.FragmentManager.getBackStackEntryCount,Get back stack entry count.
android.app.FragmentManager.getFragment,Retrieve the current Fragment instance for a reference previously placed with putFragment(android.os.Bundle java.lang.String android.app.Fragment).
android.app.FragmentManager.getFragment,Get fragment.
android.app.FragmentManager.popBackStack,Pop the top state off the back stack. This function is asynchronous -- it enqueues the request to pop but the action will not be performed until the application returns to its event loop.
android.app.FragmentManager.popBackStack,Pop back stack.
android.app.FragmentManager.popBackStack,Pop the top state off the back stack.
android.app.FragmentManager.popBackStack,This function is asynchronous -- it enqueues the request to pop but the action will not be performed until the application returns to its event loop.
android.app.FragmentManager.popBackStack,Pop all back stack states up to the one with the given identifier. This function is asynchronous -- it enqueues the request to pop but the action will not be performed until the application returns to its event loop.
android.app.FragmentManager.popBackStack,Pop back stack.
android.app.FragmentManager.popBackStack,Pop all back stack states up to the one with the given identifier.
android.app.FragmentManager.popBackStack,This function is asynchronous -- it enqueues the request to pop but the action will not be performed until the application returns to its event loop.
android.app.FragmentManager.popBackStack,Pop the last fragment transition from the manager's fragment back stack. If there is nothing to pop false is returned. This function is asynchronous -- it enqueues the request to pop but the action will not be performed until the application returns to its event loop.
android.app.FragmentManager.popBackStack,Pop back stack.
android.app.FragmentManager.popBackStack,Pop the last fragment transition from the manager's fragment back stack.
android.app.FragmentManager.popBackStack,If there is nothing to pop false is returned.
android.app.FragmentManager.popBackStack,This function is asynchronous -- it enqueues the request to pop but the action will not be performed until the application returns to its event loop.
android.app.FragmentManager.popBackStackImmediate,Like popBackStack() but performs the operation immediately inside of the call. This is like calling executePendingTransactions() afterwards without forcing the start of postponed Transactions.
android.app.FragmentManager.popBackStackImmediate,Pop back stack immediate.
android.app.FragmentManager.popBackStackImmediate,Like popBackStack() but performs the operation immediately inside of the call.
android.app.FragmentManager.popBackStackImmediate,This is like calling executePendingTransactions() afterwards without forcing the start of postponed Transactions.
android.app.FragmentManager.popBackStackImmediate,Like popBackStack(int int) but performs the operation immediately inside of the call. This is like calling executePendingTransactions() afterwards without forcing the start of postponed Transactions.
android.app.FragmentManager.popBackStackImmediate,Pop back stack immediate.
android.app.FragmentManager.popBackStackImmediate,Like popBackStack(int int) but performs the operation immediately inside of the call.
android.app.FragmentManager.popBackStackImmediate,This is like calling executePendingTransactions() afterwards without forcing the start of postponed Transactions.
android.app.FragmentManager.popBackStackImmediate,Like popBackStack(java.lang.String int) but performs the operation immediately inside of the call. This is like calling executePendingTransactions() afterwards without forcing the start of postponed Transactions.
android.app.FragmentManager.popBackStackImmediate,Pop back stack immediate.
android.app.FragmentManager.popBackStackImmediate,Like popBackStack(java.lang.String int) but performs the operation immediately inside of the call.
android.app.FragmentManager.popBackStackImmediate,This is like calling executePendingTransactions() afterwards without forcing the start of postponed Transactions.
android.app.FragmentManager.putFragment,Put a reference to a fragment in a Bundle. This Bundle can be persisted as saved state and when later restoring getFragment(android.os.Bundle java.lang.String) will return the current instance of the same fragment.
android.app.FragmentManager.putFragment,Put fragment.
android.app.FragmentManager.putFragment,Put a reference to a fragment in a Bundle.
android.app.FragmentManager.putFragment,This Bundle can be persisted as saved state and when later restoring getFragment(android.os.Bundle java.lang.String) will return the current instance of the same fragment.
android.app.FragmentManager.saveFragmentInstanceState,Save the current instance state of the given Fragment. This can be used later when creating a new instance of the Fragment and adding it to the fragment manager to have it create itself to match the current state returned here. Note that there are limits on how this can be used: The Fragment must currently be attached to the FragmentManager. A new Fragment created using this saved state must be the same class type as the Fragment it was created from. The saved state can not contain dependencies on other fragments -- that is it can't use putFragment(android.os.Bundle java.lang.String android.app.Fragment) to store a fragment reference because that reference may not be valid when this saved state is later used. Likewise the Fragment's target and result code are not included in this state.
android.app.FragmentManager.saveFragmentInstanceState,Save fragment instance state.
android.app.FragmentManager.saveFragmentInstanceState,Save the current instance state of the given Fragment.
android.app.FragmentManager.saveFragmentInstanceState,This can be used later when creating a new instance of the Fragment and adding it to the fragment manager to have it create itself to match the current state returned here.
android.app.FragmentManager.saveFragmentInstanceState,Note that there are limits on how this can be used: The Fragment must currently be attached to the FragmentManager.
android.app.FragmentManager.saveFragmentInstanceState,A new Fragment created using this saved state must be the same class type as the Fragment it was created from.
android.app.FragmentManager.saveFragmentInstanceState,The saved state can not contain dependencies on other fragments -- that is it can't use putFragment(android.os.Bundle java.lang.String android.app.Fragment) to store a fragment reference because that reference may not be valid when this saved state is later used.
android.app.FragmentManager.saveFragmentInstanceState,Likewise the Fragment's target and result code are not included in this state.
android.app.FragmentTransaction.add,Calls add(int android.app.Fragment java.lang.String) with a 0 containerViewId.
android.app.FragmentTransaction.add,Add.
android.app.FragmentTransaction.add,Calls add(int android.app.Fragment java.lang.String) with a null tag.
android.app.FragmentTransaction.add,Add.
android.app.FragmentTransaction.add,Add a fragment to the activity state. This fragment may optionally also have its view (if Fragment#onCreateView returns non-null) inserted into a container view of the activity.
android.app.FragmentTransaction.add,Add.
android.app.FragmentTransaction.add,Add a fragment to the activity state.
android.app.FragmentTransaction.add,This fragment may optionally also have its view (if Fragment#onCreateView returns non-null) inserted into a container view of the activity.
android.app.FragmentTransaction.addToBackStack,Add this transaction to the back stack. This means that the transaction will be remembered after it is committed and will reverse its operation when later popped off the stack.
android.app.FragmentTransaction.addToBackStack,Add to back stack.
android.app.FragmentTransaction.addToBackStack,Add this transaction to the back stack.
android.app.FragmentTransaction.addToBackStack,This means that the transaction will be remembered after it is committed and will reverse its operation when later popped off the stack.
android.app.FragmentTransaction.attach,Re-attach a fragment after it had previously been detached from the UI with detach(android.app.Fragment). This causes its view hierarchy to be re-created attached to the UI and displayed.
android.app.FragmentTransaction.attach,Attach.
android.app.FragmentTransaction.attach,Re-attach a fragment after it had previously been detached from the UI with detach(android.app.Fragment).
android.app.FragmentTransaction.attach,This causes its view hierarchy to be re-created attached to the UI and displayed.
android.app.FragmentTransaction.commit,Schedules a commit of this transaction. The commit does not happen immediately; it will be scheduled as work on the main thread to be done the next time that thread is ready. A transaction can only be committed with this method prior to its containing activity saving its state. If the commit is attempted after that point an exception will be thrown. This is because the state after the commit can be lost if the activity needs to be restored from its state. See commitAllowingStateLoss() for situations where it may be okay to lose the commit.
android.app.FragmentTransaction.commit,Commit.
android.app.FragmentTransaction.commit,Schedules a commit of this transaction.
android.app.FragmentTransaction.commit,The commit does not happen immediately; it will be scheduled as work on the main thread to be done the next time that thread is ready.
android.app.FragmentTransaction.commit,A transaction can only be committed with this method prior to its containing activity saving its state.
android.app.FragmentTransaction.commit,If the commit is attempted after that point an exception will be thrown.
android.app.FragmentTransaction.commit,This is because the state after the commit can be lost if the activity needs to be restored from its state.
android.app.FragmentTransaction.commit,See commitAllowingStateLoss() for situations where it may be okay to lose the commit.
android.app.FragmentTransaction.commitAllowingStateLoss,Like commit() but allows the commit to be executed after an activity's state is saved. This is dangerous because the commit can be lost if the activity needs to later be restored from its state so this should only be used for cases where it is okay for the UI state to change unexpectedly on the user.
android.app.FragmentTransaction.commitAllowingStateLoss,Commit allowing state loss.
android.app.FragmentTransaction.commitAllowingStateLoss,Like commit() but allows the commit to be executed after an activity's state is saved.
android.app.FragmentTransaction.commitAllowingStateLoss,This is dangerous because the commit can be lost if the activity needs to later be restored from its state so this should only be used for cases where it is okay for the UI state to change unexpectedly on the user.
android.app.FragmentTransaction.detach,Detach the given fragment from the UI. This is the same state as when it is put on the back stack: the fragment is removed from the UI however its state is still being actively managed by the fragment manager. When going into this state its view hierarchy is destroyed.
android.app.FragmentTransaction.detach,Detach.
android.app.FragmentTransaction.detach,Detach the given fragment from the UI.
android.app.FragmentTransaction.detach,This is the same state as when it is put on the back stack: the fragment is removed from the UI however its state is still being actively managed by the fragment manager.
android.app.FragmentTransaction.detach,When going into this state its view hierarchy is destroyed.
android.app.FragmentTransaction.remove,Remove an existing fragment. If it was added to a container its view is also removed from that container.
android.app.FragmentTransaction.remove,Remove.
android.app.FragmentTransaction.remove,Remove an existing fragment.
android.app.FragmentTransaction.remove,If it was added to a container its view is also removed from that container.
android.app.FragmentTransaction.replace,Replace an existing fragment that was added to a container. This is essentially the same as calling remove(android.app.Fragment) for all currently added fragments that were added with the same containerViewId and then add(int android.app.Fragment java.lang.String) with the same arguments given here.
android.app.FragmentTransaction.replace,Replace.
android.app.FragmentTransaction.replace,Replace an existing fragment that was added to a container.
android.app.FragmentTransaction.replace,This is essentially the same as calling remove(android.app.Fragment) for all currently added fragments that were added with the same containerViewId and then add(int android.app.Fragment java.lang.String) with the same arguments given here.
android.app.FragmentTransaction.replace,Calls replace(int android.app.Fragment java.lang.String) with a null tag.
android.app.FragmentTransaction.replace,Replace.
android.app.FragmentTransaction.setTransition,Select a standard transition animation for this transaction. May be one of TRANSIT_NONE TRANSIT_FRAGMENT_OPEN TRANSIT_FRAGMENT_CLOSE or TRANSIT_FRAGMENT_FADE.
android.app.FragmentTransaction.setTransition,Set transition.
android.app.FragmentTransaction.setTransition,Select a standard transition animation for this transaction.
android.app.FragmentTransaction.setTransition,May be one of TRANSIT_NONE TRANSIT_FRAGMENT_OPEN TRANSIT_FRAGMENT_CLOSE or TRANSIT_FRAGMENT_FADE.
android.app.Instrumentation.onCreate,Called when the instrumentation is starting before any application code has been loaded. Usually this will be implemented to simply call start() to begin the instrumentation thread which will then continue execution in onStart(). If you do not need your own thread -- that is you are writing your instrumentation to be completely asynchronous (returning to the event loop so that the application can run) you can simply begin your instrumentation here for example call Context#startActivity to begin the appropriate first activity of the application.
android.app.Instrumentation.onCreate,On create.
android.app.Instrumentation.onCreate,Called when the instrumentation is starting before any application code has been loaded.
android.app.Instrumentation.onCreate,Usually this will be implemented to simply call start() to begin the instrumentation thread which will then continue execution in onStart().
android.app.Instrumentation.onCreate,If you do not need your own thread -- that is you are writing your instrumentation to be completely asynchronous (returning to the event loop so that the application can run) you can simply begin your instrumentation here for example call Context#startActivity to begin the appropriate first activity of the application.
android.app.Instrumentation.onStart,Method where the instrumentation thread enters execution. This allows you to run your instrumentation code in a separate thread than the application so that it can perform blocking operation such as sendKeySync(KeyEvent) or startActivitySync(Intent). You will typically want to call finish() when this function is done to end your instrumentation.
android.app.Instrumentation.onStart,On start.
android.app.Instrumentation.onStart,Method where the instrumentation thread enters execution.
android.app.Instrumentation.onStart,This allows you to run your instrumentation code in a separate thread than the application so that it can perform blocking operation such as sendKeySync(KeyEvent) or startActivitySync(Intent).
android.app.Instrumentation.onStart,You will typically want to call finish() when this function is done to end your instrumentation.
android.app.IntentService.onCreate,Called by the system when the service is first created. Do not call this method directly.
android.app.IntentService.onCreate,On create.
android.app.IntentService.onCreate,Called by the system when the service is first created.
android.app.IntentService.onCreate,Do not call this method directly.
android.app.IntentService.onDestroy,Called by the system to notify a Service that it is no longer used and is being removed. The service should clean up any resources it holds (threads registered receivers etc) at this point. Upon return there will be no more calls in to this Service object and it is effectively dead. Do not call this method directly.
android.app.IntentService.onDestroy,On destroy.
android.app.IntentService.onDestroy,Called by the system to notify a Service that it is no longer used and is being removed.
android.app.IntentService.onDestroy,The service should clean up any resources it holds (threads registered receivers etc) at this point.
android.app.IntentService.onDestroy,Upon return there will be no more calls in to this Service object and it is effectively dead.
android.app.IntentService.onDestroy,Do not call this method directly.
android.app.ListActivity.setListAdapter,Provide the cursor for the list view.
android.app.ListActivity.setListAdapter,Set list adapter.
android.app.LocalActivityManager.destroyActivity,Destroy the activity associated with a particular id. This activity will go through the normal lifecycle events and fine onDestroy() and then the id removed from the group.
android.app.LocalActivityManager.destroyActivity,Destroy activity.
android.app.LocalActivityManager.destroyActivity,Destroy the activity associated with a particular id.
android.app.LocalActivityManager.destroyActivity,This activity will go through the normal lifecycle events and fine onDestroy() and then the id removed from the group.
android.app.LocalActivityManager.dispatchCreate,Restore a state that was previously returned by saveInstanceState(). This adds to the activity group information about all activity IDs that had previously been saved even if they have not been started yet so if the user later navigates to them the correct state will be restored. Note: This does not change the current running activity or start whatever activity was previously running when the state was saved. That is up to the client to do in whatever way it thinks is best.
android.app.LocalActivityManager.dispatchCreate,Dispatch create.
android.app.LocalActivityManager.dispatchCreate,Restore a state that was previously returned by saveInstanceState().
android.app.LocalActivityManager.dispatchCreate,This adds to the activity group information about all activity IDs that had previously been saved even if they have not been started yet so if the user later navigates to them the correct state will be restored.
android.app.LocalActivityManager.dispatchCreate,Note: This does not change the current running activity or start whatever activity was previously running when the state was saved.
android.app.LocalActivityManager.dispatchCreate,That is up to the client to do in whatever way it thinks is best.
android.app.LocalActivityManager.dispatchDestroy,Called by the container activity in its Activity#onDestroy so that LocalActivityManager can perform the corresponding action on the activities it holds.
android.app.LocalActivityManager.dispatchDestroy,Dispatch destroy.
android.app.LocalActivityManager.dispatchPause,Called by the container activity in its Activity#onPause so that LocalActivityManager can perform the corresponding action on the activities it holds.
android.app.LocalActivityManager.dispatchPause,Dispatch pause.
android.app.LocalActivityManager.dispatchResume,Called by the container activity in its Activity#onResume so that LocalActivityManager can perform the corresponding action on the activities it holds.
android.app.LocalActivityManager.dispatchResume,Dispatch resume.
android.app.LocalActivityManager.dispatchStop,Called by the container activity in its Activity#onStop so that LocalActivityManager can perform the corresponding action on the activities it holds.
android.app.LocalActivityManager.dispatchStop,Dispatch stop.
android.app.LocalActivityManager.getActivity,Return the Activity object associated with a string ID.
android.app.LocalActivityManager.getActivity,Get activity.
android.app.LocalActivityManager.getCurrentActivity,Retrieve the Activity that is currently running.
android.app.LocalActivityManager.getCurrentActivity,Get current activity.
android.app.LocalActivityManager.saveInstanceState,Retrieve the state of all activities known by the group. For activities that have previously run and are now stopped or finished the last saved state is used. For the current running activity its Activity#onSaveInstanceState is called to retrieve its current state.
android.app.LocalActivityManager.saveInstanceState,Save instance state.
android.app.LocalActivityManager.saveInstanceState,Retrieve the state of all activities known by the group.
android.app.LocalActivityManager.saveInstanceState,For activities that have previously run and are now stopped or finished the last saved state is used.
android.app.LocalActivityManager.saveInstanceState,For the current running activity its Activity#onSaveInstanceState is called to retrieve its current state.
android.app.LocalActivityManager.startActivity,Start a new activity running in the group. Every activity you start must have a unique string ID associated with it -- this is used to keep track of the activity so that if you later call startActivity() again on it the same activity object will be retained. When there had previously been an activity started under this id it may either be destroyed and a new one started or the current one re-used based on these conditions in order: If the Intent maps to a different activity component than is currently running the current activity is finished and a new one started. If the current activity uses a non-multiple launch mode (such as singleTop) or the Intent has the Intent#FLAG_ACTIVITY_SINGLE_TOP flag set then the current activity will remain running and its Activity#onNewIntent(Intent) method called. If the new Intent is the same (excluding extras) as the previous one and the new Intent does not have the Intent#FLAG_ACTIVITY_CLEAR_TOP set then the current activity will remain running as-is. Otherwise the current activity will be finished and a new one started. If the given Intent can not be resolved to an available Activity this method throws ActivityNotFoundException. Warning: There is an issue where if the Intent does not include an explicit component we can restore the state for a different activity class than was previously running when the state was saved (if the set of available activities changes between those points).
android.app.LocalActivityManager.startActivity,Start activity.
android.app.LocalActivityManager.startActivity,Start a new activity running in the group.
android.app.LocalActivityManager.startActivity,Every activity you start must have a unique string ID associated with it -- this is used to keep track of the activity so that if you later call startActivity() again on it the same activity object will be retained.
android.app.LocalActivityManager.startActivity,When there had previously been an activity started under this id it may either be destroyed and a new one started or the current one re-used based on these conditions in order: If the Intent maps to a different activity component than is currently running the current activity is finished and a new one started.
android.app.LocalActivityManager.startActivity,If the current activity uses a non-multiple launch mode (such as singleTop) or the Intent has the Intent#FLAG_ACTIVITY_SINGLE_TOP flag set then the current activity will remain running and its Activity#onNewIntent(Intent) method called.
android.app.LocalActivityManager.startActivity,If the new Intent is the same (excluding extras) as the previous one and the new Intent does not have the Intent#FLAG_ACTIVITY_CLEAR_TOP set then the current activity will remain running as-is.
android.app.LocalActivityManager.startActivity,Otherwise the current activity will be finished and a new one started.
android.app.LocalActivityManager.startActivity,If the given Intent can not be resolved to an available Activity this method throws ActivityNotFoundException.
android.app.LocalActivityManager.startActivity,Warning: There is an issue where if the Intent does not include an explicit component we can restore the state for a different activity class than was previously running when the state was saved (if the set of available activities changes between those points).
android.app.Notification.getGroup,Get the key used to group this notification into a cluster or stack with other notifications on devices which support such rendering.
android.app.Notification.getGroup,Get group.
android.app.Notification.getSortKey,Get a sort key that orders this notification among other notifications from the same package. This can be useful if an external sort was already applied and an app would like to preserve this. Notifications will be sorted lexicographically using this value although providing different priorities in addition to providing sort key may cause this value to be ignored. This sort key can also be used to order members of a notification group. See Builder#setGroup.
android.app.Notification.getSortKey,Get sort key.
android.app.Notification.getSortKey,Get a sort key that orders this notification among other notifications from the same package.
android.app.Notification.getSortKey,This can be useful if an external sort was already applied and an app would like to preserve this.
android.app.Notification.getSortKey,Notifications will be sorted lexicographically using this value although providing different priorities in addition to providing sort key may cause this value to be ignored.
android.app.Notification.getSortKey,This sort key can also be used to order members of a notification group.
android.app.Notification.getSortKey,See Builder#setGroup.
android.app.Notification.toString,"Returns a string representation of the object. In general the toString method returns a string that ""textually represents"" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance the at-sign character ` @ ' and the unsigned hexadecimal representation of the hash code of the object. In other words this method returns a string equal to the value of:."
android.app.Notification.toString,To string.
android.app.Notification.toString,Returns a string representation of the object.
android.app.Notification.toString,"In general the toString method returns a string that ""textually represents"" this object."
android.app.Notification.toString,The result should be a concise but informative representation that is easy for a person to read.
android.app.Notification.toString,It is recommended that all subclasses override this method.
android.app.Notification.toString,The toString method for class Object returns a string consisting of the name of the class of which the object is an instance the at-sign character ` @ ' and the unsigned hexadecimal representation of the hash code of the object.
android.app.Notification.toString,In other words this method returns a string equal to the value of:.
android.app.Notification.writeToParcel,Flatten this notification into a parcel.
android.app.Notification.writeToParcel,Write to parcel.
android.app.NotificationManager.cancel,Cancel a previously shown notification. If it's transient the view will be hidden. If it's persistent it will be removed from the status bar.
android.app.NotificationManager.cancel,Cancel.
android.app.NotificationManager.cancel,Cancel a previously shown notification.
android.app.NotificationManager.cancel,If it's transient the view will be hidden.
android.app.NotificationManager.cancel,If it's persistent it will be removed from the status bar.
android.app.NotificationManager.cancel,Cancel a previously shown notification. If it's transient the view will be hidden. If it's persistent it will be removed from the status bar.
android.app.NotificationManager.cancel,Cancel.
android.app.NotificationManager.cancel,Cancel a previously shown notification.
android.app.NotificationManager.cancel,If it's transient the view will be hidden.
android.app.NotificationManager.cancel,If it's persistent it will be removed from the status bar.
android.app.NotificationManager.cancelAll,Cancel all previously shown notifications. See cancel(int) for the detailed behavior.
android.app.NotificationManager.cancelAll,Cancel all.
android.app.NotificationManager.cancelAll,Cancel all previously shown notifications.
android.app.NotificationManager.cancelAll,See cancel(int) for the detailed behavior.
android.app.NotificationManager.notify,Post a notification to be shown in the status bar. If a notification with the same id has already been posted by your application and has not yet been canceled it will be replaced by the updated information.
android.app.NotificationManager.notify,Notify.
android.app.NotificationManager.notify,Post a notification to be shown in the status bar.
android.app.NotificationManager.notify,If a notification with the same id has already been posted by your application and has not yet been canceled it will be replaced by the updated information.
android.app.NotificationManager.notify,Posts a notification to be shown in the status bar. If a notification with the same tag and id has already been posted by your application and has not yet been canceled it will be replaced by the updated information. All listener services will be granted Intent#FLAG_GRANT_READ_URI_PERMISSION access to any Uri provided on this notification or the NotificationChannel this notification is posted to using Context#grantUriPermission(String Uri int). Permission will be revoked when the notification is canceled or you can revoke permissions with Context#revokeUriPermission(Uri int).
android.app.NotificationManager.notify,Notify.
android.app.NotificationManager.notify,Posts a notification to be shown in the status bar.
android.app.NotificationManager.notify,If a notification with the same tag and id has already been posted by your application and has not yet been canceled it will be replaced by the updated information.
android.app.NotificationManager.notify,All listener services will be granted Intent#FLAG_GRANT_READ_URI_PERMISSION access to any Uri provided on this notification or the NotificationChannel this notification is posted to using Context#grantUriPermission(String Uri int).
android.app.NotificationManager.notify,Permission will be revoked when the notification is canceled or you can revoke permissions with Context#revokeUriPermission(Uri int).
android.app.PendingIntent.cancel,Cancel a currently active PendingIntent. Only the original application owning a PendingIntent can cancel it.
android.app.PendingIntent.cancel,Cancel.
android.app.PendingIntent.cancel,Cancel a currently active PendingIntent.
android.app.PendingIntent.cancel,Only the original application owning a PendingIntent can cancel it.
android.app.PendingIntent.equals,Comparison operator on two PendingIntent objects such that true is returned then they both represent the same operation from the same package. This allows you to use getActivity(Context int Intent int) getBroadcast(Context int Intent int) or getService(Context int Intent int) multiple times (even across a process being killed) resulting in different PendingIntent objects but whose equals() method identifies them as being the same operation.
android.app.PendingIntent.equals,Equals.
android.app.PendingIntent.equals,Comparison operator on two PendingIntent objects such that true is returned then they both represent the same operation from the same package.
android.app.PendingIntent.equals,This allows you to use getActivity(Context int Intent int) getBroadcast(Context int Intent int) or getService(Context int Intent int) multiple times (even across a process being killed) resulting in different PendingIntent objects but whose equals() method identifies them as being the same operation.
android.app.PendingIntent.getActivities,Like getActivity(android.content.Context int android.content.Intent int) but allows an array of Intents to be supplied. The last Intent in the array is taken as the primary key for the PendingIntent like the single Intent given to getActivity(android.content.Context int android.content.Intent int). Upon sending the resulting PendingIntent all of the Intents are started in the same way as they would be by passing them to Context#startActivities(Intent[]). The first intent in the array will be started outside of the context of an existing activity so you must use the Intent#FLAG_ACTIVITY_NEW_TASK launch flag in the Intent. (Activities after the first in the array are started in the context of the previous activity in the array so FLAG_ACTIVITY_NEW_TASK is not needed nor desired for them.) The last intent in the array represents the key for the PendingIntent. In other words it is the significant element for matching (as done with the single intent given to getActivity(android.content.Context int android.content.Intent int) its content will be the subject of replacement by send(android.content.Context int android.content.Intent) and FLAG_UPDATE_CURRENT etc. This is because it is the most specific of the supplied intents and the UI the user actually sees when the intents are started. For security reasons the Intent objects you supply here should almost always be explicit intents that is specify an explicit component to be delivered to through Intent#setClass(android.content.Context Class).
android.app.PendingIntent.getActivities,Get activities.
android.app.PendingIntent.getActivities,Like getActivity(android.content.Context int android.content.Intent int) but allows an array of Intents to be supplied.
android.app.PendingIntent.getActivities,The last Intent in the array is taken as the primary key for the PendingIntent like the single Intent given to getActivity(android.content.Context int android.content.Intent int).
android.app.PendingIntent.getActivities,Upon sending the resulting PendingIntent all of the Intents are started in the same way as they would be by passing them to Context#startActivities(Intent[]).
android.app.PendingIntent.getActivities,The first intent in the array will be started outside of the context of an existing activity so you must use the Intent#FLAG_ACTIVITY_NEW_TASK launch flag in the Intent.
android.app.PendingIntent.getActivities,(Activities after the first in the array are started in the context of the previous activity in the array so FLAG_ACTIVITY_NEW_TASK is not needed nor desired for them.) The last intent in the array represents the key for the PendingIntent.
android.app.PendingIntent.getActivities,In other words it is the significant element for matching (as done with the single intent given to getActivity(android.content.Context int android.content.Intent int) its content will be the subject of replacement by send(android.content.Context int android.content.Intent) and FLAG_UPDATE_CURRENT etc.
android.app.PendingIntent.getActivities,This is because it is the most specific of the supplied intents and the UI the user actually sees when the intents are started.
android.app.PendingIntent.getActivities,For security reasons the Intent objects you supply here should almost always be explicit intents that is specify an explicit component to be delivered to through Intent#setClass(android.content.Context Class).
android.app.PendingIntent.getActivities,Like getActivity(android.content.Context int android.content.Intent int) but allows an array of Intents to be supplied. The last Intent in the array is taken as the primary key for the PendingIntent like the single Intent given to getActivity(android.content.Context int android.content.Intent int). Upon sending the resulting PendingIntent all of the Intents are started in the same way as they would be by passing them to Context#startActivities(Intent[]). The first intent in the array will be started outside of the context of an existing activity so you must use the Intent#FLAG_ACTIVITY_NEW_TASK launch flag in the Intent. (Activities after the first in the array are started in the context of the previous activity in the array so FLAG_ACTIVITY_NEW_TASK is not needed nor desired for them.) The last intent in the array represents the key for the PendingIntent. In other words it is the significant element for matching (as done with the single intent given to getActivity(android.content.Context int android.content.Intent int) its content will be the subject of replacement by send(android.content.Context int android.content.Intent) and FLAG_UPDATE_CURRENT etc. This is because it is the most specific of the supplied intents and the UI the user actually sees when the intents are started. For security reasons the Intent objects you supply here should almost always be explicit intents that is specify an explicit component to be delivered to through Intent#setClass(android.content.Context Class).
android.app.PendingIntent.getActivities,Get activities.
android.app.PendingIntent.getActivities,Like getActivity(android.content.Context int android.content.Intent int) but allows an array of Intents to be supplied.
android.app.PendingIntent.getActivities,The last Intent in the array is taken as the primary key for the PendingIntent like the single Intent given to getActivity(android.content.Context int android.content.Intent int).
android.app.PendingIntent.getActivities,Upon sending the resulting PendingIntent all of the Intents are started in the same way as they would be by passing them to Context#startActivities(Intent[]).
android.app.PendingIntent.getActivities,The first intent in the array will be started outside of the context of an existing activity so you must use the Intent#FLAG_ACTIVITY_NEW_TASK launch flag in the Intent.
android.app.PendingIntent.getActivities,(Activities after the first in the array are started in the context of the previous activity in the array so FLAG_ACTIVITY_NEW_TASK is not needed nor desired for them.) The last intent in the array represents the key for the PendingIntent.
android.app.PendingIntent.getActivities,In other words it is the significant element for matching (as done with the single intent given to getActivity(android.content.Context int android.content.Intent int) its content will be the subject of replacement by send(android.content.Context int android.content.Intent) and FLAG_UPDATE_CURRENT etc.
android.app.PendingIntent.getActivities,This is because it is the most specific of the supplied intents and the UI the user actually sees when the intents are started.
android.app.PendingIntent.getActivities,For security reasons the Intent objects you supply here should almost always be explicit intents that is specify an explicit component to be delivered to through Intent#setClass(android.content.Context Class).
android.app.PendingIntent.getActivity,Retrieve a PendingIntent that will start a new activity like calling Context#startActivity(Intent). Note that the activity will be started outside of the context of an existing activity so you must use the Intent#FLAG_ACTIVITY_NEW_TASK launch flag in the Intent. For security reasons the Intent you supply here should almost always be an explicit intent that is specify an explicit component to be delivered to through Intent#setClass(android.content.Context Class).
android.app.PendingIntent.getActivity,Get activity.
android.app.PendingIntent.getActivity,Retrieve a PendingIntent that will start a new activity like calling Context#startActivity(Intent).
android.app.PendingIntent.getActivity,Note that the activity will be started outside of the context of an existing activity so you must use the Intent#FLAG_ACTIVITY_NEW_TASK launch flag in the Intent.
android.app.PendingIntent.getActivity,For security reasons the Intent you supply here should almost always be an explicit intent that is specify an explicit component to be delivered to through Intent#setClass(android.content.Context Class).
android.app.PendingIntent.getActivity,Retrieve a PendingIntent that will start a new activity like calling Context#startActivity(Intent). Note that the activity will be started outside of the context of an existing activity so you must use the Intent#FLAG_ACTIVITY_NEW_TASK launch flag in the Intent. For security reasons the Intent you supply here should almost always be an explicit intent that is specify an explicit component to be delivered to through Intent#setClass(android.content.Context Class).
android.app.PendingIntent.getActivity,Get activity.
android.app.PendingIntent.getActivity,Retrieve a PendingIntent that will start a new activity like calling Context#startActivity(Intent).
android.app.PendingIntent.getActivity,Note that the activity will be started outside of the context of an existing activity so you must use the Intent#FLAG_ACTIVITY_NEW_TASK launch flag in the Intent.
android.app.PendingIntent.getActivity,For security reasons the Intent you supply here should almost always be an explicit intent that is specify an explicit component to be delivered to through Intent#setClass(android.content.Context Class).
android.app.PendingIntent.getBroadcast,Retrieve a PendingIntent that will perform a broadcast like calling Context#sendBroadcast(Intent). For security reasons the Intent you supply here should almost always be an explicit intent that is specify an explicit component to be delivered to through Intent#setClass(android.content.Context Class).
android.app.PendingIntent.getBroadcast,Get broadcast.
android.app.PendingIntent.getBroadcast,Retrieve a PendingIntent that will perform a broadcast like calling Context#sendBroadcast(Intent).
android.app.PendingIntent.getBroadcast,For security reasons the Intent you supply here should almost always be an explicit intent that is specify an explicit component to be delivered to through Intent#setClass(android.content.Context Class).
android.app.PendingIntent.getCreatorPackage,Return the package name of the application that created this PendingIntent that is the identity under which you will actually be sending the Intent. The returned string is supplied by the system so that an application can not spoof its package. Be careful about how you use this. All this tells you is who created the PendingIntent. It does not tell you who handed the PendingIntent to you: that is PendingIntent objects are intended to be passed between applications so the PendingIntent you receive from an application could actually be one it received from another application meaning the result you get here will identify the original application. Because of this you should only use this information to identify who you expect to be interacting with through a send() call not who gave you the PendingIntent.
android.app.PendingIntent.getCreatorPackage,Get creator package.
android.app.PendingIntent.getCreatorPackage,Return the package name of the application that created this PendingIntent that is the identity under which you will actually be sending the Intent.
android.app.PendingIntent.getCreatorPackage,The returned string is supplied by the system so that an application can not spoof its package.
android.app.PendingIntent.getCreatorPackage,Be careful about how you use this.
android.app.PendingIntent.getCreatorPackage,All this tells you is who created the PendingIntent.
android.app.PendingIntent.getCreatorPackage,It does not tell you who handed the PendingIntent to you: that is PendingIntent objects are intended to be passed between applications so the PendingIntent you receive from an application could actually be one it received from another application meaning the result you get here will identify the original application.
android.app.PendingIntent.getCreatorPackage,Because of this you should only use this information to identify who you expect to be interacting with through a send() call not who gave you the PendingIntent.
android.app.PendingIntent.getIntentSender,Retrieve a IntentSender object that wraps the existing sender of the PendingIntent.
android.app.PendingIntent.getIntentSender,Get intent sender.
android.app.PendingIntent.getService,Retrieve a PendingIntent that will start a service like calling Context#startService. The start arguments given to the service will come from the extras of the Intent. For security reasons the Intent you supply here should almost always be an explicit intent that is specify an explicit component to be delivered to through Intent#setClass(android.content.Context Class).
android.app.PendingIntent.getService,Get service.
android.app.PendingIntent.getService,Retrieve a PendingIntent that will start a service like calling Context#startService.
android.app.PendingIntent.getService,The start arguments given to the service will come from the extras of the Intent.
android.app.PendingIntent.getService,For security reasons the Intent you supply here should almost always be an explicit intent that is specify an explicit component to be delivered to through Intent#setClass(android.content.Context Class).
android.app.PendingIntent.getTargetPackage,This method was deprecated in API level 17. Renamed to getCreatorPackage().
android.app.PendingIntent.getTargetPackage,Get target package.
android.app.PendingIntent.getTargetPackage,This method was deprecated in API level 17.
android.app.PendingIntent.getTargetPackage,Renamed to getCreatorPackage().
android.app.PendingIntent.hashCode,Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by HashMap. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application the hashCode method must consistently return the same integer provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the equals(java.lang.Object) method then calling the hashCode method on each of the two objects must produce distinct integer results. However the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer but this implementation technique is not required by the Java™ programming language.).
android.app.PendingIntent.hashCode,Hash code.
android.app.PendingIntent.hashCode,Returns a hash code value for the object.
android.app.PendingIntent.hashCode,This method is supported for the benefit of hash tables such as those provided by HashMap.
android.app.PendingIntent.hashCode,The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application the hashCode method must consistently return the same integer provided no information used in equals comparisons on the object is modified.
android.app.PendingIntent.hashCode,This integer need not remain consistent from one execution of an application to another execution of the same application.
android.app.PendingIntent.hashCode,If two objects are equal according to the equals(Object) method then calling the hashCode method on each of the two objects must produce the same integer result.
android.app.PendingIntent.hashCode,It is not required that if two objects are unequal according to the equals(java.lang.Object) method then calling the hashCode method on each of the two objects must produce distinct integer results.
android.app.PendingIntent.hashCode,However the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables.
android.app.PendingIntent.hashCode,As much as is reasonably practical the hashCode method defined by class Object does return distinct integers for distinct objects.
android.app.PendingIntent.hashCode,(This is typically implemented by converting the internal address of the object into an integer but this implementation technique is not required by the Java™ programming language.).
android.app.PendingIntent.send,Perform the operation associated with this PendingIntent allowing the caller to specify information about the Intent to use and be notified when the send has completed. For the intent parameter a PendingIntent often has restrictions on which fields can be supplied here based on how the PendingIntent was retrieved in getActivity(Context int Intent int) getBroadcast(Context int Intent int) or getService(Context int Intent int).
android.app.PendingIntent.send,Send.
android.app.PendingIntent.send,Perform the operation associated with this PendingIntent allowing the caller to specify information about the Intent to use and be notified when the send has completed.
android.app.PendingIntent.send,For the intent parameter a PendingIntent often has restrictions on which fields can be supplied here based on how the PendingIntent was retrieved in getActivity(Context int Intent int) getBroadcast(Context int Intent int) or getService(Context int Intent int).
android.app.PendingIntent.send,Perform the operation associated with this PendingIntent.
android.app.PendingIntent.send,Send.
android.app.PendingIntent.send,Perform the operation associated with this PendingIntent allowing the caller to specify information about the Intent to use and be notified when the send has completed. For the intent parameter a PendingIntent often has restrictions on which fields can be supplied here based on how the PendingIntent was retrieved in getActivity(Context int Intent int) getBroadcast(Context int Intent int) or getService(Context int Intent int).
android.app.PendingIntent.send,Send.
android.app.PendingIntent.send,Perform the operation associated with this PendingIntent allowing the caller to specify information about the Intent to use and be notified when the send has completed.
android.app.PendingIntent.send,For the intent parameter a PendingIntent often has restrictions on which fields can be supplied here based on how the PendingIntent was retrieved in getActivity(Context int Intent int) getBroadcast(Context int Intent int) or getService(Context int Intent int).
android.app.PendingIntent.send,Perform the operation associated with this PendingIntent allowing the caller to specify information about the Intent to use and be notified when the send has completed. For the intent parameter a PendingIntent often has restrictions on which fields can be supplied here based on how the PendingIntent was retrieved in getActivity(Context int Intent int) getBroadcast(Context int Intent int) or getService(Context int Intent int).
android.app.PendingIntent.send,Send.
android.app.PendingIntent.send,Perform the operation associated with this PendingIntent allowing the caller to specify information about the Intent to use and be notified when the send has completed.
android.app.PendingIntent.send,For the intent parameter a PendingIntent often has restrictions on which fields can be supplied here based on how the PendingIntent was retrieved in getActivity(Context int Intent int) getBroadcast(Context int Intent int) or getService(Context int Intent int).
android.app.PendingIntent.send,Perform the operation associated with this PendingIntent allowing the caller to be notified when the send has completed.
android.app.PendingIntent.send,Send.
android.app.PendingIntent.send,Perform the operation associated with this PendingIntent allowing the caller to specify information about the Intent to use.
android.app.PendingIntent.send,Send.
android.app.PendingIntent.send,Perform the operation associated with this PendingIntent.
android.app.PendingIntent.send,Send.
android.app.ProgressDialog.onStart,Called when the dialog is starting.
android.app.ProgressDialog.onStart,On start.
android.app.ProgressDialog.setProgressNumberFormat,"Change the format of the small text showing current and maximum units of progress. The default is ""%1d/%2d"". Should not be called during the number is progressing."
android.app.ProgressDialog.setProgressNumberFormat,Set progress number format.
android.app.ProgressDialog.setProgressNumberFormat,Change the format of the small text showing current and maximum units of progress.
android.app.ProgressDialog.setProgressNumberFormat,"The default is ""%1d/%2d""."
android.app.ProgressDialog.setProgressNumberFormat,Should not be called during the number is progressing.
android.app.RemoteInput.addResultsToIntent,Populate an intent object with the text results gathered from remote input. This method should only be called by remote input collection services when sending results to a pending intent.
android.app.RemoteInput.addResultsToIntent,Add results to intent.
android.app.RemoteInput.addResultsToIntent,Populate an intent object with the text results gathered from remote input.
android.app.RemoteInput.addResultsToIntent,This method should only be called by remote input collection services when sending results to a pending intent.
android.app.RemoteInput.getAllowFreeFormInput,Get whether or not users can provide an arbitrary value for input. If you set this to false users must select one of the choices in getChoices(). An IllegalArgumentException is thrown if you set this to false and getChoices() returns null or empty.
android.app.RemoteInput.getAllowFreeFormInput,Get allow free form input.
android.app.RemoteInput.getAllowFreeFormInput,Get whether or not users can provide an arbitrary value for input.
android.app.RemoteInput.getAllowFreeFormInput,If you set this to false users must select one of the choices in getChoices().
android.app.RemoteInput.getAllowFreeFormInput,An IllegalArgumentException is thrown if you set this to false and getChoices() returns null or empty.
android.app.RemoteInput.getChoices,Get possible input choices. This can be null if there are no choices to present.
android.app.RemoteInput.getChoices,Get choices.
android.app.RemoteInput.getChoices,Get possible input choices.
android.app.RemoteInput.getChoices,This can be null if there are no choices to present.
android.app.RemoteInput.getExtras,Get additional metadata carried around with this remote input.
android.app.RemoteInput.getExtras,Get extras.
android.app.RemoteInput.getLabel,Get the label to display to users when collecting this input.
android.app.RemoteInput.getLabel,Get label.
android.app.RemoteInput.getResultKey,Get the key that the result of this input will be set in from the Bundle returned by getResultsFromIntent(Intent) when the PendingIntent is sent.
android.app.RemoteInput.getResultKey,Get result key.
android.app.RemoteInput.getResultsFromIntent,Get the remote input text results bundle from an intent. The returned Bundle will contain a key/value for every result key populated with text by remote input collector. Use the Bundle#getCharSequence(String) method to retrieve a value. For non-text results use getDataResultsFromIntent(Intent String).
android.app.RemoteInput.getResultsFromIntent,Get results from intent.
android.app.RemoteInput.getResultsFromIntent,Get the remote input text results bundle from an intent.
android.app.RemoteInput.getResultsFromIntent,The returned Bundle will contain a key/value for every result key populated with text by remote input collector.
android.app.RemoteInput.getResultsFromIntent,Use the Bundle#getCharSequence(String) method to retrieve a value.
android.app.RemoteInput.getResultsFromIntent,For non-text results use getDataResultsFromIntent(Intent String).
android.app.SearchableInfo.getHintId,Gets the resource id of the hint text. This must be read using the searchable Activity's resources.
android.app.SearchableInfo.getHintId,Get hint id.
android.app.SearchableInfo.getHintId,Gets the resource id of the hint text.
android.app.SearchableInfo.getHintId,This must be read using the searchable Activity's resources.
android.app.SearchableInfo.getImeOptions,Gets the input method options specified in the searchable attributes. This will default to EditorInfo#IME_ACTION_GO if not specified (which is appropriate for a search box).
android.app.SearchableInfo.getImeOptions,Get ime options.
android.app.SearchableInfo.getImeOptions,Gets the input method options specified in the searchable attributes.
android.app.SearchableInfo.getImeOptions,This will default to EditorInfo#IME_ACTION_GO if not specified (which is appropriate for a search box).
android.app.SearchableInfo.getInputType,Gets the input type as specified in the searchable attributes. This will default to InputType#TYPE_CLASS_TEXT if not specified (which is appropriate for free text input).
android.app.SearchableInfo.getInputType,Get input type.
android.app.SearchableInfo.getInputType,Gets the input type as specified in the searchable attributes.
android.app.SearchableInfo.getInputType,This will default to InputType#TYPE_CLASS_TEXT if not specified (which is appropriate for free text input).
android.app.SearchableInfo.getSearchActivity,Gets the component name of the searchable activity.
android.app.SearchableInfo.getSearchActivity,Get search activity.
android.app.SearchableInfo.getSuggestAuthority,Gets the search suggestion content provider authority.
android.app.SearchableInfo.getSuggestAuthority,Get suggest authority.
android.app.SearchableInfo.getSuggestIntentAction,Gets the optional intent action for use with these suggestions. This is useful if all intents will have the same action (e.g. Intent.ACTION_VIEW ) This can be overriden in any given suggestion using the column SearchManager#SUGGEST_COLUMN_INTENT_ACTION.
android.app.SearchableInfo.getSuggestIntentAction,Get suggest intent action.
android.app.SearchableInfo.getSuggestIntentAction,Gets the optional intent action for use with these suggestions.
android.app.SearchableInfo.getSuggestIntentAction,This is useful if all intents will have the same action (e.g.
android.app.SearchableInfo.getSuggestIntentAction,Intent.ACTION_VIEW ) This can be overriden in any given suggestion using the column SearchManager#SUGGEST_COLUMN_INTENT_ACTION.
android.app.SearchableInfo.getSuggestIntentData,Gets the optional intent data for use with these suggestions. This is useful if all intents will have similar data URIs but you'll likely need to provide a specific ID as well via the column SearchManager#SUGGEST_COLUMN_INTENT_DATA_ID which will be appended to the intent data URI. This can be overriden in any given suggestion using the column SearchManager#SUGGEST_COLUMN_INTENT_DATA.
android.app.SearchableInfo.getSuggestIntentData,Get suggest intent data.
android.app.SearchableInfo.getSuggestIntentData,Gets the optional intent data for use with these suggestions.
android.app.SearchableInfo.getSuggestIntentData,This is useful if all intents will have similar data URIs but you'll likely need to provide a specific ID as well via the column SearchManager#SUGGEST_COLUMN_INTENT_DATA_ID which will be appended to the intent data URI.
android.app.SearchableInfo.getSuggestIntentData,This can be overriden in any given suggestion using the column SearchManager#SUGGEST_COLUMN_INTENT_DATA.
android.app.SearchableInfo.getSuggestPath,Gets the content provider path for obtaining search suggestions.
android.app.SearchableInfo.getSuggestPath,Get suggest path.
android.app.SearchableInfo.getSuggestSelection,Gets the selection for obtaining search suggestions.
android.app.SearchableInfo.getSuggestSelection,Get suggest selection.
android.app.SearchableInfo.getSuggestThreshold,Gets the suggestion threshold.
android.app.SearchableInfo.getSuggestThreshold,Get suggest threshold.
android.app.SearchableInfo.getVoiceLanguageId,Gets the resource id of the spoken language to recognize in voice search.
android.app.SearchableInfo.getVoiceLanguageId,Get voice language id.
android.app.SearchableInfo.getVoiceLanguageModeId,Gets the resource id of the voice search language model string.
android.app.SearchableInfo.getVoiceLanguageModeId,Get voice language mode id.
android.app.SearchableInfo.getVoiceMaxResults,The maximum number of voice recognition results to return.
android.app.SearchableInfo.getVoiceMaxResults,Get voice max results.
android.app.SearchableInfo.getVoicePromptTextId,Gets the resource id of the voice prompt text string.
android.app.SearchableInfo.getVoicePromptTextId,Get voice prompt text id.
android.app.SearchableInfo.getVoiceSearchEnabled,Checks if the searchable activity wants the voice search button to be shown.
android.app.SearchableInfo.getVoiceSearchEnabled,Get voice search enabled.
android.app.SearchableInfo.getVoiceSearchLaunchRecognizer,Checks if voice search should start in-app search.
android.app.SearchableInfo.getVoiceSearchLaunchRecognizer,Get voice search launch recognizer.
android.app.SearchableInfo.getVoiceSearchLaunchWebSearch,Checks if voice search should start web search.
android.app.SearchableInfo.getVoiceSearchLaunchWebSearch,Get voice search launch web search.
android.app.SearchableInfo.shouldRewriteQueryFromData,Checks whether the text in the query field should come from the suggestion intent data.
android.app.SearchableInfo.shouldRewriteQueryFromData,Should rewrite query from data.
android.app.SearchableInfo.shouldRewriteQueryFromText,Checks whether the text in the query field should come from the suggestion title.
android.app.SearchableInfo.shouldRewriteQueryFromText,Should rewrite query from text.
android.app.SearchManager.getSearchableInfo,Gets information about a searchable activity.
android.app.SearchManager.getSearchableInfo,Get searchable info.
android.app.Service.getApplication,Return the application that owns this service.
android.app.Service.getApplication,Get application.
android.app.Service.onRebind,Called when new clients have connected to the service after it had previously been notified that all had disconnected in its onUnbind(Intent). This will only be called if the implementation of onUnbind(Intent) was overridden to return true.
android.app.Service.onRebind,On rebind.
android.app.Service.onRebind,Called when new clients have connected to the service after it had previously been notified that all had disconnected in its onUnbind(Intent).
android.app.Service.onRebind,This will only be called if the implementation of onUnbind(Intent) was overridden to return true.
android.app.Service.onStart,This method was deprecated in API level 15. Implement onStartCommand(android.content.Intent int int) instead.
android.app.Service.onStart,On start.
android.app.Service.onStart,This method was deprecated in API level 15.
android.app.Service.onStart,Implement onStartCommand(android.content.Intent int int) instead.
android.app.Service.onStartCommand,Called by the system every time a client explicitly starts the service by calling Context.startService(Intent) providing the arguments it supplied and a unique integer token representing the start request. Do not call this method directly. For backwards compatibility the default implementation calls onStart(Intent int) and returns either START_STICKY or START_STICKY_COMPATIBILITY. Note that the system calls this on your service's main thread. A service's main thread is the same thread where UI operations take place for Activities running in the same process. You should always avoid stalling the main thread's event loop. When doing long-running operations network calls or heavy disk I/O you should kick off a new thread or use AsyncTask.
android.app.Service.onStartCommand,On start command.
android.app.Service.onStartCommand,Called by the system every time a client explicitly starts the service by calling Context.startService(Intent) providing the arguments it supplied and a unique integer token representing the start request.
android.app.Service.onStartCommand,Do not call this method directly.
android.app.Service.onStartCommand,For backwards compatibility the default implementation calls onStart(Intent int) and returns either START_STICKY or START_STICKY_COMPATIBILITY.
android.app.Service.onStartCommand,Note that the system calls this on your service's main thread.
android.app.Service.onStartCommand,A service's main thread is the same thread where UI operations take place for Activities running in the same process.
android.app.Service.onStartCommand,You should always avoid stalling the main thread's event loop.
android.app.Service.onStartCommand,When doing long-running operations network calls or heavy disk I/O you should kick off a new thread or use AsyncTask.
android.app.Service.onTaskRemoved,This is called if the service is currently running and the user has removed a task that comes from the service's application. If you have set ServiceInfo.FLAG_STOP_WITH_TASK then you will not receive this callback; instead the service will simply be stopped.
android.app.Service.onTaskRemoved,On task removed.
android.app.Service.onTaskRemoved,This is called if the service is currently running and the user has removed a task that comes from the service's application.
android.app.Service.onTaskRemoved,If you have set ServiceInfo.FLAG_STOP_WITH_TASK then you will not receive this callback; instead the service will simply be stopped.
android.app.Service.onUnbind,Called when all clients have disconnected from a particular interface published by the service. The default implementation does nothing and returns false.
android.app.Service.onUnbind,On unbind.
android.app.Service.onUnbind,Called when all clients have disconnected from a particular interface published by the service.
android.app.Service.onUnbind,The default implementation does nothing and returns false.
android.app.Service.startForeground,If your service is started (running through Context#startService(Intent) ) then also make this service run in the foreground supplying the ongoing notification to be shown to the user while in this state. By default started services are background meaning that their process won't be given foreground CPU scheduling (unless something else in that process is foreground) and if the system needs to kill them to reclaim more memory (such as to display a large page in a web browser) they can be killed without too much harm. You use startForeground(int Notification) if killing your service would be disruptive to the user such as if your service is performing background music playback so the user would notice if their music stopped playing. Note that calling this method does not put the service in the started state itself even though the name sounds like it. You must always call ContextWrapper.startService(android.content.Intent) first to tell the system it should keep the service running and then use this method to tell it to keep it running harder. Apps targeting API Build.VERSION_CODES.P or later must request the permission Manifest.permission.FOREGROUND_SERVICE in order to use this API. Apps built with SDK version Build.VERSION_CODES.Q or later can specify the foreground service types using attribute R.attr.foregroundServiceType in service element of manifest file. The value of attribute R.attr.foregroundServiceType can be multiple flags ORed together.
android.app.Service.startForeground,Start foreground.
android.app.Service.startForeground,If your service is started (running through Context#startService(Intent) ) then also make this service run in the foreground supplying the ongoing notification to be shown to the user while in this state.
android.app.Service.startForeground,By default started services are background meaning that their process won't be given foreground CPU scheduling (unless something else in that process is foreground) and if the system needs to kill them to reclaim more memory (such as to display a large page in a web browser) they can be killed without too much harm.
android.app.Service.startForeground,You use startForeground(int Notification) if killing your service would be disruptive to the user such as if your service is performing background music playback so the user would notice if their music stopped playing.
android.app.Service.startForeground,Note that calling this method does not put the service in the started state itself even though the name sounds like it.
android.app.Service.startForeground,You must always call ContextWrapper.startService(android.content.Intent) first to tell the system it should keep the service running and then use this method to tell it to keep it running harder.
android.app.Service.startForeground,Apps targeting API Build.VERSION_CODES.P or later must request the permission Manifest.permission.FOREGROUND_SERVICE in order to use this API.
android.app.Service.startForeground,Apps built with SDK version Build.VERSION_CODES.Q or later can specify the foreground service types using attribute R.attr.foregroundServiceType in service element of manifest file.
android.app.Service.startForeground,The value of attribute R.attr.foregroundServiceType can be multiple flags ORed together.
android.app.Service.startForeground,An overloaded version of startForeground(int android.app.Notification) with additional foregroundServiceType parameter. Apps built with SDK version Build.VERSION_CODES.Q or later can specify the foreground service types using attribute R.attr.foregroundServiceType in service element of manifest file. The value of attribute R.attr.foregroundServiceType can be multiple flags ORed together. The foregroundServiceType parameter must be a subset flags of what is specified in manifest attribute R.attr.foregroundServiceType if not an IllegalArgumentException is thrown. Specify foregroundServiceType parameter as ServiceInfo.FOREGROUND_SERVICE_TYPE_MANIFEST to use all flags that is specified in manifest attribute foregroundServiceType.
android.app.Service.startForeground,Start foreground.
android.app.Service.startForeground,An overloaded version of startForeground(int android.app.Notification) with additional foregroundServiceType parameter.
android.app.Service.startForeground,Apps built with SDK version Build.VERSION_CODES.Q or later can specify the foreground service types using attribute R.attr.foregroundServiceType in service element of manifest file.
android.app.Service.startForeground,The value of attribute R.attr.foregroundServiceType can be multiple flags ORed together.
android.app.Service.startForeground,The foregroundServiceType parameter must be a subset flags of what is specified in manifest attribute R.attr.foregroundServiceType if not an IllegalArgumentException is thrown.
android.app.Service.startForeground,Specify foregroundServiceType parameter as ServiceInfo.FOREGROUND_SERVICE_TYPE_MANIFEST to use all flags that is specified in manifest attribute foregroundServiceType.
android.app.Service.stopSelf,Stop the service if it was previously started. This is the same as calling Context.stopService(Intent) for this particular service.
android.app.Service.stopSelf,Stop self.
android.app.Service.stopSelf,Stop the service if it was previously started.
android.app.Service.stopSelf,This is the same as calling Context.stopService(Intent) for this particular service.
android.app.Service.stopSelf,Old version of stopSelfResult(int) that doesn't return a result.
android.app.Service.stopSelf,Stop self.
android.app.TaskStackBuilder.addNextIntent,Add a new Intent to the task stack. The most recently added Intent will invoke the Activity at the top of the final task stack.
android.app.TaskStackBuilder.addNextIntent,Add next intent.
android.app.TaskStackBuilder.addNextIntent,Add a new Intent to the task stack.
android.app.TaskStackBuilder.addNextIntent,The most recently added Intent will invoke the Activity at the top of the final task stack.
android.app.TaskStackBuilder.addParentStack,Add the activity parent chain as specified by the parentActivityName attribute of the activity (or activity-alias) element in the application's manifest to the task stack builder.
android.app.TaskStackBuilder.addParentStack,Add parent stack.
android.app.TaskStackBuilder.addParentStack,Add the activity parent chain as specified by the Activity#getParentActivityIntent() method of the activity specified and the parentActivityName attributes of each successive activity (or activity-alias) element in the application's manifest to the task stack builder.
android.app.TaskStackBuilder.addParentStack,Add parent stack.
android.app.TaskStackBuilder.addParentStack,Add the activity parent chain as specified by the parentActivityName attribute of the activity (or activity-alias) element in the application's manifest to the task stack builder.
android.app.TaskStackBuilder.addParentStack,Add parent stack.
android.app.TaskStackBuilder.create,Return a new TaskStackBuilder for launching a fresh task stack consisting of a series of activities.
android.app.TaskStackBuilder.create,Create.
android.app.TaskStackBuilder.getPendingIntent,Obtain a PendingIntent for launching the task constructed by this builder so far.
android.app.TaskStackBuilder.getPendingIntent,Get pending intent.
android.app.TaskStackBuilder.getPendingIntent,Obtain a PendingIntent for launching the task constructed by this builder so far.
android.app.TaskStackBuilder.getPendingIntent,Get pending intent.
android.app.TaskStackBuilder.startActivities,Start the task stack constructed by this builder.
android.app.TaskStackBuilder.startActivities,Start activities.
android.app.TaskStackBuilder.startActivities,Start the task stack constructed by this builder.
android.app.TaskStackBuilder.startActivities,Start activities.
android.app.WallpaperInfo.getPackageName,Return the .apk package that implements this wallpaper.
android.app.WallpaperInfo.getPackageName,Get package name.
android.app.WallpaperInfo.getServiceInfo,Return the raw information about the Service implementing this wallpaper. Do not modify the returned object.
android.app.WallpaperInfo.getServiceInfo,Get service info.
android.app.WallpaperInfo.getServiceInfo,Return the raw information about the Service implementing this wallpaper.
android.app.WallpaperInfo.getServiceInfo,Do not modify the returned object.
android.app.WallpaperManager.forgetLoadedWallpaper,Remove all internal references to the last loaded wallpaper. Useful for apps that want to reduce memory usage when they only temporarily need to have the wallpaper. After calling the next request for the wallpaper will require reloading it again from disk.
android.app.WallpaperManager.forgetLoadedWallpaper,Forget loaded wallpaper.
android.app.WallpaperManager.forgetLoadedWallpaper,Remove all internal references to the last loaded wallpaper.
android.app.WallpaperManager.forgetLoadedWallpaper,Useful for apps that want to reduce memory usage when they only temporarily need to have the wallpaper.
android.app.WallpaperManager.forgetLoadedWallpaper,After calling the next request for the wallpaper will require reloading it again from disk.
android.app.WallpaperManager.getDesiredMinimumHeight,Returns the desired minimum height for the wallpaper. Callers of setBitmap(android.graphics.Bitmap) or setStream(java.io.InputStream) should check this value beforehand to make sure the supplied wallpaper respects the desired minimum height. If the returned value is <= 0 the caller should use the height of the default display instead.
android.app.WallpaperManager.getDesiredMinimumHeight,Get desired minimum height.
android.app.WallpaperManager.getDesiredMinimumHeight,Returns the desired minimum height for the wallpaper.
android.app.WallpaperManager.getDesiredMinimumHeight,Callers of setBitmap(android.graphics.Bitmap) or setStream(java.io.InputStream) should check this value beforehand to make sure the supplied wallpaper respects the desired minimum height.
android.app.WallpaperManager.getDesiredMinimumHeight,If the returned value is <= 0 the caller should use the height of the default display instead.
android.app.WallpaperManager.getDesiredMinimumWidth,Returns the desired minimum width for the wallpaper. Callers of setBitmap(android.graphics.Bitmap) or setStream(java.io.InputStream) should check this value beforehand to make sure the supplied wallpaper respects the desired minimum width. If the returned value is <= 0 the caller should use the width of the default display instead.
android.app.WallpaperManager.getDesiredMinimumWidth,Get desired minimum width.
android.app.WallpaperManager.getDesiredMinimumWidth,Returns the desired minimum width for the wallpaper.
android.app.WallpaperManager.getDesiredMinimumWidth,Callers of setBitmap(android.graphics.Bitmap) or setStream(java.io.InputStream) should check this value beforehand to make sure the supplied wallpaper respects the desired minimum width.
android.app.WallpaperManager.getDesiredMinimumWidth,If the returned value is <= 0 the caller should use the width of the default display instead.
android.app.WallpaperManager.getDrawable,Retrieve the current system wallpaper; if no wallpaper is set the system built-in static wallpaper is returned. This is returned as an abstract Drawable that you can install in a View to display whatever wallpaper the user has currently set. This method can return null if there is no system wallpaper available if wallpapers are not supported in the current user or if the calling app is not permitted to access the system wallpaper.
android.app.WallpaperManager.getDrawable,Get drawable.
android.app.WallpaperManager.getDrawable,Retrieve the current system wallpaper; if no wallpaper is set the system built-in static wallpaper is returned.
android.app.WallpaperManager.getDrawable,This is returned as an abstract Drawable that you can install in a View to display whatever wallpaper the user has currently set.
android.app.WallpaperManager.getDrawable,This method can return null if there is no system wallpaper available if wallpapers are not supported in the current user or if the calling app is not permitted to access the system wallpaper.
android.app.WallpaperManager.getInstance,Retrieve a WallpaperManager associated with the given Context.
android.app.WallpaperManager.getInstance,Get instance.
android.app.WallpaperManager.getWallpaperInfo,Returns the information about the wallpaper if the current wallpaper is a live wallpaper component. Otherwise if the wallpaper is a static image this returns null.
android.app.WallpaperManager.getWallpaperInfo,Get wallpaper info.
android.app.WallpaperManager.getWallpaperInfo,Returns the information about the wallpaper if the current wallpaper is a live wallpaper component.
android.app.WallpaperManager.getWallpaperInfo,Otherwise if the wallpaper is a static image this returns null.
android.app.WallpaperManager.sendWallpaperCommand,Send an arbitrary command to the current active wallpaper.
android.app.WallpaperManager.sendWallpaperCommand,Send wallpaper command.
android.app.WallpaperManager.setResource,Version of setResource(int) that allows the caller to specify which of the supported wallpaper categories to set. Requires Manifest.permission.SET_WALLPAPER.
android.app.WallpaperManager.setResource,Set resource.
android.app.WallpaperManager.setResource,Version of setResource(int) that allows the caller to specify which of the supported wallpaper categories to set.
android.app.WallpaperManager.setResource,Requires Manifest.permission.SET_WALLPAPER.
android.app.WallpaperManager.setResource,Change the current system wallpaper to the bitmap in the given resource. The resource is opened as a raw data stream and copied into the wallpaper; it must be a valid PNG or JPEG image. On success the intent Intent#ACTION_WALLPAPER_CHANGED is broadcast. This method requires the caller to hold the permission Manifest.permission.SET_WALLPAPER. Requires Manifest.permission.SET_WALLPAPER.
android.app.WallpaperManager.setResource,Set resource.
android.app.WallpaperManager.setResource,Change the current system wallpaper to the bitmap in the given resource.
android.app.WallpaperManager.setResource,The resource is opened as a raw data stream and copied into the wallpaper; it must be a valid PNG or JPEG image.
android.app.WallpaperManager.setResource,On success the intent Intent#ACTION_WALLPAPER_CHANGED is broadcast.
android.app.WallpaperManager.setResource,This method requires the caller to hold the permission Manifest.permission.SET_WALLPAPER.
android.app.WallpaperManager.setResource,Requires Manifest.permission.SET_WALLPAPER.
android.app.WallpaperManager.setStream,Change the current system wallpaper to a specific byte stream. The give InputStream is copied into persistent storage and will now be used as the wallpaper. Currently it must be either a JPEG or PNG image. On success the intent Intent#ACTION_WALLPAPER_CHANGED is broadcast. This method is equivalent to calling setStream(java.io.InputStream android.graphics.Rect boolean) and passing null for the visibleCrop rectangle and true for the allowBackup parameter. This method requires the caller to hold the permission Manifest.permission.SET_WALLPAPER. Requires Manifest.permission.SET_WALLPAPER.
android.app.WallpaperManager.setStream,Set stream.
android.app.WallpaperManager.setStream,Change the current system wallpaper to a specific byte stream.
android.app.WallpaperManager.setStream,The give InputStream is copied into persistent storage and will now be used as the wallpaper.
android.app.WallpaperManager.setStream,Currently it must be either a JPEG or PNG image.
android.app.WallpaperManager.setStream,On success the intent Intent#ACTION_WALLPAPER_CHANGED is broadcast.
android.app.WallpaperManager.setStream,This method is equivalent to calling setStream(java.io.InputStream android.graphics.Rect boolean) and passing null for the visibleCrop rectangle and true for the allowBackup parameter.
android.app.WallpaperManager.setStream,This method requires the caller to hold the permission Manifest.permission.SET_WALLPAPER.
android.app.WallpaperManager.setStream,Requires Manifest.permission.SET_WALLPAPER.
android.app.WallpaperManager.setStream,Version of setStream(java.io.InputStream android.graphics.Rect boolean) that allows the caller to specify which of the supported wallpaper categories to set. Requires Manifest.permission.SET_WALLPAPER.
android.app.WallpaperManager.setStream,Set stream.
android.app.WallpaperManager.setStream,Version of setStream(java.io.InputStream android.graphics.Rect boolean) that allows the caller to specify which of the supported wallpaper categories to set.
android.app.WallpaperManager.setStream,Requires Manifest.permission.SET_WALLPAPER.
android.app.WallpaperManager.setStream,Change the current system wallpaper to a specific byte stream specifying a hint about which subrectangle of the full image is to be visible. The OS will then try to best present the given portion of the full image as the static system wallpaper image. The data from the given InputStream is copied into persistent storage and will then be used as the system wallpaper. Currently the data must be either a JPEG or PNG image. On success the intent Intent#ACTION_WALLPAPER_CHANGED is broadcast. This method requires the caller to hold the permission Manifest.permission.SET_WALLPAPER. Requires Manifest.permission.SET_WALLPAPER.
android.app.WallpaperManager.setStream,Set stream.
android.app.WallpaperManager.setStream,Change the current system wallpaper to a specific byte stream specifying a hint about which subrectangle of the full image is to be visible.
android.app.WallpaperManager.setStream,The OS will then try to best present the given portion of the full image as the static system wallpaper image.
android.app.WallpaperManager.setStream,The data from the given InputStream is copied into persistent storage and will then be used as the system wallpaper.
android.app.WallpaperManager.setStream,Currently the data must be either a JPEG or PNG image.
android.app.WallpaperManager.setStream,On success the intent Intent#ACTION_WALLPAPER_CHANGED is broadcast.
android.app.WallpaperManager.setStream,This method requires the caller to hold the permission Manifest.permission.SET_WALLPAPER.
android.app.WallpaperManager.setStream,Requires Manifest.permission.SET_WALLPAPER.
android.app.WallpaperManager.setWallpaperOffsetSteps,For applications that use multiple virtual screens showing a wallpaper specify the step size between virtual screens. For example if the launcher has 3 virtual screens it would specify an xStep of 0.5 since the X offset for those screens are 0.0 0.5 and 1.0.
android.app.WallpaperManager.setWallpaperOffsetSteps,Set wallpaper offset steps.
android.app.WallpaperManager.setWallpaperOffsetSteps,For applications that use multiple virtual screens showing a wallpaper specify the step size between virtual screens.
android.app.WallpaperManager.setWallpaperOffsetSteps,For example if the launcher has 3 virtual screens it would specify an xStep of 0.5 since the X offset for those screens are 0.0 0.5 and 1.0.
android.app.WallpaperManager.setWallpaperOffsets,Set the display position of the current wallpaper within any larger space when that wallpaper is visible behind the given window. The X and Y offsets are floating point numbers ranging from 0 to 1 representing where the wallpaper should be positioned within the screen space. These only make sense when the wallpaper is larger than the display.
android.app.WallpaperManager.setWallpaperOffsets,Set wallpaper offsets.
android.app.WallpaperManager.setWallpaperOffsets,Set the display position of the current wallpaper within any larger space when that wallpaper is visible behind the given window.
android.app.WallpaperManager.setWallpaperOffsets,The X and Y offsets are floating point numbers ranging from 0 to 1 representing where the wallpaper should be positioned within the screen space.
android.app.WallpaperManager.setWallpaperOffsets,These only make sense when the wallpaper is larger than the display.
android.app.WallpaperManager.suggestDesiredDimensions,For use only by the current home application to specify the size of wallpaper it would like to use. This allows such applications to have a virtual wallpaper that is larger than the physical screen matching the size of their workspace. Note developers who don't seem to be reading this. This is for home apps to tell what size wallpaper they would like. Nobody else should be calling this! Certainly not other non-home apps that change the wallpaper. Those apps are supposed to retrieve the suggested size so they can construct a wallpaper that matches it. This method requires the caller to hold the permission Manifest.permission.SET_WALLPAPER_HINTS.
android.app.WallpaperManager.suggestDesiredDimensions,Suggest desired dimensions.
android.app.WallpaperManager.suggestDesiredDimensions,For use only by the current home application to specify the size of wallpaper it would like to use.
android.app.WallpaperManager.suggestDesiredDimensions,This allows such applications to have a virtual wallpaper that is larger than the physical screen matching the size of their workspace.
android.app.WallpaperManager.suggestDesiredDimensions,Note developers who don't seem to be reading this.
android.app.WallpaperManager.suggestDesiredDimensions,This is for home apps to tell what size wallpaper they would like.
android.app.WallpaperManager.suggestDesiredDimensions,Nobody else should be calling this! Certainly not other non-home apps that change the wallpaper.
android.app.WallpaperManager.suggestDesiredDimensions,Those apps are supposed to retrieve the suggested size so they can construct a wallpaper that matches it.
android.app.WallpaperManager.suggestDesiredDimensions,This method requires the caller to hold the permission Manifest.permission.SET_WALLPAPER_HINTS.
android.graphics.Bitmap.copyPixelsFromBuffer,Copy the pixels from the buffer beginning at the current position overwriting the bitmap's pixels. The data in the buffer is not changed in any way (unlike setPixels() which converts from unpremultipled 32bit to whatever the bitmap's native format is. The pixels in the source buffer are assumed to be in the bitmap's color space. After this method returns the current position of the buffer is updated: the position is incremented by the number of elements read from the buffer. If you need to read the bitmap from the buffer again you must first rewind the buffer.
android.graphics.Bitmap.copyPixelsFromBuffer,Copy pixels from buffer.
android.graphics.Bitmap.copyPixelsFromBuffer,Copy the pixels from the buffer beginning at the current position overwriting the bitmap's pixels.
android.graphics.Bitmap.copyPixelsFromBuffer,The data in the buffer is not changed in any way (unlike setPixels() which converts from unpremultipled 32bit to whatever the bitmap's native format is.
android.graphics.Bitmap.copyPixelsFromBuffer,The pixels in the source buffer are assumed to be in the bitmap's color space.
android.graphics.Bitmap.copyPixelsFromBuffer,After this method returns the current position of the buffer is updated: the position is incremented by the number of elements read from the buffer.
android.graphics.Bitmap.copyPixelsFromBuffer,If you need to read the bitmap from the buffer again you must first rewind the buffer.
android.graphics.Bitmap.copyPixelsToBuffer,Copy the bitmap's pixels into the specified buffer (allocated by the caller). An exception is thrown if the buffer is not large enough to hold all of the pixels (taking into account the number of bytes per pixel) or if the Buffer subclass is not one of the support types (ByteBuffer ShortBuffer IntBuffer). The content of the bitmap is copied into the buffer as-is. This means that if this bitmap stores its pixels pre-multiplied (see isPremultiplied() the values in the buffer will also be pre-multiplied. The pixels remain in the color space of the bitmap. After this method returns the current position of the buffer is updated: the position is incremented by the number of elements written in the buffer.
android.graphics.Bitmap.copyPixelsToBuffer,Copy pixels to buffer.
android.graphics.Bitmap.copyPixelsToBuffer,Copy the bitmap's pixels into the specified buffer (allocated by the caller).
android.graphics.Bitmap.copyPixelsToBuffer,An exception is thrown if the buffer is not large enough to hold all of the pixels (taking into account the number of bytes per pixel) or if the Buffer subclass is not one of the support types (ByteBuffer ShortBuffer IntBuffer).
android.graphics.Bitmap.copyPixelsToBuffer,The content of the bitmap is copied into the buffer as-is.
android.graphics.Bitmap.copyPixelsToBuffer,This means that if this bitmap stores its pixels pre-multiplied (see isPremultiplied() the values in the buffer will also be pre-multiplied.
android.graphics.Bitmap.copyPixelsToBuffer,The pixels remain in the color space of the bitmap.
android.graphics.Bitmap.copyPixelsToBuffer,After this method returns the current position of the buffer is updated: the position is incremented by the number of elements written in the buffer.
android.graphics.Bitmap.createBitmap,Returns a bitmap from the specified subset of the source bitmap. The new bitmap may be the same object as source or a copy may have been made. It is initialized with the same density and color space as the original bitmap.
android.graphics.Bitmap.createBitmap,Create bitmap.
android.graphics.Bitmap.createBitmap,Returns a bitmap from the specified subset of the source bitmap.
android.graphics.Bitmap.createBitmap,The new bitmap may be the same object as source or a copy may have been made.
android.graphics.Bitmap.createBitmap,It is initialized with the same density and color space as the original bitmap.
android.graphics.Bitmap.createBitmap,Returns a immutable bitmap with the specified width and height with each pixel value set to the corresponding value in the colors array. Its initial density is as per getDensity(). The newly created bitmap is in the ColorSpace.Named#SRGB color space.
android.graphics.Bitmap.createBitmap,Create bitmap.
android.graphics.Bitmap.createBitmap,Returns a immutable bitmap with the specified width and height with each pixel value set to the corresponding value in the colors array.
android.graphics.Bitmap.createBitmap,Its initial density is as per getDensity().
android.graphics.Bitmap.createBitmap,The newly created bitmap is in the ColorSpace.Named#SRGB color space.
android.graphics.Bitmap.createBitmap,Returns a bitmap from subset of the source bitmap transformed by the optional matrix. The new bitmap may be the same object as source or a copy may have been made. It is initialized with the same density and color space as the original bitmap. If the source bitmap is immutable and the requested subset is the same as the source bitmap itself then the source bitmap is returned and no new bitmap is created. The returned bitmap will always be mutable except in the following scenarios: (1) In situations where the source bitmap is returned and the source bitmap is immutable (2) The source bitmap is a hardware bitmap. That is getConfig() is equivalent to Config#HARDWARE.
android.graphics.Bitmap.createBitmap,Create bitmap.
android.graphics.Bitmap.createBitmap,Returns a bitmap from subset of the source bitmap transformed by the optional matrix.
android.graphics.Bitmap.createBitmap,The new bitmap may be the same object as source or a copy may have been made.
android.graphics.Bitmap.createBitmap,It is initialized with the same density and color space as the original bitmap.
android.graphics.Bitmap.createBitmap,If the source bitmap is immutable and the requested subset is the same as the source bitmap itself then the source bitmap is returned and no new bitmap is created.
android.graphics.Bitmap.createBitmap,The returned bitmap will always be mutable except in the following scenarios: (1) In situations where the source bitmap is returned and the source bitmap is immutable (2) The source bitmap is a hardware bitmap.
android.graphics.Bitmap.createBitmap,That is getConfig() is equivalent to Config#HARDWARE.
android.graphics.Bitmap.createBitmap,Returns a mutable bitmap with the specified width and height. Its initial density is determined from the given DisplayMetrics. The newly created bitmap is in the ColorSpace.Named#SRGB color space.
android.graphics.Bitmap.createBitmap,Create bitmap.
android.graphics.Bitmap.createBitmap,Returns a mutable bitmap with the specified width and height.
android.graphics.Bitmap.createBitmap,Its initial density is determined from the given DisplayMetrics.
android.graphics.Bitmap.createBitmap,The newly created bitmap is in the ColorSpace.Named#SRGB color space.
android.graphics.Bitmap.createBitmap,Returns a bitmap from the source bitmap. The new bitmap may be the same object as source or a copy may have been made. It is initialized with the same density and color space as the original bitmap.
android.graphics.Bitmap.createBitmap,Create bitmap.
android.graphics.Bitmap.createBitmap,Returns a bitmap from the source bitmap.
android.graphics.Bitmap.createBitmap,The new bitmap may be the same object as source or a copy may have been made.
android.graphics.Bitmap.createBitmap,It is initialized with the same density and color space as the original bitmap.
android.graphics.Bitmap.createBitmap,Creates a Bitmap from the given Picture source of recorded drawing commands. Equivalent to calling createBitmap(android.graphics.Picture int int android.graphics.Bitmap.Config) with width and height the same as the Picture's width and height and a Config.HARDWARE config.
android.graphics.Bitmap.createBitmap,Create bitmap.
android.graphics.Bitmap.createBitmap,Creates a Bitmap from the given Picture source of recorded drawing commands.
android.graphics.Bitmap.createBitmap,Equivalent to calling createBitmap(android.graphics.Picture int int android.graphics.Bitmap.Config) with width and height the same as the Picture's width and height and a Config.HARDWARE config.
android.graphics.Bitmap.createBitmap,Returns a immutable bitmap with the specified width and height with each pixel value set to the corresponding value in the colors array. Its initial density is determined from the given DisplayMetrics. The newly created bitmap is in the ColorSpace.Named#SRGB color space.
android.graphics.Bitmap.createBitmap,Create bitmap.
android.graphics.Bitmap.createBitmap,Returns a immutable bitmap with the specified width and height with each pixel value set to the corresponding value in the colors array.
android.graphics.Bitmap.createBitmap,Its initial density is determined from the given DisplayMetrics.
android.graphics.Bitmap.createBitmap,The newly created bitmap is in the ColorSpace.Named#SRGB color space.
android.graphics.Bitmap.createBitmap,Returns a immutable bitmap with the specified width and height with each pixel value set to the corresponding value in the colors array. Its initial density is determined from the given DisplayMetrics. The newly created bitmap is in the ColorSpace.Named#SRGB color space.
android.graphics.Bitmap.createBitmap,Create bitmap.
android.graphics.Bitmap.createBitmap,Returns a immutable bitmap with the specified width and height with each pixel value set to the corresponding value in the colors array.
android.graphics.Bitmap.createBitmap,Its initial density is determined from the given DisplayMetrics.
android.graphics.Bitmap.createBitmap,The newly created bitmap is in the ColorSpace.Named#SRGB color space.
android.graphics.Bitmap.createBitmap,Returns a mutable bitmap with the specified width and height. Its initial density is determined from the given DisplayMetrics. The newly created bitmap is in the ColorSpace.Named#SRGB color space.
android.graphics.Bitmap.createBitmap,Create bitmap.
android.graphics.Bitmap.createBitmap,Returns a mutable bitmap with the specified width and height.
android.graphics.Bitmap.createBitmap,Its initial density is determined from the given DisplayMetrics.
android.graphics.Bitmap.createBitmap,The newly created bitmap is in the ColorSpace.Named#SRGB color space.
android.graphics.Bitmap.createBitmap,Returns a immutable bitmap with the specified width and height with each pixel value set to the corresponding value in the colors array. Its initial density is as per getDensity(). The newly created bitmap is in the ColorSpace.Named#SRGB color space.
android.graphics.Bitmap.createBitmap,Create bitmap.
android.graphics.Bitmap.createBitmap,Returns a immutable bitmap with the specified width and height with each pixel value set to the corresponding value in the colors array.
android.graphics.Bitmap.createBitmap,Its initial density is as per getDensity().
android.graphics.Bitmap.createBitmap,The newly created bitmap is in the ColorSpace.Named#SRGB color space.
android.graphics.Bitmap.createBitmap,Creates a Bitmap from the given Picture source of recorded drawing commands. The bitmap will be immutable with the given width and height. If the width and height are not the same as the Picture's width & height the Picture will be scaled to fit the given width and height.
android.graphics.Bitmap.createBitmap,Create bitmap.
android.graphics.Bitmap.createBitmap,Creates a Bitmap from the given Picture source of recorded drawing commands.
android.graphics.Bitmap.createBitmap,The bitmap will be immutable with the given width and height.
android.graphics.Bitmap.createBitmap,If the width and height are not the same as the Picture's width & height the Picture will be scaled to fit the given width and height.
android.graphics.Bitmap.createBitmap,Returns a mutable bitmap with the specified width and height. Its initial density is as per getDensity().
android.graphics.Bitmap.createBitmap,Create bitmap.
android.graphics.Bitmap.createBitmap,Returns a mutable bitmap with the specified width and height.
android.graphics.Bitmap.createBitmap,Its initial density is as per getDensity().
android.graphics.Bitmap.createBitmap,Returns a mutable bitmap with the specified width and height. Its initial density is determined from the given DisplayMetrics. The newly created bitmap is in the ColorSpace.Named#SRGB color space.
android.graphics.Bitmap.createBitmap,Create bitmap.
android.graphics.Bitmap.createBitmap,Returns a mutable bitmap with the specified width and height.
android.graphics.Bitmap.createBitmap,Its initial density is determined from the given DisplayMetrics.
android.graphics.Bitmap.createBitmap,The newly created bitmap is in the ColorSpace.Named#SRGB color space.
android.graphics.Bitmap.createBitmap,Returns a mutable bitmap with the specified width and height. Its initial density is as per getDensity(). The newly created bitmap is in the ColorSpace.Named#SRGB color space.
android.graphics.Bitmap.createBitmap,Create bitmap.
android.graphics.Bitmap.createBitmap,Returns a mutable bitmap with the specified width and height.
android.graphics.Bitmap.createBitmap,Its initial density is as per getDensity().
android.graphics.Bitmap.createBitmap,The newly created bitmap is in the ColorSpace.Named#SRGB color space.
android.graphics.Bitmap.createBitmap,Returns a mutable bitmap with the specified width and height. Its initial density is as per getDensity(). The newly created bitmap is in the ColorSpace.Named#SRGB color space.
android.graphics.Bitmap.createBitmap,Create bitmap.
android.graphics.Bitmap.createBitmap,Returns a mutable bitmap with the specified width and height.
android.graphics.Bitmap.createBitmap,Its initial density is as per getDensity().
android.graphics.Bitmap.createBitmap,The newly created bitmap is in the ColorSpace.Named#SRGB color space.
android.graphics.Bitmap.createScaledBitmap,Creates a new bitmap scaled from an existing bitmap when possible. If the specified width and height are the same as the current width and height of the source bitmap the source bitmap is returned and no new bitmap is created.
android.graphics.Bitmap.createScaledBitmap,Create scaled bitmap.
android.graphics.Bitmap.createScaledBitmap,Creates a new bitmap scaled from an existing bitmap when possible.
android.graphics.Bitmap.createScaledBitmap,If the specified width and height are the same as the current width and height of the source bitmap the source bitmap is returned and no new bitmap is created.
android.graphics.Bitmap.eraseColor,Fills the bitmap's pixels with the specified Color.
android.graphics.Bitmap.eraseColor,Erase color.
android.graphics.Bitmap.eraseColor,Fills the bitmap's pixels with the specified ColorLong.
android.graphics.Bitmap.eraseColor,Erase color.
android.graphics.Bitmap.extractAlpha,Returns a new bitmap that captures the alpha values of the original. This may be drawn with Canvas.drawBitmap() where the color(s) will be taken from the paint that is passed to the draw call.
android.graphics.Bitmap.extractAlpha,Extract alpha.
android.graphics.Bitmap.extractAlpha,Returns a new bitmap that captures the alpha values of the original.
android.graphics.Bitmap.extractAlpha,This may be drawn with Canvas.drawBitmap() where the color(s) will be taken from the paint that is passed to the draw call.
android.graphics.Bitmap.extractAlpha,Returns a new bitmap that captures the alpha values of the original. These values may be affected by the optional Paint parameter which can contain its own alpha and may also contain a MaskFilter which could change the actual dimensions of the resulting bitmap (e.g. a blur maskfilter might enlarge the resulting bitmap). If offsetXY is not null it returns the amount to offset the returned bitmap so that it will logically align with the original. For example if the paint contains a blur of radius 2 then offsetXY[] would contains -2 -2 so that drawing the alpha bitmap offset by (-2 -2) and then drawing the original would result in the blur visually aligning with the original. The initial density of the returned bitmap is the same as the original's.
android.graphics.Bitmap.extractAlpha,Extract alpha.
android.graphics.Bitmap.extractAlpha,Returns a new bitmap that captures the alpha values of the original.
android.graphics.Bitmap.extractAlpha,These values may be affected by the optional Paint parameter which can contain its own alpha and may also contain a MaskFilter which could change the actual dimensions of the resulting bitmap (e.g.
android.graphics.Bitmap.extractAlpha,a blur maskfilter might enlarge the resulting bitmap).
android.graphics.Bitmap.extractAlpha,If offsetXY is not null it returns the amount to offset the returned bitmap so that it will logically align with the original.
android.graphics.Bitmap.extractAlpha,For example if the paint contains a blur of radius 2 then offsetXY[] would contains -2 -2 so that drawing the alpha bitmap offset by (-2 -2) and then drawing the original would result in the blur visually aligning with the original.
android.graphics.Bitmap.extractAlpha,The initial density of the returned bitmap is the same as the original's.
android.graphics.Bitmap.getAllocationByteCount,Returns the size of the allocated memory used to store this bitmap's pixels. This can be larger than the result of getByteCount() if a bitmap is reused to decode other bitmaps of smaller size or by manual reconfiguration. See reconfigure(int int android.graphics.Bitmap.Config) setWidth(int) setHeight(int) setConfig(android.graphics.Bitmap.Config) and BitmapFactory.Options#inBitmap. If a bitmap is not modified in this way this value will be the same as that returned by getByteCount(). This value will not change over the lifetime of a Bitmap.
android.graphics.Bitmap.getAllocationByteCount,Get allocation byte count.
android.graphics.Bitmap.getAllocationByteCount,Returns the size of the allocated memory used to store this bitmap's pixels.
android.graphics.Bitmap.getAllocationByteCount,This can be larger than the result of getByteCount() if a bitmap is reused to decode other bitmaps of smaller size or by manual reconfiguration.
android.graphics.Bitmap.getAllocationByteCount,See reconfigure(int int android.graphics.Bitmap.Config) setWidth(int) setHeight(int) setConfig(android.graphics.Bitmap.Config) and BitmapFactory.Options#inBitmap.
android.graphics.Bitmap.getAllocationByteCount,If a bitmap is not modified in this way this value will be the same as that returned by getByteCount().
android.graphics.Bitmap.getAllocationByteCount,This value will not change over the lifetime of a Bitmap.
android.graphics.Bitmap.getByteCount,Returns the minimum number of bytes that can be used to store this bitmap's pixels. As of Build.VERSION_CODES.KITKAT the result of this method can no longer be used to determine memory usage of a bitmap. See getAllocationByteCount().
android.graphics.Bitmap.getByteCount,Get byte count.
android.graphics.Bitmap.getByteCount,Returns the minimum number of bytes that can be used to store this bitmap's pixels.
android.graphics.Bitmap.getByteCount,As of Build.VERSION_CODES.KITKAT the result of this method can no longer be used to determine memory usage of a bitmap.
android.graphics.Bitmap.getByteCount,See getAllocationByteCount().
android.graphics.Bitmap.getConfig,If the bitmap's internal config is in one of the public formats return that config otherwise return null.
android.graphics.Bitmap.getConfig,Get config.
android.graphics.Bitmap.getDensity,Returns the density for this bitmap. The default density is the same density as the current display unless the current application does not support different screen densities in which case it is DisplayMetrics.DENSITY_DEFAULT. Note that compatibility mode is determined by the application that was initially loaded into a process -- applications that share the same process should all have the same compatibility or ensure they explicitly set the density of their bitmaps appropriately.
android.graphics.Bitmap.getDensity,Get density.
android.graphics.Bitmap.getDensity,Returns the density for this bitmap.
android.graphics.Bitmap.getDensity,The default density is the same density as the current display unless the current application does not support different screen densities in which case it is DisplayMetrics.DENSITY_DEFAULT.
android.graphics.Bitmap.getDensity,Note that compatibility mode is determined by the application that was initially loaded into a process -- applications that share the same process should all have the same compatibility or ensure they explicitly set the density of their bitmaps appropriately.
android.graphics.Bitmap.getHeight,Returns the bitmap's height.
android.graphics.Bitmap.getHeight,Get height.
android.graphics.Bitmap.getNinePatchChunk,Returns an optional array of private data used by the UI system for some bitmaps. Not intended to be called by applications.
android.graphics.Bitmap.getNinePatchChunk,Get nine patch chunk.
android.graphics.Bitmap.getNinePatchChunk,Returns an optional array of private data used by the UI system for some bitmaps.
android.graphics.Bitmap.getNinePatchChunk,Not intended to be called by applications.
android.graphics.Bitmap.getPixel,Returns the Color at the specified location. Throws an exception if x or y are out of bounds (negative or >= to the width or height respectively). The returned color is a non-premultiplied ARGB value in the ColorSpace.Named#SRGB color space.
android.graphics.Bitmap.getPixel,Get pixel.
android.graphics.Bitmap.getPixel,Returns the Color at the specified location.
android.graphics.Bitmap.getPixel,Throws an exception if x or y are out of bounds (negative or >= to the width or height respectively).
android.graphics.Bitmap.getPixel,The returned color is a non-premultiplied ARGB value in the ColorSpace.Named#SRGB color space.
android.graphics.Bitmap.getPixels,Returns in pixels[] a copy of the data in the bitmap. Each value is a packed int representing a Color. The stride parameter allows the caller to allow for gaps in the returned pixels array between rows. For normal packed results just pass width for the stride value. The returned colors are non-premultiplied ARGB values in the ColorSpace.Named#SRGB color space.
android.graphics.Bitmap.getPixels,Get pixels.
android.graphics.Bitmap.getPixels,Returns in pixels[] a copy of the data in the bitmap.
android.graphics.Bitmap.getPixels,Each value is a packed int representing a Color.
android.graphics.Bitmap.getPixels,The stride parameter allows the caller to allow for gaps in the returned pixels array between rows.
android.graphics.Bitmap.getPixels,For normal packed results just pass width for the stride value.
android.graphics.Bitmap.getPixels,The returned colors are non-premultiplied ARGB values in the ColorSpace.Named#SRGB color space.
android.graphics.Bitmap.getRowBytes,Return the number of bytes between rows in the bitmap's pixels. Note that this refers to the pixels as stored natively by the bitmap. If you call getPixels() or setPixels() then the pixels are uniformly treated as 32bit values packed according to the Color class. As of Build.VERSION_CODES.KITKAT this method should not be used to calculate the memory usage of the bitmap. Instead see getAllocationByteCount().
android.graphics.Bitmap.getRowBytes,Get row bytes.
android.graphics.Bitmap.getRowBytes,Return the number of bytes between rows in the bitmap's pixels.
android.graphics.Bitmap.getRowBytes,Note that this refers to the pixels as stored natively by the bitmap.
android.graphics.Bitmap.getRowBytes,If you call getPixels() or setPixels() then the pixels are uniformly treated as 32bit values packed according to the Color class.
android.graphics.Bitmap.getRowBytes,As of Build.VERSION_CODES.KITKAT this method should not be used to calculate the memory usage of the bitmap.
android.graphics.Bitmap.getRowBytes,Instead see getAllocationByteCount().
android.graphics.Bitmap.getScaledHeight,Convenience method that returns the height of this bitmap divided by the density scale factor. Returns the bitmap's height multiplied by the ratio of the target density to the bitmap's source density.
android.graphics.Bitmap.getScaledHeight,Get scaled height.
android.graphics.Bitmap.getScaledHeight,Convenience method that returns the height of this bitmap divided by the density scale factor.
android.graphics.Bitmap.getScaledHeight,Returns the bitmap's height multiplied by the ratio of the target density to the bitmap's source density.
android.graphics.Bitmap.getScaledHeight,Convenience for calling getScaledHeight(int) with the target density of the given Canvas.
android.graphics.Bitmap.getScaledHeight,Get scaled height.
android.graphics.Bitmap.getScaledHeight,Convenience for calling getScaledHeight(int) with the target density of the given DisplayMetrics.
android.graphics.Bitmap.getScaledHeight,Get scaled height.
android.graphics.Bitmap.getScaledWidth,Convenience method that returns the width of this bitmap divided by the density scale factor. Returns the bitmap's width multiplied by the ratio of the target density to the bitmap's source density.
android.graphics.Bitmap.getScaledWidth,Get scaled width.
android.graphics.Bitmap.getScaledWidth,Convenience method that returns the width of this bitmap divided by the density scale factor.
android.graphics.Bitmap.getScaledWidth,Returns the bitmap's width multiplied by the ratio of the target density to the bitmap's source density.
android.graphics.Bitmap.getScaledWidth,Convenience for calling getScaledWidth(int) with the target density of the given DisplayMetrics.
android.graphics.Bitmap.getScaledWidth,Get scaled width.
android.graphics.Bitmap.getScaledWidth,Convenience for calling getScaledWidth(int) with the target density of the given Canvas.
android.graphics.Bitmap.getScaledWidth,Get scaled width.
android.graphics.Bitmap.getWidth,Returns the bitmap's width.
android.graphics.Bitmap.getWidth,Get width.
android.graphics.Bitmap.hasAlpha,Returns true if the bitmap's config supports per-pixel alpha and if the pixels may contain non-opaque alpha values. For some configs this is always false (e.g. RGB_565) since they do not support per-pixel alpha. However for configs that do the bitmap may be flagged to be known that all of its pixels are opaque. In this case hasAlpha() will also return false. If a config such as ARGB_8888 is not so flagged it will return true by default.
android.graphics.Bitmap.hasAlpha,Has alpha.
android.graphics.Bitmap.hasAlpha,Returns true if the bitmap's config supports per-pixel alpha and if the pixels may contain non-opaque alpha values.
android.graphics.Bitmap.hasAlpha,For some configs this is always false (e.g.
android.graphics.Bitmap.hasAlpha,RGB_565) since they do not support per-pixel alpha.
android.graphics.Bitmap.hasAlpha,However for configs that do the bitmap may be flagged to be known that all of its pixels are opaque.
android.graphics.Bitmap.hasAlpha,In this case hasAlpha() will also return false.
android.graphics.Bitmap.hasAlpha,If a config such as ARGB_8888 is not so flagged it will return true by default.
android.graphics.Bitmap.hasMipMap,Indicates whether the renderer responsible for drawing this bitmap should attempt to use mipmaps when this bitmap is drawn scaled down. If you know that you are going to draw this bitmap at less than 50% of its original size you may be able to obtain a higher quality This property is only a suggestion that can be ignored by the renderer. It is not guaranteed to have any effect.
android.graphics.Bitmap.hasMipMap,Has mip map.
android.graphics.Bitmap.hasMipMap,Indicates whether the renderer responsible for drawing this bitmap should attempt to use mipmaps when this bitmap is drawn scaled down.
android.graphics.Bitmap.hasMipMap,If you know that you are going to draw this bitmap at less than 50% of its original size you may be able to obtain a higher quality This property is only a suggestion that can be ignored by the renderer.
android.graphics.Bitmap.hasMipMap,It is not guaranteed to have any effect.
android.graphics.Bitmap.isMutable,Returns true if the bitmap is marked as mutable (i.e. can be drawn into).
android.graphics.Bitmap.isMutable,Is mutable.
android.graphics.Bitmap.isMutable,Returns true if the bitmap is marked as mutable (i.e.
android.graphics.Bitmap.isMutable,can be drawn into).
android.graphics.Bitmap.isRecycled,Returns true if this bitmap has been recycled. If so then it is an error to try to access its pixels and the bitmap will not draw.
android.graphics.Bitmap.isRecycled,Is recycled.
android.graphics.Bitmap.isRecycled,Returns true if this bitmap has been recycled.
android.graphics.Bitmap.isRecycled,If so then it is an error to try to access its pixels and the bitmap will not draw.
android.graphics.Bitmap.recycle,"Free the native object associated with this bitmap and clear the reference to the pixel data. This will not free the pixel data synchronously; it simply allows it to be garbage collected if there are no other references. The bitmap is marked as ""dead"" meaning it will throw an exception if getPixels() or setPixels() is called and will draw nothing. This operation cannot be reversed so it should only be called if you are sure there are no further uses for the bitmap. This is an advanced call and normally need not be called since the normal GC process will free up this memory when there are no more references to this bitmap."
android.graphics.Bitmap.recycle,Recycle.
android.graphics.Bitmap.recycle,Free the native object associated with this bitmap and clear the reference to the pixel data.
android.graphics.Bitmap.recycle,This will not free the pixel data synchronously; it simply allows it to be garbage collected if there are no other references.
android.graphics.Bitmap.recycle,"The bitmap is marked as ""dead"" meaning it will throw an exception if getPixels() or setPixels() is called and will draw nothing."
android.graphics.Bitmap.recycle,This operation cannot be reversed so it should only be called if you are sure there are no further uses for the bitmap.
android.graphics.Bitmap.recycle,This is an advanced call and normally need not be called since the normal GC process will free up this memory when there are no more references to this bitmap.
android.graphics.Bitmap.sameAs,Given another bitmap return true if it has the same dimensions config and pixel data as this bitmap. If any of those differ return false. If other is null return false.
android.graphics.Bitmap.sameAs,Same as.
android.graphics.Bitmap.sameAs,Given another bitmap return true if it has the same dimensions config and pixel data as this bitmap.
android.graphics.Bitmap.sameAs,If any of those differ return false.
android.graphics.Bitmap.sameAs,If other is null return false.
android.graphics.Bitmap.setDensity,Specifies the density for this bitmap. When the bitmap is drawn to a Canvas that also has a density it will be scaled appropriately.
android.graphics.Bitmap.setDensity,Set density.
android.graphics.Bitmap.setDensity,Specifies the density for this bitmap.
android.graphics.Bitmap.setDensity,When the bitmap is drawn to a Canvas that also has a density it will be scaled appropriately.
android.graphics.Bitmap.setHasMipMap,Set a hint for the renderer responsible for drawing this bitmap indicating that it should attempt to use mipmaps when this bitmap is drawn scaled down. If you know that you are going to draw this bitmap at less than 50% of its original size you may be able to obtain a higher quality by turning this property on. Note that if the renderer respects this hint it might have to allocate extra memory to hold the mipmap levels for this bitmap. This property is only a suggestion that can be ignored by the renderer. It is not guaranteed to have any effect.
android.graphics.Bitmap.setHasMipMap,Set has mip map.
android.graphics.Bitmap.setHasMipMap,Set a hint for the renderer responsible for drawing this bitmap indicating that it should attempt to use mipmaps when this bitmap is drawn scaled down.
android.graphics.Bitmap.setHasMipMap,If you know that you are going to draw this bitmap at less than 50% of its original size you may be able to obtain a higher quality by turning this property on.
android.graphics.Bitmap.setHasMipMap,Note that if the renderer respects this hint it might have to allocate extra memory to hold the mipmap levels for this bitmap.
android.graphics.Bitmap.setHasMipMap,This property is only a suggestion that can be ignored by the renderer.
android.graphics.Bitmap.setHasMipMap,It is not guaranteed to have any effect.
android.graphics.Bitmap.setPixel,Write the specified Color into the bitmap (assuming it is mutable) at the xy coordinate. The color must be a non-premultiplied ARGB value in the ColorSpace.Named#SRGB color space.
android.graphics.Bitmap.setPixel,Set pixel.
android.graphics.Bitmap.setPixel,Write the specified Color into the bitmap (assuming it is mutable) at the xy coordinate.
android.graphics.Bitmap.setPixel,The color must be a non-premultiplied ARGB value in the ColorSpace.Named#SRGB color space.
android.graphics.Bitmap.setPixels,Replace pixels in the bitmap with the colors in the array. Each element in the array is a packed int representing a non-premultiplied ARGB Color in the ColorSpace.Named#SRGB color space.
android.graphics.Bitmap.setPixels,Set pixels.
android.graphics.Bitmap.setPixels,Replace pixels in the bitmap with the colors in the array.
android.graphics.Bitmap.setPixels,Each element in the array is a packed int representing a non-premultiplied ARGB Color in the ColorSpace.Named#SRGB color space.
android.graphics.Bitmap.writeToParcel,Write the bitmap and its pixels to the parcel. The bitmap can be rebuilt from the parcel by calling CREATOR.createFromParcel(). If this bitmap is Config#HARDWARE it may be unparceled with a different pixel format (e.g. 565 8888) but the content will be preserved to the best quality permitted by the final pixel format.
android.graphics.Bitmap.writeToParcel,Write to parcel.
android.graphics.Bitmap.writeToParcel,Write the bitmap and its pixels to the parcel.
android.graphics.Bitmap.writeToParcel,The bitmap can be rebuilt from the parcel by calling CREATOR.createFromParcel().
android.graphics.Bitmap.writeToParcel,If this bitmap is Config#HARDWARE it may be unparceled with a different pixel format (e.g.
android.graphics.Bitmap.writeToParcel,565 8888) but the content will be preserved to the best quality permitted by the final pixel format.
android.graphics.BitmapFactory.decodeByteArray,Decode an immutable bitmap from the specified byte array.
android.graphics.BitmapFactory.decodeByteArray,Decode byte array.
android.graphics.BitmapFactory.decodeByteArray,Decode an immutable bitmap from the specified byte array.
android.graphics.BitmapFactory.decodeByteArray,Decode byte array.
android.graphics.BitmapFactory.decodeFile,Decode a file path into a bitmap. If the specified file name is null or cannot be decoded into a bitmap the function returns null.
android.graphics.BitmapFactory.decodeFile,Decode file.
android.graphics.BitmapFactory.decodeFile,Decode a file path into a bitmap.
android.graphics.BitmapFactory.decodeFile,If the specified file name is null or cannot be decoded into a bitmap the function returns null.
android.graphics.BitmapFactory.decodeFile,Decode a file path into a bitmap. If the specified file name is null or cannot be decoded into a bitmap the function returns null.
android.graphics.BitmapFactory.decodeFile,Decode file.
android.graphics.BitmapFactory.decodeFile,Decode a file path into a bitmap.
android.graphics.BitmapFactory.decodeFile,If the specified file name is null or cannot be decoded into a bitmap the function returns null.
android.graphics.BitmapFactory.decodeFileDescriptor,Decode a bitmap from the file descriptor. If the bitmap cannot be decoded return null. The position within the descriptor will not be changed when this returns so the descriptor can be used again as is.
android.graphics.BitmapFactory.decodeFileDescriptor,Decode file descriptor.
android.graphics.BitmapFactory.decodeFileDescriptor,Decode a bitmap from the file descriptor.
android.graphics.BitmapFactory.decodeFileDescriptor,If the bitmap cannot be decoded return null.
android.graphics.BitmapFactory.decodeFileDescriptor,The position within the descriptor will not be changed when this returns so the descriptor can be used again as is.
android.graphics.BitmapFactory.decodeFileDescriptor,Decode a bitmap from the file descriptor. If the bitmap cannot be decoded return null. The position within the descriptor will not be changed when this returns so the descriptor can be used again as-is.
android.graphics.BitmapFactory.decodeFileDescriptor,Decode file descriptor.
android.graphics.BitmapFactory.decodeFileDescriptor,Decode a bitmap from the file descriptor.
android.graphics.BitmapFactory.decodeFileDescriptor,If the bitmap cannot be decoded return null.
android.graphics.BitmapFactory.decodeFileDescriptor,The position within the descriptor will not be changed when this returns so the descriptor can be used again as-is.
android.graphics.BitmapFactory.decodeResource,Synonym for decodeResource(android.content.res.Resources int android.graphics.BitmapFactory.Options) with null Options.
android.graphics.BitmapFactory.decodeResource,Decode resource.
android.graphics.BitmapFactory.decodeResource,Synonym for opening the given resource and calling decodeResourceStream(Resources TypedValue InputStream Rect BitmapFactory.Options).
android.graphics.BitmapFactory.decodeResource,Decode resource.
android.graphics.BitmapFactory.decodeStream,Decode an input stream into a bitmap. If the input stream is null or cannot be used to decode a bitmap the function returns null. The stream's position will be where ever it was after the encoded data was read.
android.graphics.BitmapFactory.decodeStream,Decode stream.
android.graphics.BitmapFactory.decodeStream,Decode an input stream into a bitmap.
android.graphics.BitmapFactory.decodeStream,If the input stream is null or cannot be used to decode a bitmap the function returns null.
android.graphics.BitmapFactory.decodeStream,The stream's position will be where ever it was after the encoded data was read.
android.graphics.BitmapFactory.decodeStream,Decode an input stream into a bitmap. If the input stream is null or cannot be used to decode a bitmap the function returns null. The stream's position will be where ever it was after the encoded data was read.
android.graphics.BitmapFactory.decodeStream,Decode stream.
android.graphics.BitmapFactory.decodeStream,Decode an input stream into a bitmap.
android.graphics.BitmapFactory.decodeStream,If the input stream is null or cannot be used to decode a bitmap the function returns null.
android.graphics.BitmapFactory.decodeStream,The stream's position will be where ever it was after the encoded data was read.
android.graphics.BitmapRegionDecoder.getHeight,Returns the original image's height.
android.graphics.BitmapRegionDecoder.getHeight,Get height.
android.graphics.BitmapRegionDecoder.getWidth,Returns the original image's width.
android.graphics.BitmapRegionDecoder.getWidth,Get width.
android.graphics.BitmapRegionDecoder.isRecycled,Returns true if this region decoder has been recycled. If so then it is an error to try use its method.
android.graphics.BitmapRegionDecoder.isRecycled,Is recycled.
android.graphics.BitmapRegionDecoder.isRecycled,Returns true if this region decoder has been recycled.
android.graphics.BitmapRegionDecoder.isRecycled,If so then it is an error to try use its method.
android.graphics.BitmapRegionDecoder.newInstance,Create a BitmapRegionDecoder from an input stream. The stream's position will be where ever it was after the encoded data was read. Currently only the JPEG and PNG formats are supported.
android.graphics.BitmapRegionDecoder.newInstance,New instance.
android.graphics.BitmapRegionDecoder.newInstance,Create a BitmapRegionDecoder from an input stream.
android.graphics.BitmapRegionDecoder.newInstance,The stream's position will be where ever it was after the encoded data was read.
android.graphics.BitmapRegionDecoder.newInstance,Currently only the JPEG and PNG formats are supported.
android.graphics.BitmapRegionDecoder.newInstance,Create a BitmapRegionDecoder from the file descriptor. The position within the descriptor will not be changed when this returns so the descriptor can be used again as is. Currently only the JPEG and PNG formats are supported.
android.graphics.BitmapRegionDecoder.newInstance,New instance.
android.graphics.BitmapRegionDecoder.newInstance,Create a BitmapRegionDecoder from the file descriptor.
android.graphics.BitmapRegionDecoder.newInstance,The position within the descriptor will not be changed when this returns so the descriptor can be used again as is.
android.graphics.BitmapRegionDecoder.newInstance,Currently only the JPEG and PNG formats are supported.
android.graphics.BitmapRegionDecoder.newInstance,Create a BitmapRegionDecoder from a file path. Currently only the JPEG and PNG formats are supported.
android.graphics.BitmapRegionDecoder.newInstance,New instance.
android.graphics.BitmapRegionDecoder.newInstance,Create a BitmapRegionDecoder from a file path.
android.graphics.BitmapRegionDecoder.newInstance,Currently only the JPEG and PNG formats are supported.
android.graphics.BitmapRegionDecoder.newInstance,Create a BitmapRegionDecoder from the specified byte array. Currently only the JPEG and PNG formats are supported.
android.graphics.BitmapRegionDecoder.newInstance,New instance.
android.graphics.BitmapRegionDecoder.newInstance,Create a BitmapRegionDecoder from the specified byte array.
android.graphics.BitmapRegionDecoder.newInstance,Currently only the JPEG and PNG formats are supported.
android.graphics.BitmapRegionDecoder.recycle,"Frees up the memory associated with this region decoder and mark the region decoder as ""dead"" meaning it will throw an exception if decodeRegion() getWidth() or getHeight() is called. This operation cannot be reversed so it should only be called if you are sure there are no further uses for the region decoder. This is an advanced call and normally need not be called since the normal GC process will free up this memory when there are no more references to this region decoder."
android.graphics.BitmapRegionDecoder.recycle,Recycle.
android.graphics.BitmapRegionDecoder.recycle,"Frees up the memory associated with this region decoder and mark the region decoder as ""dead"" meaning it will throw an exception if decodeRegion() getWidth() or getHeight() is called."
android.graphics.BitmapRegionDecoder.recycle,This operation cannot be reversed so it should only be called if you are sure there are no further uses for the region decoder.
android.graphics.BitmapRegionDecoder.recycle,This is an advanced call and normally need not be called since the normal GC process will free up this memory when there are no more references to this region decoder.
android.graphics.Camera.getMatrix,Computes the matrix corresponding to the current transformation and copies it to the supplied matrix object.
android.graphics.Camera.getMatrix,Get matrix.
android.graphics.Camera.restore,Restores the saved state if any.
android.graphics.Camera.restore,Restore.
android.graphics.Camera.rotateX,Applies a rotation transform around the X axis.
android.graphics.Camera.rotateX,Rotate x.
android.graphics.Camera.rotateY,Applies a rotation transform around the Y axis.
android.graphics.Camera.rotateY,Rotate y.
android.graphics.Camera.rotateZ,Applies a rotation transform around the Z axis.
android.graphics.Camera.rotateZ,Rotate z.
android.graphics.Camera.save,Saves the camera state. Each save should be balanced with a call to restore().
android.graphics.Camera.save,Save.
android.graphics.Camera.save,Saves the camera state.
android.graphics.Camera.save,Each save should be balanced with a call to restore().
android.graphics.Camera.setLocation,Sets the location of the camera. The default location is set at 0 0 -8.
android.graphics.Camera.setLocation,Set location.
android.graphics.Camera.setLocation,Sets the location of the camera.
android.graphics.Camera.setLocation,The default location is set at 0 0 -8.
android.graphics.Camera.translate,Applies a translation transform on all three axis.
android.graphics.Camera.translate,Translate.
android.graphics.Canvas.clipPath,This method was deprecated in API level 26. Region.Op values other than Region.Op#INTERSECT and Region.Op#DIFFERENCE have the ability to expand the clip. The canvas clipping APIs are intended to only expand the clip as a result of a restore operation. This enables a view parent to clip a canvas to clearly define the maximal drawing area of its children. The recommended alternative calls are clipPath(android.graphics.Path) and clipOutPath(android.graphics.Path) ; As of API Level API level android.os.Build.VERSION_CODES.P Build.VERSION_CODES.P only Region.Op#INTERSECT and Region.Op#DIFFERENCE are valid Region.Op parameters. Modify the current clip with the specified path.
android.graphics.Canvas.clipPath,Clip path.
android.graphics.Canvas.clipPath,This method was deprecated in API level 26.
android.graphics.Canvas.clipPath,Region.Op values other than Region.Op#INTERSECT and Region.Op#DIFFERENCE have the ability to expand the clip.
android.graphics.Canvas.clipPath,The canvas clipping APIs are intended to only expand the clip as a result of a restore operation.
android.graphics.Canvas.clipPath,This enables a view parent to clip a canvas to clearly define the maximal drawing area of its children.
android.graphics.Canvas.clipPath,The recommended alternative calls are clipPath(android.graphics.Path) and clipOutPath(android.graphics.Path) ; As of API Level API level android.os.Build.VERSION_CODES.P Build.VERSION_CODES.P only Region.Op#INTERSECT and Region.Op#DIFFERENCE are valid Region.Op parameters.
android.graphics.Canvas.clipPath,Modify the current clip with the specified path.
android.graphics.Canvas.clipPath,Intersect the current clip with the specified path.
android.graphics.Canvas.clipPath,Clip path.
android.graphics.Canvas.clipRect,This method was deprecated in API level 26. Region.Op values other than Region.Op#INTERSECT and Region.Op#DIFFERENCE have the ability to expand the clip. The canvas clipping APIs are intended to only expand the clip as a result of a restore operation. This enables a view parent to clip a canvas to clearly define the maximal drawing area of its children. The recommended alternative calls are clipRect(float float float float) and clipOutRect(float float float float) ; As of API Level API level android.os.Build.VERSION_CODES.P Build.VERSION_CODES.P only Region.Op#INTERSECT and Region.Op#DIFFERENCE are valid Region.Op parameters. Modify the current clip with the specified rectangle which is expressed in local coordinates.
android.graphics.Canvas.clipRect,Clip rect.
android.graphics.Canvas.clipRect,This method was deprecated in API level 26.
android.graphics.Canvas.clipRect,Region.Op values other than Region.Op#INTERSECT and Region.Op#DIFFERENCE have the ability to expand the clip.
android.graphics.Canvas.clipRect,The canvas clipping APIs are intended to only expand the clip as a result of a restore operation.
android.graphics.Canvas.clipRect,This enables a view parent to clip a canvas to clearly define the maximal drawing area of its children.
android.graphics.Canvas.clipRect,The recommended alternative calls are clipRect(float float float float) and clipOutRect(float float float float) ; As of API Level API level android.os.Build.VERSION_CODES.P Build.VERSION_CODES.P only Region.Op#INTERSECT and Region.Op#DIFFERENCE are valid Region.Op parameters.
android.graphics.Canvas.clipRect,Modify the current clip with the specified rectangle which is expressed in local coordinates.
android.graphics.Canvas.clipRect,Intersect the current clip with the specified rectangle which is expressed in local coordinates.
android.graphics.Canvas.clipRect,Clip rect.
android.graphics.Canvas.clipRect,Intersect the current clip with the specified rectangle which is expressed in local coordinates.
android.graphics.Canvas.clipRect,Clip rect.
android.graphics.Canvas.clipRect,This method was deprecated in API level 26. Region.Op values other than Region.Op#INTERSECT and Region.Op#DIFFERENCE have the ability to expand the clip. The canvas clipping APIs are intended to only expand the clip as a result of a restore operation. This enables a view parent to clip a canvas to clearly define the maximal drawing area of its children. The recommended alternative calls are clipRect(android.graphics.Rect) and clipOutRect(android.graphics.Rect) ; As of API Level API level android.os.Build.VERSION_CODES.P Build.VERSION_CODES.P only Region.Op#INTERSECT and Region.Op#DIFFERENCE are valid Region.Op parameters. Modify the current clip with the specified rectangle which is expressed in local coordinates.
android.graphics.Canvas.clipRect,Clip rect.
android.graphics.Canvas.clipRect,This method was deprecated in API level 26.
android.graphics.Canvas.clipRect,Region.Op values other than Region.Op#INTERSECT and Region.Op#DIFFERENCE have the ability to expand the clip.
android.graphics.Canvas.clipRect,The canvas clipping APIs are intended to only expand the clip as a result of a restore operation.
android.graphics.Canvas.clipRect,This enables a view parent to clip a canvas to clearly define the maximal drawing area of its children.
android.graphics.Canvas.clipRect,The recommended alternative calls are clipRect(android.graphics.Rect) and clipOutRect(android.graphics.Rect) ; As of API Level API level android.os.Build.VERSION_CODES.P Build.VERSION_CODES.P only Region.Op#INTERSECT and Region.Op#DIFFERENCE are valid Region.Op parameters.
android.graphics.Canvas.clipRect,Modify the current clip with the specified rectangle which is expressed in local coordinates.
android.graphics.Canvas.clipRect,Intersect the current clip with the specified rectangle which is expressed in local coordinates.
android.graphics.Canvas.clipRect,Clip rect.
android.graphics.Canvas.clipRect,Intersect the current clip with the specified rectangle which is expressed in local coordinates.
android.graphics.Canvas.clipRect,Clip rect.
android.graphics.Canvas.clipRect,This method was deprecated in API level 26. Region.Op values other than Region.Op#INTERSECT and Region.Op#DIFFERENCE have the ability to expand the clip. The canvas clipping APIs are intended to only expand the clip as a result of a restore operation. This enables a view parent to clip a canvas to clearly define the maximal drawing area of its children. The recommended alternative calls are clipRect(android.graphics.RectF) and clipOutRect(android.graphics.RectF) ; As of API Level API level android.os.Build.VERSION_CODES.P Build.VERSION_CODES.P only Region.Op#INTERSECT and Region.Op#DIFFERENCE are valid Region.Op parameters. Modify the current clip with the specified rectangle.
android.graphics.Canvas.clipRect,Clip rect.
android.graphics.Canvas.clipRect,This method was deprecated in API level 26.
android.graphics.Canvas.clipRect,Region.Op values other than Region.Op#INTERSECT and Region.Op#DIFFERENCE have the ability to expand the clip.
android.graphics.Canvas.clipRect,The canvas clipping APIs are intended to only expand the clip as a result of a restore operation.
android.graphics.Canvas.clipRect,This enables a view parent to clip a canvas to clearly define the maximal drawing area of its children.
android.graphics.Canvas.clipRect,The recommended alternative calls are clipRect(android.graphics.RectF) and clipOutRect(android.graphics.RectF) ; As of API Level API level android.os.Build.VERSION_CODES.P Build.VERSION_CODES.P only Region.Op#INTERSECT and Region.Op#DIFFERENCE are valid Region.Op parameters.
android.graphics.Canvas.clipRect,Modify the current clip with the specified rectangle.
android.graphics.Canvas.concat,Preconcat the current matrix with the specified matrix. If the specified matrix is null this method does nothing.
android.graphics.Canvas.concat,Concat.
android.graphics.Canvas.concat,Preconcat the current matrix with the specified matrix.
android.graphics.Canvas.concat,If the specified matrix is null this method does nothing.
android.graphics.Canvas.drawARGB,Fill the entire canvas' bitmap (restricted to the current clip) with the specified ARGB color using srcover porterduff mode.
android.graphics.Canvas.drawARGB,Draw a r g b.
android.graphics.Canvas.drawArc,Draw the specified arc which will be scaled to fit inside the specified oval. If the start angle is negative or >= 360 the start angle is treated as start angle modulo 360. If the sweep angle is >= 360 then the oval is drawn completely. Note that this differs slightly from SkPath::arcTo which treats the sweep angle modulo 360. If the sweep angle is negative the sweep angle is treated as sweep angle modulo 360 The arc is drawn clockwise. An angle of 0 degrees correspond to the geometric angle of 0 degrees (3 o'clock on a watch.).
android.graphics.Canvas.drawArc,Draw arc.
android.graphics.Canvas.drawArc,Draw the specified arc which will be scaled to fit inside the specified oval.
android.graphics.Canvas.drawArc,If the start angle is negative or >= 360 the start angle is treated as start angle modulo 360.
android.graphics.Canvas.drawArc,If the sweep angle is >= 360 then the oval is drawn completely.
android.graphics.Canvas.drawArc,Note that this differs slightly from SkPath::arcTo which treats the sweep angle modulo 360.
android.graphics.Canvas.drawArc,If the sweep angle is negative the sweep angle is treated as sweep angle modulo 360 The arc is drawn clockwise.
android.graphics.Canvas.drawArc,An angle of 0 degrees correspond to the geometric angle of 0 degrees (3 o'clock on a watch.).
android.graphics.Canvas.drawArc,Draw the specified arc which will be scaled to fit inside the specified oval. If the start angle is negative or >= 360 the start angle is treated as start angle modulo 360. If the sweep angle is >= 360 then the oval is drawn completely. Note that this differs slightly from SkPath::arcTo which treats the sweep angle modulo 360. If the sweep angle is negative the sweep angle is treated as sweep angle modulo 360 The arc is drawn clockwise. An angle of 0 degrees correspond to the geometric angle of 0 degrees (3 o'clock on a watch.).
android.graphics.Canvas.drawArc,Draw arc.
android.graphics.Canvas.drawArc,Draw the specified arc which will be scaled to fit inside the specified oval.
android.graphics.Canvas.drawArc,If the start angle is negative or >= 360 the start angle is treated as start angle modulo 360.
android.graphics.Canvas.drawArc,If the sweep angle is >= 360 then the oval is drawn completely.
android.graphics.Canvas.drawArc,Note that this differs slightly from SkPath::arcTo which treats the sweep angle modulo 360.
android.graphics.Canvas.drawArc,If the sweep angle is negative the sweep angle is treated as sweep angle modulo 360 The arc is drawn clockwise.
android.graphics.Canvas.drawArc,An angle of 0 degrees correspond to the geometric angle of 0 degrees (3 o'clock on a watch.).
android.graphics.Canvas.drawBitmap,Draw the bitmap using the specified matrix.
android.graphics.Canvas.drawBitmap,Draw bitmap.
android.graphics.Canvas.drawBitmap,This method was deprecated in API level 21. Usage with a hardware accelerated canvas requires an internal copy of color buffer contents every time this method is called. Using a Bitmap avoids this copy and allows the application to more explicitly control the lifetime and copies of pixel data. Treat the specified array of colors as a bitmap and draw it. This gives the same result as first creating a bitmap from the array and then drawing it but this method avoids explicitly creating a bitmap object which can be more efficient if the colors are changing often.
android.graphics.Canvas.drawBitmap,Draw bitmap.
android.graphics.Canvas.drawBitmap,This method was deprecated in API level 21.
android.graphics.Canvas.drawBitmap,Usage with a hardware accelerated canvas requires an internal copy of color buffer contents every time this method is called.
android.graphics.Canvas.drawBitmap,Using a Bitmap avoids this copy and allows the application to more explicitly control the lifetime and copies of pixel data.
android.graphics.Canvas.drawBitmap,Treat the specified array of colors as a bitmap and draw it.
android.graphics.Canvas.drawBitmap,This gives the same result as first creating a bitmap from the array and then drawing it but this method avoids explicitly creating a bitmap object which can be more efficient if the colors are changing often.
android.graphics.Canvas.drawBitmap,This method was deprecated in API level 21. Usage with a hardware accelerated canvas requires an internal copy of color buffer contents every time this method is called. Using a Bitmap avoids this copy and allows the application to more explicitly control the lifetime and copies of pixel data. Legacy version of drawBitmap(int[] colors ...) that took ints for xy.
android.graphics.Canvas.drawBitmap,Draw bitmap.
android.graphics.Canvas.drawBitmap,This method was deprecated in API level 21.
android.graphics.Canvas.drawBitmap,Usage with a hardware accelerated canvas requires an internal copy of color buffer contents every time this method is called.
android.graphics.Canvas.drawBitmap,Using a Bitmap avoids this copy and allows the application to more explicitly control the lifetime and copies of pixel data.
android.graphics.Canvas.drawBitmap,Legacy version of drawBitmap(int[] colors ...) that took ints for xy.
android.graphics.Canvas.drawBitmap,Draw the specified bitmap scaling/translating automatically to fill the destination rectangle. If the source rectangle is not null it specifies the subset of the bitmap to draw. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter) then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. This function ignores the density associated with the bitmap. This is because the source and destination rectangle coordinate spaces are in their respective densities so must already have the appropriate scaling factor applied.
android.graphics.Canvas.drawBitmap,Draw bitmap.
android.graphics.Canvas.drawBitmap,Draw the specified bitmap scaling/translating automatically to fill the destination rectangle.
android.graphics.Canvas.drawBitmap,If the source rectangle is not null it specifies the subset of the bitmap to draw.
android.graphics.Canvas.drawBitmap,Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g.
android.graphics.Canvas.drawBitmap,BlurMaskFilter) then the bitmap will be drawn as if it were in a Shader with CLAMP mode.
android.graphics.Canvas.drawBitmap,Thus the color outside of the original width/height will be the edge color replicated.
android.graphics.Canvas.drawBitmap,This function ignores the density associated with the bitmap.
android.graphics.Canvas.drawBitmap,This is because the source and destination rectangle coordinate spaces are in their respective densities so must already have the appropriate scaling factor applied.
android.graphics.Canvas.drawBitmap,Draw the specified bitmap scaling/translating automatically to fill the destination rectangle. If the source rectangle is not null it specifies the subset of the bitmap to draw. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter) then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. This function ignores the density associated with the bitmap. This is because the source and destination rectangle coordinate spaces are in their respective densities so must already have the appropriate scaling factor applied.
android.graphics.Canvas.drawBitmap,Draw bitmap.
android.graphics.Canvas.drawBitmap,Draw the specified bitmap scaling/translating automatically to fill the destination rectangle.
android.graphics.Canvas.drawBitmap,If the source rectangle is not null it specifies the subset of the bitmap to draw.
android.graphics.Canvas.drawBitmap,Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g.
android.graphics.Canvas.drawBitmap,BlurMaskFilter) then the bitmap will be drawn as if it were in a Shader with CLAMP mode.
android.graphics.Canvas.drawBitmap,Thus the color outside of the original width/height will be the edge color replicated.
android.graphics.Canvas.drawBitmap,This function ignores the density associated with the bitmap.
android.graphics.Canvas.drawBitmap,This is because the source and destination rectangle coordinate spaces are in their respective densities so must already have the appropriate scaling factor applied.
android.graphics.Canvas.drawBitmap,Draw the specified bitmap with its top/left corner at (xy) using the specified paint transformed by the current matrix. Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g. BlurMaskFilter) then the bitmap will be drawn as if it were in a Shader with CLAMP mode. Thus the color outside of the original width/height will be the edge color replicated. If the bitmap and canvas have different densities this function will take care of automatically scaling the bitmap to draw at the same density as the canvas.
android.graphics.Canvas.drawBitmap,Draw bitmap.
android.graphics.Canvas.drawBitmap,Draw the specified bitmap with its top/left corner at (xy) using the specified paint transformed by the current matrix.
android.graphics.Canvas.drawBitmap,Note: if the paint contains a maskfilter that generates a mask which extends beyond the bitmap's original width/height (e.g.
android.graphics.Canvas.drawBitmap,BlurMaskFilter) then the bitmap will be drawn as if it were in a Shader with CLAMP mode.
android.graphics.Canvas.drawBitmap,Thus the color outside of the original width/height will be the edge color replicated.
android.graphics.Canvas.drawBitmap,If the bitmap and canvas have different densities this function will take care of automatically scaling the bitmap to draw at the same density as the canvas.
android.graphics.Canvas.drawCircle,Draw the specified circle using the specified paint. If radius is <= 0 then nothing will be drawn. The circle will be filled or framed based on the Style in the paint.
android.graphics.Canvas.drawCircle,Draw circle.
android.graphics.Canvas.drawCircle,Draw the specified circle using the specified paint.
android.graphics.Canvas.drawCircle,If radius is <= 0 then nothing will be drawn.
android.graphics.Canvas.drawCircle,The circle will be filled or framed based on the Style in the paint.
android.graphics.Canvas.drawColor,Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and blendmode.
android.graphics.Canvas.drawColor,Draw color.
android.graphics.Canvas.drawColor,Fill the entire canvas' bitmap (restricted to the current clip) with the specified color using srcover porterduff mode.
android.graphics.Canvas.drawColor,Draw color.
android.graphics.Canvas.drawColor,Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and blendmode.
android.graphics.Canvas.drawColor,Draw color.
android.graphics.Canvas.drawColor,Fill the entire canvas' bitmap (restricted to the current clip) with the specified color using srcover porterduff mode.
android.graphics.Canvas.drawColor,Draw color.
android.graphics.Canvas.drawColor,Fill the entire canvas' bitmap (restricted to the current clip) with the specified color and porter-duff xfermode.
android.graphics.Canvas.drawColor,Draw color.
android.graphics.Canvas.drawLine,"Draw a line segment with the specified start and stop xy coordinates using the specified paint. Note that since a line is always ""framed"" the Style is ignored in the paint. Degenerate lines (length is 0) will not be drawn."
android.graphics.Canvas.drawLine,Draw line.
android.graphics.Canvas.drawLine,Draw a line segment with the specified start and stop xy coordinates using the specified paint.
android.graphics.Canvas.drawLine,"Note that since a line is always ""framed"" the Style is ignored in the paint."
android.graphics.Canvas.drawLine,Degenerate lines (length is 0) will not be drawn.
android.graphics.Canvas.drawLines,Draw a series of lines. Each line is taken from 4 consecutive values in the pts array. Thus to draw 1 line the array must contain at least 4 values. This is logically the same as drawing the array as follows: drawLine(pts[0] pts[1] pts[2] pts[3]) followed by drawLine(pts[4] pts[5] pts[6] pts[7]) and so on.
android.graphics.Canvas.drawLines,Draw lines.
android.graphics.Canvas.drawLines,Draw a series of lines.
android.graphics.Canvas.drawLines,Each line is taken from 4 consecutive values in the pts array.
android.graphics.Canvas.drawLines,Thus to draw 1 line the array must contain at least 4 values.
android.graphics.Canvas.drawLines,This is logically the same as drawing the array as follows: drawLine(pts[0] pts[1] pts[2] pts[3]) followed by drawLine(pts[4] pts[5] pts[6] pts[7]) and so on.
android.graphics.Canvas.drawLines,.
android.graphics.Canvas.drawLines,Draw lines.
android.graphics.Canvas.drawOval,Draw the specified oval using the specified paint. The oval will be filled or framed based on the Style in the paint.
android.graphics.Canvas.drawOval,Draw oval.
android.graphics.Canvas.drawOval,Draw the specified oval using the specified paint.
android.graphics.Canvas.drawOval,The oval will be filled or framed based on the Style in the paint.
android.graphics.Canvas.drawOval,Draw the specified oval using the specified paint. The oval will be filled or framed based on the Style in the paint.
android.graphics.Canvas.drawOval,Draw oval.
android.graphics.Canvas.drawOval,Draw the specified oval using the specified paint.
android.graphics.Canvas.drawOval,The oval will be filled or framed based on the Style in the paint.
android.graphics.Canvas.drawPaint,Fill the entire canvas' bitmap (restricted to the current clip) with the specified paint. This is equivalent (but faster) to drawing an infinitely large rectangle with the specified paint.
android.graphics.Canvas.drawPaint,Draw paint.
android.graphics.Canvas.drawPaint,Fill the entire canvas' bitmap (restricted to the current clip) with the specified paint.
android.graphics.Canvas.drawPaint,This is equivalent (but faster) to drawing an infinitely large rectangle with the specified paint.
android.graphics.Canvas.drawPath,Draw the specified path using the specified paint. The path will be filled or framed based on the Style in the paint.
android.graphics.Canvas.drawPath,Draw path.
android.graphics.Canvas.drawPath,Draw the specified path using the specified paint.
android.graphics.Canvas.drawPath,The path will be filled or framed based on the Style in the paint.
android.graphics.Canvas.drawPoint,Helper for drawPoints() for drawing a single point.
android.graphics.Canvas.drawPoint,Draw point.
android.graphics.Canvas.drawRGB,Fill the entire canvas' bitmap (restricted to the current clip) with the specified RGB color using srcover porterduff mode.
android.graphics.Canvas.drawRGB,Draw r g b.
android.graphics.Canvas.drawRect,Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint.
android.graphics.Canvas.drawRect,Draw rect.
android.graphics.Canvas.drawRect,Draw the specified Rect using the specified paint.
android.graphics.Canvas.drawRect,The rectangle will be filled or framed based on the Style in the paint.
android.graphics.Canvas.drawRect,Draw the specified Rect using the specified Paint. The rectangle will be filled or framed based on the Style in the paint.
android.graphics.Canvas.drawRect,Draw rect.
android.graphics.Canvas.drawRect,Draw the specified Rect using the specified Paint.
android.graphics.Canvas.drawRect,The rectangle will be filled or framed based on the Style in the paint.
android.graphics.Canvas.drawRect,Draw the specified Rect using the specified paint. The rectangle will be filled or framed based on the Style in the paint.
android.graphics.Canvas.drawRect,Draw rect.
android.graphics.Canvas.drawRect,Draw the specified Rect using the specified paint.
android.graphics.Canvas.drawRect,The rectangle will be filled or framed based on the Style in the paint.
android.graphics.Canvas.drawRoundRect,Draw the specified round-rect using the specified paint. The roundrect will be filled or framed based on the Style in the paint.
android.graphics.Canvas.drawRoundRect,Draw round rect.
android.graphics.Canvas.drawRoundRect,Draw the specified round-rect using the specified paint.
android.graphics.Canvas.drawRoundRect,The roundrect will be filled or framed based on the Style in the paint.
android.graphics.Canvas.drawRoundRect,Draw the specified round-rect using the specified paint. The roundrect will be filled or framed based on the Style in the paint.
android.graphics.Canvas.drawRoundRect,Draw round rect.
android.graphics.Canvas.drawRoundRect,Draw the specified round-rect using the specified paint.
android.graphics.Canvas.drawRoundRect,The roundrect will be filled or framed based on the Style in the paint.
android.graphics.Canvas.drawText,Draw the specified range of text specified by start/end with its origin at (xy) in the specified Paint. The origin is interpreted based on the Align setting in the Paint.
android.graphics.Canvas.drawText,Draw text.
android.graphics.Canvas.drawText,Draw the specified range of text specified by start/end with its origin at (xy) in the specified Paint.
android.graphics.Canvas.drawText,The origin is interpreted based on the Align setting in the Paint.
android.graphics.Canvas.drawText,Draw the text with origin at (xy) using the specified paint. The origin is interpreted based on the Align setting in the paint.
android.graphics.Canvas.drawText,Draw text.
android.graphics.Canvas.drawText,Draw the text with origin at (xy) using the specified paint.
android.graphics.Canvas.drawText,The origin is interpreted based on the Align setting in the paint.
android.graphics.Canvas.drawText,Draw the text with origin at (xy) using the specified paint. The origin is interpreted based on the Align setting in the paint.
android.graphics.Canvas.drawText,Draw text.
android.graphics.Canvas.drawText,Draw the text with origin at (xy) using the specified paint.
android.graphics.Canvas.drawText,The origin is interpreted based on the Align setting in the paint.
android.graphics.Canvas.drawText,Draw the text with origin at (xy) using the specified paint. The origin is interpreted based on the Align setting in the paint.
android.graphics.Canvas.drawText,Draw text.
android.graphics.Canvas.drawText,Draw the text with origin at (xy) using the specified paint.
android.graphics.Canvas.drawText,The origin is interpreted based on the Align setting in the paint.
android.graphics.Canvas.getClipBounds,Return the bounds of the current clip (in local coordinates) in the bounds parameter and return true if it is non-empty. This can be useful in a way similar to quickReject in that it tells you that drawing outside of these bounds will be clipped out.
android.graphics.Canvas.getClipBounds,Get clip bounds.
android.graphics.Canvas.getClipBounds,Return the bounds of the current clip (in local coordinates) in the bounds parameter and return true if it is non-empty.
android.graphics.Canvas.getClipBounds,This can be useful in a way similar to quickReject in that it tells you that drawing outside of these bounds will be clipped out.
android.graphics.Canvas.getClipBounds,Retrieve the bounds of the current clip (in local coordinates).
android.graphics.Canvas.getClipBounds,Get clip bounds.
android.graphics.Canvas.getDensity,Returns the target density of the canvas. The default density is derived from the density of its backing bitmap or Bitmap#DENSITY_NONE if there is not one.
android.graphics.Canvas.getDensity,Get density.
android.graphics.Canvas.getDensity,Returns the target density of the canvas.
android.graphics.Canvas.getDensity,The default density is derived from the density of its backing bitmap or Bitmap#DENSITY_NONE if there is not one.
android.graphics.Canvas.getHeight,Returns the height of the current drawing layer.
android.graphics.Canvas.getHeight,Get height.
android.graphics.Canvas.getMatrix,This method was deprecated in API level 16. Hardware accelerated canvases may have any matrix when passed to a View or Drawable as it is implementation defined where in the hierarchy such canvases are created. It is recommended in such cases to either draw contents irrespective of the current matrix or to track relevant transform state outside of the canvas. Return in ctm the current transformation matrix. This does not alter the matrix in the canvas but just returns a copy of it.
android.graphics.Canvas.getMatrix,Get matrix.
android.graphics.Canvas.getMatrix,This method was deprecated in API level 16.
android.graphics.Canvas.getMatrix,Hardware accelerated canvases may have any matrix when passed to a View or Drawable as it is implementation defined where in the hierarchy such canvases are created.
android.graphics.Canvas.getMatrix,It is recommended in such cases to either draw contents irrespective of the current matrix or to track relevant transform state outside of the canvas.
android.graphics.Canvas.getMatrix,Return in ctm the current transformation matrix.
android.graphics.Canvas.getMatrix,This does not alter the matrix in the canvas but just returns a copy of it.
android.graphics.Canvas.getMatrix,This method was deprecated in API level 16. Hardware accelerated canvases may have any matrix when passed to a View or Drawable as it is implementation defined where in the hierarchy such canvases are created. It is recommended in such cases to either draw contents irrespective of the current matrix or to track relevant transform state outside of the canvas. Return a new matrix with a copy of the canvas' current transformation matrix.
android.graphics.Canvas.getMatrix,Get matrix.
android.graphics.Canvas.getMatrix,This method was deprecated in API level 16.
android.graphics.Canvas.getMatrix,Hardware accelerated canvases may have any matrix when passed to a View or Drawable as it is implementation defined where in the hierarchy such canvases are created.
android.graphics.Canvas.getMatrix,It is recommended in such cases to either draw contents irrespective of the current matrix or to track relevant transform state outside of the canvas.
android.graphics.Canvas.getMatrix,Return a new matrix with a copy of the canvas' current transformation matrix.
android.graphics.Canvas.getMaximumBitmapHeight,Returns the maximum allowed height for bitmaps drawn with this canvas. Attempting to draw with a bitmap taller than this value will result in an error.
android.graphics.Canvas.getMaximumBitmapHeight,Get maximum bitmap height.
android.graphics.Canvas.getMaximumBitmapHeight,Returns the maximum allowed height for bitmaps drawn with this canvas.
android.graphics.Canvas.getMaximumBitmapHeight,Attempting to draw with a bitmap taller than this value will result in an error.
android.graphics.Canvas.getMaximumBitmapWidth,Returns the maximum allowed width for bitmaps drawn with this canvas. Attempting to draw with a bitmap wider than this value will result in an error.
android.graphics.Canvas.getMaximumBitmapWidth,Get maximum bitmap width.
android.graphics.Canvas.getMaximumBitmapWidth,Returns the maximum allowed width for bitmaps drawn with this canvas.
android.graphics.Canvas.getMaximumBitmapWidth,Attempting to draw with a bitmap wider than this value will result in an error.
android.graphics.Canvas.getWidth,Returns the width of the current drawing layer.
android.graphics.Canvas.getWidth,Get width.
android.graphics.Canvas.isHardwareAccelerated,Indicates whether this Canvas uses hardware acceleration. Note that this method does not define what type of hardware acceleration may or may not be used.
android.graphics.Canvas.isHardwareAccelerated,Is hardware accelerated.
android.graphics.Canvas.isHardwareAccelerated,Indicates whether this Canvas uses hardware acceleration.
android.graphics.Canvas.isHardwareAccelerated,Note that this method does not define what type of hardware acceleration may or may not be used.
android.graphics.Canvas.restore,This call balances a previous call to save() and is used to remove all modifications to the matrix/clip state since the last save call. It is an error to call restore() more times than save() was called.
android.graphics.Canvas.restore,Restore.
android.graphics.Canvas.restore,This call balances a previous call to save() and is used to remove all modifications to the matrix/clip state since the last save call.
android.graphics.Canvas.restore,It is an error to call restore() more times than save() was called.
android.graphics.Canvas.restoreToCount,Efficient way to pop any calls to save() that happened after the save count reached saveCount. It is an error for saveCount to be less than 1. Example: int count = canvas.save(); ... // more calls potentially to save() canvas.restoreToCount(count); // now the canvas is back in the same state it was before the initial // call to save().
android.graphics.Canvas.restoreToCount,Restore to count.
android.graphics.Canvas.restoreToCount,Efficient way to pop any calls to save() that happened after the save count reached saveCount.
android.graphics.Canvas.restoreToCount,It is an error for saveCount to be less than 1.
android.graphics.Canvas.restoreToCount,Example: int count = canvas.save(); .
android.graphics.Canvas.restoreToCount,// more calls potentially to save() canvas.restoreToCount(count); // now the canvas is back in the same state it was before the initial // call to save().
android.graphics.Canvas.rotate,Preconcat the current matrix with the specified rotation.
android.graphics.Canvas.rotate,Rotate.
android.graphics.Canvas.rotate,Preconcat the current matrix with the specified rotation.
android.graphics.Canvas.rotate,Rotate.
android.graphics.Canvas.save,Saves the current matrix and clip onto a private stack. Subsequent calls to translatescalerotateskewconcat or clipRect clipPath will all operate as usual but when the balancing call to restore() is made those calls will be forgotten and the settings that existed before the save() will be reinstated.
android.graphics.Canvas.save,Save.
android.graphics.Canvas.save,Saves the current matrix and clip onto a private stack.
android.graphics.Canvas.save,Subsequent calls to translatescalerotateskewconcat or clipRect clipPath will all operate as usual but when the balancing call to restore() is made those calls will be forgotten and the settings that existed before the save() will be reinstated.
android.graphics.Canvas.saveLayer,This method was deprecated in API level 26. Use saveLayer(android.graphics.RectF android.graphics.Paint) instead. This behaves the same as save() but in addition it allocates and redirects drawing to an offscreen bitmap. Note: this method is very expensive incurring more than double rendering cost for contained content. Avoid using this method especially if the bounds provided are large. It is recommended to use a hardware layer on a View to apply an xfermode color filter or alpha as it will perform much better than this method. All drawing calls are directed to a newly allocated offscreen bitmap. Only when the balancing call to restore() is made is that offscreen buffer drawn back to the current target of the Canvas (either the screen it's target Bitmap or the previous layer). Attributes of the Paint - Paint#getAlpha() Paint#getXfermode() and Paint#getColorFilter() are applied when the offscreen bitmap is drawn back when restore() is called. As of API Level API level android.os.Build.VERSION_CODES.P Build.VERSION_CODES.P the only valid saveFlags is ALL_SAVE_FLAG. All other flags are ignored.
android.graphics.Canvas.saveLayer,Save layer.
android.graphics.Canvas.saveLayer,This method was deprecated in API level 26.
android.graphics.Canvas.saveLayer,Use saveLayer(android.graphics.RectF android.graphics.Paint) instead.
android.graphics.Canvas.saveLayer,This behaves the same as save() but in addition it allocates and redirects drawing to an offscreen bitmap.
android.graphics.Canvas.saveLayer,Note: this method is very expensive incurring more than double rendering cost for contained content.
android.graphics.Canvas.saveLayer,Avoid using this method especially if the bounds provided are large.
android.graphics.Canvas.saveLayer,It is recommended to use a hardware layer on a View to apply an xfermode color filter or alpha as it will perform much better than this method.
android.graphics.Canvas.saveLayer,All drawing calls are directed to a newly allocated offscreen bitmap.
android.graphics.Canvas.saveLayer,Only when the balancing call to restore() is made is that offscreen buffer drawn back to the current target of the Canvas (either the screen it's target Bitmap or the previous layer).
android.graphics.Canvas.saveLayer,Attributes of the Paint - Paint#getAlpha() Paint#getXfermode() and Paint#getColorFilter() are applied when the offscreen bitmap is drawn back when restore() is called.
android.graphics.Canvas.saveLayer,As of API Level API level android.os.Build.VERSION_CODES.P Build.VERSION_CODES.P the only valid saveFlags is ALL_SAVE_FLAG.
android.graphics.Canvas.saveLayer,All other flags are ignored.
android.graphics.Canvas.saveLayer,This behaves the same as save() but in addition it allocates and redirects drawing to an offscreen rendering target. Note: this method is very expensive incurring more than double rendering cost for contained content. Avoid using this method when possible and instead use a hardware layer on a View to apply an xfermode color filter or alpha as it will perform much better than this method. All drawing calls are directed to a newly allocated offscreen rendering target. Only when the balancing call to restore() is made is that offscreen buffer drawn back to the current target of the Canvas (which can potentially be a previous layer if these calls are nested). Attributes of the Paint - Paint#getAlpha() Paint#getXfermode() and Paint#getColorFilter() are applied when the offscreen rendering target is drawn back when restore() is called.
android.graphics.Canvas.saveLayer,Save layer.
android.graphics.Canvas.saveLayer,This behaves the same as save() but in addition it allocates and redirects drawing to an offscreen rendering target.
android.graphics.Canvas.saveLayer,Note: this method is very expensive incurring more than double rendering cost for contained content.
android.graphics.Canvas.saveLayer,Avoid using this method when possible and instead use a hardware layer on a View to apply an xfermode color filter or alpha as it will perform much better than this method.
android.graphics.Canvas.saveLayer,All drawing calls are directed to a newly allocated offscreen rendering target.
android.graphics.Canvas.saveLayer,Only when the balancing call to restore() is made is that offscreen buffer drawn back to the current target of the Canvas (which can potentially be a previous layer if these calls are nested).
android.graphics.Canvas.saveLayer,Attributes of the Paint - Paint#getAlpha() Paint#getXfermode() and Paint#getColorFilter() are applied when the offscreen rendering target is drawn back when restore() is called.
android.graphics.Canvas.saveLayer,Convenience for saveLayer(android.graphics.RectF android.graphics.Paint) that takes the four float coordinates of the bounds rectangle.
android.graphics.Canvas.saveLayer,Save layer.
android.graphics.Canvas.saveLayer,This method was deprecated in API level 26. Use saveLayer(float float float float android.graphics.Paint) instead. Helper version of saveLayer() that takes 4 values rather than a RectF. As of API Level API level android.os.Build.VERSION_CODES.P Build.VERSION_CODES.P the only valid saveFlags is ALL_SAVE_FLAG. All other flags are ignored.
android.graphics.Canvas.saveLayer,Save layer.
android.graphics.Canvas.saveLayer,This method was deprecated in API level 26.
android.graphics.Canvas.saveLayer,Use saveLayer(float float float float android.graphics.Paint) instead.
android.graphics.Canvas.saveLayer,Helper version of saveLayer() that takes 4 values rather than a RectF.
android.graphics.Canvas.saveLayer,As of API Level API level android.os.Build.VERSION_CODES.P Build.VERSION_CODES.P the only valid saveFlags is ALL_SAVE_FLAG.
android.graphics.Canvas.saveLayer,All other flags are ignored.
android.graphics.Canvas.saveLayerAlpha,This method was deprecated in API level 26. Use saveLayerAlpha(float float float float int) instead. Helper for saveLayerAlpha() that takes 4 values instead of a RectF. As of API Level API level android.os.Build.VERSION_CODES.P Build.VERSION_CODES.P the only valid saveFlags is ALL_SAVE_FLAG. All other flags are ignored.
android.graphics.Canvas.saveLayerAlpha,Save layer alpha.
android.graphics.Canvas.saveLayerAlpha,This method was deprecated in API level 26.
android.graphics.Canvas.saveLayerAlpha,Use saveLayerAlpha(float float float float int) instead.
android.graphics.Canvas.saveLayerAlpha,Helper for saveLayerAlpha() that takes 4 values instead of a RectF.
android.graphics.Canvas.saveLayerAlpha,As of API Level API level android.os.Build.VERSION_CODES.P Build.VERSION_CODES.P the only valid saveFlags is ALL_SAVE_FLAG.
android.graphics.Canvas.saveLayerAlpha,All other flags are ignored.
android.graphics.Canvas.saveLayerAlpha,Convenience for saveLayer(android.graphics.RectF android.graphics.Paint) but instead of taking a entire Paint object it takes only the alpha parameter.
android.graphics.Canvas.saveLayerAlpha,Save layer alpha.
android.graphics.Canvas.saveLayerAlpha,This method was deprecated in API level 26. Use saveLayerAlpha(android.graphics.RectF int) instead. This behaves the same as save() but in addition it allocates and redirects drawing to an offscreen bitmap. Note: this method is very expensive incurring more than double rendering cost for contained content. Avoid using this method especially if the bounds provided are large. It is recommended to use a hardware layer on a View to apply an xfermode color filter or alpha as it will perform much better than this method. All drawing calls are directed to a newly allocated offscreen bitmap. Only when the balancing call to restore() is made is that offscreen buffer drawn back to the current target of the Canvas (either the screen it's target Bitmap or the previous layer). The alpha parameter is applied when the offscreen bitmap is drawn back when restore() is called. As of API Level API level android.os.Build.VERSION_CODES.P Build.VERSION_CODES.P the only valid saveFlags is ALL_SAVE_FLAG. All other flags are ignored.
android.graphics.Canvas.saveLayerAlpha,Save layer alpha.
android.graphics.Canvas.saveLayerAlpha,This method was deprecated in API level 26.
android.graphics.Canvas.saveLayerAlpha,Use saveLayerAlpha(android.graphics.RectF int) instead.
android.graphics.Canvas.saveLayerAlpha,This behaves the same as save() but in addition it allocates and redirects drawing to an offscreen bitmap.
android.graphics.Canvas.saveLayerAlpha,Note: this method is very expensive incurring more than double rendering cost for contained content.
android.graphics.Canvas.saveLayerAlpha,Avoid using this method especially if the bounds provided are large.
android.graphics.Canvas.saveLayerAlpha,It is recommended to use a hardware layer on a View to apply an xfermode color filter or alpha as it will perform much better than this method.
android.graphics.Canvas.saveLayerAlpha,All drawing calls are directed to a newly allocated offscreen bitmap.
android.graphics.Canvas.saveLayerAlpha,Only when the balancing call to restore() is made is that offscreen buffer drawn back to the current target of the Canvas (either the screen it's target Bitmap or the previous layer).
android.graphics.Canvas.saveLayerAlpha,The alpha parameter is applied when the offscreen bitmap is drawn back when restore() is called.
android.graphics.Canvas.saveLayerAlpha,As of API Level API level android.os.Build.VERSION_CODES.P Build.VERSION_CODES.P the only valid saveFlags is ALL_SAVE_FLAG.
android.graphics.Canvas.saveLayerAlpha,All other flags are ignored.
android.graphics.Canvas.saveLayerAlpha,Convenience for saveLayerAlpha(android.graphics.RectF int) that takes the four float coordinates of the bounds rectangle.
android.graphics.Canvas.saveLayerAlpha,Save layer alpha.
android.graphics.Canvas.scale,Preconcat the current matrix with the specified scale.
android.graphics.Canvas.scale,Scale.
android.graphics.Canvas.scale,Preconcat the current matrix with the specified scale.
android.graphics.Canvas.scale,Scale.
android.graphics.Canvas.setBitmap,Specify a bitmap for the canvas to draw into. All canvas state such as layers filters and the save/restore stack are reset. Additionally the canvas' target density is updated to match that of the bitmap. Prior to API level android.os.Build.VERSION_CODES.O Build.VERSION_CODES.O the current matrix and clip stack were preserved.
android.graphics.Canvas.setBitmap,Set bitmap.
android.graphics.Canvas.setBitmap,Specify a bitmap for the canvas to draw into.
android.graphics.Canvas.setBitmap,All canvas state such as layers filters and the save/restore stack are reset.
android.graphics.Canvas.setBitmap,Additionally the canvas' target density is updated to match that of the bitmap.
android.graphics.Canvas.setBitmap,Prior to API level android.os.Build.VERSION_CODES.O Build.VERSION_CODES.O the current matrix and clip stack were preserved.
android.graphics.Canvas.setDensity,Specifies the density for this Canvas' backing bitmap. This modifies the target density of the canvas itself as well as the density of its backing bitmap via Bitmap#setDensity(int).
android.graphics.Canvas.setDensity,Set density.
android.graphics.Canvas.setDensity,Specifies the density for this Canvas' backing bitmap.
android.graphics.Canvas.setDensity,This modifies the target density of the canvas itself as well as the density of its backing bitmap via Bitmap#setDensity(int).
android.graphics.Canvas.setMatrix,Completely replace the current matrix with the specified matrix. If the matrix parameter is null then the current matrix is reset to identity. Note: it is recommended to use concat(android.graphics.Matrix) scale(float float) translate(float float) and rotate(float) instead of this method.
android.graphics.Canvas.setMatrix,Set matrix.
android.graphics.Canvas.setMatrix,Completely replace the current matrix with the specified matrix.
android.graphics.Canvas.setMatrix,If the matrix parameter is null then the current matrix is reset to identity.
android.graphics.Canvas.setMatrix,Note: it is recommended to use concat(android.graphics.Matrix) scale(float float) translate(float float) and rotate(float) instead of this method.
android.graphics.Canvas.translate,Preconcat the current matrix with the specified translation.
android.graphics.Canvas.translate,Translate.
android.graphics.Color.HSVToColor,Convert HSV components to an ARGB color. Alpha set to 0xFF. hsv[0] is Hue \([0..360[\) hsv[1] is Saturation \([0...1]\) hsv[2] is Value \([0...1]\).
android.graphics.Color.HSVToColor,H s v to color.
android.graphics.Color.HSVToColor,Convert HSV components to an ARGB color.
android.graphics.Color.HSVToColor,Alpha set to 0xFF.
android.graphics.Color.HSVToColor,hsv[0] is Hue \([0..360[\) hsv[1] is Saturation \([0...1]\) hsv[2] is Value \([0...1]\).
android.graphics.Color.HSVToColor,Convert HSV components to an ARGB color. The alpha component is passed through unchanged. hsv[0] is Hue \([0..360[\) hsv[1] is Saturation \([0...1]\) hsv[2] is Value \([0...1]\).
android.graphics.Color.HSVToColor,H s v to color.
android.graphics.Color.HSVToColor,Convert HSV components to an ARGB color.
android.graphics.Color.HSVToColor,The alpha component is passed through unchanged.
android.graphics.Color.HSVToColor,hsv[0] is Hue \([0..360[\) hsv[1] is Saturation \([0...1]\) hsv[2] is Value \([0...1]\).
android.graphics.Color.RGBToHSV,Convert RGB components to HSV. hsv[0] is Hue \([0..360[\) hsv[1] is Saturation \([0...1]\) hsv[2] is Value \([0...1]\).
android.graphics.Color.RGBToHSV,R g b to h s v.
android.graphics.Color.RGBToHSV,Convert RGB components to HSV.
android.graphics.Color.RGBToHSV,hsv[0] is Hue \([0..360[\) hsv[1] is Saturation \([0...1]\) hsv[2] is Value \([0...1]\).
android.graphics.Color.alpha,Return the alpha component of a color int. This is the same as saying color >>> 24.
android.graphics.Color.alpha,Alpha.
android.graphics.Color.alpha,Return the alpha component of a color int.
android.graphics.Color.alpha,This is the same as saying color >>> 24.
android.graphics.Color.alpha,Returns the value of the alpha component in the range \([0..1]\). Calling this method is equivalent to getComponent(getComponentCount() - 1).
android.graphics.Color.alpha,Alpha.
android.graphics.Color.alpha,Returns the value of the alpha component in the range \([0..1]\).
android.graphics.Color.alpha,Calling this method is equivalent to getComponent(getComponentCount() - 1).
android.graphics.Color.alpha,Returns the alpha component encoded in the specified color long. The returned value is always in the range \([0..1]\).
android.graphics.Color.alpha,Alpha.
android.graphics.Color.alpha,Returns the alpha component encoded in the specified color long.
android.graphics.Color.alpha,The returned value is always in the range \([0..1]\).
android.graphics.Color.argb,Return a color-int from alpha red green blue components. These component values should be \([0..255]\) but there is no range check performed so if they are out of range the returned color is undefined.
android.graphics.Color.argb,Argb.
android.graphics.Color.argb,Return a color-int from alpha red green blue components.
android.graphics.Color.argb,These component values should be \([0..255]\) but there is no range check performed so if they are out of range the returned color is undefined.
android.graphics.Color.argb,Return a color-int from alpha red green blue float components in the range \([0..1]\). If the components are out of range the returned color is undefined.
android.graphics.Color.argb,Argb.
android.graphics.Color.argb,Return a color-int from alpha red green blue float components in the range \([0..1]\).
android.graphics.Color.argb,If the components are out of range the returned color is undefined.
android.graphics.Color.blue,Return the blue component of a color int. This is the same as saying color & 0xFF.
android.graphics.Color.blue,Blue.
android.graphics.Color.blue,Return the blue component of a color int.
android.graphics.Color.blue,This is the same as saying color & 0xFF.
android.graphics.Color.blue,Returns the value of the blue component in the range defined by this color's color space (see ColorSpace#getMinValue(int) and ColorSpace#getMaxValue(int) ). If this color's color model is not ColorSpace.Model#RGB calling this method is equivalent to getComponent(2).
android.graphics.Color.blue,Blue.
android.graphics.Color.blue,Returns the value of the blue component in the range defined by this color's color space (see ColorSpace#getMinValue(int) and ColorSpace#getMaxValue(int) ).
android.graphics.Color.blue,If this color's color model is not ColorSpace.Model#RGB calling this method is equivalent to getComponent(2).
android.graphics.Color.blue,Returns the blue component encoded in the specified color long. The range of the returned value depends on the color space associated with the specified color. The color space can be queried by calling colorSpace(long).
android.graphics.Color.blue,Blue.
android.graphics.Color.blue,Returns the blue component encoded in the specified color long.
android.graphics.Color.blue,The range of the returned value depends on the color space associated with the specified color.
android.graphics.Color.blue,The color space can be queried by calling colorSpace(long).
android.graphics.Color.colorToHSV,Convert the ARGB color to its HSV components. hsv[0] is Hue \([0..360[\) hsv[1] is Saturation \([0...1]\) hsv[2] is Value \([0...1]\).
android.graphics.Color.colorToHSV,Color to h s v.
android.graphics.Color.colorToHSV,Convert the ARGB color to its HSV components.
android.graphics.Color.colorToHSV,hsv[0] is Hue \([0..360[\) hsv[1] is Saturation \([0...1]\) hsv[2] is Value \([0...1]\).
android.graphics.Color.green,Returns the green component encoded in the specified color long. The range of the returned value depends on the color space associated with the specified color. The color space can be queried by calling colorSpace(long).
android.graphics.Color.green,Green.
android.graphics.Color.green,Returns the green component encoded in the specified color long.
android.graphics.Color.green,The range of the returned value depends on the color space associated with the specified color.
android.graphics.Color.green,The color space can be queried by calling colorSpace(long).
android.graphics.Color.green,Returns the value of the green component in the range defined by this color's color space (see ColorSpace#getMinValue(int) and ColorSpace#getMaxValue(int) ). If this color's color model is not ColorSpace.Model#RGB calling this method is equivalent to getComponent(1).
android.graphics.Color.green,Green.
android.graphics.Color.green,Returns the value of the green component in the range defined by this color's color space (see ColorSpace#getMinValue(int) and ColorSpace#getMaxValue(int) ).
android.graphics.Color.green,If this color's color model is not ColorSpace.Model#RGB calling this method is equivalent to getComponent(1).
android.graphics.Color.green,Return the green component of a color int. This is the same as saying (color >> 8) & 0xFF.
android.graphics.Color.green,Green.
android.graphics.Color.green,Return the green component of a color int.
android.graphics.Color.green,This is the same as saying (color >> 8) & 0xFF.
android.graphics.Color.parseColor,#RRGGBB #AARRGGBB The following names are also accepted: red blue green black white gray cyan magenta yellow lightgray darkgray grey lightgrey darkgrey aqua fuchsia lime maroon navy olive purple silver and teal.
android.graphics.Color.parseColor,Parse color.
android.graphics.Color.red,Returns the value of the red component in the range defined by this color's color space (see ColorSpace#getMinValue(int) and ColorSpace#getMaxValue(int) ). If this color's color model is not ColorSpace.Model#RGB calling this method is equivalent to getComponent(0).
android.graphics.Color.red,Red.
android.graphics.Color.red,Returns the value of the red component in the range defined by this color's color space (see ColorSpace#getMinValue(int) and ColorSpace#getMaxValue(int) ).
android.graphics.Color.red,If this color's color model is not ColorSpace.Model#RGB calling this method is equivalent to getComponent(0).
android.graphics.Color.red,Returns the red component encoded in the specified color long. The range of the returned value depends on the color space associated with the specified color. The color space can be queried by calling colorSpace(long).
android.graphics.Color.red,Red.
android.graphics.Color.red,Returns the red component encoded in the specified color long.
android.graphics.Color.red,The range of the returned value depends on the color space associated with the specified color.
android.graphics.Color.red,The color space can be queried by calling colorSpace(long).
android.graphics.Color.red,Return the red component of a color int. This is the same as saying (color >> 16) & 0xFF.
android.graphics.Color.red,Red.
android.graphics.Color.red,Return the red component of a color int.
android.graphics.Color.red,This is the same as saying (color >> 16) & 0xFF.
android.graphics.Color.rgb,Return a color-int from red green blue float components in the range \([0..1]\). The alpha component is implicitly 1.0 (fully opaque). If the components are out of range the returned color is undefined.
android.graphics.Color.rgb,Rgb.
android.graphics.Color.rgb,Return a color-int from red green blue float components in the range \([0..1]\).
android.graphics.Color.rgb,The alpha component is implicitly 1.0 (fully opaque).
android.graphics.Color.rgb,If the components are out of range the returned color is undefined.
android.graphics.Color.rgb,Return a color-int from red green blue components. The alpha component is implicitly 255 (fully opaque). These component values should be \([0..255]\) but there is no range check performed so if they are out of range the returned color is undefined.
android.graphics.Color.rgb,Rgb.
android.graphics.Color.rgb,Return a color-int from red green blue components.
android.graphics.Color.rgb,The alpha component is implicitly 255 (fully opaque).
android.graphics.Color.rgb,These component values should be \([0..255]\) but there is no range check performed so if they are out of range the returned color is undefined.
android.graphics.ColorMatrix.postConcat,Concat this colormatrix with the specified postmatrix. This is logically the same as calling setConcat(postmatrix this);.
android.graphics.ColorMatrix.postConcat,Post concat.
android.graphics.ColorMatrix.postConcat,Concat this colormatrix with the specified postmatrix.
android.graphics.ColorMatrix.postConcat,This is logically the same as calling setConcat(postmatrix this);.
android.graphics.ColorMatrix.preConcat,Concat this colormatrix with the specified prematrix. This is logically the same as calling setConcat(this prematrix);.
android.graphics.ColorMatrix.preConcat,Pre concat.
android.graphics.ColorMatrix.preConcat,Concat this colormatrix with the specified prematrix.
android.graphics.ColorMatrix.preConcat,This is logically the same as calling setConcat(this prematrix);.
android.graphics.ColorMatrix.reset,Set this colormatrix to identity:.
android.graphics.ColorMatrix.reset,Reset.
android.graphics.ColorMatrix.set,Assign the array of floats into this matrix copying all of its values.
android.graphics.ColorMatrix.set,Set.
android.graphics.ColorMatrix.set,Assign the src colormatrix into this matrix copying all of its values.
android.graphics.ColorMatrix.set,Set.
android.graphics.ColorMatrix.setSaturation,Set the matrix to affect the saturation of colors.
android.graphics.ColorMatrix.setSaturation,Set saturation.
android.graphics.ColorMatrix.setScale,Set this colormatrix to scale by the specified values.
android.graphics.ColorMatrix.setScale,Set scale.
android.graphics.ImageFormat.getBitsPerPixel,Use this function to retrieve the number of bits per pixel of an ImageFormat.
android.graphics.ImageFormat.getBitsPerPixel,Get bits per pixel.
android.graphics.Matrix.getValues,Copy 9 values from the matrix into the array.
android.graphics.Matrix.getValues,Get values.
android.graphics.Matrix.invert,If this matrix can be inverted return true and if inverse is not null set inverse to be the inverse of this matrix. If this matrix cannot be inverted ignore inverse and return false.
android.graphics.Matrix.invert,Invert.
android.graphics.Matrix.invert,If this matrix can be inverted return true and if inverse is not null set inverse to be the inverse of this matrix.
android.graphics.Matrix.invert,If this matrix cannot be inverted ignore inverse and return false.
android.graphics.Matrix.mapPoints,"Apply this matrix to the array of 2D points specified by src and write the transformed points into the array of points specified by dst. The two arrays represent their ""points"" as pairs of floats [x y]."
android.graphics.Matrix.mapPoints,Map points.
android.graphics.Matrix.mapPoints,Apply this matrix to the array of 2D points specified by src and write the transformed points into the array of points specified by dst.
android.graphics.Matrix.mapPoints,"The two arrays represent their ""points"" as pairs of floats [x y]."
android.graphics.Matrix.mapPoints,"Apply this matrix to the array of 2D points specified by src and write the transformed points into the array of points specified by dst. The two arrays represent their ""points"" as pairs of floats [x y]."
android.graphics.Matrix.mapPoints,Map points.
android.graphics.Matrix.mapPoints,Apply this matrix to the array of 2D points specified by src and write the transformed points into the array of points specified by dst.
android.graphics.Matrix.mapPoints,"The two arrays represent their ""points"" as pairs of floats [x y]."
android.graphics.Matrix.mapPoints,Apply this matrix to the array of 2D points and write the transformed points back into the array.
android.graphics.Matrix.mapPoints,Map points.
android.graphics.Matrix.mapRect,Apply this matrix to the rectangle and write the transformed rectangle back into it. This is accomplished by transforming the 4 corners of rect and then setting it to the bounds of those points.
android.graphics.Matrix.mapRect,Map rect.
android.graphics.Matrix.mapRect,Apply this matrix to the rectangle and write the transformed rectangle back into it.
android.graphics.Matrix.mapRect,This is accomplished by transforming the 4 corners of rect and then setting it to the bounds of those points.
android.graphics.Matrix.mapRect,Apply this matrix to the src rectangle and write the transformed rectangle into dst. This is accomplished by transforming the 4 corners of src and then setting dst to the bounds of those points.
android.graphics.Matrix.mapRect,Map rect.
android.graphics.Matrix.mapRect,Apply this matrix to the src rectangle and write the transformed rectangle into dst.
android.graphics.Matrix.mapRect,This is accomplished by transforming the 4 corners of src and then setting dst to the bounds of those points.
android.graphics.Matrix.mapVectors,Apply this matrix to the array of 2D vectors and write the transformed vectors back into the array. Note: this method does not apply the translation associated with the matrix. Use Matrix#mapPoints(float[]) if you want the translation to be applied.
android.graphics.Matrix.mapVectors,Map vectors.
android.graphics.Matrix.mapVectors,Apply this matrix to the array of 2D vectors and write the transformed vectors back into the array.
android.graphics.Matrix.mapVectors,Note: this method does not apply the translation associated with the matrix.
android.graphics.Matrix.mapVectors,Use Matrix#mapPoints(float[]) if you want the translation to be applied.
android.graphics.Matrix.mapVectors,"Apply this matrix to the array of 2D vectors specified by src and write the transformed vectors into the array of vectors specified by dst. The two arrays represent their ""vectors"" as pairs of floats [x y]. Note: this method does not apply the translation associated with the matrix. Use Matrix#mapPoints(float[] int float[] int int) if you want the translation to be applied."
android.graphics.Matrix.mapVectors,Map vectors.
android.graphics.Matrix.mapVectors,Apply this matrix to the array of 2D vectors specified by src and write the transformed vectors into the array of vectors specified by dst.
android.graphics.Matrix.mapVectors,"The two arrays represent their ""vectors"" as pairs of floats [x y]."
android.graphics.Matrix.mapVectors,Note: this method does not apply the translation associated with the matrix.
android.graphics.Matrix.mapVectors,Use Matrix#mapPoints(float[] int float[] int int) if you want the translation to be applied.
android.graphics.Matrix.mapVectors,"Apply this matrix to the array of 2D vectors specified by src and write the transformed vectors into the array of vectors specified by dst. The two arrays represent their ""vectors"" as pairs of floats [x y]. Note: this method does not apply the translation associated with the matrix. Use Matrix#mapPoints(float[] float[]) if you want the translation to be applied."
android.graphics.Matrix.mapVectors,Map vectors.
android.graphics.Matrix.mapVectors,Apply this matrix to the array of 2D vectors specified by src and write the transformed vectors into the array of vectors specified by dst.
android.graphics.Matrix.mapVectors,"The two arrays represent their ""vectors"" as pairs of floats [x y]."
android.graphics.Matrix.mapVectors,Note: this method does not apply the translation associated with the matrix.
android.graphics.Matrix.mapVectors,Use Matrix#mapPoints(float[] float[]) if you want the translation to be applied.
android.graphics.Matrix.postConcat,Postconcats the matrix with the specified matrix. M' = other * M.
android.graphics.Matrix.postConcat,Post concat.
android.graphics.Matrix.postConcat,Postconcats the matrix with the specified matrix.
android.graphics.Matrix.postConcat,M' = other * M.
android.graphics.Matrix.postRotate,Postconcats the matrix with the specified rotation. M' = R(degrees px py) * M.
android.graphics.Matrix.postRotate,Post rotate.
android.graphics.Matrix.postRotate,Postconcats the matrix with the specified rotation.
android.graphics.Matrix.postRotate,M' = R(degrees px py) * M.
android.graphics.Matrix.postRotate,Postconcats the matrix with the specified rotation. M' = R(degrees) * M.
android.graphics.Matrix.postRotate,Post rotate.
android.graphics.Matrix.postRotate,Postconcats the matrix with the specified rotation.
android.graphics.Matrix.postRotate,M' = R(degrees) * M.
android.graphics.Matrix.postScale,Postconcats the matrix with the specified scale. M' = S(sx sy px py) * M.
android.graphics.Matrix.postScale,Post scale.
android.graphics.Matrix.postScale,Postconcats the matrix with the specified scale.
android.graphics.Matrix.postScale,M' = S(sx sy px py) * M.
android.graphics.Matrix.postScale,Postconcats the matrix with the specified scale. M' = S(sx sy) * M.
android.graphics.Matrix.postScale,Post scale.
android.graphics.Matrix.postScale,Postconcats the matrix with the specified scale.
android.graphics.Matrix.postScale,M' = S(sx sy) * M.
android.graphics.Matrix.postSkew,Postconcats the matrix with the specified skew. M' = K(kx ky) * M.
android.graphics.Matrix.postSkew,Post skew.
android.graphics.Matrix.postSkew,Postconcats the matrix with the specified skew.
android.graphics.Matrix.postSkew,M' = K(kx ky) * M.
android.graphics.Matrix.postSkew,Postconcats the matrix with the specified skew. M' = K(kx ky px py) * M.
android.graphics.Matrix.postSkew,Post skew.
android.graphics.Matrix.postSkew,Postconcats the matrix with the specified skew.
android.graphics.Matrix.postSkew,M' = K(kx ky px py) * M.
android.graphics.Matrix.postTranslate,Postconcats the matrix with the specified translation. M' = T(dx dy) * M.
android.graphics.Matrix.postTranslate,Post translate.
android.graphics.Matrix.postTranslate,Postconcats the matrix with the specified translation.
android.graphics.Matrix.postTranslate,M' = T(dx dy) * M.
android.graphics.Matrix.preConcat,Preconcats the matrix with the specified matrix. M' = M * other.
android.graphics.Matrix.preConcat,Pre concat.
android.graphics.Matrix.preConcat,Preconcats the matrix with the specified matrix.
android.graphics.Matrix.preConcat,M' = M * other.
android.graphics.Matrix.preRotate,Preconcats the matrix with the specified rotation. M' = M * R(degrees).
android.graphics.Matrix.preRotate,Pre rotate.
android.graphics.Matrix.preRotate,Preconcats the matrix with the specified rotation.
android.graphics.Matrix.preRotate,M' = M * R(degrees).
android.graphics.Matrix.preRotate,Preconcats the matrix with the specified rotation. M' = M * R(degrees px py).
android.graphics.Matrix.preRotate,Pre rotate.
android.graphics.Matrix.preRotate,Preconcats the matrix with the specified rotation.
android.graphics.Matrix.preRotate,M' = M * R(degrees px py).
android.graphics.Matrix.preScale,Preconcats the matrix with the specified scale. M' = M * S(sx sy).
android.graphics.Matrix.preScale,Pre scale.
android.graphics.Matrix.preScale,Preconcats the matrix with the specified scale.
android.graphics.Matrix.preScale,M' = M * S(sx sy).
android.graphics.Matrix.preScale,Preconcats the matrix with the specified scale. M' = M * S(sx sy px py).
android.graphics.Matrix.preScale,Pre scale.
android.graphics.Matrix.preScale,Preconcats the matrix with the specified scale.
android.graphics.Matrix.preScale,M' = M * S(sx sy px py).
android.graphics.Matrix.preTranslate,Preconcats the matrix with the specified translation. M' = M * T(dx dy).
android.graphics.Matrix.preTranslate,Pre translate.
android.graphics.Matrix.preTranslate,Preconcats the matrix with the specified translation.
android.graphics.Matrix.preTranslate,M' = M * T(dx dy).
android.graphics.Matrix.reset,Set the matrix to identity.
android.graphics.Matrix.reset,Reset.
android.graphics.Matrix.set,(deep) copy the src matrix into this matrix. If src is null reset this matrix to the identity matrix.
android.graphics.Matrix.set,Set.
android.graphics.Matrix.set,(deep) copy the src matrix into this matrix.
android.graphics.Matrix.set,If src is null reset this matrix to the identity matrix.
android.graphics.Matrix.setConcat,Set the matrix to the concatenation of the two specified matrices and return true. Either of the two matrices may also be the target matrix that is matrixA.setConcat(matrixA matrixB); is valid. In Build.VERSION_CODES.GINGERBREAD_MR1 and below this function returns true only if the result can be represented. In Build.VERSION_CODES.HONEYCOMB and above it always returns true.
android.graphics.Matrix.setConcat,Set concat.
android.graphics.Matrix.setConcat,Set the matrix to the concatenation of the two specified matrices and return true.
android.graphics.Matrix.setConcat,Either of the two matrices may also be the target matrix that is matrixA.setConcat(matrixA matrixB); is valid.
android.graphics.Matrix.setConcat,In Build.VERSION_CODES.GINGERBREAD_MR1 and below this function returns true only if the result can be represented.
android.graphics.Matrix.setConcat,In Build.VERSION_CODES.HONEYCOMB and above it always returns true.
android.graphics.Matrix.setRotate,Set the matrix to rotate by the specified number of degrees with a pivot point at (px py). The pivot point is the coordinate that should remain unchanged by the specified transformation.
android.graphics.Matrix.setRotate,Set rotate.
android.graphics.Matrix.setRotate,Set the matrix to rotate by the specified number of degrees with a pivot point at (px py).
android.graphics.Matrix.setRotate,The pivot point is the coordinate that should remain unchanged by the specified transformation.
android.graphics.Matrix.setRotate,Set the matrix to rotate about (00) by the specified number of degrees.
android.graphics.Matrix.setRotate,Set rotate.
android.graphics.Matrix.setScale,Set the matrix to scale by sx and sy.
android.graphics.Matrix.setScale,Set scale.
android.graphics.Matrix.setScale,Set the matrix to scale by sx and sy with a pivot point at (px py). The pivot point is the coordinate that should remain unchanged by the specified transformation.
android.graphics.Matrix.setScale,Set scale.
android.graphics.Matrix.setScale,Set the matrix to scale by sx and sy with a pivot point at (px py).
android.graphics.Matrix.setScale,The pivot point is the coordinate that should remain unchanged by the specified transformation.
android.graphics.Matrix.setTranslate,Set the matrix to translate by (dx dy).
android.graphics.Matrix.setTranslate,Set translate.
android.graphics.Matrix.setValues,Copy 9 values from the array into the matrix. Depending on the implementation of Matrix these may be transformed into 16.16 integers in the Matrix such that a subsequent call to getValues() will not yield exactly the same values.
android.graphics.Matrix.setValues,Set values.
android.graphics.Matrix.setValues,Copy 9 values from the array into the matrix.
android.graphics.Matrix.setValues,Depending on the implementation of Matrix these may be transformed into 16.16 integers in the Matrix such that a subsequent call to getValues() will not yield exactly the same values.
android.graphics.NinePatch.isNinePatchChunk,Verifies that the specified byte array is a valid 9-patch data chunk.
android.graphics.NinePatch.isNinePatchChunk,Is nine patch chunk.
android.graphics.Outline.setRect,Convenience for setRect(int int int int).
android.graphics.Outline.setRect,Set rect.
android.graphics.Outline.setRect,Sets the Outline to the rounded rect defined by the input rect and corner radius.
android.graphics.Outline.setRect,Set rect.
android.graphics.Outline.setRoundRect,Convenience for setRoundRect(int int int int float).
android.graphics.Outline.setRoundRect,Set round rect.
android.graphics.Outline.setRoundRect,Sets the Outline to the rounded rect defined by the input rect and corner radius. Passing a zero radius is equivalent to calling setRect(int int int int).
android.graphics.Outline.setRoundRect,Set round rect.
android.graphics.Outline.setRoundRect,Sets the Outline to the rounded rect defined by the input rect and corner radius.
android.graphics.Outline.setRoundRect,Passing a zero radius is equivalent to calling setRect(int int int int).
android.graphics.Paint.ascent,Return the distance above (negative) the baseline (ascent) based on the current typeface and text size. Note that this is the ascent of the main typeface and actual text rendered may need a larger ascent because fallback fonts may get used in rendering the text.
android.graphics.Paint.ascent,Ascent.
android.graphics.Paint.ascent,Return the distance above (negative) the baseline (ascent) based on the current typeface and text size.
android.graphics.Paint.ascent,Note that this is the ascent of the main typeface and actual text rendered may need a larger ascent because fallback fonts may get used in rendering the text.
android.graphics.Paint.clearShadowLayer,Clear the shadow layer.
android.graphics.Paint.clearShadowLayer,Clear shadow layer.
android.graphics.Paint.descent,Return the distance below (positive) the baseline (descent) based on the current typeface and text size. Note that this is the descent of the main typeface and actual text rendered may need a larger descent because fallback fonts may get used in rendering the text.
android.graphics.Paint.descent,Descent.
android.graphics.Paint.descent,Return the distance below (positive) the baseline (descent) based on the current typeface and text size.
android.graphics.Paint.descent,Note that this is the descent of the main typeface and actual text rendered may need a larger descent because fallback fonts may get used in rendering the text.
android.graphics.Paint.getAlpha,Helper to getColor() that just returns the color's alpha value. This is the same as calling getColor() >>> 24. It always returns a value between 0 (completely transparent) and 255 (completely opaque).
android.graphics.Paint.getAlpha,Get alpha.
android.graphics.Paint.getAlpha,Helper to getColor() that just returns the color's alpha value.
android.graphics.Paint.getAlpha,This is the same as calling getColor() >>> 24.
android.graphics.Paint.getAlpha,It always returns a value between 0 (completely transparent) and 255 (completely opaque).
android.graphics.Paint.getColor,Return the paint's color in sRGB. Note that the color is a 32bit value containing alpha as well as rgb. This 32bit value is not premultiplied meaning that its alpha can be any value regardless of the values of rgb. See the Color class for more details.
android.graphics.Paint.getColor,Get color.
android.graphics.Paint.getColor,Return the paint's color in sRGB.
android.graphics.Paint.getColor,Note that the color is a 32bit value containing alpha as well as rgb.
android.graphics.Paint.getColor,This 32bit value is not premultiplied meaning that its alpha can be any value regardless of the values of rgb.
android.graphics.Paint.getColor,See the Color class for more details.
android.graphics.Paint.getColorFilter,Get the paint's colorfilter (maybe be null).
android.graphics.Paint.getColorFilter,Get color filter.
android.graphics.Paint.getFlags,Return the paint's flags. Use the Flag enum to test flag values.
android.graphics.Paint.getFlags,Get flags.
android.graphics.Paint.getFlags,Return the paint's flags.
android.graphics.Paint.getFlags,Use the Flag enum to test flag values.
android.graphics.Paint.getFontMetrics,Return the font's recommended interline spacing given the Paint's settings for typeface textSize etc. If metrics is not null return the fontmetric values in it. Note that these are the values for the main typeface and actual text rendered may need a larger set of values because fallback fonts may get used in rendering the text.
android.graphics.Paint.getFontMetrics,Get font metrics.
android.graphics.Paint.getFontMetrics,Return the font's recommended interline spacing given the Paint's settings for typeface textSize etc.
android.graphics.Paint.getFontMetrics,If metrics is not null return the fontmetric values in it.
android.graphics.Paint.getFontMetrics,Note that these are the values for the main typeface and actual text rendered may need a larger set of values because fallback fonts may get used in rendering the text.
android.graphics.Paint.getFontMetrics,Allocates a new FontMetrics object and then calls getFontMetrics(fm) with it returning the object.
android.graphics.Paint.getFontMetrics,Get font metrics.
android.graphics.Paint.getFontMetricsInt,Return the font's interline spacing given the Paint's settings for typeface textSize etc. If metrics is not null return the fontmetric values in it. Note: all values have been converted to integers from floats in such a way has to make the answers useful for both spacing and clipping. If you want more control over the rounding call getFontMetrics(). Note that these are the values for the main typeface and actual text rendered may need a larger set of values because fallback fonts may get used in rendering the text.
android.graphics.Paint.getFontMetricsInt,Get font metrics int.
android.graphics.Paint.getFontMetricsInt,Return the font's interline spacing given the Paint's settings for typeface textSize etc.
android.graphics.Paint.getFontMetricsInt,If metrics is not null return the fontmetric values in it.
android.graphics.Paint.getFontMetricsInt,Note: all values have been converted to integers from floats in such a way has to make the answers useful for both spacing and clipping.
android.graphics.Paint.getFontMetricsInt,If you want more control over the rounding call getFontMetrics().
android.graphics.Paint.getFontMetricsInt,Note that these are the values for the main typeface and actual text rendered may need a larger set of values because fallback fonts may get used in rendering the text.
android.graphics.Paint.getFontMetricsInt,.
android.graphics.Paint.getFontMetricsInt,Get font metrics int.
android.graphics.Paint.getFontSpacing,Return the recommend line spacing based on the current typeface and text size. Note that this is the value for the main typeface and actual text rendered may need a larger value because fallback fonts may get used in rendering the text.
android.graphics.Paint.getFontSpacing,Get font spacing.
android.graphics.Paint.getFontSpacing,Return the recommend line spacing based on the current typeface and text size.
android.graphics.Paint.getFontSpacing,Note that this is the value for the main typeface and actual text rendered may need a larger value because fallback fonts may get used in rendering the text.
android.graphics.Paint.getShader,Get the paint's shader object.
android.graphics.Paint.getShader,Get shader.
android.graphics.Paint.getStrokeWidth,Return the width for stroking.
android.graphics.Paint.getStrokeWidth,Get stroke width.
android.graphics.Paint.getStyle,Return the paint's style used for controlling how primitives' geometries are interpreted (except for drawBitmap which always assumes FILL_STYLE).
android.graphics.Paint.getStyle,Get style.
android.graphics.Paint.getTextAlign,Return the paint's Align value for drawing text. This controls how the text is positioned relative to its origin. LEFT align means that all of the text will be drawn to the right of its origin (i.e. the origin specifieds the LEFT edge of the text) and so on.
android.graphics.Paint.getTextAlign,Get text align.
android.graphics.Paint.getTextAlign,Return the paint's Align value for drawing text.
android.graphics.Paint.getTextAlign,This controls how the text is positioned relative to its origin.
android.graphics.Paint.getTextAlign,LEFT align means that all of the text will be drawn to the right of its origin (i.e.
android.graphics.Paint.getTextAlign,the origin specifieds the LEFT edge of the text) and so on.
android.graphics.Paint.getTextBounds,Retrieve the text boundary box and store to bounds. Return in bounds (allocated by the caller) the smallest rectangle that encloses all of the characters with an implied origin at (00).
android.graphics.Paint.getTextBounds,Get text bounds.
android.graphics.Paint.getTextBounds,Retrieve the text boundary box and store to bounds.
android.graphics.Paint.getTextBounds,Return in bounds (allocated by the caller) the smallest rectangle that encloses all of the characters with an implied origin at (00).
android.graphics.Paint.getTextBounds,Retrieve the text boundary box and store to bounds. Return in bounds (allocated by the caller) the smallest rectangle that encloses all of the characters with an implied origin at (00). Note that styles are ignored even if you pass Spanned instance. Use StaticLayout for measuring bounds of Spanned.
android.graphics.Paint.getTextBounds,Get text bounds.
android.graphics.Paint.getTextBounds,Retrieve the text boundary box and store to bounds.
android.graphics.Paint.getTextBounds,Return in bounds (allocated by the caller) the smallest rectangle that encloses all of the characters with an implied origin at (00).
android.graphics.Paint.getTextBounds,Note that styles are ignored even if you pass Spanned instance.
android.graphics.Paint.getTextBounds,Use StaticLayout for measuring bounds of Spanned.
android.graphics.Paint.getTextBounds,Return in bounds (allocated by the caller) the smallest rectangle that encloses all of the characters with an implied origin at (00).
android.graphics.Paint.getTextBounds,Get text bounds.
android.graphics.Paint.getTextSize,Return the paint's text size.
android.graphics.Paint.getTextSize,Get text size.
android.graphics.Paint.getTextWidths,Return the advance widths for the characters in the string.
android.graphics.Paint.getTextWidths,Get text widths.
android.graphics.Paint.getTextWidths,Return the advance widths for the characters in the string.
android.graphics.Paint.getTextWidths,Get text widths.
android.graphics.Paint.getTextWidths,Return the advance widths for the characters in the string.
android.graphics.Paint.getTextWidths,Get text widths.
android.graphics.Paint.getTextWidths,Return the advance widths for the characters in the string.
android.graphics.Paint.getTextWidths,Get text widths.
android.graphics.Paint.getTypeface,Get the paint's typeface object.
android.graphics.Paint.getTypeface,Get typeface.
android.graphics.Paint.getXfermode,Get the paint's transfer mode object.
android.graphics.Paint.getXfermode,Get xfermode.
android.graphics.Paint.isAntiAlias,Helper for getFlags() returning true if ANTI_ALIAS_FLAG bit is set AntiAliasing smooths out the edges of what is being drawn but is has no impact on the interior of the shape. See setDither() and setFilterBitmap() to affect how colors are treated.
android.graphics.Paint.isAntiAlias,Is anti alias.
android.graphics.Paint.isAntiAlias,Helper for getFlags() returning true if ANTI_ALIAS_FLAG bit is set AntiAliasing smooths out the edges of what is being drawn but is has no impact on the interior of the shape.
android.graphics.Paint.isAntiAlias,See setDither() and setFilterBitmap() to affect how colors are treated.
android.graphics.Paint.measureText,Return the width of the text.
android.graphics.Paint.measureText,Measure text.
android.graphics.Paint.measureText,Return the width of the text.
android.graphics.Paint.measureText,Measure text.
android.graphics.Paint.measureText,Return the width of the text.
android.graphics.Paint.measureText,Measure text.
android.graphics.Paint.measureText,Return the width of the text.
android.graphics.Paint.measureText,Measure text.
android.graphics.Paint.reset,Restores the paint to its default settings.
android.graphics.Paint.reset,Reset.
android.graphics.Paint.set,Copy the fields from src into this paint. This is equivalent to calling get() on all of the src fields and calling the corresponding set() methods on this.
android.graphics.Paint.set,Set.
android.graphics.Paint.set,Copy the fields from src into this paint.
android.graphics.Paint.set,This is equivalent to calling get() on all of the src fields and calling the corresponding set() methods on this.
android.graphics.Paint.setARGB,Helper to setColor() that takes argb and constructs the color int.
android.graphics.Paint.setARGB,Set a r g b.
android.graphics.Paint.setAlpha,Helper to setColor() that only assigns the color's alpha value leaving its rgb values unchanged. Results are undefined if the alpha value is outside of the range [0..255].
android.graphics.Paint.setAlpha,Set alpha.
android.graphics.Paint.setAlpha,Helper to setColor() that only assigns the color's alpha value leaving its rgb values unchanged.
android.graphics.Paint.setAlpha,Results are undefined if the alpha value is outside of the range [0..255].
android.graphics.Paint.setAntiAlias,Helper for setFlags() setting or clearing the ANTI_ALIAS_FLAG bit AntiAliasing smooths out the edges of what is being drawn but is has no impact on the interior of the shape. See setDither() and setFilterBitmap() to affect how colors are treated.
android.graphics.Paint.setAntiAlias,Set anti alias.
android.graphics.Paint.setAntiAlias,Helper for setFlags() setting or clearing the ANTI_ALIAS_FLAG bit AntiAliasing smooths out the edges of what is being drawn but is has no impact on the interior of the shape.
android.graphics.Paint.setAntiAlias,See setDither() and setFilterBitmap() to affect how colors are treated.
android.graphics.Paint.setColor,Set the paint's color with a ColorLong. Note that the color is a long with an encoded ColorSpace as well as alpha and rgb. These values are not premultiplied meaning that alpha can be any value regardless of the values of rgb. See the Color class for more details.
android.graphics.Paint.setColor,Set color.
android.graphics.Paint.setColor,Set the paint's color with a ColorLong.
android.graphics.Paint.setColor,Note that the color is a long with an encoded ColorSpace as well as alpha and rgb.
android.graphics.Paint.setColor,These values are not premultiplied meaning that alpha can be any value regardless of the values of rgb.
android.graphics.Paint.setColor,See the Color class for more details.
android.graphics.Paint.setColor,Set the paint's color. Note that the color is an int containing alpha as well as rgb. This 32bit value is not premultiplied meaning that its alpha can be any value regardless of the values of rgb. See the Color class for more details.
android.graphics.Paint.setColor,Set color.
android.graphics.Paint.setColor,Set the paint's color.
android.graphics.Paint.setColor,Note that the color is an int containing alpha as well as rgb.
android.graphics.Paint.setColor,This 32bit value is not premultiplied meaning that its alpha can be any value regardless of the values of rgb.
android.graphics.Paint.setColor,See the Color class for more details.
android.graphics.Paint.setColorFilter,Set or clear the paint's colorfilter returning the parameter.
android.graphics.Paint.setColorFilter,Set color filter.
android.graphics.Paint.setDither,Helper for setFlags() setting or clearing the DITHER_FLAG bit Dithering affects how colors that are higher precision than the device are down-sampled. No dithering is generally faster but higher precision colors are just truncated down (e.g. 8888 -> 565). Dithering tries to distribute the error inherent in this process to reduce the visual artifacts.
android.graphics.Paint.setDither,Set dither.
android.graphics.Paint.setDither,Helper for setFlags() setting or clearing the DITHER_FLAG bit Dithering affects how colors that are higher precision than the device are down-sampled.
android.graphics.Paint.setDither,No dithering is generally faster but higher precision colors are just truncated down (e.g.
android.graphics.Paint.setDither,8888 -> 565).
android.graphics.Paint.setDither,Dithering tries to distribute the error inherent in this process to reduce the visual artifacts.
android.graphics.Paint.setFakeBoldText,Helper for setFlags() setting or clearing the FAKE_BOLD_TEXT_FLAG bit.
android.graphics.Paint.setFakeBoldText,Set fake bold text.
android.graphics.Paint.setFilterBitmap,Helper for setFlags() setting or clearing the FILTER_BITMAP_FLAG bit. Filtering affects the sampling of bitmaps when they are transformed. Filtering does not affect how the colors in the bitmap are converted into device pixels. That is dependent on dithering and xfermodes.
android.graphics.Paint.setFilterBitmap,Set filter bitmap.
android.graphics.Paint.setFilterBitmap,Helper for setFlags() setting or clearing the FILTER_BITMAP_FLAG bit.
android.graphics.Paint.setFilterBitmap,Filtering affects the sampling of bitmaps when they are transformed.
android.graphics.Paint.setFilterBitmap,Filtering does not affect how the colors in the bitmap are converted into device pixels.
android.graphics.Paint.setFilterBitmap,That is dependent on dithering and xfermodes.
android.graphics.Paint.setFlags,Set the paint's flags. Use the Flag enum to specific flag values.
android.graphics.Paint.setFlags,Set flags.
android.graphics.Paint.setFlags,Set the paint's flags.
android.graphics.Paint.setFlags,Use the Flag enum to specific flag values.
android.graphics.Paint.setLinearText,Helper for setFlags() setting or clearing the LINEAR_TEXT_FLAG bit.
android.graphics.Paint.setLinearText,Set linear text.
android.graphics.Paint.setMaskFilter,Set or clear the maskfilter object.
android.graphics.Paint.setMaskFilter,Set mask filter.
android.graphics.Paint.setPathEffect,Set or clear the patheffect object.
android.graphics.Paint.setPathEffect,Set path effect.
android.graphics.Paint.setShader,Set or clear the shader object.
android.graphics.Paint.setShader,Set shader.
android.graphics.Paint.setShadowLayer,This draws a shadow layer below the main layer with the specified offset and color and blur radius. If radius is 0 then the shadow layer is removed. Can be used to create a blurred shadow underneath text. Support for use with other drawing operations is constrained to the software rendering pipeline. The alpha of the shadow will be the paint's alpha if the shadow color is opaque or the alpha from the shadow color if not.
android.graphics.Paint.setShadowLayer,Set shadow layer.
android.graphics.Paint.setShadowLayer,This draws a shadow layer below the main layer with the specified offset and color and blur radius.
android.graphics.Paint.setShadowLayer,If radius is 0 then the shadow layer is removed.
android.graphics.Paint.setShadowLayer,Can be used to create a blurred shadow underneath text.
android.graphics.Paint.setShadowLayer,Support for use with other drawing operations is constrained to the software rendering pipeline.
android.graphics.Paint.setShadowLayer,The alpha of the shadow will be the paint's alpha if the shadow color is opaque or the alpha from the shadow color if not.
android.graphics.Paint.setShadowLayer,This draws a shadow layer below the main layer with the specified offset and color and blur radius. If radius is 0 then the shadow layer is removed. Can be used to create a blurred shadow underneath text. Support for use with other drawing operations is constrained to the software rendering pipeline. The alpha of the shadow will be the paint's alpha if the shadow color is opaque or the alpha from the shadow color if not.
android.graphics.Paint.setShadowLayer,Set shadow layer.
android.graphics.Paint.setShadowLayer,This draws a shadow layer below the main layer with the specified offset and color and blur radius.
android.graphics.Paint.setShadowLayer,If radius is 0 then the shadow layer is removed.
android.graphics.Paint.setShadowLayer,Can be used to create a blurred shadow underneath text.
android.graphics.Paint.setShadowLayer,Support for use with other drawing operations is constrained to the software rendering pipeline.
android.graphics.Paint.setShadowLayer,The alpha of the shadow will be the paint's alpha if the shadow color is opaque or the alpha from the shadow color if not.
android.graphics.Paint.setStrokeWidth,Set the width for stroking. Pass 0 to stroke in hairline mode. Hairlines always draws a single pixel independent of the canva's matrix.
android.graphics.Paint.setStrokeWidth,Set stroke width.
android.graphics.Paint.setStrokeWidth,Set the width for stroking.
android.graphics.Paint.setStrokeWidth,Pass 0 to stroke in hairline mode.
android.graphics.Paint.setStrokeWidth,Hairlines always draws a single pixel independent of the canva's matrix.
android.graphics.Paint.setSubpixelText,Helper for setFlags() setting or clearing the SUBPIXEL_TEXT_FLAG bit.
android.graphics.Paint.setSubpixelText,Set subpixel text.
android.graphics.Paint.setTextScaleX,Set the paint's horizontal scale factor for text. The default value is 1.0. Values > 1.0 will stretch the text wider. Values < 1.0 will stretch the text narrower.
android.graphics.Paint.setTextScaleX,Set text scale x.
android.graphics.Paint.setTextScaleX,Set the paint's horizontal scale factor for text.
android.graphics.Paint.setTextScaleX,The default value is 1.0.
android.graphics.Paint.setTextScaleX,Values > 1.0 will stretch the text wider.
android.graphics.Paint.setTextScaleX,Values < 1.0 will stretch the text narrower.
android.graphics.Paint.setTextSize,Set the paint's text size. This value must be > 0.
android.graphics.Paint.setTextSize,Set text size.
android.graphics.Paint.setTextSize,Set the paint's text size.
android.graphics.Paint.setTextSize,This value must be > 0.
android.graphics.Paint.setTextSkewX,Set the paint's horizontal skew factor for text. The default value is 0. For approximating oblique text use values around -0.25.
android.graphics.Paint.setTextSkewX,Set text skew x.
android.graphics.Paint.setTextSkewX,Set the paint's horizontal skew factor for text.
android.graphics.Paint.setTextSkewX,The default value is 0.
android.graphics.Paint.setTextSkewX,For approximating oblique text use values around -0.25.
android.graphics.Paint.setTypeface,Set or clear the typeface object.
android.graphics.Paint.setTypeface,Set typeface.
android.graphics.Paint.setUnderlineText,Helper for setFlags() setting or clearing the UNDERLINE_TEXT_FLAG bit.
android.graphics.Paint.setUnderlineText,Set underline text.
android.graphics.Paint.setXfermode,Set or clear the transfer mode object. A transfer mode defines how source pixels (generate by a drawing command) are composited with the destination pixels (content of the render target).
android.graphics.Paint.setXfermode,Set xfermode.
android.graphics.Paint.setXfermode,Set or clear the transfer mode object.
android.graphics.Paint.setXfermode,A transfer mode defines how source pixels (generate by a drawing command) are composited with the destination pixels (content of the render target).
android.graphics.Path.addArc,Add the specified arc to the path as a new contour.
android.graphics.Path.addArc,Add arc.
android.graphics.Path.addArc,Add the specified arc to the path as a new contour.
android.graphics.Path.addArc,Add arc.
android.graphics.Path.arcTo,Append the specified arc to the path as a new contour. If the start of the path is different from the path's current last point then an automatic lineTo() is added to connect the current contour to the start of the arc. However if the path is empty then we call moveTo() with the first point of the arc.
android.graphics.Path.arcTo,Arc to.
android.graphics.Path.arcTo,Append the specified arc to the path as a new contour.
android.graphics.Path.arcTo,If the start of the path is different from the path's current last point then an automatic lineTo() is added to connect the current contour to the start of the arc.
android.graphics.Path.arcTo,However if the path is empty then we call moveTo() with the first point of the arc.
android.graphics.Path.arcTo,Append the specified arc to the path as a new contour. If the start of the path is different from the path's current last point then an automatic lineTo() is added to connect the current contour to the start of the arc. However if the path is empty then we call moveTo() with the first point of the arc.
android.graphics.Path.arcTo,Arc to.
android.graphics.Path.arcTo,Append the specified arc to the path as a new contour.
android.graphics.Path.arcTo,If the start of the path is different from the path's current last point then an automatic lineTo() is added to connect the current contour to the start of the arc.
android.graphics.Path.arcTo,However if the path is empty then we call moveTo() with the first point of the arc.
android.graphics.Path.arcTo,Append the specified arc to the path as a new contour. If the start of the path is different from the path's current last point then an automatic lineTo() is added to connect the current contour to the start of the arc. However if the path is empty then we call moveTo() with the first point of the arc.
android.graphics.Path.arcTo,Arc to.
android.graphics.Path.arcTo,Append the specified arc to the path as a new contour.
android.graphics.Path.arcTo,If the start of the path is different from the path's current last point then an automatic lineTo() is added to connect the current contour to the start of the arc.
android.graphics.Path.arcTo,However if the path is empty then we call moveTo() with the first point of the arc.
android.graphics.Path.close,Close the current contour. If the current point is not equal to the first point of the contour a line segment is automatically added.
android.graphics.Path.close,Close.
android.graphics.Path.close,Close the current contour.
android.graphics.Path.close,If the current point is not equal to the first point of the contour a line segment is automatically added.
android.graphics.Path.computeBounds,Compute the bounds of the control points of the path and write the answer into bounds. If the path contains 0 or 1 points the bounds is set to (0000).
android.graphics.Path.computeBounds,Compute bounds.
android.graphics.Path.computeBounds,Compute the bounds of the control points of the path and write the answer into bounds.
android.graphics.Path.computeBounds,If the path contains 0 or 1 points the bounds is set to (0000).
android.graphics.Path.cubicTo,Add a cubic bezier from the last point approaching control points (x1y1) and (x2y2) and ending at (x3y3). If no moveTo() call has been made for this contour the first point is automatically set to (00).
android.graphics.Path.cubicTo,Cubic to.
android.graphics.Path.cubicTo,Add a cubic bezier from the last point approaching control points (x1y1) and (x2y2) and ending at (x3y3).
android.graphics.Path.cubicTo,If no moveTo() call has been made for this contour the first point is automatically set to (00).
android.graphics.Path.isEmpty,Returns true if the path is empty (contains no lines or curves).
android.graphics.Path.isEmpty,Is empty.
android.graphics.Path.lineTo,Add a line from the last point to the specified point (xy). If no moveTo() call has been made for this contour the first point is automatically set to (00).
android.graphics.Path.lineTo,Line to.
android.graphics.Path.lineTo,Add a line from the last point to the specified point (xy).
android.graphics.Path.lineTo,If no moveTo() call has been made for this contour the first point is automatically set to (00).
android.graphics.Path.moveTo,Set the beginning of the next contour to the point (xy).
android.graphics.Path.moveTo,Move to.
android.graphics.Path.offset,Offset the path by (dxdy).
android.graphics.Path.offset,Offset.
android.graphics.Path.offset,Offset the path by (dxdy).
android.graphics.Path.offset,Offset.
android.graphics.Path.quadTo,Add a quadratic bezier from the last point approaching control point (x1y1) and ending at (x2y2). If no moveTo() call has been made for this contour the first point is automatically set to (00).
android.graphics.Path.quadTo,Quad to.
android.graphics.Path.quadTo,Add a quadratic bezier from the last point approaching control point (x1y1) and ending at (x2y2).
android.graphics.Path.quadTo,If no moveTo() call has been made for this contour the first point is automatically set to (00).
android.graphics.Path.rLineTo,Same as lineTo but the coordinates are considered relative to the last point on this contour. If there is no previous point then a moveTo(00) is inserted automatically.
android.graphics.Path.rLineTo,R line to.
android.graphics.Path.rLineTo,Same as lineTo but the coordinates are considered relative to the last point on this contour.
android.graphics.Path.rLineTo,If there is no previous point then a moveTo(00) is inserted automatically.
android.graphics.Path.rMoveTo,Set the beginning of the next contour relative to the last point on the previous contour. If there is no previous contour this is treated the same as moveTo().
android.graphics.Path.rMoveTo,R move to.
android.graphics.Path.rMoveTo,Set the beginning of the next contour relative to the last point on the previous contour.
android.graphics.Path.rMoveTo,If there is no previous contour this is treated the same as moveTo().
android.graphics.Path.reset,Clear any lines and curves from the path making it empty. This does NOT change the fill-type setting.
android.graphics.Path.reset,Reset.
android.graphics.Path.reset,Clear any lines and curves from the path making it empty.
android.graphics.Path.reset,This does NOT change the fill-type setting.
android.graphics.Path.rewind,Rewinds the path: clears any lines and curves from the path but keeps the internal data structure for faster reuse.
android.graphics.Path.rewind,Rewind.
android.graphics.Path.setLastPoint,Sets the last point of the path.
android.graphics.Path.setLastPoint,Set last point.
android.graphics.Path.transform,Transform the points in this path by matrix and write the answer into dst. If dst is null then the the original path is modified.
android.graphics.Path.transform,Transform.
android.graphics.Path.transform,Transform the points in this path by matrix and write the answer into dst.
android.graphics.Path.transform,If dst is null then the the original path is modified.
android.graphics.Path.transform,Transform the points in this path by matrix.
android.graphics.Path.transform,Transform.
android.graphics.Picture.beginRecording,To record a picture call beginRecording() and then draw into the Canvas that is returned. Nothing we appear on screen but all of the draw commands (e.g. Canvas#drawRect(Rect Paint) ) will be recorded. To stop recording call endRecording(). After endRecording() the Canvas that was returned must no longer be used and nothing should be drawn into it.
android.graphics.Picture.beginRecording,Begin recording.
android.graphics.Picture.beginRecording,To record a picture call beginRecording() and then draw into the Canvas that is returned.
android.graphics.Picture.beginRecording,Nothing we appear on screen but all of the draw commands (e.g.
android.graphics.Picture.beginRecording,Canvas#drawRect(Rect Paint) ) will be recorded.
android.graphics.Picture.beginRecording,To stop recording call endRecording().
android.graphics.Picture.beginRecording,After endRecording() the Canvas that was returned must no longer be used and nothing should be drawn into it.
android.graphics.Picture.draw,Draw this picture on the canvas. Prior to Build.VERSION_CODES.LOLLIPOP this call could have the side effect of changing the matrix and clip of the canvas if this picture had imbalanced saves/restores. Note: This forces the picture to internally call Picture#endRecording() in order to prepare for playback.
android.graphics.Picture.draw,Draw.
android.graphics.Picture.draw,Draw this picture on the canvas.
android.graphics.Picture.draw,Prior to Build.VERSION_CODES.LOLLIPOP this call could have the side effect of changing the matrix and clip of the canvas if this picture had imbalanced saves/restores.
android.graphics.Picture.draw,Note: This forces the picture to internally call Picture#endRecording() in order to prepare for playback.
android.graphics.Picture.endRecording,Call endRecording when the picture is built. After this call the picture may be drawn but the canvas that was returned by beginRecording must not be used anymore. This is automatically called if Picture#draw or Canvas#drawPicture(Picture) is called.
android.graphics.Picture.endRecording,End recording.
android.graphics.Picture.endRecording,Call endRecording when the picture is built.
android.graphics.Picture.endRecording,After this call the picture may be drawn but the canvas that was returned by beginRecording must not be used anymore.
android.graphics.Picture.endRecording,This is automatically called if Picture#draw or Canvas#drawPicture(Picture) is called.
android.graphics.Point.equals,Returns true if the point's coordinates equal (xy).
android.graphics.Point.equals,Equals.
android.graphics.Point.equals,"Indicates whether some other object is ""equal to"" this one. The equals method implements an equivalence relation on non-null object references: It is reflexive : for any non-null reference value x x.equals(x) should return true. It is symmetric : for any non-null reference values x and y x.equals(y) should return true if and only if y.equals(x) returns true. It is transitive : for any non-null reference values x y and z if x.equals(y) returns true and y.equals(z) returns true then x.equals(z) should return true. It is consistent : for any non-null reference values x and y multiple invocations of x.equals(y) consistently return true or consistently return false provided no information used in equals comparisons on the objects is modified. For any non-null reference value x x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is for any non-null reference values x and y this method returns true if and only if x and y refer to the same object ( x == y has the value true ). Note that it is generally necessary to override the hashCode method whenever this method is overridden so as to maintain the general contract for the hashCode method which states that equal objects must have equal hash codes."
android.graphics.Point.equals,Equals.
android.graphics.Point.equals,"Indicates whether some other object is ""equal to"" this one."
android.graphics.Point.equals,The equals method implements an equivalence relation on non-null object references: It is reflexive : for any non-null reference value x x.equals(x) should return true.
android.graphics.Point.equals,It is symmetric : for any non-null reference values x and y x.equals(y) should return true if and only if y.equals(x) returns true.
android.graphics.Point.equals,It is transitive : for any non-null reference values x y and z if x.equals(y) returns true and y.equals(z) returns true then x.equals(z) should return true.
android.graphics.Point.equals,It is consistent : for any non-null reference values x and y multiple invocations of x.equals(y) consistently return true or consistently return false provided no information used in equals comparisons on the objects is modified.
android.graphics.Point.equals,For any non-null reference value x x.equals(null) should return false.
android.graphics.Point.equals,The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is for any non-null reference values x and y this method returns true if and only if x and y refer to the same object ( x == y has the value true ).
android.graphics.Point.equals,Note that it is generally necessary to override the hashCode method whenever this method is overridden so as to maintain the general contract for the hashCode method which states that equal objects must have equal hash codes.
android.graphics.Point.offset,Offset the point's coordinates by dx dy.
android.graphics.Point.offset,Offset.
android.graphics.Point.set,Set the point's x and y coordinates.
android.graphics.Point.set,Set.
android.graphics.PointF.length,Returns the euclidian distance from (00) to (xy).
android.graphics.PointF.length,Length.
android.graphics.PointF.length,Return the euclidian distance from (00) to the point.
android.graphics.PointF.length,Length.
android.graphics.PointF.set,Set the point's x and y coordinates to the coordinates of p.
android.graphics.PointF.set,Set.
android.graphics.PointF.set,Set the point's x and y coordinates.
android.graphics.PointF.set,Set.
android.graphics.Rect.contains,Returns true iff the 4 specified sides of a rectangle are inside or equal to this rectangle. i.e. is this rectangle a superset of the specified rectangle. An empty rectangle never contains another rectangle.
android.graphics.Rect.contains,Contains.
android.graphics.Rect.contains,Returns true iff the 4 specified sides of a rectangle are inside or equal to this rectangle.
android.graphics.Rect.contains,i.e.
android.graphics.Rect.contains,is this rectangle a superset of the specified rectangle.
android.graphics.Rect.contains,An empty rectangle never contains another rectangle.
android.graphics.Rect.contains,Returns true iff the specified rectangle r is inside or equal to this rectangle. An empty rectangle never contains another rectangle.
android.graphics.Rect.contains,Contains.
android.graphics.Rect.contains,Returns true iff the specified rectangle r is inside or equal to this rectangle.
android.graphics.Rect.contains,An empty rectangle never contains another rectangle.
android.graphics.Rect.contains,Returns true if (xy) is inside the rectangle. The left and top are considered to be inside while the right and bottom are not. This means that for a xy to be contained: left <= x < right and top <= y < bottom. An empty rectangle never contains any point.
android.graphics.Rect.contains,Contains.
android.graphics.Rect.contains,Returns true if (xy) is inside the rectangle.
android.graphics.Rect.contains,The left and top are considered to be inside while the right and bottom are not.
android.graphics.Rect.contains,This means that for a xy to be contained: left <= x < right and top <= y < bottom.
android.graphics.Rect.contains,An empty rectangle never contains any point.
android.graphics.Rect.inset,Inset the rectangle by (dxdy). If dx is positive then the sides are moved inwards making the rectangle narrower. If dx is negative then the sides are moved outwards making the rectangle wider. The same holds true for dy and the top and bottom.
android.graphics.Rect.inset,Inset.
android.graphics.Rect.inset,Inset the rectangle by (dxdy).
android.graphics.Rect.inset,If dx is positive then the sides are moved inwards making the rectangle narrower.
android.graphics.Rect.inset,If dx is negative then the sides are moved outwards making the rectangle wider.
android.graphics.Rect.inset,The same holds true for dy and the top and bottom.
android.graphics.Rect.intersect,If the rectangle specified by lefttoprightbottom intersects this rectangle return true and set this rectangle to that intersection otherwise return false and do not change this rectangle. No check is performed to see if either rectangle is empty. Note: To just test for intersection use intersects(android.graphics.Rect android.graphics.Rect).
android.graphics.Rect.intersect,Intersect.
android.graphics.Rect.intersect,If the rectangle specified by lefttoprightbottom intersects this rectangle return true and set this rectangle to that intersection otherwise return false and do not change this rectangle.
android.graphics.Rect.intersect,No check is performed to see if either rectangle is empty.
android.graphics.Rect.intersect,Note: To just test for intersection use intersects(android.graphics.Rect android.graphics.Rect).
android.graphics.Rect.intersect,If the specified rectangle intersects this rectangle return true and set this rectangle to that intersection otherwise return false and do not change this rectangle. No check is performed to see if either rectangle is empty. To just test for intersection use intersects().
android.graphics.Rect.intersect,Intersect.
android.graphics.Rect.intersect,If the specified rectangle intersects this rectangle return true and set this rectangle to that intersection otherwise return false and do not change this rectangle.
android.graphics.Rect.intersect,No check is performed to see if either rectangle is empty.
android.graphics.Rect.intersect,To just test for intersection use intersects().
android.graphics.Rect.intersects,Returns true if this rectangle intersects the specified rectangle. In no event is this rectangle modified. No check is performed to see if either rectangle is empty. To record the intersection use intersect() or setIntersect().
android.graphics.Rect.intersects,Intersects.
android.graphics.Rect.intersects,Returns true if this rectangle intersects the specified rectangle.
android.graphics.Rect.intersects,In no event is this rectangle modified.
android.graphics.Rect.intersects,No check is performed to see if either rectangle is empty.
android.graphics.Rect.intersects,To record the intersection use intersect() or setIntersect().
android.graphics.Rect.intersects,Returns true iff the two specified rectangles intersect. In no event are either of the rectangles modified. To record the intersection use intersect(android.graphics.Rect) or setIntersect(android.graphics.Rect android.graphics.Rect).
android.graphics.Rect.intersects,Intersects.
android.graphics.Rect.intersects,Returns true iff the two specified rectangles intersect.
android.graphics.Rect.intersects,In no event are either of the rectangles modified.
android.graphics.Rect.intersects,To record the intersection use intersect(android.graphics.Rect) or setIntersect(android.graphics.Rect android.graphics.Rect).
android.graphics.Rect.isEmpty,Returns true if the rectangle is empty (left >= right or top >= bottom).
android.graphics.Rect.isEmpty,Is empty.
android.graphics.Rect.offset,Offset the rectangle by adding dx to its left and right coordinates and adding dy to its top and bottom coordinates.
android.graphics.Rect.offset,Offset.
android.graphics.Rect.offsetTo,Offset the rectangle to a specific (left top) position keeping its width and height the same.
android.graphics.Rect.offsetTo,Offset to.
android.graphics.Rect.set,Set the rectangle's coordinates to the specified values. Note: no range checking is performed so it is up to the caller to ensure that left <= right and top <= bottom.
android.graphics.Rect.set,Set.
android.graphics.Rect.set,Set the rectangle's coordinates to the specified values.
android.graphics.Rect.set,Note: no range checking is performed so it is up to the caller to ensure that left <= right and top <= bottom.
android.graphics.Rect.set,Copy the coordinates from src into this rectangle.
android.graphics.Rect.set,Set.
android.graphics.Rect.setEmpty,Set the rectangle to (0000).
android.graphics.Rect.setEmpty,Set empty.
android.graphics.Rect.setIntersect,If rectangles a and b intersect return true and set this rectangle to that intersection otherwise return false and do not change this rectangle. No check is performed to see if either rectangle is empty. To just test for intersection use intersects().
android.graphics.Rect.setIntersect,Set intersect.
android.graphics.Rect.setIntersect,If rectangles a and b intersect return true and set this rectangle to that intersection otherwise return false and do not change this rectangle.
android.graphics.Rect.setIntersect,No check is performed to see if either rectangle is empty.
android.graphics.Rect.setIntersect,To just test for intersection use intersects().
android.graphics.Rect.union,Update this Rect to enclose itself and the specified rectangle. If the specified rectangle is empty nothing is done. If this rectangle is empty it is set to the specified rectangle.
android.graphics.Rect.union,Union.
android.graphics.Rect.union,Update this Rect to enclose itself and the specified rectangle.
android.graphics.Rect.union,If the specified rectangle is empty nothing is done.
android.graphics.Rect.union,If this rectangle is empty it is set to the specified rectangle.
android.graphics.Rect.union,Update this Rect to enclose itself and the specified rectangle. If the specified rectangle is empty nothing is done. If this rectangle is empty it is set to the specified rectangle.
android.graphics.Rect.union,Union.
android.graphics.Rect.union,Update this Rect to enclose itself and the specified rectangle.
android.graphics.Rect.union,If the specified rectangle is empty nothing is done.
android.graphics.Rect.union,If this rectangle is empty it is set to the specified rectangle.
android.graphics.Rect.union,Update this Rect to enclose itself and the [xy] coordinate. There is no check to see that this rectangle is non-empty.
android.graphics.Rect.union,Union.
android.graphics.Rect.union,Update this Rect to enclose itself and the [xy] coordinate.
android.graphics.Rect.union,There is no check to see that this rectangle is non-empty.
android.graphics.RectF.round,Set the dst integer Rect by rounding this rectangle's coordinates to their nearest integer values.
android.graphics.RectF.round,Round.
android.graphics.Shader.setLocalMatrix,Set the shader's local matrix. Passing null will reset the shader's matrix to identity. If the matrix has scale value as 0 the drawing result is undefined.
android.graphics.Shader.setLocalMatrix,Set local matrix.
android.graphics.Shader.setLocalMatrix,Set the shader's local matrix.
android.graphics.Shader.setLocalMatrix,Passing null will reset the shader's matrix to identity.
android.graphics.Shader.setLocalMatrix,If the matrix has scale value as 0 the drawing result is undefined.
android.graphics.SurfaceTexture.getTransformMatrix,Retrieve the 4x4 texture coordinate transform matrix associated with the texture image set by the most recent call to updateTexImage. This transform matrix maps 2D homogeneous texture coordinates of the form (s t 0 1) with s and t in the inclusive range [0 1] to the texture coordinate that should be used to sample that location from the texture. Sampling the texture outside of the range of this transform is undefined. The matrix is stored in column-major order so that it may be passed directly to OpenGL ES via the glLoadMatrixf or glUniformMatrix4fv functions.
android.graphics.SurfaceTexture.getTransformMatrix,Get transform matrix.
android.graphics.SurfaceTexture.getTransformMatrix,Retrieve the 4x4 texture coordinate transform matrix associated with the texture image set by the most recent call to updateTexImage.
android.graphics.SurfaceTexture.getTransformMatrix,This transform matrix maps 2D homogeneous texture coordinates of the form (s t 0 1) with s and t in the inclusive range [0 1] to the texture coordinate that should be used to sample that location from the texture.
android.graphics.SurfaceTexture.getTransformMatrix,Sampling the texture outside of the range of this transform is undefined.
android.graphics.SurfaceTexture.getTransformMatrix,The matrix is stored in column-major order so that it may be passed directly to OpenGL ES via the glLoadMatrixf or glUniformMatrix4fv functions.
android.graphics.SurfaceTexture.release,release() frees all the buffers and puts the SurfaceTexture into the 'abandoned' state. Once put in this state the SurfaceTexture can never leave it. When in the 'abandoned' state all methods of the IGraphicBufferProducer interface will fail with the NO_INIT error. Note that while calling this method causes all the buffers to be freed from the perspective of the the SurfaceTexture if there are additional references on the buffers (e.g. if a buffer is referenced by a client or by OpenGL ES as a texture) then those buffer will remain allocated. Always call this method when you are done with SurfaceTexture. Failing to do so may delay resource deallocation for a significant amount of time.
android.graphics.SurfaceTexture.release,Release.
android.graphics.SurfaceTexture.release,release() frees all the buffers and puts the SurfaceTexture into the 'abandoned' state.
android.graphics.SurfaceTexture.release,Once put in this state the SurfaceTexture can never leave it.
android.graphics.SurfaceTexture.release,When in the 'abandoned' state all methods of the IGraphicBufferProducer interface will fail with the NO_INIT error.
android.graphics.SurfaceTexture.release,Note that while calling this method causes all the buffers to be freed from the perspective of the the SurfaceTexture if there are additional references on the buffers (e.g.
android.graphics.SurfaceTexture.release,if a buffer is referenced by a client or by OpenGL ES as a texture) then those buffer will remain allocated.
android.graphics.SurfaceTexture.release,Always call this method when you are done with SurfaceTexture.
android.graphics.SurfaceTexture.release,Failing to do so may delay resource deallocation for a significant amount of time.
android.graphics.SurfaceTexture.setDefaultBufferSize,Set the default size of the image buffers. The image producer may override the buffer size in which case the producer-set buffer size will be used not the default size set by this method. Both video and camera based image producers do override the size. This method may be used to set the image size when producing images with Canvas (via Surface.lockCanvas(Rect) ) or OpenGL ES (via an EGLSurface). The new default buffer size will take effect the next time the image producer requests a buffer to fill. For Canvas this will be the next time Surface.lockCanvas(Rect) is called. For OpenGL ES the EGLSurface should be destroyed (via eglDestroySurface) made not-current (via eglMakeCurrent) and then recreated (via eglCreateWindowSurface) to ensure that the new default size has taken effect. The width and height parameters must be no greater than the minimum of GL_MAX_VIEWPORT_DIMS and GL_MAX_TEXTURE_SIZE (see glGetIntegerv ). An error due to invalid dimensions might not be reported until updateTexImage() is called.
android.graphics.SurfaceTexture.setDefaultBufferSize,Set default buffer size.
android.graphics.SurfaceTexture.setDefaultBufferSize,Set the default size of the image buffers.
android.graphics.SurfaceTexture.setDefaultBufferSize,The image producer may override the buffer size in which case the producer-set buffer size will be used not the default size set by this method.
android.graphics.SurfaceTexture.setDefaultBufferSize,Both video and camera based image producers do override the size.
android.graphics.SurfaceTexture.setDefaultBufferSize,This method may be used to set the image size when producing images with Canvas (via Surface.lockCanvas(Rect) ) or OpenGL ES (via an EGLSurface).
android.graphics.SurfaceTexture.setDefaultBufferSize,The new default buffer size will take effect the next time the image producer requests a buffer to fill.
android.graphics.SurfaceTexture.setDefaultBufferSize,For Canvas this will be the next time Surface.lockCanvas(Rect) is called.
android.graphics.SurfaceTexture.setDefaultBufferSize,For OpenGL ES the EGLSurface should be destroyed (via eglDestroySurface) made not-current (via eglMakeCurrent) and then recreated (via eglCreateWindowSurface) to ensure that the new default size has taken effect.
android.graphics.SurfaceTexture.setDefaultBufferSize,The width and height parameters must be no greater than the minimum of GL_MAX_VIEWPORT_DIMS and GL_MAX_TEXTURE_SIZE (see glGetIntegerv ).
android.graphics.SurfaceTexture.setDefaultBufferSize,An error due to invalid dimensions might not be reported until updateTexImage() is called.
android.graphics.SurfaceTexture.updateTexImage,Update the texture image to the most recent frame from the image stream. This may only be called while the OpenGL ES context that owns the texture is current on the calling thread. It will implicitly bind its texture to the GL_TEXTURE_EXTERNAL_OES texture target.
android.graphics.SurfaceTexture.updateTexImage,Update tex image.
android.graphics.SurfaceTexture.updateTexImage,Update the texture image to the most recent frame from the image stream.
android.graphics.SurfaceTexture.updateTexImage,This may only be called while the OpenGL ES context that owns the texture is current on the calling thread.
android.graphics.SurfaceTexture.updateTexImage,It will implicitly bind its texture to the GL_TEXTURE_EXTERNAL_OES texture target.
android.graphics.Typeface.create,Creates a typeface object that best matches the specified existing typeface and the specified weight and italic style Below are numerical values and corresponding common weight names. This method is thread safe.
android.graphics.Typeface.create,Create.
android.graphics.Typeface.create,Creates a typeface object that best matches the specified existing typeface and the specified weight and italic style Below are numerical values and corresponding common weight names.
android.graphics.Typeface.create,This method is thread safe.
android.graphics.Typeface.create,Create a typeface object that best matches the specified existing typeface and the specified Style. Use this call if you want to pick a new style from the same family of an existing typeface object. If family is null this selects from the default font's family. This method is not thread safe on API 27 or before. This method is thread safe on API 28 or after.
android.graphics.Typeface.create,Create.
android.graphics.Typeface.create,Create a typeface object that best matches the specified existing typeface and the specified Style.
android.graphics.Typeface.create,Use this call if you want to pick a new style from the same family of an existing typeface object.
android.graphics.Typeface.create,If family is null this selects from the default font's family.
android.graphics.Typeface.create,This method is not thread safe on API 27 or before.
android.graphics.Typeface.create,This method is thread safe on API 28 or after.
android.graphics.Typeface.create,"Create a typeface object given a family name and option style information. If null is passed for the name then the ""default"" font will be chosen. The resulting typeface object can be queried (getStyle()) to discover what its ""real"" style characteristics are."
android.graphics.Typeface.create,Create.
android.graphics.Typeface.create,Create a typeface object given a family name and option style information.
android.graphics.Typeface.create,"If null is passed for the name then the ""default"" font will be chosen."
android.graphics.Typeface.create,"The resulting typeface object can be queried (getStyle()) to discover what its ""real"" style characteristics are."
android.graphics.Typeface.createFromAsset,Create a new typeface from the specified font data.
android.graphics.Typeface.createFromAsset,Create from asset.
android.graphics.Typeface.createFromFile,Create a new typeface from the specified font file.
android.graphics.Typeface.createFromFile,Create from file.
android.graphics.Typeface.createFromFile,Create a new typeface from the specified font file.
android.graphics.Typeface.createFromFile,Create from file.
android.graphics.Typeface.defaultFromStyle,Returns one of the default typeface objects based on the specified style.
android.graphics.Typeface.defaultFromStyle,Default from style.
android.graphics.Typeface.getStyle,Returns the typeface's intrinsic style attributes.
android.graphics.Typeface.getStyle,Get style.
android.graphics.Typeface.isBold,Returns true if getStyle() has the BOLD bit set.
android.graphics.Typeface.isBold,Is bold.
android.graphics.Typeface.isItalic,Returns true if getStyle() has the ITALIC bit set.
android.graphics.Typeface.isItalic,Is italic.
android.location.Address.getAddressLine,Returns a line of the address numbered by the given index (starting at 0) or null if no such line is present.
android.location.Address.getAddressLine,Get address line.
android.location.Address.getAdminArea,"Returns the administrative area name of the address for example ""CA"" or null if it is unknown."
android.location.Address.getAdminArea,Get admin area.
android.location.Address.getCountryCode,"Returns the country code of the address for example ""US"" or null if it is unknown."
android.location.Address.getCountryCode,Get country code.
android.location.Address.getCountryName,"Returns the localized country name of the address for example ""Iceland"" or null if it is unknown."
android.location.Address.getCountryName,Get country name.
android.location.Address.getLocality,"Returns the locality of the address for example ""Mountain View"" or null if it is unknown."
android.location.Address.getLocality,Get locality.
android.location.Address.getMaxAddressLineIndex,Returns the largest index currently in use to specify an address line. If no address lines are specified -1 is returned.
android.location.Address.getMaxAddressLineIndex,Get max address line index.
android.location.Address.getMaxAddressLineIndex,Returns the largest index currently in use to specify an address line.
android.location.Address.getMaxAddressLineIndex,If no address lines are specified -1 is returned.
android.location.Address.getPostalCode,"Returns the postal code of the address for example ""94110"" or null if it is unknown."
android.location.Address.getPostalCode,Get postal code.
android.location.Criteria.setAccuracy,Indicates the desired accuracy for latitude and longitude. Accuracy may be ACCURACY_FINE if desired location is fine else it can be ACCURACY_COARSE. More accurate location may consume more power and may take longer.
android.location.Criteria.setAccuracy,Set accuracy.
android.location.Criteria.setAccuracy,Indicates the desired accuracy for latitude and longitude.
android.location.Criteria.setAccuracy,Accuracy may be ACCURACY_FINE if desired location is fine else it can be ACCURACY_COARSE.
android.location.Criteria.setAccuracy,More accurate location may consume more power and may take longer.
android.location.Criteria.setAltitudeRequired,Indicates whether the provider must provide altitude information. Not all fixes are guaranteed to contain such information.
android.location.Criteria.setAltitudeRequired,Set altitude required.
android.location.Criteria.setAltitudeRequired,Indicates whether the provider must provide altitude information.
android.location.Criteria.setAltitudeRequired,Not all fixes are guaranteed to contain such information.
android.location.Criteria.setBearingAccuracy,Indicates the desired bearing accuracy. Accuracy may be ACCURACY_LOW ACCURACY_HIGH or NO_REQUIREMENT. More accurate location may consume more power and may take longer.
android.location.Criteria.setBearingAccuracy,Set bearing accuracy.
android.location.Criteria.setBearingAccuracy,Indicates the desired bearing accuracy.
android.location.Criteria.setBearingAccuracy,Accuracy may be ACCURACY_LOW ACCURACY_HIGH or NO_REQUIREMENT.
android.location.Criteria.setBearingAccuracy,More accurate location may consume more power and may take longer.
android.location.Criteria.setBearingRequired,Indicates whether the provider must provide bearing information. Not all fixes are guaranteed to contain such information.
android.location.Criteria.setBearingRequired,Set bearing required.
android.location.Criteria.setBearingRequired,Indicates whether the provider must provide bearing information.
android.location.Criteria.setBearingRequired,Not all fixes are guaranteed to contain such information.
android.location.Criteria.setCostAllowed,Indicates whether the provider is allowed to incur monetary cost.
android.location.Criteria.setCostAllowed,Set cost allowed.
android.location.Criteria.setHorizontalAccuracy,Indicates the desired horizontal accuracy (latitude and longitude). Accuracy may be ACCURACY_LOW ACCURACY_MEDIUM ACCURACY_HIGH or NO_REQUIREMENT. More accurate location may consume more power and may take longer.
android.location.Criteria.setHorizontalAccuracy,Set horizontal accuracy.
android.location.Criteria.setHorizontalAccuracy,Indicates the desired horizontal accuracy (latitude and longitude).
android.location.Criteria.setHorizontalAccuracy,Accuracy may be ACCURACY_LOW ACCURACY_MEDIUM ACCURACY_HIGH or NO_REQUIREMENT.
android.location.Criteria.setHorizontalAccuracy,More accurate location may consume more power and may take longer.
android.location.Criteria.setPowerRequirement,Indicates the desired maximum power level. The level parameter must be one of NO_REQUIREMENT POWER_LOW POWER_MEDIUM or POWER_HIGH.
android.location.Criteria.setPowerRequirement,Set power requirement.
android.location.Criteria.setPowerRequirement,Indicates the desired maximum power level.
android.location.Criteria.setPowerRequirement,The level parameter must be one of NO_REQUIREMENT POWER_LOW POWER_MEDIUM or POWER_HIGH.
android.location.Criteria.setSpeedAccuracy,Indicates the desired speed accuracy. Accuracy may be ACCURACY_LOW ACCURACY_HIGH or NO_REQUIREMENT. More accurate location may consume more power and may take longer.
android.location.Criteria.setSpeedAccuracy,Set speed accuracy.
android.location.Criteria.setSpeedAccuracy,Indicates the desired speed accuracy.
android.location.Criteria.setSpeedAccuracy,Accuracy may be ACCURACY_LOW ACCURACY_HIGH or NO_REQUIREMENT.
android.location.Criteria.setSpeedAccuracy,More accurate location may consume more power and may take longer.
android.location.Criteria.setSpeedRequired,Indicates whether the provider must provide speed information. Not all fixes are guaranteed to contain such information.
android.location.Criteria.setSpeedRequired,Set speed required.
android.location.Criteria.setSpeedRequired,Indicates whether the provider must provide speed information.
android.location.Criteria.setSpeedRequired,Not all fixes are guaranteed to contain such information.
android.location.Criteria.setVerticalAccuracy,Indicates the desired vertical accuracy (altitude). Accuracy may be ACCURACY_LOW ACCURACY_MEDIUM ACCURACY_HIGH or NO_REQUIREMENT. More accurate location may consume more power and may take longer.
android.location.Criteria.setVerticalAccuracy,Set vertical accuracy.
android.location.Criteria.setVerticalAccuracy,Indicates the desired vertical accuracy (altitude).
android.location.Criteria.setVerticalAccuracy,Accuracy may be ACCURACY_LOW ACCURACY_MEDIUM ACCURACY_HIGH or NO_REQUIREMENT.
android.location.Criteria.setVerticalAccuracy,More accurate location may consume more power and may take longer.
android.location.Geocoder.getFromLocation,Returns an array of Addresses that are known to describe the area immediately surrounding the given latitude and longitude. The returned addresses will be localized for the locale provided to this class's constructor. The returned values may be obtained by means of a network lookup. The results are a best guess and are not guaranteed to be meaningful or correct. It may be useful to call this method from a thread separate from your primary UI thread.
android.location.Geocoder.getFromLocation,Get from location.
android.location.Geocoder.getFromLocation,Returns an array of Addresses that are known to describe the area immediately surrounding the given latitude and longitude.
android.location.Geocoder.getFromLocation,The returned addresses will be localized for the locale provided to this class's constructor.
android.location.Geocoder.getFromLocation,The returned values may be obtained by means of a network lookup.
android.location.Geocoder.getFromLocation,The results are a best guess and are not guaranteed to be meaningful or correct.
android.location.Geocoder.getFromLocation,It may be useful to call this method from a thread separate from your primary UI thread.
android.location.Geocoder.getFromLocationName,"Returns an array of Addresses that are known to describe the named location which may be a place name such as ""Dalvik Iceland"" an address such as ""1600 Amphitheatre Parkway Mountain View CA"" an airport code such as ""SFO"" etc.. The returned addresses will be localized for the locale provided to this class's constructor. You may specify a bounding box for the search results by including the Latitude and Longitude of the Lower Left point and Upper Right point of the box. The query will block and returned values will be obtained by means of a network lookup. The results are a best guess and are not guaranteed to be meaningful or correct. It may be useful to call this method from a thread separate from your primary UI thread."
android.location.Geocoder.getFromLocationName,Get from location name.
android.location.Geocoder.getFromLocationName,"Returns an array of Addresses that are known to describe the named location which may be a place name such as ""Dalvik Iceland"" an address such as ""1600 Amphitheatre Parkway Mountain View CA"" an airport code such as ""SFO"" etc."
android.location.Geocoder.getFromLocationName,The returned addresses will be localized for the locale provided to this class's constructor.
android.location.Geocoder.getFromLocationName,You may specify a bounding box for the search results by including the Latitude and Longitude of the Lower Left point and Upper Right point of the box.
android.location.Geocoder.getFromLocationName,The query will block and returned values will be obtained by means of a network lookup.
android.location.Geocoder.getFromLocationName,The results are a best guess and are not guaranteed to be meaningful or correct.
android.location.Geocoder.getFromLocationName,It may be useful to call this method from a thread separate from your primary UI thread.
android.location.Geocoder.getFromLocationName,"Returns an array of Addresses that are known to describe the named location which may be a place name such as ""Dalvik Iceland"" an address such as ""1600 Amphitheatre Parkway Mountain View CA"" an airport code such as ""SFO"" etc.. The returned addresses will be localized for the locale provided to this class's constructor. The query will block and returned values will be obtained by means of a network lookup. The results are a best guess and are not guaranteed to be meaningful or correct. It may be useful to call this method from a thread separate from your primary UI thread."
android.location.Geocoder.getFromLocationName,Get from location name.
android.location.Geocoder.getFromLocationName,"Returns an array of Addresses that are known to describe the named location which may be a place name such as ""Dalvik Iceland"" an address such as ""1600 Amphitheatre Parkway Mountain View CA"" an airport code such as ""SFO"" etc."
android.location.Geocoder.getFromLocationName,The returned addresses will be localized for the locale provided to this class's constructor.
android.location.Geocoder.getFromLocationName,The query will block and returned values will be obtained by means of a network lookup.
android.location.Geocoder.getFromLocationName,The results are a best guess and are not guaranteed to be meaningful or correct.
android.location.Geocoder.getFromLocationName,It may be useful to call this method from a thread separate from your primary UI thread.
android.location.Geocoder.isPresent,Returns true if the Geocoder methods getFromLocation and getFromLocationName are implemented. Lack of network connectivity may still cause these methods to return null or empty lists.
android.location.Geocoder.isPresent,Is present.
android.location.Geocoder.isPresent,Returns true if the Geocoder methods getFromLocation and getFromLocationName are implemented.
android.location.Geocoder.isPresent,Lack of network connectivity may still cause these methods to return null or empty lists.
android.location.Location.convert,Converts a coordinate to a String representation. The outputType may be one of FORMAT_DEGREES FORMAT_MINUTES or FORMAT_SECONDS. The coordinate must be a valid double between -180.0 and 180.0. This conversion is performed in a method that is dependent on the default locale and so is not guaranteed to round-trip with convert(java.lang.String).
android.location.Location.convert,Convert.
android.location.Location.convert,Converts a coordinate to a String representation.
android.location.Location.convert,The outputType may be one of FORMAT_DEGREES FORMAT_MINUTES or FORMAT_SECONDS.
android.location.Location.convert,The coordinate must be a valid double between -180.0 and 180.0.
android.location.Location.convert,This conversion is performed in a method that is dependent on the default locale and so is not guaranteed to round-trip with convert(java.lang.String).
android.location.Location.convert,Converts a String in one of the formats described by FORMAT_DEGREES FORMAT_MINUTES or FORMAT_SECONDS into a double. This conversion is performed in a locale agnostic method and so is not guaranteed to round-trip with convert(double int).
android.location.Location.convert,Convert.
android.location.Location.convert,Converts a String in one of the formats described by FORMAT_DEGREES FORMAT_MINUTES or FORMAT_SECONDS into a double.
android.location.Location.convert,This conversion is performed in a locale agnostic method and so is not guaranteed to round-trip with convert(double int).
android.location.Location.distanceBetween,Computes the approximate distance in meters between two locations and optionally the initial and final bearings of the shortest path between them. Distance and bearing are defined using the WGS84 ellipsoid. The computed distance is stored in results[0]. If results has length 2 or greater the initial bearing is stored in results[1]. If results has length 3 or greater the final bearing is stored in results[2].
android.location.Location.distanceBetween,Distance between.
android.location.Location.distanceBetween,Computes the approximate distance in meters between two locations and optionally the initial and final bearings of the shortest path between them.
android.location.Location.distanceBetween,Distance and bearing are defined using the WGS84 ellipsoid.
android.location.Location.distanceBetween,The computed distance is stored in results[0].
android.location.Location.distanceBetween,If results has length 2 or greater the initial bearing is stored in results[1].
android.location.Location.distanceBetween,If results has length 3 or greater the final bearing is stored in results[2].
android.location.Location.distanceTo,Returns the approximate distance in meters between this location and the given location. Distance is defined using the WGS84 ellipsoid.
android.location.Location.distanceTo,Distance to.
android.location.Location.distanceTo,Returns the approximate distance in meters between this location and the given location.
android.location.Location.distanceTo,Distance is defined using the WGS84 ellipsoid.
android.location.Location.getAccuracy,Get the estimated horizontal accuracy of this location radial in meters. We define horizontal accuracy as the radius of 68% confidence. In other words if you draw a circle centered at this location's latitude and longitude and with a radius equal to the accuracy then there is a 68% probability that the true location is inside the circle. This accuracy estimation is only concerned with horizontal accuracy and does not indicate the accuracy of bearing velocity or altitude if those are included in this Location. If this location does not have a horizontal accuracy then 0.0 is returned. All locations generated by the LocationManager include horizontal accuracy.
android.location.Location.getAccuracy,Get accuracy.
android.location.Location.getAccuracy,Get the estimated horizontal accuracy of this location radial in meters.
android.location.Location.getAccuracy,We define horizontal accuracy as the radius of 68% confidence.
android.location.Location.getAccuracy,In other words if you draw a circle centered at this location's latitude and longitude and with a radius equal to the accuracy then there is a 68% probability that the true location is inside the circle.
android.location.Location.getAccuracy,This accuracy estimation is only concerned with horizontal accuracy and does not indicate the accuracy of bearing velocity or altitude if those are included in this Location.
android.location.Location.getAccuracy,If this location does not have a horizontal accuracy then 0.0 is returned.
android.location.Location.getAccuracy,All locations generated by the LocationManager include horizontal accuracy.
android.location.Location.getAltitude,Get the altitude if available in meters above the WGS 84 reference ellipsoid. If this location does not have an altitude then 0.0 is returned.
android.location.Location.getAltitude,Get altitude.
android.location.Location.getAltitude,Get the altitude if available in meters above the WGS 84 reference ellipsoid.
android.location.Location.getAltitude,If this location does not have an altitude then 0.0 is returned.
android.location.Location.getBearing,Get the bearing in degrees. Bearing is the horizontal direction of travel of this device and is not related to the device orientation. It is guaranteed to be in the range (0.0 360.0] if the device has a bearing. If this location does not have a bearing then 0.0 is returned.
android.location.Location.getBearing,Get bearing.
android.location.Location.getBearing,Get the bearing in degrees.
android.location.Location.getBearing,Bearing is the horizontal direction of travel of this device and is not related to the device orientation.
android.location.Location.getBearing,It is guaranteed to be in the range (0.0 360.0] if the device has a bearing.
android.location.Location.getBearing,If this location does not have a bearing then 0.0 is returned.
android.location.Location.getLatitude,Get the latitude in degrees. All locations generated by the LocationManager will have a valid latitude.
android.location.Location.getLatitude,Get latitude.
android.location.Location.getLatitude,Get the latitude in degrees.
android.location.Location.getLatitude,All locations generated by the LocationManager will have a valid latitude.
android.location.Location.getLongitude,Get the longitude in degrees. All locations generated by the LocationManager will have a valid longitude.
android.location.Location.getLongitude,Get longitude.
android.location.Location.getLongitude,Get the longitude in degrees.
android.location.Location.getLongitude,All locations generated by the LocationManager will have a valid longitude.
android.location.Location.getProvider,Returns the name of the provider that generated this fix.
android.location.Location.getProvider,Get provider.
android.location.Location.getSpeed,Get the speed if it is available in meters/second over ground. If this location does not have a speed then 0.0 is returned.
android.location.Location.getSpeed,Get speed.
android.location.Location.getSpeed,Get the speed if it is available in meters/second over ground.
android.location.Location.getSpeed,If this location does not have a speed then 0.0 is returned.
android.location.Location.getTime,Return the UTC time of this fix in milliseconds since January 1 1970. Note that the UTC time on a device is not monotonic: it can jump forwards or backwards unpredictably. So always use getElapsedRealtimeNanos() when calculating time deltas. On the other hand getTime() is useful for presenting a human readable time to the user or for carefully comparing location fixes across reboot or across devices. All locations generated by the LocationManager are guaranteed to have a valid UTC time however remember that the system time may have changed since the location was generated.
android.location.Location.getTime,Get time.
android.location.Location.getTime,Return the UTC time of this fix in milliseconds since January 1 1970.
android.location.Location.getTime,Note that the UTC time on a device is not monotonic: it can jump forwards or backwards unpredictably.
android.location.Location.getTime,So always use getElapsedRealtimeNanos() when calculating time deltas.
android.location.Location.getTime,On the other hand getTime() is useful for presenting a human readable time to the user or for carefully comparing location fixes across reboot or across devices.
android.location.Location.getTime,All locations generated by the LocationManager are guaranteed to have a valid UTC time however remember that the system time may have changed since the location was generated.
android.location.Location.hasAccuracy,True if this location has a horizontal accuracy. All locations generated by the LocationManager have an horizontal accuracy.
android.location.Location.hasAccuracy,Has accuracy.
android.location.Location.hasAccuracy,True if this location has a horizontal accuracy.
android.location.Location.hasAccuracy,All locations generated by the LocationManager have an horizontal accuracy.
android.location.Location.hasAltitude,True if this location has an altitude.
android.location.Location.hasAltitude,Has altitude.
android.location.Location.hasBearing,True if this location has a bearing.
android.location.Location.hasBearing,Has bearing.
android.location.Location.hasSpeed,True if this location has a speed.
android.location.Location.hasSpeed,Has speed.
android.location.Location.setAccuracy,Set the estimated horizontal accuracy of this location meters. See getAccuracy() for the definition of horizontal accuracy. Following this call hasAccuracy() will return true.
android.location.Location.setAccuracy,Set accuracy.
android.location.Location.setAccuracy,Set the estimated horizontal accuracy of this location meters.
android.location.Location.setAccuracy,See getAccuracy() for the definition of horizontal accuracy.
android.location.Location.setAccuracy,Following this call hasAccuracy() will return true.
android.location.Location.setLatitude,Set the latitude in degrees.
android.location.Location.setLatitude,Set latitude.
android.location.Location.setLongitude,Set the longitude in degrees.
android.location.Location.setLongitude,Set longitude.
android.location.Location.setProvider,Sets the name of the provider that generated this fix.
android.location.Location.setProvider,Set provider.
android.location.Location.setTime,Set the UTC time of this fix in milliseconds since January 1 1970.
android.location.Location.setTime,Set time.
android.location.LocationManager.getAllProviders,Returns a list of the names of all known location providers. All providers are returned including ones that are not permitted to be accessed by the calling activity or are currently disabled.
android.location.LocationManager.getAllProviders,Get all providers.
android.location.LocationManager.getAllProviders,Returns a list of the names of all known location providers.
android.location.LocationManager.getAllProviders,All providers are returned including ones that are not permitted to be accessed by the calling activity or are currently disabled.
android.location.LocationManager.getBestProvider,Returns the name of the provider that best meets the given criteria. Only providers that are permitted to be accessed by the calling activity will be returned. If several providers meet the criteria the one with the best accuracy is returned. If no provider meets the criteria the criteria are loosened in the following sequence: power requirement accuracy bearing speed altitude Note that the requirement on monetary cost is not removed in this process.
android.location.LocationManager.getBestProvider,Get best provider.
android.location.LocationManager.getBestProvider,Returns the name of the provider that best meets the given criteria.
android.location.LocationManager.getBestProvider,Only providers that are permitted to be accessed by the calling activity will be returned.
android.location.LocationManager.getBestProvider,If several providers meet the criteria the one with the best accuracy is returned.
android.location.LocationManager.getBestProvider,If no provider meets the criteria the criteria are loosened in the following sequence: power requirement accuracy bearing speed altitude Note that the requirement on monetary cost is not removed in this process.
android.location.LocationManager.getLastKnownLocation,Returns a Location indicating the data from the last known location fix obtained from the given provider. This can be done without starting the provider. Note that this location could be out-of-date for example if the device was turned off and moved to another location. If the provider is currently disabled null is returned. Requires Manifest.permission.ACCESS_COARSE_LOCATION or Manifest.permission.ACCESS_FINE_LOCATION.
android.location.LocationManager.getLastKnownLocation,Get last known location.
android.location.LocationManager.getLastKnownLocation,Returns a Location indicating the data from the last known location fix obtained from the given provider.
android.location.LocationManager.getLastKnownLocation,This can be done without starting the provider.
android.location.LocationManager.getLastKnownLocation,Note that this location could be out-of-date for example if the device was turned off and moved to another location.
android.location.LocationManager.getLastKnownLocation,If the provider is currently disabled null is returned.
android.location.LocationManager.getLastKnownLocation,Requires Manifest.permission.ACCESS_COARSE_LOCATION or Manifest.permission.ACCESS_FINE_LOCATION.
android.location.LocationManager.getProvider,Returns the information associated with the location provider of the given name or null if no provider exists by that name.
android.location.LocationManager.getProvider,Get provider.
android.location.LocationManager.getProviders,Returns a list of the names of LocationProviders that satisfy the given criteria or null if none do. Only providers that are permitted to be accessed by the calling activity will be returned.
android.location.LocationManager.getProviders,Get providers.
android.location.LocationManager.getProviders,Returns a list of the names of LocationProviders that satisfy the given criteria or null if none do.
android.location.LocationManager.getProviders,Only providers that are permitted to be accessed by the calling activity will be returned.
android.location.LocationManager.getProviders,Returns a list of the names of location providers.
android.location.LocationManager.getProviders,Get providers.
android.location.LocationManager.isProviderEnabled,Returns the current enabled/disabled status of the given provider. To listen for changes see PROVIDERS_CHANGED_ACTION. Before API version Build.VERSION_CODES.LOLLIPOP this method would throw SecurityException if the location permissions were not sufficient to use the specified provider.
android.location.LocationManager.isProviderEnabled,Is provider enabled.
android.location.LocationManager.isProviderEnabled,Returns the current enabled/disabled status of the given provider.
android.location.LocationManager.isProviderEnabled,To listen for changes see PROVIDERS_CHANGED_ACTION.
android.location.LocationManager.isProviderEnabled,Before API version Build.VERSION_CODES.LOLLIPOP this method would throw SecurityException if the location permissions were not sufficient to use the specified provider.
android.location.LocationManager.removeUpdates,Removes all location updates for the specified LocationListener. Following this call updates will no longer occur for this listener. Requires Manifest.permission.ACCESS_COARSE_LOCATION or Manifest.permission.ACCESS_FINE_LOCATION.
android.location.LocationManager.removeUpdates,Remove updates.
android.location.LocationManager.removeUpdates,Removes all location updates for the specified LocationListener.
android.location.LocationManager.removeUpdates,Following this call updates will no longer occur for this listener.
android.location.LocationManager.removeUpdates,Requires Manifest.permission.ACCESS_COARSE_LOCATION or Manifest.permission.ACCESS_FINE_LOCATION.
android.location.LocationManager.removeUpdates,Removes all location updates for the specified pending intent. Following this call updates will no longer for this pending intent.
android.location.LocationManager.removeUpdates,Remove updates.
android.location.LocationManager.removeUpdates,Removes all location updates for the specified pending intent.
android.location.LocationManager.removeUpdates,Following this call updates will no longer for this pending intent.
android.location.LocationManager.requestLocationUpdates,Register for location updates using the named provider and a pending intent. See requestLocationUpdates(long float android.location.Criteria android.app.PendingIntent) for more detail on how to use this method. Requires Manifest.permission.ACCESS_COARSE_LOCATION or Manifest.permission.ACCESS_FINE_LOCATION.
android.location.LocationManager.requestLocationUpdates,Request location updates.
android.location.LocationManager.requestLocationUpdates,Register for location updates using the named provider and a pending intent.
android.location.LocationManager.requestLocationUpdates,See requestLocationUpdates(long float android.location.Criteria android.app.PendingIntent) for more detail on how to use this method.
android.location.LocationManager.requestLocationUpdates,Requires Manifest.permission.ACCESS_COARSE_LOCATION or Manifest.permission.ACCESS_FINE_LOCATION.
android.location.LocationManager.requestLocationUpdates,Register for location updates using a Criteria and a callback on the specified looper thread. See requestLocationUpdates(long float android.location.Criteria android.app.PendingIntent) for more detail on how to use this method. Requires Manifest.permission.ACCESS_COARSE_LOCATION or Manifest.permission.ACCESS_FINE_LOCATION.
android.location.LocationManager.requestLocationUpdates,Request location updates.
android.location.LocationManager.requestLocationUpdates,Register for location updates using a Criteria and a callback on the specified looper thread.
android.location.LocationManager.requestLocationUpdates,See requestLocationUpdates(long float android.location.Criteria android.app.PendingIntent) for more detail on how to use this method.
android.location.LocationManager.requestLocationUpdates,Requires Manifest.permission.ACCESS_COARSE_LOCATION or Manifest.permission.ACCESS_FINE_LOCATION.
android.location.LocationManager.requestLocationUpdates,Register for location updates using a Criteria and pending intent. The requestLocationUpdates() and requestSingleUpdate() register the current activity to be updated periodically by the named provider or by the provider matching the specified Criteria with location and status updates. It may take a while to receive the first location update. If an immediate location is required applications may use the getLastKnownLocation(java.lang.String) method. Location updates are received either by LocationListener callbacks or by broadcast intents to a supplied PendingIntent. If the caller supplied a pending intent then location updates are sent with a key of KEY_LOCATION_CHANGED and a Location value. The location update interval can be controlled using the minTime parameter. The elapsed time between location updates will never be less than minTime although it can be more depending on the Location Provider implementation and the update interval requested by other applications. Choosing a sensible value for minTime is important to conserve battery life. Each location update requires power from GPS WIFI Cell and other radios. Select a minTime value as high as possible while still providing a reasonable user experience. If your application is not in the foreground and showing location to the user then your application should avoid using an active provider (such as NETWORK_PROVIDER or GPS_PROVIDER ) but if you insist then select a minTime of 5 * 60 * 1000 (5 minutes) or greater. If your application is in the foreground and showing location to the user then it is appropriate to select a faster update interval. The minDistance parameter can also be used to control the frequency of location updates. If it is greater than 0 then the location provider will only send your application an update when the location has changed by at least minDistance meters AND at least minTime milliseconds have passed. However it is more difficult for location providers to save power using the minDistance parameter so minTime should be the primary tool to conserving battery life. If your application wants to passively observe location updates triggered by other applications but not consume any additional power otherwise then use the PASSIVE_PROVIDER This provider does not actively turn on or modify active location providers so you do not need to be as careful about minTime and minDistance. However if your application performs heavy work on a location update (such as network activity) then you should select non-zero values for minTime and/or minDistance to rate-limit your update frequency in the case another application enables a location provider with extremely fast updates. In case the provider is disabled by the user updates will stop and a provider availability update will be sent. As soon as the provider is enabled again location updates will immediately resume and a provider availability update sent. Providers can also send status updates at any time with extra's specific to the provider. If a callback was supplied then status and availability updates are via LocationListener#onProviderDisabled LocationListener#onProviderEnabled or LocationListener#onStatusChanged. Alternately if a pending intent was supplied then status and availability updates are broadcast intents with extra keys of KEY_PROVIDER_ENABLED or KEY_STATUS_CHANGED. If a LocationListener is used but with no Looper specified then the calling thread must already be a Looper thread such as the main thread of the calling Activity. If a Looper is specified with a LocationListener then callbacks are made on the supplied Looper thread. When location callbacks are invoked the system will hold a wakelock on your application's behalf for some period of time but not indefinitely. If your application requires a long running wakelock within the location callback you should acquire it yourself. Prior to Jellybean the minTime parameter was only a hint and some location provider implementations ignored it. From Jellybean and onwards it is mandatory for Android compatible devices to observe both the minTime and minDistance parameters. Requires Manifest.permission.ACCESS_COARSE_LOCATION or Manifest.permission.ACCESS_FINE_LOCATION.
android.location.LocationManager.requestLocationUpdates,Request location updates.
android.location.LocationManager.requestLocationUpdates,Register for location updates using a Criteria and pending intent.
android.location.LocationManager.requestLocationUpdates,The requestLocationUpdates() and requestSingleUpdate() register the current activity to be updated periodically by the named provider or by the provider matching the specified Criteria with location and status updates.
android.location.LocationManager.requestLocationUpdates,It may take a while to receive the first location update.
android.location.LocationManager.requestLocationUpdates,If an immediate location is required applications may use the getLastKnownLocation(java.lang.String) method.
android.location.LocationManager.requestLocationUpdates,Location updates are received either by LocationListener callbacks or by broadcast intents to a supplied PendingIntent.
android.location.LocationManager.requestLocationUpdates,If the caller supplied a pending intent then location updates are sent with a key of KEY_LOCATION_CHANGED and a Location value.
android.location.LocationManager.requestLocationUpdates,The location update interval can be controlled using the minTime parameter.
android.location.LocationManager.requestLocationUpdates,The elapsed time between location updates will never be less than minTime although it can be more depending on the Location Provider implementation and the update interval requested by other applications.
android.location.LocationManager.requestLocationUpdates,Choosing a sensible value for minTime is important to conserve battery life.
android.location.LocationManager.requestLocationUpdates,Each location update requires power from GPS WIFI Cell and other radios.
android.location.LocationManager.requestLocationUpdates,Select a minTime value as high as possible while still providing a reasonable user experience.
android.location.LocationManager.requestLocationUpdates,If your application is not in the foreground and showing location to the user then your application should avoid using an active provider (such as NETWORK_PROVIDER or GPS_PROVIDER ) but if you insist then select a minTime of 5 * 60 * 1000 (5 minutes) or greater.
android.location.LocationManager.requestLocationUpdates,If your application is in the foreground and showing location to the user then it is appropriate to select a faster update interval.
android.location.LocationManager.requestLocationUpdates,The minDistance parameter can also be used to control the frequency of location updates.
android.location.LocationManager.requestLocationUpdates,If it is greater than 0 then the location provider will only send your application an update when the location has changed by at least minDistance meters AND at least minTime milliseconds have passed.
android.location.LocationManager.requestLocationUpdates,However it is more difficult for location providers to save power using the minDistance parameter so minTime should be the primary tool to conserving battery life.
android.location.LocationManager.requestLocationUpdates,If your application wants to passively observe location updates triggered by other applications but not consume any additional power otherwise then use the PASSIVE_PROVIDER This provider does not actively turn on or modify active location providers so you do not need to be as careful about minTime and minDistance.
android.location.LocationManager.requestLocationUpdates,However if your application performs heavy work on a location update (such as network activity) then you should select non-zero values for minTime and/or minDistance to rate-limit your update frequency in the case another application enables a location provider with extremely fast updates.
android.location.LocationManager.requestLocationUpdates,In case the provider is disabled by the user updates will stop and a provider availability update will be sent.
android.location.LocationManager.requestLocationUpdates,As soon as the provider is enabled again location updates will immediately resume and a provider availability update sent.
android.location.LocationManager.requestLocationUpdates,Providers can also send status updates at any time with extra's specific to the provider.
android.location.LocationManager.requestLocationUpdates,If a callback was supplied then status and availability updates are via LocationListener#onProviderDisabled LocationListener#onProviderEnabled or LocationListener#onStatusChanged.
android.location.LocationManager.requestLocationUpdates,Alternately if a pending intent was supplied then status and availability updates are broadcast intents with extra keys of KEY_PROVIDER_ENABLED or KEY_STATUS_CHANGED.
android.location.LocationManager.requestLocationUpdates,If a LocationListener is used but with no Looper specified then the calling thread must already be a Looper thread such as the main thread of the calling Activity.
android.location.LocationManager.requestLocationUpdates,If a Looper is specified with a LocationListener then callbacks are made on the supplied Looper thread.
android.location.LocationManager.requestLocationUpdates,When location callbacks are invoked the system will hold a wakelock on your application's behalf for some period of time but not indefinitely.
android.location.LocationManager.requestLocationUpdates,If your application requires a long running wakelock within the location callback you should acquire it yourself.
android.location.LocationManager.requestLocationUpdates,Prior to Jellybean the minTime parameter was only a hint and some location provider implementations ignored it.
android.location.LocationManager.requestLocationUpdates,From Jellybean and onwards it is mandatory for Android compatible devices to observe both the minTime and minDistance parameters.
android.location.LocationManager.requestLocationUpdates,Requires Manifest.permission.ACCESS_COARSE_LOCATION or Manifest.permission.ACCESS_FINE_LOCATION.
android.location.LocationManager.requestLocationUpdates,Register for location updates using the named provider and a callback on the specified looper thread. See requestLocationUpdates(long float android.location.Criteria android.app.PendingIntent) for more detail on how to use this method. Requires Manifest.permission.ACCESS_COARSE_LOCATION or Manifest.permission.ACCESS_FINE_LOCATION.
android.location.LocationManager.requestLocationUpdates,Request location updates.
android.location.LocationManager.requestLocationUpdates,Register for location updates using the named provider and a callback on the specified looper thread.
android.location.LocationManager.requestLocationUpdates,See requestLocationUpdates(long float android.location.Criteria android.app.PendingIntent) for more detail on how to use this method.
android.location.LocationManager.requestLocationUpdates,Requires Manifest.permission.ACCESS_COARSE_LOCATION or Manifest.permission.ACCESS_FINE_LOCATION.
android.location.LocationManager.requestLocationUpdates,Register for location updates using the named provider and a pending intent. See requestLocationUpdates(long float android.location.Criteria android.app.PendingIntent) for more detail on how to use this method. Requires Manifest.permission.ACCESS_COARSE_LOCATION or Manifest.permission.ACCESS_FINE_LOCATION.
android.location.LocationManager.requestLocationUpdates,Request location updates.
android.location.LocationManager.requestLocationUpdates,Register for location updates using the named provider and a pending intent.
android.location.LocationManager.requestLocationUpdates,See requestLocationUpdates(long float android.location.Criteria android.app.PendingIntent) for more detail on how to use this method.
android.location.LocationManager.requestLocationUpdates,Requires Manifest.permission.ACCESS_COARSE_LOCATION or Manifest.permission.ACCESS_FINE_LOCATION.
android.location.LocationManager.requestSingleUpdate,Register for a single location update using a named provider and pending intent. See requestLocationUpdates(long float android.location.Criteria android.app.PendingIntent) for more detail on how to use this method. Requires Manifest.permission.ACCESS_COARSE_LOCATION or Manifest.permission.ACCESS_FINE_LOCATION.
android.location.LocationManager.requestSingleUpdate,Request single update.
android.location.LocationManager.requestSingleUpdate,Register for a single location update using a named provider and pending intent.
android.location.LocationManager.requestSingleUpdate,See requestLocationUpdates(long float android.location.Criteria android.app.PendingIntent) for more detail on how to use this method.
android.location.LocationManager.requestSingleUpdate,Requires Manifest.permission.ACCESS_COARSE_LOCATION or Manifest.permission.ACCESS_FINE_LOCATION.
android.location.LocationManager.requestSingleUpdate,Register for a single location update using the named provider and a callback. See requestLocationUpdates(long float android.location.Criteria android.app.PendingIntent) for more detail on how to use this method. Requires Manifest.permission.ACCESS_COARSE_LOCATION or Manifest.permission.ACCESS_FINE_LOCATION.
android.location.LocationManager.requestSingleUpdate,Request single update.
android.location.LocationManager.requestSingleUpdate,Register for a single location update using the named provider and a callback.
android.location.LocationManager.requestSingleUpdate,See requestLocationUpdates(long float android.location.Criteria android.app.PendingIntent) for more detail on how to use this method.
android.location.LocationManager.requestSingleUpdate,Requires Manifest.permission.ACCESS_COARSE_LOCATION or Manifest.permission.ACCESS_FINE_LOCATION.
android.location.LocationManager.requestSingleUpdate,Register for a single location update using a Criteria and a callback. See requestLocationUpdates(long float android.location.Criteria android.app.PendingIntent) for more detail on how to use this method. Requires Manifest.permission.ACCESS_COARSE_LOCATION or Manifest.permission.ACCESS_FINE_LOCATION.
android.location.LocationManager.requestSingleUpdate,Request single update.
android.location.LocationManager.requestSingleUpdate,Register for a single location update using a Criteria and a callback.
android.location.LocationManager.requestSingleUpdate,See requestLocationUpdates(long float android.location.Criteria android.app.PendingIntent) for more detail on how to use this method.
android.location.LocationManager.requestSingleUpdate,Requires Manifest.permission.ACCESS_COARSE_LOCATION or Manifest.permission.ACCESS_FINE_LOCATION.
android.location.LocationManager.requestSingleUpdate,Register for a single location update using a Criteria and pending intent. See requestLocationUpdates(long float android.location.Criteria android.app.PendingIntent) for more detail on how to use this method. Requires Manifest.permission.ACCESS_COARSE_LOCATION or Manifest.permission.ACCESS_FINE_LOCATION.
android.location.LocationManager.requestSingleUpdate,Request single update.
android.location.LocationManager.requestSingleUpdate,Register for a single location update using a Criteria and pending intent.
android.location.LocationManager.requestSingleUpdate,See requestLocationUpdates(long float android.location.Criteria android.app.PendingIntent) for more detail on how to use this method.
android.location.LocationManager.requestSingleUpdate,Requires Manifest.permission.ACCESS_COARSE_LOCATION or Manifest.permission.ACCESS_FINE_LOCATION.
android.location.LocationProvider.getAccuracy,Returns a constant describing horizontal accuracy of this provider. If the provider returns finer grain or exact location Criteria#ACCURACY_FINE is returned otherwise if the location is only approximate then Criteria#ACCURACY_COARSE is returned.
android.location.LocationProvider.getAccuracy,Get accuracy.
android.location.LocationProvider.getAccuracy,Returns a constant describing horizontal accuracy of this provider.
android.location.LocationProvider.getAccuracy,If the provider returns finer grain or exact location Criteria#ACCURACY_FINE is returned otherwise if the location is only approximate then Criteria#ACCURACY_COARSE is returned.
android.net.http.HttpResponseCache.flush,Force buffered operations to the filesystem. This ensures that responses written to the cache will be available the next time the cache is opened even if this process is killed.
android.net.http.HttpResponseCache.flush,Flush.
android.net.http.HttpResponseCache.flush,Force buffered operations to the filesystem.
android.net.http.HttpResponseCache.flush,This ensures that responses written to the cache will be available the next time the cache is opened even if this process is killed.
android.net.http.HttpResponseCache.getInstalled,Returns the currently-installed HttpResponseCache or null if there is no cache installed or it is not a HttpResponseCache.
android.net.http.HttpResponseCache.getInstalled,Get installed.
android.net.http.HttpResponseCache.install,Creates a new HTTP response cache and sets it as the system default cache.
android.net.http.HttpResponseCache.install,Install.
android.net.http.SslCertificate.getValidNotBefore,This method was deprecated in API level 15. Use getValidNotBeforeDate().
android.net.http.SslCertificate.getValidNotBefore,Get valid not before.
android.net.http.SslCertificate.getValidNotBefore,This method was deprecated in API level 15.
android.net.http.SslCertificate.getValidNotBefore,Use getValidNotBeforeDate().
android.net.http.SslError.addError,Adds the supplied SSL error to the set.
android.net.http.SslError.addError,Add error.
android.net.http.SslError.getCertificate,Gets the SSL certificate associated with this object.
android.net.http.SslError.getCertificate,Get certificate.
android.net.http.SslError.getPrimaryError,Gets the most severe SSL error in this object's set of errors. Returns -1 if the set is empty.
android.net.http.SslError.getPrimaryError,Get primary error.
android.net.http.SslError.getPrimaryError,Gets the most severe SSL error in this object's set of errors.
android.net.http.SslError.getPrimaryError,Returns -1 if the set is empty.
android.net.http.SslError.toString,Returns a string representation of this object.
android.net.http.SslError.toString,To string.
android.media.session.MediaController.dispatchMediaButtonEvent,Send the specified media button event to the session. Only media keys can be sent by this method other keys will be ignored.
android.media.session.MediaController.dispatchMediaButtonEvent,Dispatch media button event.
android.media.session.MediaController.dispatchMediaButtonEvent,Send the specified media button event to the session.
android.media.session.MediaController.dispatchMediaButtonEvent,Only media keys can be sent by this method other keys will be ignored.
android.media.session.MediaController.getMetadata,Get the current metadata for this session.
android.media.session.MediaController.getMetadata,Get metadata.
android.media.session.MediaController.getPlaybackInfo,Get the current playback info for this session.
android.media.session.MediaController.getPlaybackInfo,Get playback info.
android.media.session.MediaController.getPlaybackState,Get the current playback state for this session.
android.media.session.MediaController.getPlaybackState,Get playback state.
android.media.session.MediaController.getRatingType,Get the rating type supported by the session. One of: Rating#RATING_NONE Rating#RATING_HEART Rating#RATING_THUMB_UP_DOWN Rating#RATING_3_STARS Rating#RATING_4_STARS Rating#RATING_5_STARS Rating#RATING_PERCENTAGE.
android.media.session.MediaController.getRatingType,Get rating type.
android.media.session.MediaController.getRatingType,Get the rating type supported by the session.
android.media.session.MediaController.getRatingType,One of: Rating#RATING_NONE Rating#RATING_HEART Rating#RATING_THUMB_UP_DOWN Rating#RATING_3_STARS Rating#RATING_4_STARS Rating#RATING_5_STARS Rating#RATING_PERCENTAGE.
android.media.session.MediaController.getTransportControls,Get a TransportControls instance to send transport actions to the associated session.
android.media.session.MediaController.getTransportControls,Get transport controls.
android.media.session.MediaController.sendCommand,Sends a generic command to the session. It is up to the session creator to decide what commands and parameters they will support. As such commands should only be sent to sessions that the controller owns.
android.media.session.MediaController.sendCommand,Send command.
android.media.session.MediaController.sendCommand,Sends a generic command to the session.
android.media.session.MediaController.sendCommand,It is up to the session creator to decide what commands and parameters they will support.
android.media.session.MediaController.sendCommand,As such commands should only be sent to sessions that the controller owns.
android.media.session.MediaSession.getSessionToken,Retrieve a token object that can be used by apps to create a MediaController for interacting with this session. The owner of the session is responsible for deciding how to distribute these tokens.
android.media.session.MediaSession.getSessionToken,Get session token.
android.media.session.MediaSession.getSessionToken,Retrieve a token object that can be used by apps to create a MediaController for interacting with this session.
android.media.session.MediaSession.getSessionToken,The owner of the session is responsible for deciding how to distribute these tokens.
android.media.session.MediaSession.isActive,Get the current active state of this session.
android.media.session.MediaSession.isActive,Is active.
android.media.session.MediaSession.release,This must be called when an app has finished performing playback. If playback is expected to start again shortly the session can be left open but it must be released if your activity or service is being destroyed.
android.media.session.MediaSession.release,Release.
android.media.session.MediaSession.release,This must be called when an app has finished performing playback.
android.media.session.MediaSession.release,If playback is expected to start again shortly the session can be left open but it must be released if your activity or service is being destroyed.
android.media.session.MediaSession.sendSessionEvent,Send a proprietary event to all MediaControllers listening to this Session. It's up to the Controller/Session owner to determine the meaning of any events.
android.media.session.MediaSession.sendSessionEvent,Send session event.
android.media.session.MediaSession.sendSessionEvent,Send a proprietary event to all MediaControllers listening to this Session.
android.media.session.MediaSession.sendSessionEvent,It's up to the Controller/Session owner to determine the meaning of any events.
android.media.session.MediaSession.setActive,Set if this session is currently active and ready to receive commands. If set to false your session's controller may not be discoverable. You must set the session to active before it can start receiving media button events or transport commands.
android.media.session.MediaSession.setActive,Set active.
android.media.session.MediaSession.setActive,Set if this session is currently active and ready to receive commands.
android.media.session.MediaSession.setActive,If set to false your session's controller may not be discoverable.
android.media.session.MediaSession.setActive,You must set the session to active before it can start receiving media button events or transport commands.
android.media.session.MediaSession.setFlags,Set any flags for the session.
android.media.session.MediaSession.setFlags,Set flags.
android.media.session.MediaSession.setMetadata,Update the current metadata. New metadata can be created using MediaMetadata.Builder. This operation may take time proportional to the size of the bitmap to replace large bitmaps with a scaled down copy.
android.media.session.MediaSession.setMetadata,Set metadata.
android.media.session.MediaSession.setMetadata,Update the current metadata.
android.media.session.MediaSession.setMetadata,New metadata can be created using MediaMetadata.Builder.
android.media.session.MediaSession.setMetadata,This operation may take time proportional to the size of the bitmap to replace large bitmaps with a scaled down copy.
android.media.session.MediaSession.setPlaybackState,Update the current playback state.
android.media.session.MediaSession.setPlaybackState,Set playback state.
android.media.session.MediaSession.setPlaybackToLocal,Set the attributes for this session's audio. This will affect the system's volume handling for this session. If setPlaybackToRemote(VolumeProvider) was previously called it will stop receiving volume commands and the system will begin sending volume changes to the appropriate stream. By default sessions use attributes for media.
android.media.session.MediaSession.setPlaybackToLocal,Set playback to local.
android.media.session.MediaSession.setPlaybackToLocal,Set the attributes for this session's audio.
android.media.session.MediaSession.setPlaybackToLocal,This will affect the system's volume handling for this session.
android.media.session.MediaSession.setPlaybackToLocal,If setPlaybackToRemote(VolumeProvider) was previously called it will stop receiving volume commands and the system will begin sending volume changes to the appropriate stream.
android.media.session.MediaSession.setPlaybackToLocal,By default sessions use attributes for media.
android.media.session.MediaSession.setPlaybackToRemote,Configure this session to use remote volume handling. This must be called to receive volume button events otherwise the system will adjust the appropriate stream volume for this session. If setPlaybackToLocal(AudioAttributes) was previously called the system will stop handling volume changes for this session and pass them to the volume provider instead.
android.media.session.MediaSession.setPlaybackToRemote,Set playback to remote.
android.media.session.MediaSession.setPlaybackToRemote,Configure this session to use remote volume handling.
android.media.session.MediaSession.setPlaybackToRemote,This must be called to receive volume button events otherwise the system will adjust the appropriate stream volume for this session.
android.media.session.MediaSession.setPlaybackToRemote,If setPlaybackToLocal(AudioAttributes) was previously called the system will stop handling volume changes for this session and pass them to the volume provider instead.
android.media.session.PlaybackState.getActions,Get the current actions available on this session. This should use a bitmask of the available actions. PlaybackState#ACTION_SKIP_TO_PREVIOUS PlaybackState#ACTION_REWIND PlaybackState#ACTION_PLAY PlaybackState#ACTION_PAUSE PlaybackState#ACTION_STOP PlaybackState#ACTION_FAST_FORWARD PlaybackState#ACTION_SKIP_TO_NEXT PlaybackState#ACTION_SEEK_TO PlaybackState#ACTION_SET_RATING PlaybackState#ACTION_PLAY_PAUSE PlaybackState#ACTION_PLAY_FROM_MEDIA_ID PlaybackState#ACTION_PLAY_FROM_SEARCH PlaybackState#ACTION_SKIP_TO_QUEUE_ITEM PlaybackState#ACTION_PLAY_FROM_URI PlaybackState#ACTION_PREPARE PlaybackState#ACTION_PREPARE_FROM_MEDIA_ID PlaybackState#ACTION_PREPARE_FROM_SEARCH PlaybackState#ACTION_PREPARE_FROM_URI.
android.media.session.PlaybackState.getActions,Get actions.
android.media.session.PlaybackState.getActions,Get the current actions available on this session.
android.media.session.PlaybackState.getActions,This should use a bitmask of the available actions.
android.media.session.PlaybackState.getActions,PlaybackState#ACTION_SKIP_TO_PREVIOUS PlaybackState#ACTION_REWIND PlaybackState#ACTION_PLAY PlaybackState#ACTION_PAUSE PlaybackState#ACTION_STOP PlaybackState#ACTION_FAST_FORWARD PlaybackState#ACTION_SKIP_TO_NEXT PlaybackState#ACTION_SEEK_TO PlaybackState#ACTION_SET_RATING PlaybackState#ACTION_PLAY_PAUSE PlaybackState#ACTION_PLAY_FROM_MEDIA_ID PlaybackState#ACTION_PLAY_FROM_SEARCH PlaybackState#ACTION_SKIP_TO_QUEUE_ITEM PlaybackState#ACTION_PLAY_FROM_URI PlaybackState#ACTION_PREPARE PlaybackState#ACTION_PREPARE_FROM_MEDIA_ID PlaybackState#ACTION_PREPARE_FROM_SEARCH PlaybackState#ACTION_PREPARE_FROM_URI.
android.media.session.PlaybackState.getBufferedPosition,Get the current buffered position in ms. This is the farthest playback point that can be reached from the current position using only buffered content.
android.media.session.PlaybackState.getBufferedPosition,Get buffered position.
android.media.session.PlaybackState.getBufferedPosition,Get the current buffered position in ms.
android.media.session.PlaybackState.getBufferedPosition,This is the farthest playback point that can be reached from the current position using only buffered content.
android.media.session.PlaybackState.getErrorMessage,Get a user readable error message. This should be set when the state is PlaybackState#STATE_ERROR.
android.media.session.PlaybackState.getErrorMessage,Get error message.
android.media.session.PlaybackState.getErrorMessage,Get a user readable error message.
android.media.session.PlaybackState.getErrorMessage,This should be set when the state is PlaybackState#STATE_ERROR.
android.media.session.PlaybackState.getLastPositionUpdateTime,Get the elapsed real time at which position was last updated. If the position has never been set this will return 0;.
android.media.session.PlaybackState.getLastPositionUpdateTime,Get last position update time.
android.media.session.PlaybackState.getLastPositionUpdateTime,Get the elapsed real time at which position was last updated.
android.media.session.PlaybackState.getLastPositionUpdateTime,If the position has never been set this will return 0;.
android.media.session.PlaybackState.getPlaybackSpeed,Get the current playback speed as a multiple of normal playback. This should be negative when rewinding. A value of 1 means normal playback and 0 means paused.
android.media.session.PlaybackState.getPlaybackSpeed,Get playback speed.
android.media.session.PlaybackState.getPlaybackSpeed,Get the current playback speed as a multiple of normal playback.
android.media.session.PlaybackState.getPlaybackSpeed,This should be negative when rewinding.
android.media.session.PlaybackState.getPlaybackSpeed,A value of 1 means normal playback and 0 means paused.
android.media.session.PlaybackState.getPosition,Get the current playback position in ms.
android.media.session.PlaybackState.getPosition,Get position.
android.media.session.PlaybackState.getState,Get the current state of playback. One of the following: PlaybackState#STATE_NONE PlaybackState#STATE_STOPPED PlaybackState#STATE_PLAYING PlaybackState#STATE_PAUSED PlaybackState#STATE_FAST_FORWARDING PlaybackState#STATE_REWINDING PlaybackState#STATE_BUFFERING PlaybackState#STATE_ERROR PlaybackState#STATE_CONNECTING PlaybackState#STATE_SKIPPING_TO_PREVIOUS PlaybackState#STATE_SKIPPING_TO_NEXT PlaybackState#STATE_SKIPPING_TO_QUEUE_ITEM.
android.media.session.PlaybackState.getState,Get state.
android.media.session.PlaybackState.getState,Get the current state of playback.
android.media.session.PlaybackState.getState,One of the following: PlaybackState#STATE_NONE PlaybackState#STATE_STOPPED PlaybackState#STATE_PLAYING PlaybackState#STATE_PAUSED PlaybackState#STATE_FAST_FORWARDING PlaybackState#STATE_REWINDING PlaybackState#STATE_BUFFERING PlaybackState#STATE_ERROR PlaybackState#STATE_CONNECTING PlaybackState#STATE_SKIPPING_TO_PREVIOUS PlaybackState#STATE_SKIPPING_TO_NEXT PlaybackState#STATE_SKIPPING_TO_QUEUE_ITEM.
android.net.wifi.WifiInfo.getBSSID,"Return the basic service set identifier (BSSID) of the current access point. The BSSID may be null if there is no network currently connected. ""02:00:00:00:00:00"" if the caller has insufficient permissions to access the BSSID."
android.net.wifi.WifiInfo.getBSSID,Get b s s i d.
android.net.wifi.WifiInfo.getBSSID,Return the basic service set identifier (BSSID) of the current access point.
android.net.wifi.WifiInfo.getBSSID,The BSSID may be null if there is no network currently connected.
android.net.wifi.WifiInfo.getBSSID,"""02:00:00:00:00:00"" if the caller has insufficient permissions to access the BSSID."
android.net.wifi.WifiInfo.getLinkSpeed,Returns the current link speed in LINK_SPEED_UNITS.
android.net.wifi.WifiInfo.getLinkSpeed,Get link speed.
android.net.wifi.WifiInfo.getNetworkId,Each configured network has a unique small integer ID used to identify the network. This method returns the ID for the currently connected network. The networkId may be -1 if there is no currently connected network or if the caller has insufficient permissions to access the network ID.
android.net.wifi.WifiInfo.getNetworkId,Get network id.
android.net.wifi.WifiInfo.getNetworkId,Each configured network has a unique small integer ID used to identify the network.
android.net.wifi.WifiInfo.getNetworkId,This method returns the ID for the currently connected network.
android.net.wifi.WifiInfo.getNetworkId,The networkId may be -1 if there is no currently connected network or if the caller has insufficient permissions to access the network ID.
android.net.wifi.WifiInfo.getRssi,Returns the received signal strength indicator of the current 802.11 network in dBm. Use WifiManager.calculateSignalLevel(int int) to convert this number into an absolute signal level which can be displayed to a user.
android.net.wifi.WifiInfo.getRssi,Get rssi.
android.net.wifi.WifiInfo.getRssi,Returns the received signal strength indicator of the current 802.11 network in dBm.
android.net.wifi.WifiInfo.getRssi,Use WifiManager.calculateSignalLevel(int int) to convert this number into an absolute signal level which can be displayed to a user.
android.net.wifi.WifiInfo.getSSID,Returns the service set identifier (SSID) of the current 802.11 network. If the SSID can be decoded as UTF-8 it will be returned surrounded by double quotation marks. Otherwise it is returned as a string of hex digits. The SSID may be <unknown ssid> if there is no network currently connected or if the caller has insufficient permissions to access the SSID. Prior to Build.VERSION_CODES.JELLY_BEAN_MR1 this method always returned the SSID with no quotes around it.
android.net.wifi.WifiInfo.getSSID,Get s s i d.
android.net.wifi.WifiInfo.getSSID,Returns the service set identifier (SSID) of the current 802.11 network.
android.net.wifi.WifiInfo.getSSID,If the SSID can be decoded as UTF-8 it will be returned surrounded by double quotation marks.
android.net.wifi.WifiInfo.getSSID,Otherwise it is returned as a string of hex digits.
android.net.wifi.WifiInfo.getSSID,The SSID may be <unknown ssid> if there is no network currently connected or if the caller has insufficient permissions to access the SSID.
android.net.wifi.WifiInfo.getSSID,Prior to Build.VERSION_CODES.JELLY_BEAN_MR1 this method always returned the SSID with no quotes around it.
android.net.wifi.WifiManager.addNetwork,This method was deprecated in API level 29. a) See WifiNetworkSpecifier.Builder#build() for new mechanism to trigger connection to a Wi-Fi network. b) See addNetworkSuggestions(java.util.List) removeNetworkSuggestions(java.util.List) for new API to add Wi-Fi networks for consideration when auto-connecting to wifi. Compatibility Note: For applications targeting Build.VERSION_CODES.Q or above this API will always return -1. Add a new network description to the set of configured networks. The networkId field of the supplied configuration object is ignored.
android.net.wifi.WifiManager.addNetwork,Add network.
android.net.wifi.WifiManager.addNetwork,This method was deprecated in API level 29.
android.net.wifi.WifiManager.addNetwork,a) See WifiNetworkSpecifier.Builder#build() for new mechanism to trigger connection to a Wi-Fi network.
android.net.wifi.WifiManager.addNetwork,b) See addNetworkSuggestions(java.util.List) removeNetworkSuggestions(java.util.List) for new API to add Wi-Fi networks for consideration when auto-connecting to wifi.
android.net.wifi.WifiManager.addNetwork,Compatibility Note: For applications targeting Build.VERSION_CODES.Q or above this API will always return -1.
android.net.wifi.WifiManager.addNetwork,Add a new network description to the set of configured networks.
android.net.wifi.WifiManager.addNetwork,The networkId field of the supplied configuration object is ignored.
android.net.wifi.WifiManager.calculateSignalLevel,Calculates the level of the signal. This should be used any time a signal is being shown.
android.net.wifi.WifiManager.calculateSignalLevel,Calculate signal level.
android.net.wifi.WifiManager.calculateSignalLevel,Calculates the level of the signal.
android.net.wifi.WifiManager.calculateSignalLevel,This should be used any time a signal is being shown.
android.net.wifi.WifiManager.createWifiLock,This method was deprecated in API level 29. This API is non-functional. Creates a new WifiLock.
android.net.wifi.WifiManager.createWifiLock,Create wifi lock.
android.net.wifi.WifiManager.createWifiLock,This method was deprecated in API level 29.
android.net.wifi.WifiManager.createWifiLock,This API is non-functional.
android.net.wifi.WifiManager.createWifiLock,Creates a new WifiLock.
android.net.wifi.WifiManager.createWifiLock,Creates a new WifiLock.
android.net.wifi.WifiManager.createWifiLock,Create wifi lock.
android.net.wifi.WifiManager.disableNetwork,This method was deprecated in API level 29. a) See WifiNetworkSpecifier.Builder#build() for new mechanism to trigger connection to a Wi-Fi network. b) See addNetworkSuggestions(java.util.List) removeNetworkSuggestions(java.util.List) for new API to add Wi-Fi networks for consideration when auto-connecting to wifi. Compatibility Note: For applications targeting Build.VERSION_CODES.Q or above this API will always return false. Disable a configured network. The specified network will not be a candidate for associating. This may result in the asynchronous delivery of state change events. Applications are not allowed to disable networks created by other applications.
android.net.wifi.WifiManager.disableNetwork,Disable network.
android.net.wifi.WifiManager.disableNetwork,This method was deprecated in API level 29.
android.net.wifi.WifiManager.disableNetwork,a) See WifiNetworkSpecifier.Builder#build() for new mechanism to trigger connection to a Wi-Fi network.
android.net.wifi.WifiManager.disableNetwork,b) See addNetworkSuggestions(java.util.List) removeNetworkSuggestions(java.util.List) for new API to add Wi-Fi networks for consideration when auto-connecting to wifi.
android.net.wifi.WifiManager.disableNetwork,Compatibility Note: For applications targeting Build.VERSION_CODES.Q or above this API will always return false.
android.net.wifi.WifiManager.disableNetwork,Disable a configured network.
android.net.wifi.WifiManager.disableNetwork,The specified network will not be a candidate for associating.
android.net.wifi.WifiManager.disableNetwork,This may result in the asynchronous delivery of state change events.
android.net.wifi.WifiManager.disableNetwork,Applications are not allowed to disable networks created by other applications.
android.net.wifi.WifiManager.disconnect,This method was deprecated in API level 29. a) See WifiNetworkSpecifier.Builder#build() for new mechanism to trigger connection to a Wi-Fi network. b) See addNetworkSuggestions(java.util.List) removeNetworkSuggestions(java.util.List) for new API to add Wi-Fi networks for consideration when auto-connecting to wifi. Compatibility Note: For applications targeting Build.VERSION_CODES.Q or above this API will always return false. Disassociate from the currently active access point. This may result in the asynchronous delivery of state change events.
android.net.wifi.WifiManager.disconnect,Disconnect.
android.net.wifi.WifiManager.disconnect,This method was deprecated in API level 29.
android.net.wifi.WifiManager.disconnect,a) See WifiNetworkSpecifier.Builder#build() for new mechanism to trigger connection to a Wi-Fi network.
android.net.wifi.WifiManager.disconnect,b) See addNetworkSuggestions(java.util.List) removeNetworkSuggestions(java.util.List) for new API to add Wi-Fi networks for consideration when auto-connecting to wifi.
android.net.wifi.WifiManager.disconnect,Compatibility Note: For applications targeting Build.VERSION_CODES.Q or above this API will always return false.
android.net.wifi.WifiManager.disconnect,Disassociate from the currently active access point.
android.net.wifi.WifiManager.disconnect,This may result in the asynchronous delivery of state change events.
android.net.wifi.WifiManager.enableNetwork,This method was deprecated in API level 29. a) See WifiNetworkSpecifier.Builder#build() for new mechanism to trigger connection to a Wi-Fi network. b) See addNetworkSuggestions(java.util.List) removeNetworkSuggestions(java.util.List) for new API to add Wi-Fi networks for consideration when auto-connecting to wifi. Compatibility Note: For applications targeting Build.VERSION_CODES.Q or above this API will always return false. Allow a previously configured network to be associated with. If attemptConnect is true an attempt to connect to the selected network is initiated. This may result in the asynchronous delivery of state change events. Note: Network communication may not use Wi-Fi even if Wi-Fi is connected; traffic may instead be sent through another network such as cellular data Bluetooth tethering or Ethernet. For example traffic will never use a Wi-Fi network that does not provide Internet access (e.g. a wireless printer) if another network that does offer Internet access (e.g. cellular data) is available. Applications that need to ensure that their network traffic uses Wi-Fi should use APIs such as Network#bindSocket(java.net.Socket) Network#openConnection(java.net.URL) or ConnectivityManager#bindProcessToNetwork to do so. Applications are not allowed to enable networks created by other applications.
android.net.wifi.WifiManager.enableNetwork,Enable network.
android.net.wifi.WifiManager.enableNetwork,This method was deprecated in API level 29.
android.net.wifi.WifiManager.enableNetwork,a) See WifiNetworkSpecifier.Builder#build() for new mechanism to trigger connection to a Wi-Fi network.
android.net.wifi.WifiManager.enableNetwork,b) See addNetworkSuggestions(java.util.List) removeNetworkSuggestions(java.util.List) for new API to add Wi-Fi networks for consideration when auto-connecting to wifi.
android.net.wifi.WifiManager.enableNetwork,Compatibility Note: For applications targeting Build.VERSION_CODES.Q or above this API will always return false.
android.net.wifi.WifiManager.enableNetwork,Allow a previously configured network to be associated with.
android.net.wifi.WifiManager.enableNetwork,If attemptConnect is true an attempt to connect to the selected network is initiated.
android.net.wifi.WifiManager.enableNetwork,This may result in the asynchronous delivery of state change events.
android.net.wifi.WifiManager.enableNetwork,Note: Network communication may not use Wi-Fi even if Wi-Fi is connected; traffic may instead be sent through another network such as cellular data Bluetooth tethering or Ethernet.
android.net.wifi.WifiManager.enableNetwork,For example traffic will never use a Wi-Fi network that does not provide Internet access (e.g.
android.net.wifi.WifiManager.enableNetwork,a wireless printer) if another network that does offer Internet access (e.g.
android.net.wifi.WifiManager.enableNetwork,cellular data) is available.
android.net.wifi.WifiManager.enableNetwork,Applications that need to ensure that their network traffic uses Wi-Fi should use APIs such as Network#bindSocket(java.net.Socket) Network#openConnection(java.net.URL) or ConnectivityManager#bindProcessToNetwork to do so.
android.net.wifi.WifiManager.enableNetwork,Applications are not allowed to enable networks created by other applications.
android.net.wifi.WifiManager.getConfiguredNetworks,This method was deprecated in API level 29. a) See WifiNetworkSpecifier.Builder#build() for new mechanism to trigger connection to a Wi-Fi network. b) See addNetworkSuggestions(java.util.List) removeNetworkSuggestions(java.util.List) for new API to add Wi-Fi networks for consideration when auto-connecting to wifi. Compatibility Note: For applications targeting Build.VERSION_CODES.Q or above this API will return an empty list except for: Device Owner (DO) & Profile Owner (PO) apps will have access to the full list. Callers with Carrier privilege will receive a restricted list only containing configurations which they created. Return a list of all the networks configured for the current foreground user. Not all fields of WifiConfiguration are returned. Only the following fields are filled in: networkId SSID BSSID priority allowedProtocols allowedKeyManagement allowedAuthAlgorithms allowedPairwiseCiphers allowedGroupCiphers.
android.net.wifi.WifiManager.getConfiguredNetworks,Get configured networks.
android.net.wifi.WifiManager.getConfiguredNetworks,This method was deprecated in API level 29.
android.net.wifi.WifiManager.getConfiguredNetworks,a) See WifiNetworkSpecifier.Builder#build() for new mechanism to trigger connection to a Wi-Fi network.
android.net.wifi.WifiManager.getConfiguredNetworks,b) See addNetworkSuggestions(java.util.List) removeNetworkSuggestions(java.util.List) for new API to add Wi-Fi networks for consideration when auto-connecting to wifi.
android.net.wifi.WifiManager.getConfiguredNetworks,Compatibility Note: For applications targeting Build.VERSION_CODES.Q or above this API will return an empty list except for: Device Owner (DO) & Profile Owner (PO) apps will have access to the full list.
android.net.wifi.WifiManager.getConfiguredNetworks,Callers with Carrier privilege will receive a restricted list only containing configurations which they created.
android.net.wifi.WifiManager.getConfiguredNetworks,Return a list of all the networks configured for the current foreground user.
android.net.wifi.WifiManager.getConfiguredNetworks,Not all fields of WifiConfiguration are returned.
android.net.wifi.WifiManager.getConfiguredNetworks,Only the following fields are filled in: networkId SSID BSSID priority allowedProtocols allowedKeyManagement allowedAuthAlgorithms allowedPairwiseCiphers allowedGroupCiphers.
android.net.wifi.WifiManager.getConnectionInfo,"Return dynamic information about the current Wi-Fi connection if any is active. In the connected state access to the SSID and BSSID requires the same permissions as getScanResults(). If such access is not allowed WifiInfo#getSSID will return ""<unknown ssid>"" and WifiInfo#getBSSID will return ""02:00:00:00:00:00""."
android.net.wifi.WifiManager.getConnectionInfo,Get connection info.
android.net.wifi.WifiManager.getConnectionInfo,Return dynamic information about the current Wi-Fi connection if any is active.
android.net.wifi.WifiManager.getConnectionInfo,In the connected state access to the SSID and BSSID requires the same permissions as getScanResults().
android.net.wifi.WifiManager.getConnectionInfo,"If such access is not allowed WifiInfo#getSSID will return ""<unknown ssid>"" and WifiInfo#getBSSID will return ""02:00:00:00:00:00""."
android.net.wifi.WifiManager.getDhcpInfo,Return the DHCP-assigned addresses from the last successful DHCP request if any.
android.net.wifi.WifiManager.getDhcpInfo,Get dhcp info.
android.net.wifi.WifiManager.getScanResults,Return the results of the latest access point scan.
android.net.wifi.WifiManager.getScanResults,Get scan results.
android.net.wifi.WifiManager.getWifiState,Gets the Wi-Fi enabled state.
android.net.wifi.WifiManager.getWifiState,Get wifi state.
android.net.wifi.WifiManager.isWifiEnabled,Return whether Wi-Fi is enabled or disabled.
android.net.wifi.WifiManager.isWifiEnabled,Is wifi enabled.
android.net.wifi.WifiManager.reconnect,This method was deprecated in API level 29. a) See WifiNetworkSpecifier.Builder#build() for new mechanism to trigger connection to a Wi-Fi network. b) See addNetworkSuggestions(java.util.List) removeNetworkSuggestions(java.util.List) for new API to add Wi-Fi networks for consideration when auto-connecting to wifi. Compatibility Note: For applications targeting Build.VERSION_CODES.Q or above this API will always return false. Reconnect to the currently active access point if we are currently disconnected. This may result in the asynchronous delivery of state change events.
android.net.wifi.WifiManager.reconnect,Reconnect.
android.net.wifi.WifiManager.reconnect,This method was deprecated in API level 29.
android.net.wifi.WifiManager.reconnect,a) See WifiNetworkSpecifier.Builder#build() for new mechanism to trigger connection to a Wi-Fi network.
android.net.wifi.WifiManager.reconnect,b) See addNetworkSuggestions(java.util.List) removeNetworkSuggestions(java.util.List) for new API to add Wi-Fi networks for consideration when auto-connecting to wifi.
android.net.wifi.WifiManager.reconnect,Compatibility Note: For applications targeting Build.VERSION_CODES.Q or above this API will always return false.
android.net.wifi.WifiManager.reconnect,Reconnect to the currently active access point if we are currently disconnected.
android.net.wifi.WifiManager.reconnect,This may result in the asynchronous delivery of state change events.
android.net.wifi.WifiManager.removeNetwork,This method was deprecated in API level 29. a) See WifiNetworkSpecifier.Builder#build() for new mechanism to trigger connection to a Wi-Fi network. b) See addNetworkSuggestions(java.util.List) removeNetworkSuggestions(java.util.List) for new API to add Wi-Fi networks for consideration when auto-connecting to wifi. Compatibility Note: For applications targeting Build.VERSION_CODES.Q or above this API will always return false. Remove the specified network from the list of configured networks. This may result in the asynchronous delivery of state change events. Applications are not allowed to remove networks created by other applications.
android.net.wifi.WifiManager.removeNetwork,Remove network.
android.net.wifi.WifiManager.removeNetwork,This method was deprecated in API level 29.
android.net.wifi.WifiManager.removeNetwork,a) See WifiNetworkSpecifier.Builder#build() for new mechanism to trigger connection to a Wi-Fi network.
android.net.wifi.WifiManager.removeNetwork,b) See addNetworkSuggestions(java.util.List) removeNetworkSuggestions(java.util.List) for new API to add Wi-Fi networks for consideration when auto-connecting to wifi.
android.net.wifi.WifiManager.removeNetwork,Compatibility Note: For applications targeting Build.VERSION_CODES.Q or above this API will always return false.
android.net.wifi.WifiManager.removeNetwork,Remove the specified network from the list of configured networks.
android.net.wifi.WifiManager.removeNetwork,This may result in the asynchronous delivery of state change events.
android.net.wifi.WifiManager.removeNetwork,Applications are not allowed to remove networks created by other applications.
android.net.wifi.WifiManager.saveConfiguration,This method was deprecated in API level 26. There is no need to call this method - addNetwork(android.net.wifi.WifiConfiguration) updateNetwork(android.net.wifi.WifiConfiguration) and removeNetwork(int) already persist the configurations automatically. Tell the device to persist the current list of configured networks. Note: It is possible for this method to change the network IDs of existing networks. You should assume the network IDs can be different after calling this method.
android.net.wifi.WifiManager.saveConfiguration,Save configuration.
android.net.wifi.WifiManager.saveConfiguration,This method was deprecated in API level 26.
android.net.wifi.WifiManager.saveConfiguration,There is no need to call this method - addNetwork(android.net.wifi.WifiConfiguration) updateNetwork(android.net.wifi.WifiConfiguration) and removeNetwork(int) already persist the configurations automatically.
android.net.wifi.WifiManager.saveConfiguration,Tell the device to persist the current list of configured networks.
android.net.wifi.WifiManager.saveConfiguration,Note: It is possible for this method to change the network IDs of existing networks.
android.net.wifi.WifiManager.saveConfiguration,You should assume the network IDs can be different after calling this method.
android.net.wifi.WifiManager.setWifiEnabled,This method was deprecated in API level 29. Starting with Build.VERSION_CODES#Q applications are not allowed to enable/disable Wi-Fi. Compatibility Note: For applications targeting Build.VERSION_CODES.Q or above this API will always return false and will have no effect. If apps are targeting an older SDK ( Build.VERSION_CODES.P or below) they can continue to use this API. Enable or disable Wi-Fi. Applications must have the Manifest.permission.CHANGE_WIFI_STATE permission to toggle wifi.
android.net.wifi.WifiManager.setWifiEnabled,Set wifi enabled.
android.net.wifi.WifiManager.setWifiEnabled,This method was deprecated in API level 29.
android.net.wifi.WifiManager.setWifiEnabled,Starting with Build.VERSION_CODES#Q applications are not allowed to enable/disable Wi-Fi.
android.net.wifi.WifiManager.setWifiEnabled,Compatibility Note: For applications targeting Build.VERSION_CODES.Q or above this API will always return false and will have no effect.
android.net.wifi.WifiManager.setWifiEnabled,If apps are targeting an older SDK ( Build.VERSION_CODES.P or below) they can continue to use this API.
android.net.wifi.WifiManager.setWifiEnabled,Enable or disable Wi-Fi.
android.net.wifi.WifiManager.setWifiEnabled,Applications must have the Manifest.permission.CHANGE_WIFI_STATE permission to toggle wifi.
android.net.wifi.WifiManager.startScan,This method was deprecated in API level 28. The ability for apps to trigger scan requests will be removed in a future release. Request a scan for access points. Returns immediately. The availability of the results is made known later by means of an asynchronous event sent on completion of the scan. To initiate a Wi-Fi scan declare the Manifest.permission.CHANGE_WIFI_STATE permission in the manifest and perform these steps:.
android.net.wifi.WifiManager.startScan,Start scan.
android.net.wifi.WifiManager.startScan,This method was deprecated in API level 28.
android.net.wifi.WifiManager.startScan,The ability for apps to trigger scan requests will be removed in a future release.
android.net.wifi.WifiManager.startScan,Request a scan for access points.
android.net.wifi.WifiManager.startScan,Returns immediately.
android.net.wifi.WifiManager.startScan,The availability of the results is made known later by means of an asynchronous event sent on completion of the scan.
android.net.wifi.WifiManager.startScan,To initiate a Wi-Fi scan declare the Manifest.permission.CHANGE_WIFI_STATE permission in the manifest and perform these steps:.
android.nfc.NdefMessage.getRecords,Get the NDEF Records inside this NDEF Message. An NdefMessage always has one or more NDEF Records: so the following code to retrieve the first record is always safe (no need to check for null or array length >= 1):.
android.nfc.NdefMessage.getRecords,Get records.
android.nfc.NdefMessage.getRecords,Get the NDEF Records inside this NDEF Message.
android.nfc.NdefMessage.getRecords,An NdefMessage always has one or more NDEF Records: so the following code to retrieve the first record is always safe (no need to check for null or array length >= 1):.
android.nfc.NdefRecord.createApplicationRecord,Create a new Android Application Record (AAR). This record indicates to other Android devices the package that should be used to handle the entire NDEF message. You can embed this record anywhere into your message to ensure that the intended package receives the message. When an Android device dispatches an NdefMessage containing one or more Android application records the applications contained in those records will be the preferred target for the NfcAdapter#ACTION_NDEF_DISCOVERED intent in the order in which they appear in the message. This dispatch behavior was first added to Android in Ice Cream Sandwich. If none of the applications have a are installed on the device a Market link will be opened to the first application. Note that Android application records do not overrule applications that have called NfcAdapter#enableForegroundDispatch.
android.nfc.NdefRecord.createApplicationRecord,Create application record.
android.nfc.NdefRecord.createApplicationRecord,Create a new Android Application Record (AAR).
android.nfc.NdefRecord.createApplicationRecord,This record indicates to other Android devices the package that should be used to handle the entire NDEF message.
android.nfc.NdefRecord.createApplicationRecord,You can embed this record anywhere into your message to ensure that the intended package receives the message.
android.nfc.NdefRecord.createApplicationRecord,When an Android device dispatches an NdefMessage containing one or more Android application records the applications contained in those records will be the preferred target for the NfcAdapter#ACTION_NDEF_DISCOVERED intent in the order in which they appear in the message.
android.nfc.NdefRecord.createApplicationRecord,This dispatch behavior was first added to Android in Ice Cream Sandwich.
android.nfc.NdefRecord.createApplicationRecord,If none of the applications have a are installed on the device a Market link will be opened to the first application.
android.nfc.NdefRecord.createApplicationRecord,Note that Android application records do not overrule applications that have called NfcAdapter#enableForegroundDispatch.
android.nfc.NdefRecord.getPayload,Returns the variable length payload. Returns an empty byte array if this record does not have a payload field.
android.nfc.NdefRecord.getPayload,Get payload.
android.nfc.NdefRecord.getPayload,Returns the variable length payload.
android.nfc.NdefRecord.getPayload,Returns an empty byte array if this record does not have a payload field.
android.nfc.NfcAdapter.getDefaultAdapter,Helper to get the default NFC Adapter. Most Android devices will only have one NFC Adapter (NFC Controller). This helper is the equivalent of:.
android.nfc.NfcAdapter.getDefaultAdapter,Get default adapter.
android.nfc.NfcAdapter.getDefaultAdapter,Helper to get the default NFC Adapter.
android.nfc.NfcAdapter.getDefaultAdapter,Most Android devices will only have one NFC Adapter (NFC Controller).
android.nfc.NfcAdapter.getDefaultAdapter,This helper is the equivalent of:.
android.nfc.NfcAdapter.isEnabled,Return true if this NFC Adapter has any features enabled. If this method returns false the NFC hardware is guaranteed not to generate or respond to any NFC communication over its NFC radio. Applications can use this to check if NFC is enabled. Applications can request Settings UI allowing the user to toggle NFC using:.
android.nfc.NfcAdapter.isEnabled,Is enabled.
android.nfc.NfcAdapter.isEnabled,Return true if this NFC Adapter has any features enabled.
android.nfc.NfcAdapter.isEnabled,If this method returns false the NFC hardware is guaranteed not to generate or respond to any NFC communication over its NFC radio.
android.nfc.NfcAdapter.isEnabled,Applications can use this to check if NFC is enabled.
android.nfc.NfcAdapter.isEnabled,Applications can request Settings UI allowing the user to toggle NFC using:.
android.nfc.NfcManager.getDefaultAdapter,Get the default NFC Adapter for this device.
android.nfc.NfcManager.getDefaultAdapter,Get default adapter.
android.net.ConnectivityManager.getActiveNetworkInfo,This method was deprecated in API level 29. See NetworkInfo. Returns details about the currently active default data network. When connected this network is the default route for outgoing connections. You should always check NetworkInfo#isConnected() before initiating network traffic. This may return null when there is no default network. Note that if the default network is a VPN this method will return the NetworkInfo for one of its underlying networks instead or null if the VPN agent did not specify any. Apps interested in learning about VPNs should use getNetworkInfo(android.net.Network) instead. Requires Manifest.permission.ACCESS_NETWORK_STATE.
android.net.ConnectivityManager.getActiveNetworkInfo,Get active network info.
android.net.ConnectivityManager.getActiveNetworkInfo,This method was deprecated in API level 29.
android.net.ConnectivityManager.getActiveNetworkInfo,See NetworkInfo.
android.net.ConnectivityManager.getActiveNetworkInfo,Returns details about the currently active default data network.
android.net.ConnectivityManager.getActiveNetworkInfo,When connected this network is the default route for outgoing connections.
android.net.ConnectivityManager.getActiveNetworkInfo,You should always check NetworkInfo#isConnected() before initiating network traffic.
android.net.ConnectivityManager.getActiveNetworkInfo,This may return null when there is no default network.
android.net.ConnectivityManager.getActiveNetworkInfo,Note that if the default network is a VPN this method will return the NetworkInfo for one of its underlying networks instead or null if the VPN agent did not specify any.
android.net.ConnectivityManager.getActiveNetworkInfo,Apps interested in learning about VPNs should use getNetworkInfo(android.net.Network) instead.
android.net.ConnectivityManager.getActiveNetworkInfo,Requires Manifest.permission.ACCESS_NETWORK_STATE.
android.net.ConnectivityManager.getAllNetworkInfo,This method was deprecated in API level 23. This method does not support multiple connected networks of the same type. Use getAllNetworks() and getNetworkInfo(android.net.Network) instead. Returns connection status information about all network types supported by the device. Requires Manifest.permission.ACCESS_NETWORK_STATE.
android.net.ConnectivityManager.getAllNetworkInfo,Get all network info.
android.net.ConnectivityManager.getAllNetworkInfo,This method was deprecated in API level 23.
android.net.ConnectivityManager.getAllNetworkInfo,This method does not support multiple connected networks of the same type.
android.net.ConnectivityManager.getAllNetworkInfo,Use getAllNetworks() and getNetworkInfo(android.net.Network) instead.
android.net.ConnectivityManager.getAllNetworkInfo,Returns connection status information about all network types supported by the device.
android.net.ConnectivityManager.getAllNetworkInfo,Requires Manifest.permission.ACCESS_NETWORK_STATE.
android.net.ConnectivityManager.getBackgroundDataSetting,This method was deprecated in API level 15. As of VERSION_CODES#ICE_CREAM_SANDWICH availability of background data depends on several combined factors and this method will always return true. Instead when background data is unavailable getActiveNetworkInfo() will now appear disconnected. Returns the value of the setting for background data usage. If false applications should not use the network if the application is not in the foreground. Developers should respect this setting and check the value of this before performing any background data operations. All applications that have background services that use the network should listen to ACTION_BACKGROUND_DATA_SETTING_CHANGED.
android.net.ConnectivityManager.getBackgroundDataSetting,Get background data setting.
android.net.ConnectivityManager.getBackgroundDataSetting,This method was deprecated in API level 15.
android.net.ConnectivityManager.getBackgroundDataSetting,As of VERSION_CODES#ICE_CREAM_SANDWICH availability of background data depends on several combined factors and this method will always return true.
android.net.ConnectivityManager.getBackgroundDataSetting,Instead when background data is unavailable getActiveNetworkInfo() will now appear disconnected.
android.net.ConnectivityManager.getBackgroundDataSetting,Returns the value of the setting for background data usage.
android.net.ConnectivityManager.getBackgroundDataSetting,If false applications should not use the network if the application is not in the foreground.
android.net.ConnectivityManager.getBackgroundDataSetting,Developers should respect this setting and check the value of this before performing any background data operations.
android.net.ConnectivityManager.getBackgroundDataSetting,All applications that have background services that use the network should listen to ACTION_BACKGROUND_DATA_SETTING_CHANGED.
android.net.ConnectivityManager.getNetworkInfo,This method was deprecated in API level 23. This method does not support multiple connected networks of the same type. Use getAllNetworks() and getNetworkInfo(android.net.Network) instead. Returns connection status information about a particular network type. Requires Manifest.permission.ACCESS_NETWORK_STATE.
android.net.ConnectivityManager.getNetworkInfo,Get network info.
android.net.ConnectivityManager.getNetworkInfo,This method was deprecated in API level 23.
android.net.ConnectivityManager.getNetworkInfo,This method does not support multiple connected networks of the same type.
android.net.ConnectivityManager.getNetworkInfo,Use getAllNetworks() and getNetworkInfo(android.net.Network) instead.
android.net.ConnectivityManager.getNetworkInfo,Returns connection status information about a particular network type.
android.net.ConnectivityManager.getNetworkInfo,Requires Manifest.permission.ACCESS_NETWORK_STATE.
android.net.ConnectivityManager.getNetworkInfo,This method was deprecated in API level 29. See NetworkInfo. Returns connection status information about a particular Network. Requires Manifest.permission.ACCESS_NETWORK_STATE.
android.net.ConnectivityManager.getNetworkInfo,Get network info.
android.net.ConnectivityManager.getNetworkInfo,This method was deprecated in API level 29.
android.net.ConnectivityManager.getNetworkInfo,See NetworkInfo.
android.net.ConnectivityManager.getNetworkInfo,Returns connection status information about a particular Network.
android.net.ConnectivityManager.getNetworkInfo,Requires Manifest.permission.ACCESS_NETWORK_STATE.
android.net.ConnectivityManager.isActiveNetworkMetered,Returns if the currently active data network is metered. A network is classified as metered when the user is sensitive to heavy data usage on that connection due to monetary costs data limitations or battery/performance issues. You should check this before doing large data transfers and warn the user or delay the operation until another network is available. Requires Manifest.permission.ACCESS_NETWORK_STATE.
android.net.ConnectivityManager.isActiveNetworkMetered,Is active network metered.
android.net.ConnectivityManager.isActiveNetworkMetered,Returns if the currently active data network is metered.
android.net.ConnectivityManager.isActiveNetworkMetered,A network is classified as metered when the user is sensitive to heavy data usage on that connection due to monetary costs data limitations or battery/performance issues.
android.net.ConnectivityManager.isActiveNetworkMetered,You should check this before doing large data transfers and warn the user or delay the operation until another network is available.
android.net.ConnectivityManager.isActiveNetworkMetered,Requires Manifest.permission.ACCESS_NETWORK_STATE.
android.net.LocalServerSocket.accept,Accepts a new connection to the socket. Blocks until a new connection arrives.
android.net.LocalServerSocket.accept,Accept.
android.net.LocalServerSocket.accept,Accepts a new connection to the socket.
android.net.LocalServerSocket.accept,Blocks until a new connection arrives.
android.net.LocalServerSocket.close,Closes server socket.
android.net.LocalServerSocket.close,Close.
android.net.LocalSocket.close,Closes the socket.
android.net.LocalSocket.close,Close.
android.net.LocalSocket.connect,.
android.net.LocalSocket.connect,Connect.
android.net.LocalSocket.connect,Connects this socket to an endpoint. May only be called on an instance that has not yet been connected.
android.net.LocalSocket.connect,Connect.
android.net.LocalSocket.connect,Connects this socket to an endpoint.
android.net.LocalSocket.connect,May only be called on an instance that has not yet been connected.
android.net.LocalSocket.getFileDescriptor,Returns file descriptor or null if not yet open/already closed.
android.net.LocalSocket.getFileDescriptor,Get file descriptor.
android.net.LocalSocket.getInputStream,Retrieves the input stream for this instance.
android.net.LocalSocket.getInputStream,Get input stream.
android.net.LocalSocket.getOutputStream,Retrieves the output stream for this instance.
android.net.LocalSocket.getOutputStream,Get output stream.
android.net.MailTo.getBody,Retrieve the body line from the parsed mailto URL. If no body line was specified then null is return.
android.net.MailTo.getBody,Get body.
android.net.MailTo.getBody,Retrieve the body line from the parsed mailto URL.
android.net.MailTo.getBody,If no body line was specified then null is return.
android.net.MailTo.getCc,Retrieve the CC address line from the parsed mailto URL. This could be several email address that are comma-space delimited. If no CC line was specified then null is return.
android.net.MailTo.getCc,Get cc.
android.net.MailTo.getCc,Retrieve the CC address line from the parsed mailto URL.
android.net.MailTo.getCc,This could be several email address that are comma-space delimited.
android.net.MailTo.getCc,If no CC line was specified then null is return.
android.net.MailTo.getHeaders,Retrieve all the parsed email headers from the mailto URL.
android.net.MailTo.getHeaders,Get headers.
android.net.MailTo.getSubject,Retrieve the subject line from the parsed mailto URL. If no subject line was specified then null is return.
android.net.MailTo.getSubject,Get subject.
android.net.MailTo.getSubject,Retrieve the subject line from the parsed mailto URL.
android.net.MailTo.getSubject,If no subject line was specified then null is return.
android.net.MailTo.getTo,Retrieve the To address line from the parsed mailto URL. This could be several email address that are comma-space delimited. If no To line was specified then null is return.
android.net.MailTo.getTo,Get to.
android.net.MailTo.getTo,Retrieve the To address line from the parsed mailto URL.
android.net.MailTo.getTo,This could be several email address that are comma-space delimited.
android.net.MailTo.getTo,If no To line was specified then null is return.
android.net.MailTo.isMailTo,Test to see if the given string is a mailto URL.
android.net.MailTo.isMailTo,Is mail to.
android.net.MailTo.parse,Parse and decode a mailto scheme string. This parser implements RFC 2368. The returned object can be queried for the parsed parameters.
android.net.MailTo.parse,Parse.
android.net.MailTo.parse,Parse and decode a mailto scheme string.
android.net.MailTo.parse,This parser implements RFC 2368.
android.net.MailTo.parse,The returned object can be queried for the parsed parameters.
android.net.NetworkInfo.getDetailedState,This method was deprecated in API level 29. Apps should instead use the ConnectivityManager.NetworkCallback API to learn about connectivity changes. See ConnectivityManager#registerDefaultNetworkCallback and ConnectivityManager#registerNetworkCallback. These will give a more accurate picture of the connectivity state of the device and let apps react more easily and quickly to changes. Reports the current fine-grained state of the network.
android.net.NetworkInfo.getDetailedState,Get detailed state.
android.net.NetworkInfo.getDetailedState,This method was deprecated in API level 29.
android.net.NetworkInfo.getDetailedState,Apps should instead use the ConnectivityManager.NetworkCallback API to learn about connectivity changes.
android.net.NetworkInfo.getDetailedState,See ConnectivityManager#registerDefaultNetworkCallback and ConnectivityManager#registerNetworkCallback.
android.net.NetworkInfo.getDetailedState,These will give a more accurate picture of the connectivity state of the device and let apps react more easily and quickly to changes.
android.net.NetworkInfo.getDetailedState,Reports the current fine-grained state of the network.
android.net.NetworkInfo.getExtraInfo,This method was deprecated in API level 29. Use other services e.g. WifiManager to get additional information passed up from the lower networking layers. Report the extra information about the network state if any was provided by the lower networking layers.
android.net.NetworkInfo.getExtraInfo,Get extra info.
android.net.NetworkInfo.getExtraInfo,This method was deprecated in API level 29.
android.net.NetworkInfo.getExtraInfo,Use other services e.g.
android.net.NetworkInfo.getExtraInfo,WifiManager to get additional information passed up from the lower networking layers.
android.net.NetworkInfo.getExtraInfo,Report the extra information about the network state if any was provided by the lower networking layers.
android.net.NetworkInfo.getState,This method was deprecated in API level 28. Apps should instead use the ConnectivityManager.NetworkCallback API to learn about connectivity changes. ConnectivityManager#registerDefaultNetworkCallback and ConnectivityManager#registerNetworkCallback. These will give a more accurate picture of the connectivity state of the device and let apps react more easily and quickly to changes. Reports the current coarse-grained state of the network.
android.net.NetworkInfo.getState,Get state.
android.net.NetworkInfo.getState,This method was deprecated in API level 28.
android.net.NetworkInfo.getState,Apps should instead use the ConnectivityManager.NetworkCallback API to learn about connectivity changes.
android.net.NetworkInfo.getState,ConnectivityManager#registerDefaultNetworkCallback and ConnectivityManager#registerNetworkCallback.
android.net.NetworkInfo.getState,These will give a more accurate picture of the connectivity state of the device and let apps react more easily and quickly to changes.
android.net.NetworkInfo.getState,Reports the current coarse-grained state of the network.
android.net.NetworkInfo.getSubtype,This method was deprecated in API level 29. Use TelephonyManager.getDataNetworkType() instead. Return a network-type-specific integer describing the subtype of the network.
android.net.NetworkInfo.getSubtype,Get subtype.
android.net.NetworkInfo.getSubtype,This method was deprecated in API level 29.
android.net.NetworkInfo.getSubtype,Use TelephonyManager.getDataNetworkType() instead.
android.net.NetworkInfo.getSubtype,Return a network-type-specific integer describing the subtype of the network.
android.net.NetworkInfo.getSubtypeName,This method was deprecated in API level 29. Use TelephonyManager.getDataNetworkType() instead. Return a human-readable name describing the subtype of the network.
android.net.NetworkInfo.getSubtypeName,Get subtype name.
android.net.NetworkInfo.getSubtypeName,This method was deprecated in API level 29.
android.net.NetworkInfo.getSubtypeName,Use TelephonyManager.getDataNetworkType() instead.
android.net.NetworkInfo.getSubtypeName,Return a human-readable name describing the subtype of the network.
android.net.NetworkInfo.getType,This method was deprecated in API level 28. Callers should switch to checking NetworkCapabilities#hasTransport instead with one of the NetworkCapabilities#TRANSPORT_* constants : getType() and getTypeName() cannot account for networks using multiple transports. Note that generally apps should not care about transport; NetworkCapabilities#NET_CAPABILITY_NOT_METERED and NetworkCapabilities#getLinkDownstreamBandwidthKbps are calls that apps concerned with meteredness or bandwidth should be looking at as they offer this information with much better accuracy. Reports the type of network to which the info in this NetworkInfo pertains.
android.net.NetworkInfo.getType,Get type.
android.net.NetworkInfo.getType,This method was deprecated in API level 28.
android.net.NetworkInfo.getType,Callers should switch to checking NetworkCapabilities#hasTransport instead with one of the NetworkCapabilities#TRANSPORT_* constants : getType() and getTypeName() cannot account for networks using multiple transports.
android.net.NetworkInfo.getType,Note that generally apps should not care about transport; NetworkCapabilities#NET_CAPABILITY_NOT_METERED and NetworkCapabilities#getLinkDownstreamBandwidthKbps are calls that apps concerned with meteredness or bandwidth should be looking at as they offer this information with much better accuracy.
android.net.NetworkInfo.getType,Reports the type of network to which the info in this NetworkInfo pertains.
android.net.NetworkInfo.getTypeName,"This method was deprecated in API level 28. Callers should switch to checking NetworkCapabilities#hasTransport instead with one of the NetworkCapabilities#TRANSPORT_* constants : getType() and getTypeName() cannot account for networks using multiple transports. Note that generally apps should not care about transport; NetworkCapabilities#NET_CAPABILITY_NOT_METERED and NetworkCapabilities#getLinkDownstreamBandwidthKbps are calls that apps concerned with meteredness or bandwidth should be looking at as they offer this information with much better accuracy. Return a human-readable name describe the type of the network for example ""WIFI"" or ""MOBILE""."
android.net.NetworkInfo.getTypeName,Get type name.
android.net.NetworkInfo.getTypeName,This method was deprecated in API level 28.
android.net.NetworkInfo.getTypeName,Callers should switch to checking NetworkCapabilities#hasTransport instead with one of the NetworkCapabilities#TRANSPORT_* constants : getType() and getTypeName() cannot account for networks using multiple transports.
android.net.NetworkInfo.getTypeName,Note that generally apps should not care about transport; NetworkCapabilities#NET_CAPABILITY_NOT_METERED and NetworkCapabilities#getLinkDownstreamBandwidthKbps are calls that apps concerned with meteredness or bandwidth should be looking at as they offer this information with much better accuracy.
android.net.NetworkInfo.getTypeName,"Return a human-readable name describe the type of the network for example ""WIFI"" or ""MOBILE""."
android.net.NetworkInfo.isAvailable,This method was deprecated in API level 28. Apps should instead use the ConnectivityManager.NetworkCallback API to learn about connectivity changes. ConnectivityManager#registerDefaultNetworkCallback and ConnectivityManager#registerNetworkCallback. These will give a more accurate picture of the connectivity state of the device and let apps react more easily and quickly to changes. Indicates whether network connectivity is possible. A network is unavailable when a persistent or semi-persistent condition prevents the possibility of connecting to that network. Examples include The device is out of the coverage area for any network of this type. The device is on a network other than the home network (i.e. roaming) and data roaming has been disabled. The device's radio is turned off e.g. because airplane mode is enabled.
android.net.NetworkInfo.isAvailable,Is available.
android.net.NetworkInfo.isAvailable,This method was deprecated in API level 28.
android.net.NetworkInfo.isAvailable,Apps should instead use the ConnectivityManager.NetworkCallback API to learn about connectivity changes.
android.net.NetworkInfo.isAvailable,ConnectivityManager#registerDefaultNetworkCallback and ConnectivityManager#registerNetworkCallback.
android.net.NetworkInfo.isAvailable,These will give a more accurate picture of the connectivity state of the device and let apps react more easily and quickly to changes.
android.net.NetworkInfo.isAvailable,Indicates whether network connectivity is possible.
android.net.NetworkInfo.isAvailable,A network is unavailable when a persistent or semi-persistent condition prevents the possibility of connecting to that network.
android.net.NetworkInfo.isAvailable,Examples include The device is out of the coverage area for any network of this type.
android.net.NetworkInfo.isAvailable,The device is on a network other than the home network (i.e.
android.net.NetworkInfo.isAvailable,roaming) and data roaming has been disabled.
android.net.NetworkInfo.isAvailable,The device's radio is turned off e.g.
android.net.NetworkInfo.isAvailable,because airplane mode is enabled.
android.net.NetworkInfo.isConnected,This method was deprecated in API level 29. Apps should instead use the ConnectivityManager.NetworkCallback API to learn about connectivity changes. See ConnectivityManager#registerDefaultNetworkCallback and ConnectivityManager#registerNetworkCallback. These will give a more accurate picture of the connectivity state of the device and let apps react more easily and quickly to changes. Indicates whether network connectivity exists and it is possible to establish connections and pass data. Always call this before attempting to perform data transactions.
android.net.NetworkInfo.isConnected,Is connected.
android.net.NetworkInfo.isConnected,This method was deprecated in API level 29.
android.net.NetworkInfo.isConnected,Apps should instead use the ConnectivityManager.NetworkCallback API to learn about connectivity changes.
android.net.NetworkInfo.isConnected,See ConnectivityManager#registerDefaultNetworkCallback and ConnectivityManager#registerNetworkCallback.
android.net.NetworkInfo.isConnected,These will give a more accurate picture of the connectivity state of the device and let apps react more easily and quickly to changes.
android.net.NetworkInfo.isConnected,Indicates whether network connectivity exists and it is possible to establish connections and pass data.
android.net.NetworkInfo.isConnected,Always call this before attempting to perform data transactions.
android.net.NetworkInfo.isConnectedOrConnecting,This method was deprecated in API level 28. Apps should instead use the ConnectivityManager.NetworkCallback API to learn about connectivity changes. ConnectivityManager#registerDefaultNetworkCallback and ConnectivityManager#registerNetworkCallback. These will give a more accurate picture of the connectivity state of the device and let apps react more easily and quickly to changes. Indicates whether network connectivity exists or is in the process of being established. This is good for applications that need to do anything related to the network other than read or write data. For the latter call isConnected() instead which guarantees that the network is fully usable.
android.net.NetworkInfo.isConnectedOrConnecting,Is connected or connecting.
android.net.NetworkInfo.isConnectedOrConnecting,This method was deprecated in API level 28.
android.net.NetworkInfo.isConnectedOrConnecting,Apps should instead use the ConnectivityManager.NetworkCallback API to learn about connectivity changes.
android.net.NetworkInfo.isConnectedOrConnecting,ConnectivityManager#registerDefaultNetworkCallback and ConnectivityManager#registerNetworkCallback.
android.net.NetworkInfo.isConnectedOrConnecting,These will give a more accurate picture of the connectivity state of the device and let apps react more easily and quickly to changes.
android.net.NetworkInfo.isConnectedOrConnecting,Indicates whether network connectivity exists or is in the process of being established.
android.net.NetworkInfo.isConnectedOrConnecting,This is good for applications that need to do anything related to the network other than read or write data.
android.net.NetworkInfo.isConnectedOrConnecting,For the latter call isConnected() instead which guarantees that the network is fully usable.
android.net.NetworkInfo.isFailover,This method was deprecated in API level 28. This field is not populated in recent Android releases and does not make a lot of sense in a multi-network world. Indicates whether the current attempt to connect to the network resulted from the ConnectivityManager trying to fail over to this network following a disconnect from another network.
android.net.NetworkInfo.isFailover,Is failover.
android.net.NetworkInfo.isFailover,This method was deprecated in API level 28.
android.net.NetworkInfo.isFailover,This field is not populated in recent Android releases and does not make a lot of sense in a multi-network world.
android.net.NetworkInfo.isFailover,Indicates whether the current attempt to connect to the network resulted from the ConnectivityManager trying to fail over to this network following a disconnect from another network.
android.net.NetworkInfo.isRoaming,This method was deprecated in API level 28. Callers should switch to checking NetworkCapabilities#NET_CAPABILITY_NOT_ROAMING instead since that handles more complex situations such as VPNs. Indicates whether the device is currently roaming on this network. When true it suggests that use of data on this network may incur extra costs.
android.net.NetworkInfo.isRoaming,Is roaming.
android.net.NetworkInfo.isRoaming,This method was deprecated in API level 28.
android.net.NetworkInfo.isRoaming,Callers should switch to checking NetworkCapabilities#NET_CAPABILITY_NOT_ROAMING instead since that handles more complex situations such as VPNs.
android.net.NetworkInfo.isRoaming,Indicates whether the device is currently roaming on this network.
android.net.NetworkInfo.isRoaming,When true it suggests that use of data on this network may incur extra costs.
android.net.Proxy.getDefaultHost,This method was deprecated in API level 15. Use standard java vm proxy values to find the host port and exclusion list. This call ignores the exclusion list and no longer reports only mobile-data apn-based proxy values. Return the default proxy host specified by the carrier.
android.net.Proxy.getDefaultHost,Get default host.
android.net.Proxy.getDefaultHost,This method was deprecated in API level 15.
android.net.Proxy.getDefaultHost,Use standard java vm proxy values to find the host port and exclusion list.
android.net.Proxy.getDefaultHost,This call ignores the exclusion list and no longer reports only mobile-data apn-based proxy values.
android.net.Proxy.getDefaultHost,Return the default proxy host specified by the carrier.
android.net.Proxy.getHost,This method was deprecated in API level 15. Use standard java vm proxy values to find the host port and exclusion list. This call ignores the exclusion list. Return the proxy host set by the user.
android.net.Proxy.getHost,Get host.
android.net.Proxy.getHost,This method was deprecated in API level 15.
android.net.Proxy.getHost,Use standard java vm proxy values to find the host port and exclusion list.
android.net.Proxy.getHost,This call ignores the exclusion list.
android.net.Proxy.getHost,Return the proxy host set by the user.
android.net.TrafficStats.clearThreadStatsTag,Clear any active tag set to account Socket traffic originating from the current thread.
android.net.TrafficStats.clearThreadStatsTag,Clear thread stats tag.
android.net.TrafficStats.getThreadStatsTag,Get the active tag used when accounting Socket traffic originating from the current thread. Only one active tag per thread is supported. tagSocket(java.net.Socket).
android.net.TrafficStats.getThreadStatsTag,Get thread stats tag.
android.net.TrafficStats.getThreadStatsTag,Get the active tag used when accounting Socket traffic originating from the current thread.
android.net.TrafficStats.getThreadStatsTag,Only one active tag per thread is supported.
android.net.TrafficStats.getThreadStatsTag,tagSocket(java.net.Socket).
android.net.TrafficStats.getTotalRxBytes,Return number of bytes received since device boot. Counts packets across all network interfaces and always increases monotonically since device boot. Statistics are measured at the network layer so they include both TCP and UDP usage. Before Build.VERSION_CODES.JELLY_BEAN_MR2 this may return UNSUPPORTED on devices where statistics aren't available.
android.net.TrafficStats.getTotalRxBytes,Get total rx bytes.
android.net.TrafficStats.getTotalRxBytes,Return number of bytes received since device boot.
android.net.TrafficStats.getTotalRxBytes,Counts packets across all network interfaces and always increases monotonically since device boot.
android.net.TrafficStats.getTotalRxBytes,Statistics are measured at the network layer so they include both TCP and UDP usage.
android.net.TrafficStats.getTotalRxBytes,Before Build.VERSION_CODES.JELLY_BEAN_MR2 this may return UNSUPPORTED on devices where statistics aren't available.
android.net.TrafficStats.getTotalTxBytes,Return number of bytes transmitted since device boot. Counts packets across all network interfaces and always increases monotonically since device boot. Statistics are measured at the network layer so they include both TCP and UDP usage. Before Build.VERSION_CODES.JELLY_BEAN_MR2 this may return UNSUPPORTED on devices where statistics aren't available.
android.net.TrafficStats.getTotalTxBytes,Get total tx bytes.
android.net.TrafficStats.getTotalTxBytes,Return number of bytes transmitted since device boot.
android.net.TrafficStats.getTotalTxBytes,Counts packets across all network interfaces and always increases monotonically since device boot.
android.net.TrafficStats.getTotalTxBytes,Statistics are measured at the network layer so they include both TCP and UDP usage.
android.net.TrafficStats.getTotalTxBytes,Before Build.VERSION_CODES.JELLY_BEAN_MR2 this may return UNSUPPORTED on devices where statistics aren't available.
android.net.TrafficStats.getUidRxBytes,Return number of bytes received by the given UID since device boot. Counts packets across all network interfaces and always increases monotonically since device boot. Statistics are measured at the network layer so they include both TCP and UDP usage. Before Build.VERSION_CODES.JELLY_BEAN_MR2 this may return UNSUPPORTED on devices where statistics aren't available. Starting in Build.VERSION_CODES.N this will only report traffic statistics for the calling UID. It will return UNSUPPORTED for all other UIDs for privacy reasons. To access historical network statistics belonging to other UIDs use NetworkStatsManager.
android.net.TrafficStats.getUidRxBytes,Get uid rx bytes.
android.net.TrafficStats.getUidRxBytes,Return number of bytes received by the given UID since device boot.
android.net.TrafficStats.getUidRxBytes,Counts packets across all network interfaces and always increases monotonically since device boot.
android.net.TrafficStats.getUidRxBytes,Statistics are measured at the network layer so they include both TCP and UDP usage.
android.net.TrafficStats.getUidRxBytes,Before Build.VERSION_CODES.JELLY_BEAN_MR2 this may return UNSUPPORTED on devices where statistics aren't available.
android.net.TrafficStats.getUidRxBytes,Starting in Build.VERSION_CODES.N this will only report traffic statistics for the calling UID.
android.net.TrafficStats.getUidRxBytes,It will return UNSUPPORTED for all other UIDs for privacy reasons.
android.net.TrafficStats.getUidRxBytes,To access historical network statistics belonging to other UIDs use NetworkStatsManager.
android.net.TrafficStats.getUidTxBytes,Return number of bytes transmitted by the given UID since device boot. Counts packets across all network interfaces and always increases monotonically since device boot. Statistics are measured at the network layer so they include both TCP and UDP usage. Before Build.VERSION_CODES.JELLY_BEAN_MR2 this may return UNSUPPORTED on devices where statistics aren't available. Starting in Build.VERSION_CODES.N this will only report traffic statistics for the calling UID. It will return UNSUPPORTED for all other UIDs for privacy reasons. To access historical network statistics belonging to other UIDs use NetworkStatsManager.
android.net.TrafficStats.getUidTxBytes,Get uid tx bytes.
android.net.TrafficStats.getUidTxBytes,Return number of bytes transmitted by the given UID since device boot.
android.net.TrafficStats.getUidTxBytes,Counts packets across all network interfaces and always increases monotonically since device boot.
android.net.TrafficStats.getUidTxBytes,Statistics are measured at the network layer so they include both TCP and UDP usage.
android.net.TrafficStats.getUidTxBytes,Before Build.VERSION_CODES.JELLY_BEAN_MR2 this may return UNSUPPORTED on devices where statistics aren't available.
android.net.TrafficStats.getUidTxBytes,Starting in Build.VERSION_CODES.N this will only report traffic statistics for the calling UID.
android.net.TrafficStats.getUidTxBytes,It will return UNSUPPORTED for all other UIDs for privacy reasons.
android.net.TrafficStats.getUidTxBytes,To access historical network statistics belonging to other UIDs use NetworkStatsManager.
android.net.TrafficStats.incrementOperationCount,Increment count of network operations performed under the accounting tag currently active on the calling thread. This can be used to derive bytes-per-operation.
android.net.TrafficStats.incrementOperationCount,Increment operation count.
android.net.TrafficStats.incrementOperationCount,Increment count of network operations performed under the accounting tag currently active on the calling thread.
android.net.TrafficStats.incrementOperationCount,This can be used to derive bytes-per-operation.
android.net.TrafficStats.incrementOperationCount,Increment count of network operations performed under the given accounting tag. This can be used to derive bytes-per-operation.
android.net.TrafficStats.incrementOperationCount,Increment operation count.
android.net.TrafficStats.incrementOperationCount,Increment count of network operations performed under the given accounting tag.
android.net.TrafficStats.incrementOperationCount,This can be used to derive bytes-per-operation.
android.net.TrafficStats.setThreadStatsTag,Set active tag to use when accounting Socket traffic originating from the current thread. Only one active tag per thread is supported. Changes only take effect during subsequent calls to tagSocket(java.net.Socket). Tags between 0xFFFFFF00 and 0xFFFFFFFF are reserved and used internally by system services like DownloadManager when performing traffic on behalf of an application.
android.net.TrafficStats.setThreadStatsTag,Set thread stats tag.
android.net.TrafficStats.setThreadStatsTag,Set active tag to use when accounting Socket traffic originating from the current thread.
android.net.TrafficStats.setThreadStatsTag,Only one active tag per thread is supported.
android.net.TrafficStats.setThreadStatsTag,Changes only take effect during subsequent calls to tagSocket(java.net.Socket).
android.net.TrafficStats.setThreadStatsTag,Tags between 0xFFFFFF00 and 0xFFFFFFFF are reserved and used internally by system services like DownloadManager when performing traffic on behalf of an application.
android.net.TrafficStats.tagSocket,Tag the given Socket with any statistics parameters active for the current thread. Subsequent calls always replace any existing parameters. When finished call untagSocket(java.net.Socket) to remove statistics parameters.
android.net.TrafficStats.tagSocket,Tag socket.
android.net.TrafficStats.tagSocket,Tag the given Socket with any statistics parameters active for the current thread.
android.net.TrafficStats.tagSocket,Subsequent calls always replace any existing parameters.
android.net.TrafficStats.tagSocket,When finished call untagSocket(java.net.Socket) to remove statistics parameters.
android.net.TrafficStats.untagSocket,Remove any statistics parameters from the given Socket. In Android 8.1 (API level 27) and lower a socket is automatically untagged when it's sent to another process using binder IPC with a ParcelFileDescriptor container. In Android 9.0 (API level 28) and higher the socket tag is kept when the socket is sent to another process using binder IPC. You can mimic the previous behavior by calling untagSocket() before sending the socket to another process.
android.net.TrafficStats.untagSocket,Untag socket.
android.net.TrafficStats.untagSocket,Remove any statistics parameters from the given Socket.
android.net.TrafficStats.untagSocket,In Android 8.1 (API level 27) and lower a socket is automatically untagged when it's sent to another process using binder IPC with a ParcelFileDescriptor container.
android.net.TrafficStats.untagSocket,In Android 9.0 (API level 28) and higher the socket tag is kept when the socket is sent to another process using binder IPC.
android.net.TrafficStats.untagSocket,You can mimic the previous behavior by calling untagSocket() before sending the socket to another process.
android.net.Uri.buildUpon,Constructs a new builder copying the attributes from this Uri.
android.net.Uri.buildUpon,Build upon.
android.net.Uri.decode,"Decodes '%'-escaped octets in the given string using the UTF-8 scheme. Replaces invalid octets with the unicode replacement character (""\\uFFFD"")."
android.net.Uri.decode,Decode.
android.net.Uri.decode,Decodes '%'-escaped octets in the given string using the UTF-8 scheme.
android.net.Uri.decode,"Replaces invalid octets with the unicode replacement character (""\\uFFFD"")."
android.net.Uri.encode,"Encodes characters in the given string as '%'-escaped octets using the UTF-8 scheme. Leaves letters (""A-Z"" ""a-z"") numbers (""0-9"") and unreserved characters (""_-!.~'()*"") intact. Encodes all other characters with the exception of those specified in the allow argument."
android.net.Uri.encode,Encode.
android.net.Uri.encode,Encodes characters in the given string as '%'-escaped octets using the UTF-8 scheme.
android.net.Uri.encode,"Leaves letters (""A-Z"" ""a-z"") numbers (""0-9"") and unreserved characters (""_-!.~'()*"") intact."
android.net.Uri.encode,Encodes all other characters with the exception of those specified in the allow argument.
android.net.Uri.encode,"Encodes characters in the given string as '%'-escaped octets using the UTF-8 scheme. Leaves letters (""A-Z"" ""a-z"") numbers (""0-9"") and unreserved characters (""_-!.~'()*"") intact. Encodes all other characters."
android.net.Uri.encode,Encode.
android.net.Uri.encode,Encodes characters in the given string as '%'-escaped octets using the UTF-8 scheme.
android.net.Uri.encode,"Leaves letters (""A-Z"" ""a-z"") numbers (""0-9"") and unreserved characters (""_-!.~'()*"") intact."
android.net.Uri.encode,Encodes all other characters.
android.net.Uri.equals,Compares this Uri to another object for equality. Returns true if the encoded string representations of this Uri and the given Uri are equal. Case counts. Paths are not normalized. If one Uri specifies a default port explicitly and the other leaves it implicit they will not be considered equal.
android.net.Uri.equals,Equals.
android.net.Uri.equals,Compares this Uri to another object for equality.
android.net.Uri.equals,Returns true if the encoded string representations of this Uri and the given Uri are equal.
android.net.Uri.equals,Case counts.
android.net.Uri.equals,Paths are not normalized.
android.net.Uri.equals,If one Uri specifies a default port explicitly and the other leaves it implicit they will not be considered equal.
android.net.Uri.fromFile,"Creates a Uri from a file. The URI has the form ""file:// "". Encodes path characters with the exception of '/'. Example: ""file:///tmp/android.txt""."
android.net.Uri.fromFile,From file.
android.net.Uri.fromFile,Creates a Uri from a file.
android.net.Uri.fromFile,"The URI has the form ""file:// ""."
android.net.Uri.fromFile,Encodes path characters with the exception of '/'.
android.net.Uri.fromFile,"Example: ""file:///tmp/android.txt""."
android.net.Uri.fromParts,Creates an opaque Uri from the given components. Encodes the ssp which means this method cannot be used to create hierarchical URIs.
android.net.Uri.fromParts,From parts.
android.net.Uri.fromParts,Creates an opaque Uri from the given components.
android.net.Uri.fromParts,Encodes the ssp which means this method cannot be used to create hierarchical URIs.
android.net.Uri.getAuthority,"Gets the decoded authority part of this URI. For server addresses the authority is structured as follows: [ userinfo '@' ] host [ ':' port ] Examples: ""google.com"" ""bob@google.com:80""."
android.net.Uri.getAuthority,Get authority.
android.net.Uri.getAuthority,Gets the decoded authority part of this URI.
android.net.Uri.getAuthority,"For server addresses the authority is structured as follows: [ userinfo '@' ] host [ ':' port ] Examples: ""google.com"" ""bob@google.com:80""."
android.net.Uri.getEncodedFragment,Gets the encoded fragment part of this URI everything after the '#'.
android.net.Uri.getEncodedFragment,Get encoded fragment.
android.net.Uri.getEncodedPath,Gets the encoded path.
android.net.Uri.getEncodedPath,Get encoded path.
android.net.Uri.getEncodedQuery,"Gets the encoded query component from this URI. The query comes after the query separator ('?') and before the fragment separator ('#'). This method would return ""q=android"" for ""http://www.google.com/search?q=android""."
android.net.Uri.getEncodedQuery,Get encoded query.
android.net.Uri.getEncodedQuery,Gets the encoded query component from this URI.
android.net.Uri.getEncodedQuery,The query comes after the query separator ('?') and before the fragment separator ('#').
android.net.Uri.getEncodedQuery,"This method would return ""q=android"" for ""http://www.google.com/search?q=android""."
android.net.Uri.getEncodedSchemeSpecificPart,"Gets the scheme-specific part of this URI i.e. everything between the scheme separator ':' and the fragment separator '#'. If this is a relative URI this method returns the entire URI. Leaves escaped octets intact. Example: ""//www.google.com/search?q=android""."
android.net.Uri.getEncodedSchemeSpecificPart,Get encoded scheme specific part.
android.net.Uri.getEncodedSchemeSpecificPart,Gets the scheme-specific part of this URI i.e.
android.net.Uri.getEncodedSchemeSpecificPart,everything between the scheme separator ':' and the fragment separator '#'.
android.net.Uri.getEncodedSchemeSpecificPart,If this is a relative URI this method returns the entire URI.
android.net.Uri.getEncodedSchemeSpecificPart,Leaves escaped octets intact.
android.net.Uri.getEncodedSchemeSpecificPart,"Example: ""//www.google.com/search?q=android""."
android.net.Uri.getFragment,Gets the decoded fragment part of this URI everything after the '#'.
android.net.Uri.getFragment,Get fragment.
android.net.Uri.getHost,"Gets the encoded host from the authority for this URI. For example if the authority is ""bob@google.com"" this method will return ""google.com""."
android.net.Uri.getHost,Get host.
android.net.Uri.getHost,Gets the encoded host from the authority for this URI.
android.net.Uri.getHost,"For example if the authority is ""bob@google.com"" this method will return ""google.com""."
android.net.Uri.getLastPathSegment,Gets the decoded last segment in the path.
android.net.Uri.getLastPathSegment,Get last path segment.
android.net.Uri.getPath,Gets the decoded path.
android.net.Uri.getPath,Get path.
android.net.Uri.getPathSegments,Gets the decoded path segments.
android.net.Uri.getPathSegments,Get path segments.
android.net.Uri.getPort,"Gets the port from the authority for this URI. For example if the authority is ""google.com:80"" this method will return 80."
android.net.Uri.getPort,Get port.
android.net.Uri.getPort,Gets the port from the authority for this URI.
android.net.Uri.getPort,"For example if the authority is ""google.com:80"" this method will return 80."
android.net.Uri.getQuery,"Gets the decoded query component from this URI. The query comes after the query separator ('?') and before the fragment separator ('#'). This method would return ""q=android"" for ""http://www.google.com/search?q=android""."
android.net.Uri.getQuery,Get query.
android.net.Uri.getQuery,Gets the decoded query component from this URI.
android.net.Uri.getQuery,The query comes after the query separator ('?') and before the fragment separator ('#').
android.net.Uri.getQuery,"This method would return ""q=android"" for ""http://www.google.com/search?q=android""."
android.net.Uri.getQueryParameter,Searches the query string for the first value with the given key. Warning: Prior to Jelly Bean this decoded the '+' character as '+' rather than ' '.
android.net.Uri.getQueryParameter,Get query parameter.
android.net.Uri.getQueryParameter,Searches the query string for the first value with the given key.
android.net.Uri.getQueryParameter,Warning: Prior to Jelly Bean this decoded the '+' character as '+' rather than ' '.
android.net.Uri.getQueryParameterNames,Returns a set of the unique names of all query parameters. Iterating over the set will return the names in order of their first occurrence.
android.net.Uri.getQueryParameterNames,Get query parameter names.
android.net.Uri.getQueryParameterNames,Returns a set of the unique names of all query parameters.
android.net.Uri.getQueryParameterNames,Iterating over the set will return the names in order of their first occurrence.
android.net.Uri.getQueryParameters,Searches the query string for parameter values with the given key.
android.net.Uri.getQueryParameters,Get query parameters.
android.net.Uri.getScheme,"Gets the scheme of this URI. Example: ""http""."
android.net.Uri.getScheme,Get scheme.
android.net.Uri.getScheme,Gets the scheme of this URI.
android.net.Uri.getScheme,"Example: ""http""."
android.net.Uri.hashCode,Hashes the encoded string represention of this Uri consistently with equals(java.lang.Object).
android.net.Uri.hashCode,Hash code.
android.net.Uri.isAbsolute,Returns true if this URI is absolute i.e. if it contains an explicit scheme.
android.net.Uri.isAbsolute,Is absolute.
android.net.Uri.isAbsolute,Returns true if this URI is absolute i.e.
android.net.Uri.isAbsolute,if it contains an explicit scheme.
android.net.Uri.isHierarchical,"Returns true if this URI is hierarchical like ""http://google.com"". Absolute URIs are hierarchical if the scheme-specific part starts with a '/'. Relative URIs are always hierarchical."
android.net.Uri.isHierarchical,Is hierarchical.
android.net.Uri.isHierarchical,"Returns true if this URI is hierarchical like ""http://google.com""."
android.net.Uri.isHierarchical,Absolute URIs are hierarchical if the scheme-specific part starts with a '/'.
android.net.Uri.isHierarchical,Relative URIs are always hierarchical.
android.net.Uri.isOpaque,"Returns true if this URI is opaque like ""mailto:nobody@google.com"". The scheme-specific part of an opaque URI cannot start with a '/'."
android.net.Uri.isOpaque,Is opaque.
android.net.Uri.isOpaque,"Returns true if this URI is opaque like ""mailto:nobody@google.com""."
android.net.Uri.isOpaque,The scheme-specific part of an opaque URI cannot start with a '/'.
android.net.Uri.isRelative,Returns true if this URI is relative i.e. if it doesn't contain an explicit scheme.
android.net.Uri.isRelative,Is relative.
android.net.Uri.isRelative,Returns true if this URI is relative i.e.
android.net.Uri.isRelative,if it doesn't contain an explicit scheme.
android.net.Uri.parse,Creates a Uri which parses the given encoded URI string.
android.net.Uri.parse,Parse.
android.net.Uri.toString,"Returns the encoded string representation of this URI. Example: ""http://google.com/""."
android.net.Uri.toString,To string.
android.net.Uri.toString,Returns the encoded string representation of this URI.
android.net.Uri.toString,"Example: ""http://google.com/""."
android.net.Uri.withAppendedPath,Creates a new Uri by appending an already-encoded path segment to a base Uri.
android.net.Uri.withAppendedPath,With appended path.
android.net.UrlQuerySanitizer.getAllButNulLegal,Return a value sanitizer that allows everything except Nul ('\0') characters. Script URLs are allowed.
android.net.UrlQuerySanitizer.getAllButNulLegal,Get all but nul legal.
android.net.UrlQuerySanitizer.getAllButNulLegal,Return a value sanitizer that allows everything except Nul ('\0') characters.
android.net.UrlQuerySanitizer.getAllButNulLegal,Script URLs are allowed.
android.net.UrlQuerySanitizer.getParameterList,An array list of all of the parameter-value pairs in the sanitized query in the order they appeared in the query. May contain duplicate parameters. Note: Do not modify this list. Treat it as a read-only list.
android.net.UrlQuerySanitizer.getParameterList,Get parameter list.
android.net.UrlQuerySanitizer.getParameterList,An array list of all of the parameter-value pairs in the sanitized query in the order they appeared in the query.
android.net.UrlQuerySanitizer.getParameterList,May contain duplicate parameters.
android.net.UrlQuerySanitizer.getParameterList,Note: Do not modify this list.
android.net.UrlQuerySanitizer.getParameterList,Treat it as a read-only list.
android.net.UrlQuerySanitizer.getValue,Get the value for a parameter in the current sanitized query. Returns null if the parameter does not exit.
android.net.UrlQuerySanitizer.getValue,Get value.
android.net.UrlQuerySanitizer.getValue,Get the value for a parameter in the current sanitized query.
android.net.UrlQuerySanitizer.getValue,Returns null if the parameter does not exit.
android.net.UrlQuerySanitizer.parseQuery,Parse a query. A query string is any number of parameter-value clauses separated by any non-zero number of ampersands. A parameter-value clause is a parameter followed by an equal sign followed by a value. If the equal sign is missing the value is assumed to be the empty string.
android.net.UrlQuerySanitizer.parseQuery,Parse query.
android.net.UrlQuerySanitizer.parseQuery,Parse a query.
android.net.UrlQuerySanitizer.parseQuery,A query string is any number of parameter-value clauses separated by any non-zero number of ampersands.
android.net.UrlQuerySanitizer.parseQuery,A parameter-value clause is a parameter followed by an equal sign followed by a value.
android.net.UrlQuerySanitizer.parseQuery,If the equal sign is missing the value is assumed to be the empty string.
android.net.UrlQuerySanitizer.parseUrl,Parse the query parameters out of an encoded URL. Works by extracting the query portion from the URL and then calling parseQuery(). If there is no query portion it is treated as if the query portion is an empty string.
android.net.UrlQuerySanitizer.parseUrl,Parse url.
android.net.UrlQuerySanitizer.parseUrl,Parse the query parameters out of an encoded URL.
android.net.UrlQuerySanitizer.parseUrl,Works by extracting the query portion from the URL and then calling parseQuery().
android.net.UrlQuerySanitizer.parseUrl,If there is no query portion it is treated as if the query portion is an empty string.
android.net.UrlQuerySanitizer.setAllowUnregisteredParamaters,Set whether or not unregistered parameters are allowed. If they are not allowed then they will be dropped when a query is sanitized. Defaults to false.
android.net.UrlQuerySanitizer.setAllowUnregisteredParamaters,Set allow unregistered paramaters.
android.net.UrlQuerySanitizer.setAllowUnregisteredParamaters,Set whether or not unregistered parameters are allowed.
android.net.UrlQuerySanitizer.setAllowUnregisteredParamaters,If they are not allowed then they will be dropped when a query is sanitized.
android.net.UrlQuerySanitizer.setAllowUnregisteredParamaters,Defaults to false.
android.print.pdf.PrintedPdfDocument.startPage,Starts a new page. The page is created using width height and content rectangle computed from the print attributes passed in the constructor and the given page number to create an appropriate PageInfo. After the page is created you can draw arbitrary content on the page's canvas which you can get by calling Page.getCanvas(). After you are done drawing the content you should finish the page by calling PdfDocument.finishPage(android.graphics.pdf.PdfDocument.Page). After the page is finished you should no longer access the page or its canvas. Note: Do not call this method after PdfDocument.close(). Also do not call this method if the last page returned by this method is not finished by calling PdfDocument.finishPage(android.graphics.pdf.PdfDocument.Page).
android.print.pdf.PrintedPdfDocument.startPage,Start page.
android.print.pdf.PrintedPdfDocument.startPage,Starts a new page.
android.print.pdf.PrintedPdfDocument.startPage,The page is created using width height and content rectangle computed from the print attributes passed in the constructor and the given page number to create an appropriate PageInfo.
android.print.pdf.PrintedPdfDocument.startPage,After the page is created you can draw arbitrary content on the page's canvas which you can get by calling Page.getCanvas().
android.print.pdf.PrintedPdfDocument.startPage,After you are done drawing the content you should finish the page by calling PdfDocument.finishPage(android.graphics.pdf.PdfDocument.Page).
android.print.pdf.PrintedPdfDocument.startPage,After the page is finished you should no longer access the page or its canvas.
android.print.pdf.PrintedPdfDocument.startPage,Note: Do not call this method after PdfDocument.close().
android.print.pdf.PrintedPdfDocument.startPage,Also do not call this method if the last page returned by this method is not finished by calling PdfDocument.finishPage(android.graphics.pdf.PdfDocument.Page).
android.preference.EditTextPreference.getEditText,Returns the EditText widget that will be shown in the dialog.
android.preference.EditTextPreference.getEditText,Get edit text.
android.preference.ListPreference.findIndexOfValue,Returns the index of the given value (in the entry values array).
android.preference.ListPreference.findIndexOfValue,Find index of value.
android.preference.ListPreference.getEntry,Returns the entry corresponding to the current value.
android.preference.ListPreference.getEntry,Get entry.
android.preference.ListPreference.getSummary,"Returns the summary of this ListPreference. If the summary has a String formatting marker in it (i.e. ""%s"" or ""%1$s"") then the current entry value will be substituted in its place."
android.preference.ListPreference.getSummary,Get summary.
android.preference.ListPreference.getSummary,Returns the summary of this ListPreference.
android.preference.ListPreference.getSummary,If the summary has a String formatting marker in it (i.e.
android.preference.ListPreference.getSummary,"""%s"" or ""%1$s"") then the current entry value will be substituted in its place."
android.preference.ListPreference.setEntries,Sets the human-readable entries to be shown in the list. This will be shown in subsequent dialogs. Each entry must have a corresponding index in setEntryValues(java.lang.CharSequence[]).
android.preference.ListPreference.setEntries,Set entries.
android.preference.ListPreference.setEntries,Sets the human-readable entries to be shown in the list.
android.preference.ListPreference.setEntries,This will be shown in subsequent dialogs.
android.preference.ListPreference.setEntries,Each entry must have a corresponding index in setEntryValues(java.lang.CharSequence[]).
android.preference.ListPreference.setEntries,.
android.preference.ListPreference.setEntries,Set entries.
android.preference.ListPreference.setEntryValues,.
android.preference.ListPreference.setEntryValues,Set entry values.
android.preference.ListPreference.setEntryValues,The array to find the value to save for a preference when an entry from entries is selected. If a user clicks on the second item in entries the second item in this array will be saved to the preference.
android.preference.ListPreference.setEntryValues,Set entry values.
android.preference.ListPreference.setEntryValues,The array to find the value to save for a preference when an entry from entries is selected.
android.preference.ListPreference.setEntryValues,If a user clicks on the second item in entries the second item in this array will be saved to the preference.
android.preference.ListPreference.setSummary,"Sets the summary for this Preference with a CharSequence. If the summary has a String formatting marker in it (i.e. ""%s"" or ""%1$s"") then the current entry value will be substituted in its place when it's retrieved."
android.preference.ListPreference.setSummary,Set summary.
android.preference.ListPreference.setSummary,Sets the summary for this Preference with a CharSequence.
android.preference.ListPreference.setSummary,If the summary has a String formatting marker in it (i.e.
android.preference.ListPreference.setSummary,"""%s"" or ""%1$s"") then the current entry value will be substituted in its place when it's retrieved."
android.preference.ListPreference.setValue,Sets the value of the key. This should be one of the entries in getEntryValues().
android.preference.ListPreference.setValue,Set value.
android.preference.ListPreference.setValue,Sets the value of the key.
android.preference.ListPreference.setValue,This should be one of the entries in getEntryValues().
android.preference.Preference.setEnabled,Sets whether this Preference is enabled. If disabled it will not handle clicks.
android.preference.Preference.setEnabled,Set enabled.
android.preference.Preference.setEnabled,Sets whether this Preference is enabled.
android.preference.Preference.setEnabled,If disabled it will not handle clicks.
android.preference.Preference.setSelectable,Sets whether this Preference is selectable.
android.preference.Preference.setSelectable,Set selectable.
android.preference.Preference.setSummary,Sets the summary for this Preference with a CharSequence.
android.preference.Preference.setSummary,Set summary.
android.preference.Preference.setSummary,Sets the summary for this Preference with a resource ID.
android.preference.Preference.setSummary,Set summary.
android.preference.Preference.setTitle,Sets the title for this Preference with a CharSequence. This title will be placed into the ID R.id.title within the View created by onCreateView(android.view.ViewGroup).
android.preference.Preference.setTitle,Set title.
android.preference.Preference.setTitle,Sets the title for this Preference with a CharSequence.
android.preference.Preference.setTitle,This title will be placed into the ID R.id.title within the View created by onCreateView(android.view.ViewGroup).
android.preference.Preference.setTitle,Sets the title for this Preference with a resource ID.
android.preference.Preference.setTitle,Set title.
android.preference.Preference.setWidgetLayoutResource,Sets the layout for the controllable widget portion of this Preference. This is inflated into the main layout. For example a CheckBoxPreference would specify a custom layout (consisting of just the CheckBox) here instead of creating its own main layout.
android.preference.Preference.setWidgetLayoutResource,Set widget layout resource.
android.preference.Preference.setWidgetLayoutResource,Sets the layout for the controllable widget portion of this Preference.
android.preference.Preference.setWidgetLayoutResource,This is inflated into the main layout.
android.preference.Preference.setWidgetLayoutResource,For example a CheckBoxPreference would specify a custom layout (consisting of just the CheckBox) here instead of creating its own main layout.
android.preference.Preference.shouldDisableDependents,Checks whether this preference's dependents should currently be disabled.
android.preference.Preference.shouldDisableDependents,Should disable dependents.
android.preference.PreferenceActivity.onPreferenceTreeClick,This method was deprecated in API level 15. This function is not relevant for a modern fragment-based PreferenceActivity.
android.preference.PreferenceActivity.onPreferenceTreeClick,On preference tree click.
android.preference.PreferenceActivity.onPreferenceTreeClick,This method was deprecated in API level 15.
android.preference.PreferenceActivity.onPreferenceTreeClick,This function is not relevant for a modern fragment-based PreferenceActivity.
android.preference.PreferenceFragment.findPreference,Finds a Preference based on its key.
android.preference.PreferenceFragment.findPreference,Find preference.
android.preference.PreferenceFragment.onCreateView,Called to have the fragment instantiate its user interface view. This is optional and non-graphical fragments can return null (which is the default implementation). This will be called between onCreate(android.os.Bundle) and onActivityCreated(android.os.Bundle). If you return a View from here you will later be called in onDestroyView() when the view is being released.
android.preference.PreferenceFragment.onCreateView,On create view.
android.preference.PreferenceFragment.onCreateView,Called to have the fragment instantiate its user interface view.
android.preference.PreferenceFragment.onCreateView,This is optional and non-graphical fragments can return null (which is the default implementation).
android.preference.PreferenceFragment.onCreateView,This will be called between onCreate(android.os.Bundle) and onActivityCreated(android.os.Bundle).
android.preference.PreferenceFragment.onCreateView,If you return a View from here you will later be called in onDestroyView() when the view is being released.
android.preference.PreferenceManager.getDefaultSharedPreferences,Gets a SharedPreferences instance that points to the default file that is used by the preference framework in the given context.
android.preference.PreferenceManager.getDefaultSharedPreferences,Get default shared preferences.
android.preference.PreferenceManager.getSharedPreferences,Gets a SharedPreferences instance that preferences managed by this will use.
android.preference.PreferenceManager.getSharedPreferences,Get shared preferences.
android.preference.PreferenceManager.setDefaultValues,Similar to setDefaultValues(android.content.Context int boolean) but allows the client to provide the filename and mode of the shared preferences file.
android.preference.PreferenceManager.setDefaultValues,Set default values.
android.preference.PreferenceManager.setDefaultValues,Sets the default values from an XML preference file by reading the values defined by each Preference item's android:defaultValue attribute. This should be called by the application's main activity.
android.preference.PreferenceManager.setDefaultValues,Set default values.
android.preference.PreferenceManager.setDefaultValues,Sets the default values from an XML preference file by reading the values defined by each Preference item's android:defaultValue attribute.
android.preference.PreferenceManager.setDefaultValues,This should be called by the application's main activity.
android.preference.PreferenceManager.setSharedPreferencesMode,Sets the mode of the SharedPreferences file that preferences managed by this will use.
android.preference.PreferenceManager.setSharedPreferencesMode,Set shared preferences mode.
android.preference.PreferenceManager.setSharedPreferencesName,Sets the name of the SharedPreferences file that preferences managed by this will use. If custom PreferenceDataStore is set this won't override its usage.
android.preference.PreferenceManager.setSharedPreferencesName,Set shared preferences name.
android.preference.PreferenceManager.setSharedPreferencesName,Sets the name of the SharedPreferences file that preferences managed by this will use.
android.preference.PreferenceManager.setSharedPreferencesName,If custom PreferenceDataStore is set this won't override its usage.
android.print.PrintDocumentAdapter.onFinish,Called when printing finishes. You can use this callback to release resources acquired in onStart(). This method is invoked on the main thread.
android.print.PrintDocumentAdapter.onFinish,On finish.
android.print.PrintDocumentAdapter.onFinish,Called when printing finishes.
android.print.PrintDocumentAdapter.onFinish,You can use this callback to release resources acquired in onStart().
android.print.PrintDocumentAdapter.onFinish,This method is invoked on the main thread.
android.print.PrintManager.print,Creates a print job for printing a PrintDocumentAdapter with default print attributes. Calling this method brings the print UI allowing the user to customize the print job and returns a PrintJob object without waiting for the user to customize or confirm the print job. The returned print job instance is in a PrintJobInfo#STATE_CREATED state. This method can be called only from an Activity. The rationale is that printing from a service will create an inconsistent user experience as the print UI would appear without any context. Also the passed in PrintDocumentAdapter will be considered invalid if your activity is finished. The rationale is that once the activity that initiated printing is finished the provided adapter may be in an inconsistent state as it may depend on the UI presented by the activity. The default print attributes are a hint to the system how the data is to be printed. For example a photo editor may look at the photo aspect ratio to determine the default orientation and provide a hint whether the printing should be in portrait or landscape. The system will do a best effort to selected the hinted options in the print dialog given the current printer supports them. Note: Calling this method will bring the print dialog and the system will connect to the provided PrintDocumentAdapter. If a configuration change occurs that you application does not handle for example a rotation change the system will drop the connection to the adapter as the activity has to be recreated and the old adapter may be invalid in this context hence a new adapter instance is required. As a consequence if your activity does not handle configuration changes (default behavior) you have to save the state that you were printing and call this method again when your activity is recreated.
android.print.PrintManager.print,Print.
android.print.PrintManager.print,Creates a print job for printing a PrintDocumentAdapter with default print attributes.
android.print.PrintManager.print,Calling this method brings the print UI allowing the user to customize the print job and returns a PrintJob object without waiting for the user to customize or confirm the print job.
android.print.PrintManager.print,The returned print job instance is in a PrintJobInfo#STATE_CREATED state.
android.print.PrintManager.print,This method can be called only from an Activity.
android.print.PrintManager.print,The rationale is that printing from a service will create an inconsistent user experience as the print UI would appear without any context.
android.print.PrintManager.print,Also the passed in PrintDocumentAdapter will be considered invalid if your activity is finished.
android.print.PrintManager.print,The rationale is that once the activity that initiated printing is finished the provided adapter may be in an inconsistent state as it may depend on the UI presented by the activity.
android.print.PrintManager.print,The default print attributes are a hint to the system how the data is to be printed.
android.print.PrintManager.print,For example a photo editor may look at the photo aspect ratio to determine the default orientation and provide a hint whether the printing should be in portrait or landscape.
android.print.PrintManager.print,The system will do a best effort to selected the hinted options in the print dialog given the current printer supports them.
android.print.PrintManager.print,Note: Calling this method will bring the print dialog and the system will connect to the provided PrintDocumentAdapter.
android.print.PrintManager.print,If a configuration change occurs that you application does not handle for example a rotation change the system will drop the connection to the adapter as the activity has to be recreated and the old adapter may be invalid in this context hence a new adapter instance is required.
android.print.PrintManager.print,As a consequence if your activity does not handle configuration changes (default behavior) you have to save the state that you were printing and call this method again when your activity is recreated.
android.opengl.ETC1.encodeImage,Encode an entire image.
android.opengl.ETC1.encodeImage,Encode image.
android.opengl.ETC1.getEncodedDataSize,Return the size of the encoded image data (does not include size of PKM header).
android.opengl.ETC1.getEncodedDataSize,Get encoded data size.
android.opengl.ETC1Util.createTexture,Create a new ETC1Texture from an input stream containing a PKM formatted compressed texture.
android.opengl.ETC1Util.createTexture,Create texture.
android.opengl.ETC1Util.isETC1Supported,Check if ETC1 texture compression is supported by the active OpenGL ES context.
android.opengl.ETC1Util.isETC1Supported,Is e t c 1 supported.
android.opengl.GLDebugHelper.wrap,Wrap an existing EGL interface in a new EGL interface that adds support for error checking and/or logging.
android.opengl.GLDebugHelper.wrap,Wrap.
android.opengl.GLDebugHelper.wrap,.
android.opengl.GLDebugHelper.wrap,Wrap.
android.opengl.GLSurfaceView.onPause,Pause the rendering thread optionally tearing down the EGL context depending upon the value of setPreserveEGLContextOnPause(boolean). This method should be called when it is no longer desirable for the GLSurfaceView to continue rendering such as in response to Activity.onStop. Must not be called before a renderer has been set.
android.opengl.GLSurfaceView.onPause,On pause.
android.opengl.GLSurfaceView.onPause,Pause the rendering thread optionally tearing down the EGL context depending upon the value of setPreserveEGLContextOnPause(boolean).
android.opengl.GLSurfaceView.onPause,This method should be called when it is no longer desirable for the GLSurfaceView to continue rendering such as in response to Activity.onStop.
android.opengl.GLSurfaceView.onPause,Must not be called before a renderer has been set.
android.opengl.GLSurfaceView.onResume,Resumes the rendering thread re-creating the OpenGL context if necessary. It is the counterpart to onPause(). This method should typically be called in Activity.onStart. Must not be called before a renderer has been set.
android.opengl.GLSurfaceView.onResume,On resume.
android.opengl.GLSurfaceView.onResume,Resumes the rendering thread re-creating the OpenGL context if necessary.
android.opengl.GLSurfaceView.onResume,It is the counterpart to onPause().
android.opengl.GLSurfaceView.onResume,This method should typically be called in Activity.onStart.
android.opengl.GLSurfaceView.onResume,Must not be called before a renderer has been set.
android.opengl.GLSurfaceView.queueEvent,Queue a runnable to be run on the GL rendering thread. This can be used to communicate with the Renderer on the rendering thread. Must not be called before a renderer has been set.
android.opengl.GLSurfaceView.queueEvent,Queue event.
android.opengl.GLSurfaceView.queueEvent,Queue a runnable to be run on the GL rendering thread.
android.opengl.GLSurfaceView.queueEvent,This can be used to communicate with the Renderer on the rendering thread.
android.opengl.GLSurfaceView.queueEvent,Must not be called before a renderer has been set.
android.opengl.GLSurfaceView.requestRender,Request that the renderer render a frame. This method is typically used when the render mode has been set to RENDERMODE_WHEN_DIRTY so that frames are only rendered on demand. May be called from any thread. Must not be called before a renderer has been set.
android.opengl.GLSurfaceView.requestRender,Request render.
android.opengl.GLSurfaceView.requestRender,Request that the renderer render a frame.
android.opengl.GLSurfaceView.requestRender,This method is typically used when the render mode has been set to RENDERMODE_WHEN_DIRTY so that frames are only rendered on demand.
android.opengl.GLSurfaceView.requestRender,May be called from any thread.
android.opengl.GLSurfaceView.requestRender,Must not be called before a renderer has been set.
android.opengl.GLSurfaceView.setPreserveEGLContextOnPause,Control whether the EGL context is preserved when the GLSurfaceView is paused and resumed. If set to true then the EGL context may be preserved when the GLSurfaceView is paused. Prior to API level 11 whether the EGL context is actually preserved or not depends upon whether the Android device can support an arbitrary number of EGL contexts or not. Devices that can only support a limited number of EGL contexts must release the EGL context in order to allow multiple applications to share the GPU. If set to false the EGL context will be released when the GLSurfaceView is paused and recreated when the GLSurfaceView is resumed. The default is false.
android.opengl.GLSurfaceView.setPreserveEGLContextOnPause,Set preserve e g l context on pause.
android.opengl.GLSurfaceView.setPreserveEGLContextOnPause,Control whether the EGL context is preserved when the GLSurfaceView is paused and resumed.
android.opengl.GLSurfaceView.setPreserveEGLContextOnPause,If set to true then the EGL context may be preserved when the GLSurfaceView is paused.
android.opengl.GLSurfaceView.setPreserveEGLContextOnPause,Prior to API level 11 whether the EGL context is actually preserved or not depends upon whether the Android device can support an arbitrary number of EGL contexts or not.
android.opengl.GLSurfaceView.setPreserveEGLContextOnPause,Devices that can only support a limited number of EGL contexts must release the EGL context in order to allow multiple applications to share the GPU.
android.opengl.GLSurfaceView.setPreserveEGLContextOnPause,If set to false the EGL context will be released when the GLSurfaceView is paused and recreated when the GLSurfaceView is resumed.
android.opengl.GLSurfaceView.setPreserveEGLContextOnPause,The default is false.
android.opengl.GLSurfaceView.setRenderMode,Set the rendering mode. When renderMode is RENDERMODE_CONTINUOUSLY the renderer is called repeatedly to re-render the scene. When renderMode is RENDERMODE_WHEN_DIRTY the renderer only rendered when the surface is created or when requestRender() is called. Defaults to RENDERMODE_CONTINUOUSLY. Using RENDERMODE_WHEN_DIRTY can improve battery life and overall system performance by allowing the GPU and CPU to idle when the view does not need to be updated. This method can only be called after setRenderer(android.opengl.GLSurfaceView.Renderer).
android.opengl.GLSurfaceView.setRenderMode,Set render mode.
android.opengl.GLSurfaceView.setRenderMode,Set the rendering mode.
android.opengl.GLSurfaceView.setRenderMode,When renderMode is RENDERMODE_CONTINUOUSLY the renderer is called repeatedly to re-render the scene.
android.opengl.GLSurfaceView.setRenderMode,When renderMode is RENDERMODE_WHEN_DIRTY the renderer only rendered when the surface is created or when requestRender() is called.
android.opengl.GLSurfaceView.setRenderMode,Defaults to RENDERMODE_CONTINUOUSLY.
android.opengl.GLSurfaceView.setRenderMode,Using RENDERMODE_WHEN_DIRTY can improve battery life and overall system performance by allowing the GPU and CPU to idle when the view does not need to be updated.
android.opengl.GLSurfaceView.setRenderMode,This method can only be called after setRenderer(android.opengl.GLSurfaceView.Renderer).
android.opengl.GLSurfaceView.surfaceCreated,This method is part of the SurfaceHolder.Callback interface and is not normally called or subclassed by clients of GLSurfaceView.
android.opengl.GLSurfaceView.surfaceCreated,Surface created.
android.opengl.GLU.gluOrtho2D,Set up a 2D orthographic projection matrix.
android.opengl.GLU.gluOrtho2D,Glu ortho 2 d.
android.opengl.GLUtils.getEGLErrorString,Return a string for the EGL error code or the hex representation if the error is unknown.
android.opengl.GLUtils.getEGLErrorString,Get e g l error string.
android.opengl.GLUtils.getInternalFormat,return the internal format as defined by OpenGL ES of the supplied bitmap.
android.opengl.GLUtils.getInternalFormat,Get internal format.
android.opengl.GLUtils.getType,Return the type as defined by OpenGL ES of the supplied bitmap if there is one. If the bitmap is stored in a compressed format it may not have a valid OpenGL ES type.
android.opengl.GLUtils.getType,Get type.
android.opengl.GLUtils.getType,Return the type as defined by OpenGL ES of the supplied bitmap if there is one.
android.opengl.GLUtils.getType,If the bitmap is stored in a compressed format it may not have a valid OpenGL ES type.
android.opengl.GLUtils.texImage2D,A version of texImage2D that determines the internalFormat and type automatically.
android.opengl.GLUtils.texImage2D,Tex image 2 d.
android.opengl.GLUtils.texImage2D,Calls glTexImage2D() on the current OpenGL context. If no context is current the behavior is the same as calling glTexImage2D() with no current context that is eglGetError() will return the appropriate error. Unlike glTexImage2D() bitmap cannot be null and will raise an exception in that case. All other parameters are identical to those used for glTexImage2D(). NOTE: this method doesn't change GL_UNPACK_ALIGNMENT you must make sure to set it properly according to the supplied bitmap. Whether or not bitmap can have non power of two dimensions depends on the current OpenGL context. Always check glGetError() some time after calling this method just like when using OpenGL directly.
android.opengl.GLUtils.texImage2D,Tex image 2 d.
android.opengl.GLUtils.texImage2D,Calls glTexImage2D() on the current OpenGL context.
android.opengl.GLUtils.texImage2D,If no context is current the behavior is the same as calling glTexImage2D() with no current context that is eglGetError() will return the appropriate error.
android.opengl.GLUtils.texImage2D,Unlike glTexImage2D() bitmap cannot be null and will raise an exception in that case.
android.opengl.GLUtils.texImage2D,All other parameters are identical to those used for glTexImage2D().
android.opengl.GLUtils.texImage2D,NOTE: this method doesn't change GL_UNPACK_ALIGNMENT you must make sure to set it properly according to the supplied bitmap.
android.opengl.GLUtils.texImage2D,Whether or not bitmap can have non power of two dimensions depends on the current OpenGL context.
android.opengl.GLUtils.texImage2D,Always check glGetError() some time after calling this method just like when using OpenGL directly.
android.opengl.GLUtils.texImage2D,A version of texImage2D() that takes an explicit type parameter as defined by the OpenGL ES specification. The actual type and internalformat of the bitmap must be compatible with the specified type and internalformat parameters.
android.opengl.GLUtils.texImage2D,Tex image 2 d.
android.opengl.GLUtils.texImage2D,A version of texImage2D() that takes an explicit type parameter as defined by the OpenGL ES specification.
android.opengl.GLUtils.texImage2D,The actual type and internalformat of the bitmap must be compatible with the specified type and internalformat parameters.
android.opengl.Matrix.frustumM,Defines a projection matrix in terms of six clip planes.
android.opengl.Matrix.frustumM,Frustum m.
android.opengl.Matrix.multiplyMM,Multiplies two 4x4 matrices together and stores the result in a third 4x4 matrix. In matrix notation: result = lhs x rhs. Due to the way matrix multiplication works the result matrix will have the same effect as first multiplying by the rhs matrix then multiplying by the lhs matrix. This is the opposite of what you might expect. The same float array may be passed for result lhs and/or rhs. However the result element values are undefined if the result elements overlap either the lhs or rhs elements.
android.opengl.Matrix.multiplyMM,Multiply m m.
android.opengl.Matrix.multiplyMM,Multiplies two 4x4 matrices together and stores the result in a third 4x4 matrix.
android.opengl.Matrix.multiplyMM,In matrix notation: result = lhs x rhs.
android.opengl.Matrix.multiplyMM,Due to the way matrix multiplication works the result matrix will have the same effect as first multiplying by the rhs matrix then multiplying by the lhs matrix.
android.opengl.Matrix.multiplyMM,This is the opposite of what you might expect.
android.opengl.Matrix.multiplyMM,The same float array may be passed for result lhs and/or rhs.
android.opengl.Matrix.multiplyMM,However the result element values are undefined if the result elements overlap either the lhs or rhs elements.
android.opengl.Matrix.multiplyMV,Multiplies a 4 element vector by a 4x4 matrix and stores the result in a 4-element column vector. In matrix notation: result = lhs x rhs The same float array may be passed for resultVec lhsMat and/or rhsVec. However the resultVec element values are undefined if the resultVec elements overlap either the lhsMat or rhsVec elements.
android.opengl.Matrix.multiplyMV,Multiply m v.
android.opengl.Matrix.multiplyMV,Multiplies a 4 element vector by a 4x4 matrix and stores the result in a 4-element column vector.
android.opengl.Matrix.multiplyMV,In matrix notation: result = lhs x rhs The same float array may be passed for resultVec lhsMat and/or rhsVec.
android.opengl.Matrix.multiplyMV,However the resultVec element values are undefined if the resultVec elements overlap either the lhsMat or rhsVec elements.
android.opengl.Matrix.orthoM,Computes an orthographic projection matrix.
android.opengl.Matrix.orthoM,Ortho m.
android.opengl.Matrix.rotateM,Rotates matrix m by angle a (in degrees) around the axis (x y z). m and rm must not overlap.
android.opengl.Matrix.rotateM,Rotate m.
android.opengl.Matrix.rotateM,Rotates matrix m by angle a (in degrees) around the axis (x y z).
android.opengl.Matrix.rotateM,m and rm must not overlap.
android.opengl.Matrix.rotateM,Rotates matrix m in place by angle a (in degrees) around the axis (x y z).
android.opengl.Matrix.rotateM,Rotate m.
android.opengl.Matrix.scaleM,Scales matrix m in place by sx sy and sz.
android.opengl.Matrix.scaleM,Scale m.
android.opengl.Matrix.scaleM,Scales matrix m by x y and z putting the result in sm. m and sm must not overlap.
android.opengl.Matrix.scaleM,Scale m.
android.opengl.Matrix.scaleM,Scales matrix m by x y and z putting the result in sm.
android.opengl.Matrix.scaleM,m and sm must not overlap.
android.opengl.Matrix.setIdentityM,Sets matrix m to the identity matrix.
android.opengl.Matrix.setIdentityM,Set identity m.
android.opengl.Matrix.setRotateM,Creates a matrix for rotation by angle a (in degrees) around the axis (x y z). An optimized path will be used for rotation about a major axis (e.g. x=1.0f y=0.0f z=0.0f).
android.opengl.Matrix.setRotateM,Set rotate m.
android.opengl.Matrix.setRotateM,Creates a matrix for rotation by angle a (in degrees) around the axis (x y z).
android.opengl.Matrix.setRotateM,An optimized path will be used for rotation about a major axis (e.g.
android.opengl.Matrix.setRotateM,x=1.0f y=0.0f z=0.0f).
android.opengl.Matrix.translateM,Translates matrix m by x y and z in place.
android.opengl.Matrix.translateM,Translate m.
android.opengl.Matrix.translateM,Translates matrix m by x y and z putting the result in tm. m and tm must not overlap.
android.opengl.Matrix.translateM,Translate m.
android.opengl.Matrix.translateM,Translates matrix m by x y and z putting the result in tm.
android.opengl.Matrix.translateM,m and tm must not overlap.
android.media.AudioAttributes.getFlags,Return the flags.
android.media.AudioAttributes.getFlags,Get flags.
android.media.AudioAttributes.getUsage,Return the usage.
android.media.AudioAttributes.getUsage,Get usage.
android.media.AudioManager.adjustStreamVolume,Adjusts the volume of a particular stream by one step in a direction. This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application. This method has no effect if the device implements a fixed volume policy as indicated by isVolumeFixed(). From N onward ringer mode adjustments that would toggle Do Not Disturb are not allowed unless the app has been granted Do Not Disturb Access. See NotificationManager#isNotificationPolicyAccessGranted().
android.media.AudioManager.adjustStreamVolume,Adjust stream volume.
android.media.AudioManager.adjustStreamVolume,Adjusts the volume of a particular stream by one step in a direction.
android.media.AudioManager.adjustStreamVolume,This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application.
android.media.AudioManager.adjustStreamVolume,This method has no effect if the device implements a fixed volume policy as indicated by isVolumeFixed().
android.media.AudioManager.adjustStreamVolume,From N onward ringer mode adjustments that would toggle Do Not Disturb are not allowed unless the app has been granted Do Not Disturb Access.
android.media.AudioManager.adjustStreamVolume,See NotificationManager#isNotificationPolicyAccessGranted().
android.media.AudioManager.getMode,Returns the current audio mode.
android.media.AudioManager.getMode,Get mode.
android.media.AudioManager.getRingerMode,Returns the current ringtone mode.
android.media.AudioManager.getRingerMode,Get ringer mode.
android.media.AudioManager.getRouting,This method was deprecated in API level 15. Do not query audio routing directly use isSpeakerphoneOn() isBluetoothScoOn() isBluetoothA2dpOn() and isWiredHeadsetOn() methods instead. Returns the current audio routing bit vector for a specified mode.
android.media.AudioManager.getRouting,Get routing.
android.media.AudioManager.getRouting,This method was deprecated in API level 15.
android.media.AudioManager.getRouting,Do not query audio routing directly use isSpeakerphoneOn() isBluetoothScoOn() isBluetoothA2dpOn() and isWiredHeadsetOn() methods instead.
android.media.AudioManager.getRouting,Returns the current audio routing bit vector for a specified mode.
android.media.AudioManager.getStreamMaxVolume,Returns the maximum volume index for a particular stream.
android.media.AudioManager.getStreamMaxVolume,Get stream max volume.
android.media.AudioManager.getStreamVolume,Returns the current volume index for a particular stream.
android.media.AudioManager.getStreamVolume,Get stream volume.
android.media.AudioManager.getVibrateSetting,This method was deprecated in API level 16. Applications should maintain their own vibrate policy based on current ringer mode that can be queried via getRingerMode(). Returns whether the user's vibrate setting for a vibrate type. This shouldn't be needed by most clients that want to vibrate instead see shouldVibrate(int).
android.media.AudioManager.getVibrateSetting,Get vibrate setting.
android.media.AudioManager.getVibrateSetting,This method was deprecated in API level 16.
android.media.AudioManager.getVibrateSetting,Applications should maintain their own vibrate policy based on current ringer mode that can be queried via getRingerMode().
android.media.AudioManager.getVibrateSetting,Returns whether the user's vibrate setting for a vibrate type.
android.media.AudioManager.getVibrateSetting,This shouldn't be needed by most clients that want to vibrate instead see shouldVibrate(int).
android.media.AudioManager.isBluetoothScoOn,Checks whether communications use Bluetooth SCO.
android.media.AudioManager.isBluetoothScoOn,Is bluetooth sco on.
android.media.AudioManager.isMusicActive,Checks whether any music is active.
android.media.AudioManager.isMusicActive,Is music active.
android.media.AudioManager.isSpeakerphoneOn,Checks whether the speakerphone is on or off.
android.media.AudioManager.isSpeakerphoneOn,Is speakerphone on.
android.media.AudioManager.registerMediaButtonEventReceiver,This method was deprecated in API level 21. Use MediaSession#setMediaButtonReceiver(PendingIntent) instead. Register a component to be the sole receiver of MEDIA_BUTTON intents.
android.media.AudioManager.registerMediaButtonEventReceiver,Register media button event receiver.
android.media.AudioManager.registerMediaButtonEventReceiver,This method was deprecated in API level 21.
android.media.AudioManager.registerMediaButtonEventReceiver,Use MediaSession#setMediaButtonReceiver(PendingIntent) instead.
android.media.AudioManager.registerMediaButtonEventReceiver,Register a component to be the sole receiver of MEDIA_BUTTON intents.
android.media.AudioManager.registerMediaButtonEventReceiver,This method was deprecated in API level 21. Use MediaSession#setMediaButtonReceiver(PendingIntent) instead. Register a component to be the sole receiver of MEDIA_BUTTON intents. This is like registerMediaButtonEventReceiver(android.content.ComponentName) but allows the buttons to go to any PendingIntent. Note that you should only use this form if you know you will continue running for the full time until unregistering the PendingIntent.
android.media.AudioManager.registerMediaButtonEventReceiver,Register media button event receiver.
android.media.AudioManager.registerMediaButtonEventReceiver,This method was deprecated in API level 21.
android.media.AudioManager.registerMediaButtonEventReceiver,Use MediaSession#setMediaButtonReceiver(PendingIntent) instead.
android.media.AudioManager.registerMediaButtonEventReceiver,Register a component to be the sole receiver of MEDIA_BUTTON intents.
android.media.AudioManager.registerMediaButtonEventReceiver,This is like registerMediaButtonEventReceiver(android.content.ComponentName) but allows the buttons to go to any PendingIntent.
android.media.AudioManager.registerMediaButtonEventReceiver,Note that you should only use this form if you know you will continue running for the full time until unregistering the PendingIntent.
android.media.AudioManager.setRingerMode,Sets the ringer mode. Silent mode will mute the volume and will not vibrate. Vibrate mode will mute the volume and vibrate. Normal mode will be audible and may vibrate according to user settings. This method has no effect if the device implements a fixed volume policy as indicated by isVolumeFixed(). * From N onward ringer mode adjustments that would toggle Do Not Disturb are not allowed unless the app has been granted Do Not Disturb Access. See NotificationManager#isNotificationPolicyAccessGranted().
android.media.AudioManager.setRingerMode,Set ringer mode.
android.media.AudioManager.setRingerMode,Sets the ringer mode.
android.media.AudioManager.setRingerMode,Silent mode will mute the volume and will not vibrate.
android.media.AudioManager.setRingerMode,Vibrate mode will mute the volume and vibrate.
android.media.AudioManager.setRingerMode,Normal mode will be audible and may vibrate according to user settings.
android.media.AudioManager.setRingerMode,This method has no effect if the device implements a fixed volume policy as indicated by isVolumeFixed().
android.media.AudioManager.setRingerMode,* From N onward ringer mode adjustments that would toggle Do Not Disturb are not allowed unless the app has been granted Do Not Disturb Access.
android.media.AudioManager.setRingerMode,See NotificationManager#isNotificationPolicyAccessGranted().
android.media.AudioManager.setRouting,This method was deprecated in API level 15. Do not set audio routing directly use setSpeakerphoneOn() setBluetoothScoOn() methods instead. Sets the audio routing for a specified mode.
android.media.AudioManager.setRouting,Set routing.
android.media.AudioManager.setRouting,This method was deprecated in API level 15.
android.media.AudioManager.setRouting,Do not set audio routing directly use setSpeakerphoneOn() setBluetoothScoOn() methods instead.
android.media.AudioManager.setRouting,Sets the audio routing for a specified mode.
android.media.AudioManager.setSpeakerphoneOn,Sets the speakerphone on or off. This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application.
android.media.AudioManager.setSpeakerphoneOn,Set speakerphone on.
android.media.AudioManager.setSpeakerphoneOn,Sets the speakerphone on or off.
android.media.AudioManager.setSpeakerphoneOn,This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application.
android.media.AudioManager.setStreamMute,This method was deprecated in API level 23. Use adjustStreamVolume(int int int) with ADJUST_MUTE or ADJUST_UNMUTE instead. Mute or unmute an audio stream. This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application. This method has no effect if the device implements a fixed volume policy as indicated by isVolumeFixed(). This method was deprecated in API level 22. Prior to API level 22 this method had significantly different behavior and should be used carefully. The following applies only to pre-22 platforms: The mute command is protected against client process death: if a process with an active mute request on a stream dies this stream will be unmuted automatically. The mute requests for a given stream are cumulative: the AudioManager can receive several mute requests from one or more clients and the stream will be unmuted only when the same number of unmute requests are received. For a better user experience applications MUST unmute a muted stream in onPause() and mute is again in onResume() if appropriate.
android.media.AudioManager.setStreamMute,Set stream mute.
android.media.AudioManager.setStreamMute,This method was deprecated in API level 23.
android.media.AudioManager.setStreamMute,Use adjustStreamVolume(int int int) with ADJUST_MUTE or ADJUST_UNMUTE instead.
android.media.AudioManager.setStreamMute,Mute or unmute an audio stream.
android.media.AudioManager.setStreamMute,This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application.
android.media.AudioManager.setStreamMute,This method has no effect if the device implements a fixed volume policy as indicated by isVolumeFixed().
android.media.AudioManager.setStreamMute,This method was deprecated in API level 22.
android.media.AudioManager.setStreamMute,Prior to API level 22 this method had significantly different behavior and should be used carefully.
android.media.AudioManager.setStreamMute,The following applies only to pre-22 platforms: The mute command is protected against client process death: if a process with an active mute request on a stream dies this stream will be unmuted automatically.
android.media.AudioManager.setStreamMute,The mute requests for a given stream are cumulative: the AudioManager can receive several mute requests from one or more clients and the stream will be unmuted only when the same number of unmute requests are received.
android.media.AudioManager.setStreamMute,For a better user experience applications MUST unmute a muted stream in onPause() and mute is again in onResume() if appropriate.
android.media.AudioManager.setStreamVolume,Sets the volume index for a particular stream. This method has no effect if the device implements a fixed volume policy as indicated by isVolumeFixed(). From N onward volume adjustments that would toggle Do Not Disturb are not allowed unless the app has been granted Do Not Disturb Access. See NotificationManager#isNotificationPolicyAccessGranted().
android.media.AudioManager.setStreamVolume,Set stream volume.
android.media.AudioManager.setStreamVolume,Sets the volume index for a particular stream.
android.media.AudioManager.setStreamVolume,This method has no effect if the device implements a fixed volume policy as indicated by isVolumeFixed().
android.media.AudioManager.setStreamVolume,From N onward volume adjustments that would toggle Do Not Disturb are not allowed unless the app has been granted Do Not Disturb Access.
android.media.AudioManager.setStreamVolume,See NotificationManager#isNotificationPolicyAccessGranted().
android.media.AudioManager.startBluetoothSco,Start bluetooth SCO audio connection. Requires Permission: Manifest.permission.MODIFY_AUDIO_SETTINGS. This method can be used by applications wanting to send and received audio to/from a bluetooth SCO headset while the phone is not in call. As the SCO connection establishment can take several seconds applications should not rely on the connection to be available when the method returns but instead register to receive the intent ACTION_SCO_AUDIO_STATE_UPDATED and wait for the state to be SCO_AUDIO_STATE_CONNECTED. As the ACTION_SCO_AUDIO_STATE_UPDATED intent is sticky the application can check the SCO audio state before calling startBluetoothSco() by reading the intent returned by the receiver registration. If the state is already CONNECTED no state change will be received via the intent after calling startBluetoothSco(). It is however useful to call startBluetoothSco() so that the connection stays active in case the current initiator stops the connection. Unless the connection is already active as described above the state will always transition from DISCONNECTED to CONNECTING and then either to CONNECTED if the connection succeeds or back to DISCONNECTED if the connection fails (e.g no headset is connected). When finished with the SCO connection or if the establishment fails the application must call stopBluetoothSco() to clear the request and turn down the bluetooth connection. Even if a SCO connection is established the following restrictions apply on audio output streams so that they can be routed to SCO headset: the stream type must be STREAM_VOICE_CALL the format must be mono the sampling must be 16kHz or 8kHz The following restrictions apply on input streams: the format must be mono the sampling must be 8kHz Note that the phone application always has the priority on the usage of the SCO connection for telephony. If this method is called while the phone is in call it will be ignored. Similarly if a call is received or sent while an application is using the SCO connection the connection will be lost for the application and NOT returned automatically when the call ends. NOTE: up to and including API version Build.VERSION_CODES.JELLY_BEAN_MR1 this method initiates a virtual voice call to the bluetooth headset. After API version Build.VERSION_CODES.JELLY_BEAN_MR2 only a raw SCO audio connection is established.
android.media.AudioManager.startBluetoothSco,Start bluetooth sco.
android.media.AudioManager.startBluetoothSco,Start bluetooth SCO audio connection.
android.media.AudioManager.startBluetoothSco,Requires Permission: Manifest.permission.MODIFY_AUDIO_SETTINGS.
android.media.AudioManager.startBluetoothSco,This method can be used by applications wanting to send and received audio to/from a bluetooth SCO headset while the phone is not in call.
android.media.AudioManager.startBluetoothSco,As the SCO connection establishment can take several seconds applications should not rely on the connection to be available when the method returns but instead register to receive the intent ACTION_SCO_AUDIO_STATE_UPDATED and wait for the state to be SCO_AUDIO_STATE_CONNECTED.
android.media.AudioManager.startBluetoothSco,As the ACTION_SCO_AUDIO_STATE_UPDATED intent is sticky the application can check the SCO audio state before calling startBluetoothSco() by reading the intent returned by the receiver registration.
android.media.AudioManager.startBluetoothSco,If the state is already CONNECTED no state change will be received via the intent after calling startBluetoothSco().
android.media.AudioManager.startBluetoothSco,It is however useful to call startBluetoothSco() so that the connection stays active in case the current initiator stops the connection.
android.media.AudioManager.startBluetoothSco,Unless the connection is already active as described above the state will always transition from DISCONNECTED to CONNECTING and then either to CONNECTED if the connection succeeds or back to DISCONNECTED if the connection fails (e.g no headset is connected).
android.media.AudioManager.startBluetoothSco,When finished with the SCO connection or if the establishment fails the application must call stopBluetoothSco() to clear the request and turn down the bluetooth connection.
android.media.AudioManager.startBluetoothSco,Even if a SCO connection is established the following restrictions apply on audio output streams so that they can be routed to SCO headset: the stream type must be STREAM_VOICE_CALL the format must be mono the sampling must be 16kHz or 8kHz The following restrictions apply on input streams: the format must be mono the sampling must be 8kHz Note that the phone application always has the priority on the usage of the SCO connection for telephony.
android.media.AudioManager.startBluetoothSco,If this method is called while the phone is in call it will be ignored.
android.media.AudioManager.startBluetoothSco,Similarly if a call is received or sent while an application is using the SCO connection the connection will be lost for the application and NOT returned automatically when the call ends.
android.media.AudioManager.startBluetoothSco,NOTE: up to and including API version Build.VERSION_CODES.JELLY_BEAN_MR1 this method initiates a virtual voice call to the bluetooth headset.
android.media.AudioManager.startBluetoothSco,After API version Build.VERSION_CODES.JELLY_BEAN_MR2 only a raw SCO audio connection is established.
android.media.AudioManager.stopBluetoothSco,Stop bluetooth SCO audio connection. Requires Permission: Manifest.permission.MODIFY_AUDIO_SETTINGS. This method must be called by applications having requested the use of bluetooth SCO audio with startBluetoothSco() when finished with the SCO connection or if connection fails.
android.media.AudioManager.stopBluetoothSco,Stop bluetooth sco.
android.media.AudioManager.stopBluetoothSco,Stop bluetooth SCO audio connection.
android.media.AudioManager.stopBluetoothSco,Requires Permission: Manifest.permission.MODIFY_AUDIO_SETTINGS.
android.media.AudioManager.stopBluetoothSco,This method must be called by applications having requested the use of bluetooth SCO audio with startBluetoothSco() when finished with the SCO connection or if connection fails.
android.media.AudioManager.unregisterMediaButtonEventReceiver,This method was deprecated in API level 21. Use MediaSession instead. Unregister the receiver of MEDIA_BUTTON intents.
android.media.AudioManager.unregisterMediaButtonEventReceiver,Unregister media button event receiver.
android.media.AudioManager.unregisterMediaButtonEventReceiver,This method was deprecated in API level 21.
android.media.AudioManager.unregisterMediaButtonEventReceiver,Use MediaSession instead.
android.media.AudioManager.unregisterMediaButtonEventReceiver,Unregister the receiver of MEDIA_BUTTON intents.
android.media.AudioManager.unregisterMediaButtonEventReceiver,This method was deprecated in API level 21. Use MediaSession instead. Unregister the receiver of MEDIA_BUTTON intents.
android.media.AudioManager.unregisterMediaButtonEventReceiver,Unregister media button event receiver.
android.media.AudioManager.unregisterMediaButtonEventReceiver,This method was deprecated in API level 21.
android.media.AudioManager.unregisterMediaButtonEventReceiver,Use MediaSession instead.
android.media.AudioManager.unregisterMediaButtonEventReceiver,Unregister the receiver of MEDIA_BUTTON intents.
android.media.AudioRecord.getMinBufferSize,Returns the minimum buffer size required for the successful creation of an AudioRecord object in byte units. Note that this size doesn't guarantee a smooth recording under load and higher values should be chosen according to the expected frequency at which the AudioRecord instance will be polled for new data. See AudioRecord(int int int int int) for more information on valid configuration values.
android.media.AudioRecord.getMinBufferSize,Get min buffer size.
android.media.AudioRecord.getMinBufferSize,Returns the minimum buffer size required for the successful creation of an AudioRecord object in byte units.
android.media.AudioRecord.getMinBufferSize,Note that this size doesn't guarantee a smooth recording under load and higher values should be chosen according to the expected frequency at which the AudioRecord instance will be polled for new data.
android.media.AudioRecord.getMinBufferSize,See AudioRecord(int int int int int) for more information on valid configuration values.
android.media.AudioRecord.getRecordingState,Returns the recording state of the AudioRecord instance.
android.media.AudioRecord.getRecordingState,Get recording state.
android.media.AudioRecord.getState,Returns the state of the AudioRecord instance. This is useful after the AudioRecord instance has been created to check if it was initialized properly. This ensures that the appropriate hardware resources have been acquired.
android.media.AudioRecord.getState,Get state.
android.media.AudioRecord.getState,Returns the state of the AudioRecord instance.
android.media.AudioRecord.getState,This is useful after the AudioRecord instance has been created to check if it was initialized properly.
android.media.AudioRecord.getState,This ensures that the appropriate hardware resources have been acquired.
android.media.AudioRecord.read,Reads audio data from the audio hardware for recording into a short array. The format specified in the AudioRecord constructor should be AudioFormat#ENCODING_PCM_16BIT to correspond to the data in the array.
android.media.AudioRecord.read,Read.
android.media.AudioRecord.read,Reads audio data from the audio hardware for recording into a short array.
android.media.AudioRecord.read,The format specified in the AudioRecord constructor should be AudioFormat#ENCODING_PCM_16BIT to correspond to the data in the array.
android.media.AudioRecord.read,Reads audio data from the audio hardware for recording into a direct buffer. If this buffer is not a direct buffer this method will always return 0. Note that the value returned by Buffer.position() on this buffer is unchanged after a call to this method. The representation of the data in the buffer will depend on the format specified in the AudioRecord constructor and will be native endian.
android.media.AudioRecord.read,Read.
android.media.AudioRecord.read,Reads audio data from the audio hardware for recording into a direct buffer.
android.media.AudioRecord.read,If this buffer is not a direct buffer this method will always return 0.
android.media.AudioRecord.read,Note that the value returned by Buffer.position() on this buffer is unchanged after a call to this method.
android.media.AudioRecord.read,The representation of the data in the buffer will depend on the format specified in the AudioRecord constructor and will be native endian.
android.media.AudioRecord.read,Reads audio data from the audio hardware for recording into a short array. The format specified in the AudioRecord constructor should be AudioFormat#ENCODING_PCM_16BIT to correspond to the data in the array.
android.media.AudioRecord.read,Read.
android.media.AudioRecord.read,Reads audio data from the audio hardware for recording into a short array.
android.media.AudioRecord.read,The format specified in the AudioRecord constructor should be AudioFormat#ENCODING_PCM_16BIT to correspond to the data in the array.
android.media.AudioRecord.read,Reads audio data from the audio hardware for recording into a float array. The format specified in the AudioRecord constructor should be AudioFormat#ENCODING_PCM_FLOAT to correspond to the data in the array.
android.media.AudioRecord.read,Read.
android.media.AudioRecord.read,Reads audio data from the audio hardware for recording into a float array.
android.media.AudioRecord.read,The format specified in the AudioRecord constructor should be AudioFormat#ENCODING_PCM_FLOAT to correspond to the data in the array.
android.media.AudioRecord.read,Reads audio data from the audio hardware for recording into a byte array. The format specified in the AudioRecord constructor should be AudioFormat#ENCODING_PCM_8BIT to correspond to the data in the array. The format can be AudioFormat#ENCODING_PCM_16BIT but this is deprecated.
android.media.AudioRecord.read,Read.
android.media.AudioRecord.read,Reads audio data from the audio hardware for recording into a byte array.
android.media.AudioRecord.read,The format specified in the AudioRecord constructor should be AudioFormat#ENCODING_PCM_8BIT to correspond to the data in the array.
android.media.AudioRecord.read,The format can be AudioFormat#ENCODING_PCM_16BIT but this is deprecated.
android.media.AudioRecord.read,Reads audio data from the audio hardware for recording into a direct buffer. If this buffer is not a direct buffer this method will always return 0. Note that the value returned by Buffer.position() on this buffer is unchanged after a call to this method. The representation of the data in the buffer will depend on the format specified in the AudioRecord constructor and will be native endian.
android.media.AudioRecord.read,Read.
android.media.AudioRecord.read,Reads audio data from the audio hardware for recording into a direct buffer.
android.media.AudioRecord.read,If this buffer is not a direct buffer this method will always return 0.
android.media.AudioRecord.read,Note that the value returned by Buffer.position() on this buffer is unchanged after a call to this method.
android.media.AudioRecord.read,The representation of the data in the buffer will depend on the format specified in the AudioRecord constructor and will be native endian.
android.media.AudioRecord.read,Reads audio data from the audio hardware for recording into a byte array. The format specified in the AudioRecord constructor should be AudioFormat#ENCODING_PCM_8BIT to correspond to the data in the array.
android.media.AudioRecord.read,Read.
android.media.AudioRecord.read,Reads audio data from the audio hardware for recording into a byte array.
android.media.AudioRecord.read,The format specified in the AudioRecord constructor should be AudioFormat#ENCODING_PCM_8BIT to correspond to the data in the array.
android.media.AudioRecord.release,Releases the native AudioRecord resources. The object can no longer be used and the reference should be set to null after a call to release().
android.media.AudioRecord.release,Release.
android.media.AudioRecord.release,Releases the native AudioRecord resources.
android.media.AudioRecord.release,The object can no longer be used and the reference should be set to null after a call to release().
android.media.AudioRecord.setPositionNotificationPeriod,Sets the period at which the listener is called if set with setRecordPositionUpdateListener(android.media.AudioRecord.OnRecordPositionUpdateListener) or setRecordPositionUpdateListener(android.media.AudioRecord.OnRecordPositionUpdateListener android.os.Handler). It is possible for notifications to be lost if the period is too small.
android.media.AudioRecord.setPositionNotificationPeriod,Set position notification period.
android.media.AudioRecord.setPositionNotificationPeriod,Sets the period at which the listener is called if set with setRecordPositionUpdateListener(android.media.AudioRecord.OnRecordPositionUpdateListener) or setRecordPositionUpdateListener(android.media.AudioRecord.OnRecordPositionUpdateListener android.os.Handler).
android.media.AudioRecord.setPositionNotificationPeriod,It is possible for notifications to be lost if the period is too small.
android.media.AudioRecord.startRecording,Starts recording from the AudioRecord instance when the specified synchronization event occurs on the specified audio session.
android.media.AudioRecord.startRecording,Start recording.
android.media.AudioRecord.startRecording,Starts recording from the AudioRecord instance.
android.media.AudioRecord.startRecording,Start recording.
android.media.AudioRecord.stop,Stops recording.
android.media.AudioRecord.stop,Stop.
android.media.AudioTrack.flush,Flushes the audio data currently queued for playback. Any data that has been written but not yet presented will be discarded. No-op if not stopped or paused or if the track's creation mode is not MODE_STREAM. Note that although data written but not yet presented is discarded there is no guarantee that all of the buffer space formerly used by that data is available for a subsequent write. For example a call to write(byte[] int int) with sizeInBytes less than or equal to the total buffer size may return a short actual transfer count.
android.media.AudioTrack.flush,Flush.
android.media.AudioTrack.flush,Flushes the audio data currently queued for playback.
android.media.AudioTrack.flush,Any data that has been written but not yet presented will be discarded.
android.media.AudioTrack.flush,No-op if not stopped or paused or if the track's creation mode is not MODE_STREAM.
android.media.AudioTrack.flush,Note that although data written but not yet presented is discarded there is no guarantee that all of the buffer space formerly used by that data is available for a subsequent write.
android.media.AudioTrack.flush,For example a call to write(byte[] int int) with sizeInBytes less than or equal to the total buffer size may return a short actual transfer count.
android.media.AudioTrack.getMinBufferSize,Returns the estimated minimum buffer size required for an AudioTrack object to be created in the MODE_STREAM mode. The size is an estimate because it does not consider either the route or the sink since neither is known yet. Note that this size doesn't guarantee a smooth playback under load and higher values should be chosen according to the expected frequency at which the buffer will be refilled with additional data to play. For example if you intend to dynamically set the source sample rate of an AudioTrack to a higher value than the initial source sample rate be sure to configure the buffer size based on the highest planned sample rate.
android.media.AudioTrack.getMinBufferSize,Get min buffer size.
android.media.AudioTrack.getMinBufferSize,Returns the estimated minimum buffer size required for an AudioTrack object to be created in the MODE_STREAM mode.
android.media.AudioTrack.getMinBufferSize,The size is an estimate because it does not consider either the route or the sink since neither is known yet.
android.media.AudioTrack.getMinBufferSize,Note that this size doesn't guarantee a smooth playback under load and higher values should be chosen according to the expected frequency at which the buffer will be refilled with additional data to play.
android.media.AudioTrack.getMinBufferSize,For example if you intend to dynamically set the source sample rate of an AudioTrack to a higher value than the initial source sample rate be sure to configure the buffer size based on the highest planned sample rate.
android.media.AudioTrack.getNativeOutputSampleRate,Returns the output sample rate in Hz for the specified stream type.
android.media.AudioTrack.getNativeOutputSampleRate,Get native output sample rate.
android.media.AudioTrack.getPlayState,Returns the playback state of the AudioTrack instance.
android.media.AudioTrack.getPlayState,Get play state.
android.media.AudioTrack.getPlaybackHeadPosition,"Returns the playback head position expressed in frames. Though the ""int"" type is signed 32-bits the value should be reinterpreted as if it is unsigned 32-bits. That is the next position after 0x7FFFFFFF is (int) 0x80000000. This is a continuously advancing counter. It will wrap (overflow) periodically for example approximately once every 27:03:11 hours:minutes:seconds at 44.1 kHz. It is reset to zero by flush() reloadStaticData() and stop(). If the track's creation mode is MODE_STATIC the return value indicates the total number of frames played since reset not the current offset within the buffer."
android.media.AudioTrack.getPlaybackHeadPosition,Get playback head position.
android.media.AudioTrack.getPlaybackHeadPosition,Returns the playback head position expressed in frames.
android.media.AudioTrack.getPlaybackHeadPosition,"Though the ""int"" type is signed 32-bits the value should be reinterpreted as if it is unsigned 32-bits."
android.media.AudioTrack.getPlaybackHeadPosition,That is the next position after 0x7FFFFFFF is (int) 0x80000000.
android.media.AudioTrack.getPlaybackHeadPosition,This is a continuously advancing counter.
android.media.AudioTrack.getPlaybackHeadPosition,It will wrap (overflow) periodically for example approximately once every 27:03:11 hours:minutes:seconds at 44.1 kHz.
android.media.AudioTrack.getPlaybackHeadPosition,It is reset to zero by flush() reloadStaticData() and stop().
android.media.AudioTrack.getPlaybackHeadPosition,If the track's creation mode is MODE_STATIC the return value indicates the total number of frames played since reset not the current offset within the buffer.
android.media.AudioTrack.getState,Returns the state of the AudioTrack instance. This is useful after the AudioTrack instance has been created to check if it was initialized properly. This ensures that the appropriate resources have been acquired.
android.media.AudioTrack.getState,Get state.
android.media.AudioTrack.getState,Returns the state of the AudioTrack instance.
android.media.AudioTrack.getState,This is useful after the AudioTrack instance has been created to check if it was initialized properly.
android.media.AudioTrack.getState,This ensures that the appropriate resources have been acquired.
android.media.AudioTrack.play,Starts playing an AudioTrack. If track's creation mode is MODE_STATIC you must have called one of the write methods ( write(byte[] int int) write(byte[] int int int) write(short[] int int) write(short[] int int int) write(float[] int int int) or write(java.nio.ByteBuffer int int) ) prior to play(). If the mode is MODE_STREAM you can optionally prime the data path prior to calling play() by writing up to bufferSizeInBytes (from constructor). If you don't call write() first or if you call write() but with an insufficient amount of data then the track will be in underrun state at play(). In this case playback will not actually start playing until the data path is filled to a device-specific minimum level. This requirement for the path to be filled to a minimum level is also true when resuming audio playback after calling stop(). Similarly the buffer will need to be filled up again after the track underruns due to failure to call write() in a timely manner with sufficient data. For portability an application should prime the data path to the maximum allowed by writing data until the write() method returns a short transfer count. This allows play() to start immediately and reduces the chance of underrun.
android.media.AudioTrack.play,Play.
android.media.AudioTrack.play,Starts playing an AudioTrack.
android.media.AudioTrack.play,If track's creation mode is MODE_STATIC you must have called one of the write methods ( write(byte[] int int) write(byte[] int int int) write(short[] int int) write(short[] int int int) write(float[] int int int) or write(java.nio.ByteBuffer int int) ) prior to play().
android.media.AudioTrack.play,If the mode is MODE_STREAM you can optionally prime the data path prior to calling play() by writing up to bufferSizeInBytes (from constructor).
android.media.AudioTrack.play,If you don't call write() first or if you call write() but with an insufficient amount of data then the track will be in underrun state at play().
android.media.AudioTrack.play,In this case playback will not actually start playing until the data path is filled to a device-specific minimum level.
android.media.AudioTrack.play,This requirement for the path to be filled to a minimum level is also true when resuming audio playback after calling stop().
android.media.AudioTrack.play,Similarly the buffer will need to be filled up again after the track underruns due to failure to call write() in a timely manner with sufficient data.
android.media.AudioTrack.play,For portability an application should prime the data path to the maximum allowed by writing data until the write() method returns a short transfer count.
android.media.AudioTrack.play,This allows play() to start immediately and reduces the chance of underrun.
android.media.AudioTrack.release,Releases the native AudioTrack resources.
android.media.AudioTrack.release,Release.
android.media.AudioTrack.setNotificationMarkerPosition,Sets the position of the notification marker. At most one marker can be active.
android.media.AudioTrack.setNotificationMarkerPosition,Set notification marker position.
android.media.AudioTrack.setNotificationMarkerPosition,Sets the position of the notification marker.
android.media.AudioTrack.setNotificationMarkerPosition,At most one marker can be active.
android.media.AudioTrack.stop,Stops playing the audio data. When used on an instance created in MODE_STREAM mode audio will stop playing after the last buffer that was written has been played. For an immediate stop use pause() followed by flush() to discard audio data that hasn't been played back yet.
android.media.AudioTrack.stop,Stop.
android.media.AudioTrack.stop,Stops playing the audio data.
android.media.AudioTrack.stop,When used on an instance created in MODE_STREAM mode audio will stop playing after the last buffer that was written has been played.
android.media.AudioTrack.stop,For an immediate stop use pause() followed by flush() to discard audio data that hasn't been played back yet.
android.media.AudioTrack.write,Writes the audio data to the audio sink for playback (streaming mode) or copies audio data for later playback (static buffer mode). The format specified in the AudioTrack constructor should be AudioFormat#ENCODING_PCM_FLOAT to correspond to the data in the array. In streaming mode the blocking behavior depends on the write mode. If the write mode is WRITE_BLOCKING the write will normally block until all the data has been enqueued for playback and will return a full transfer count. However if the write mode is WRITE_NON_BLOCKING or the track is stopped or paused on entry or another thread interrupts the write by calling stop or pause or an I/O error occurs during the write then the write may return a short transfer count. In static buffer mode copies the data to the buffer starting at offset 0 and the write mode is ignored. Note that the actual playback of this data might occur after this function returns.
android.media.AudioTrack.write,Write.
android.media.AudioTrack.write,Writes the audio data to the audio sink for playback (streaming mode) or copies audio data for later playback (static buffer mode).
android.media.AudioTrack.write,The format specified in the AudioTrack constructor should be AudioFormat#ENCODING_PCM_FLOAT to correspond to the data in the array.
android.media.AudioTrack.write,In streaming mode the blocking behavior depends on the write mode.
android.media.AudioTrack.write,If the write mode is WRITE_BLOCKING the write will normally block until all the data has been enqueued for playback and will return a full transfer count.
android.media.AudioTrack.write,However if the write mode is WRITE_NON_BLOCKING or the track is stopped or paused on entry or another thread interrupts the write by calling stop or pause or an I/O error occurs during the write then the write may return a short transfer count.
android.media.AudioTrack.write,In static buffer mode copies the data to the buffer starting at offset 0 and the write mode is ignored.
android.media.AudioTrack.write,Note that the actual playback of this data might occur after this function returns.
android.media.AudioTrack.write,Writes the audio data to the audio sink for playback (streaming mode) or copies audio data for later playback (static buffer mode). The format specified in the AudioTrack constructor should be AudioFormat#ENCODING_PCM_16BIT to correspond to the data in the array. In streaming mode the write will normally block until all the data has been enqueued for playback and will return a full transfer count. However if the track is stopped or paused on entry or another thread interrupts the write by calling stop or pause or an I/O error occurs during the write then the write may return a short transfer count. In static buffer mode copies the data to the buffer starting at offset 0. Note that the actual playback of this data might occur after this function returns.
android.media.AudioTrack.write,Write.
android.media.AudioTrack.write,Writes the audio data to the audio sink for playback (streaming mode) or copies audio data for later playback (static buffer mode).
android.media.AudioTrack.write,The format specified in the AudioTrack constructor should be AudioFormat#ENCODING_PCM_16BIT to correspond to the data in the array.
android.media.AudioTrack.write,In streaming mode the write will normally block until all the data has been enqueued for playback and will return a full transfer count.
android.media.AudioTrack.write,However if the track is stopped or paused on entry or another thread interrupts the write by calling stop or pause or an I/O error occurs during the write then the write may return a short transfer count.
android.media.AudioTrack.write,In static buffer mode copies the data to the buffer starting at offset 0.
android.media.AudioTrack.write,Note that the actual playback of this data might occur after this function returns.
android.media.AudioTrack.write,Writes the audio data to the audio sink for playback (streaming mode) or copies audio data for later playback (static buffer mode). The format specified in the AudioTrack constructor should be AudioFormat#ENCODING_PCM_8BIT to correspond to the data in the array. The format can be AudioFormat#ENCODING_PCM_16BIT but this is deprecated. In streaming mode the write will normally block until all the data has been enqueued for playback and will return a full transfer count. However if the track is stopped or paused on entry or another thread interrupts the write by calling stop or pause or an I/O error occurs during the write then the write may return a short transfer count. In static buffer mode copies the data to the buffer starting at offset 0. Note that the actual playback of this data might occur after this function returns.
android.media.AudioTrack.write,Write.
android.media.AudioTrack.write,Writes the audio data to the audio sink for playback (streaming mode) or copies audio data for later playback (static buffer mode).
android.media.AudioTrack.write,The format specified in the AudioTrack constructor should be AudioFormat#ENCODING_PCM_8BIT to correspond to the data in the array.
android.media.AudioTrack.write,The format can be AudioFormat#ENCODING_PCM_16BIT but this is deprecated.
android.media.AudioTrack.write,In streaming mode the write will normally block until all the data has been enqueued for playback and will return a full transfer count.
android.media.AudioTrack.write,However if the track is stopped or paused on entry or another thread interrupts the write by calling stop or pause or an I/O error occurs during the write then the write may return a short transfer count.
android.media.AudioTrack.write,In static buffer mode copies the data to the buffer starting at offset 0.
android.media.AudioTrack.write,Note that the actual playback of this data might occur after this function returns.
android.media.AudioTrack.write,Writes the audio data to the audio sink for playback (streaming mode) or copies audio data for later playback (static buffer mode). The audioData in ByteBuffer should match the format specified in the AudioTrack constructor. In streaming mode the blocking behavior depends on the write mode. If the write mode is WRITE_BLOCKING the write will normally block until all the data has been enqueued for playback and will return a full transfer count. However if the write mode is WRITE_NON_BLOCKING or the track is stopped or paused on entry or another thread interrupts the write by calling stop or pause or an I/O error occurs during the write then the write may return a short transfer count. In static buffer mode copies the data to the buffer starting at offset 0 and the write mode is ignored. Note that the actual playback of this data might occur after this function returns.
android.media.AudioTrack.write,Write.
android.media.AudioTrack.write,Writes the audio data to the audio sink for playback (streaming mode) or copies audio data for later playback (static buffer mode).
android.media.AudioTrack.write,The audioData in ByteBuffer should match the format specified in the AudioTrack constructor.
android.media.AudioTrack.write,In streaming mode the blocking behavior depends on the write mode.
android.media.AudioTrack.write,If the write mode is WRITE_BLOCKING the write will normally block until all the data has been enqueued for playback and will return a full transfer count.
android.media.AudioTrack.write,However if the write mode is WRITE_NON_BLOCKING or the track is stopped or paused on entry or another thread interrupts the write by calling stop or pause or an I/O error occurs during the write then the write may return a short transfer count.
android.media.AudioTrack.write,In static buffer mode copies the data to the buffer starting at offset 0 and the write mode is ignored.
android.media.AudioTrack.write,Note that the actual playback of this data might occur after this function returns.
android.media.AudioTrack.write,Writes the audio data to the audio sink for playback in streaming mode on a HW_AV_SYNC track. The blocking behavior will depend on the write mode.
android.media.AudioTrack.write,Write.
android.media.AudioTrack.write,Writes the audio data to the audio sink for playback in streaming mode on a HW_AV_SYNC track.
android.media.AudioTrack.write,The blocking behavior will depend on the write mode.
android.media.AudioTrack.write,Writes the audio data to the audio sink for playback (streaming mode) or copies audio data for later playback (static buffer mode). The format specified in the AudioTrack constructor should be AudioFormat#ENCODING_PCM_16BIT to correspond to the data in the array. In streaming mode the blocking behavior depends on the write mode. If the write mode is WRITE_BLOCKING the write will normally block until all the data has been enqueued for playback and will return a full transfer count. However if the write mode is WRITE_NON_BLOCKING or the track is stopped or paused on entry or another thread interrupts the write by calling stop or pause or an I/O error occurs during the write then the write may return a short transfer count. In static buffer mode copies the data to the buffer starting at offset 0. Note that the actual playback of this data might occur after this function returns.
android.media.AudioTrack.write,Write.
android.media.AudioTrack.write,Writes the audio data to the audio sink for playback (streaming mode) or copies audio data for later playback (static buffer mode).
android.media.AudioTrack.write,The format specified in the AudioTrack constructor should be AudioFormat#ENCODING_PCM_16BIT to correspond to the data in the array.
android.media.AudioTrack.write,In streaming mode the blocking behavior depends on the write mode.
android.media.AudioTrack.write,If the write mode is WRITE_BLOCKING the write will normally block until all the data has been enqueued for playback and will return a full transfer count.
android.media.AudioTrack.write,However if the write mode is WRITE_NON_BLOCKING or the track is stopped or paused on entry or another thread interrupts the write by calling stop or pause or an I/O error occurs during the write then the write may return a short transfer count.
android.media.AudioTrack.write,In static buffer mode copies the data to the buffer starting at offset 0.
android.media.AudioTrack.write,Note that the actual playback of this data might occur after this function returns.
android.media.AudioTrack.write,Writes the audio data to the audio sink for playback (streaming mode) or copies audio data for later playback (static buffer mode). The format specified in the AudioTrack constructor should be AudioFormat#ENCODING_PCM_8BIT to correspond to the data in the array. The format can be AudioFormat#ENCODING_PCM_16BIT but this is deprecated. In streaming mode the blocking behavior depends on the write mode. If the write mode is WRITE_BLOCKING the write will normally block until all the data has been enqueued for playback and will return a full transfer count. However if the write mode is WRITE_NON_BLOCKING or the track is stopped or paused on entry or another thread interrupts the write by calling stop or pause or an I/O error occurs during the write then the write may return a short transfer count. In static buffer mode copies the data to the buffer starting at offset 0 and the write mode is ignored. Note that the actual playback of this data might occur after this function returns.
android.media.AudioTrack.write,Write.
android.media.AudioTrack.write,Writes the audio data to the audio sink for playback (streaming mode) or copies audio data for later playback (static buffer mode).
android.media.AudioTrack.write,The format specified in the AudioTrack constructor should be AudioFormat#ENCODING_PCM_8BIT to correspond to the data in the array.
android.media.AudioTrack.write,The format can be AudioFormat#ENCODING_PCM_16BIT but this is deprecated.
android.media.AudioTrack.write,In streaming mode the blocking behavior depends on the write mode.
android.media.AudioTrack.write,If the write mode is WRITE_BLOCKING the write will normally block until all the data has been enqueued for playback and will return a full transfer count.
android.media.AudioTrack.write,However if the write mode is WRITE_NON_BLOCKING or the track is stopped or paused on entry or another thread interrupts the write by calling stop or pause or an I/O error occurs during the write then the write may return a short transfer count.
android.media.AudioTrack.write,In static buffer mode copies the data to the buffer starting at offset 0 and the write mode is ignored.
android.media.AudioTrack.write,Note that the actual playback of this data might occur after this function returns.
android.media.CamcorderProfile.get,Returns the camcorder profile for the first back-facing camera on the device at the given quality level. If the device has no back-facing camera this returns null.
android.media.CamcorderProfile.get,Get.
android.media.CamcorderProfile.get,Returns the camcorder profile for the first back-facing camera on the device at the given quality level.
android.media.CamcorderProfile.get,If the device has no back-facing camera this returns null.
android.media.CamcorderProfile.get,Returns the camcorder profile for the given camera at the given quality level. Quality levels QUALITY_LOW QUALITY_HIGH are guaranteed to be supported while other levels may or may not be supported. The supported levels can be checked using hasProfile(int int). QUALITY_LOW refers to the lowest quality available while QUALITY_HIGH refers to the highest quality available. QUALITY_LOW/QUALITY_HIGH have to match one of qcif cif 480p 720p 1080p or 2160p. E.g. if the device supports 480p 720p 1080p and 2160p then low is 480p and high is 2160p. The same is true for time lapse quality levels i.e. QUALITY_TIME_LAPSE_LOW QUALITY_TIME_LAPSE_HIGH are guaranteed to be supported and have to match one of qcif cif 480p 720p 1080p or 2160p. For high speed quality levels they may or may not be supported. If a subset of the levels are supported QUALITY_HIGH_SPEED_LOW and QUALITY_HIGH_SPEED_HIGH are guaranteed to be supported and have to match one of 480p 720p or 1080p. A camcorder recording session with higher quality level usually has higher output bit rate better video and/or audio recording quality larger video frame resolution and higher audio sampling rate etc than those with lower quality level.
android.media.CamcorderProfile.get,Get.
android.media.CamcorderProfile.get,Returns the camcorder profile for the given camera at the given quality level.
android.media.CamcorderProfile.get,Quality levels QUALITY_LOW QUALITY_HIGH are guaranteed to be supported while other levels may or may not be supported.
android.media.CamcorderProfile.get,The supported levels can be checked using hasProfile(int int).
android.media.CamcorderProfile.get,QUALITY_LOW refers to the lowest quality available while QUALITY_HIGH refers to the highest quality available.
android.media.CamcorderProfile.get,QUALITY_LOW/QUALITY_HIGH have to match one of qcif cif 480p 720p 1080p or 2160p.
android.media.CamcorderProfile.get,E.g.
android.media.CamcorderProfile.get,if the device supports 480p 720p 1080p and 2160p then low is 480p and high is 2160p.
android.media.CamcorderProfile.get,The same is true for time lapse quality levels i.e.
android.media.CamcorderProfile.get,QUALITY_TIME_LAPSE_LOW QUALITY_TIME_LAPSE_HIGH are guaranteed to be supported and have to match one of qcif cif 480p 720p 1080p or 2160p.
android.media.CamcorderProfile.get,For high speed quality levels they may or may not be supported.
android.media.CamcorderProfile.get,If a subset of the levels are supported QUALITY_HIGH_SPEED_LOW and QUALITY_HIGH_SPEED_HIGH are guaranteed to be supported and have to match one of 480p 720p or 1080p.
android.media.CamcorderProfile.get,A camcorder recording session with higher quality level usually has higher output bit rate better video and/or audio recording quality larger video frame resolution and higher audio sampling rate etc than those with lower quality level.
android.media.CamcorderProfile.hasProfile,Returns true if camcorder profile exists for the given camera at the given quality level. When using the Camera 2 API in LEGACY mode (i.e. when CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL is set to CameraMetadata.INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY ) hasProfile(int) may return true for unsupported resolutions. To ensure a a given resolution is supported in LEGACY mode the configuration given in CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP must contain the the resolution in the supported output sizes. The recommended way to check this is with StreamConfigurationMap.getOutputSizes(Class) with the class of the desired recording endpoint and check that the desired resolution is contained in the list returned.
android.media.CamcorderProfile.hasProfile,Has profile.
android.media.CamcorderProfile.hasProfile,Returns true if camcorder profile exists for the given camera at the given quality level.
android.media.CamcorderProfile.hasProfile,When using the Camera 2 API in LEGACY mode (i.e.
android.media.CamcorderProfile.hasProfile,when CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL is set to CameraMetadata.INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY ) hasProfile(int) may return true for unsupported resolutions.
android.media.CamcorderProfile.hasProfile,To ensure a a given resolution is supported in LEGACY mode the configuration given in CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP must contain the the resolution in the supported output sizes.
android.media.CamcorderProfile.hasProfile,The recommended way to check this is with StreamConfigurationMap.getOutputSizes(Class) with the class of the desired recording endpoint and check that the desired resolution is contained in the list returned.
android.media.CamcorderProfile.hasProfile,Returns true if camcorder profile exists for the first back-facing camera at the given quality level. When using the Camera 2 API in LEGACY mode (i.e. when CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL is set to CameraMetadata.INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY ) hasProfile(int) may return true for unsupported resolutions. To ensure a a given resolution is supported in LEGACY mode the configuration given in CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP must contain the the resolution in the supported output sizes. The recommended way to check this is with StreamConfigurationMap.getOutputSizes(Class) with the class of the desired recording endpoint and check that the desired resolution is contained in the list returned.
android.media.CamcorderProfile.hasProfile,Has profile.
android.media.CamcorderProfile.hasProfile,Returns true if camcorder profile exists for the first back-facing camera at the given quality level.
android.media.CamcorderProfile.hasProfile,When using the Camera 2 API in LEGACY mode (i.e.
android.media.CamcorderProfile.hasProfile,when CameraCharacteristics.INFO_SUPPORTED_HARDWARE_LEVEL is set to CameraMetadata.INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY ) hasProfile(int) may return true for unsupported resolutions.
android.media.CamcorderProfile.hasProfile,To ensure a a given resolution is supported in LEGACY mode the configuration given in CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP must contain the the resolution in the supported output sizes.
android.media.CamcorderProfile.hasProfile,The recommended way to check this is with StreamConfigurationMap.getOutputSizes(Class) with the class of the desired recording endpoint and check that the desired resolution is contained in the list returned.
android.media.CameraProfile.getJpegEncodingQualityParameter,Returns a pre-defined still image capture (jpeg) quality level used for the given quality level in the Camera application for the first back-facing camera on the device. If the device has no back-facing camera this returns 0.
android.media.CameraProfile.getJpegEncodingQualityParameter,Get jpeg encoding quality parameter.
android.media.CameraProfile.getJpegEncodingQualityParameter,Returns a pre-defined still image capture (jpeg) quality level used for the given quality level in the Camera application for the first back-facing camera on the device.
android.media.CameraProfile.getJpegEncodingQualityParameter,If the device has no back-facing camera this returns 0.
android.media.CameraProfile.getJpegEncodingQualityParameter,Returns a pre-defined still image capture (jpeg) quality level used for the given quality level in the Camera application for the specified camera.
android.media.CameraProfile.getJpegEncodingQualityParameter,Get jpeg encoding quality parameter.
android.media.ExifInterface.getAttribute,Returns the value of the specified tag or null if there is no such tag in the image file.
android.media.ExifInterface.getAttribute,Get attribute.
android.media.ExifInterface.getAttributeInt,Returns the integer value of the specified tag. If there is no such tag in the image file or the value cannot be parsed as integer return defaultValue.
android.media.ExifInterface.getAttributeInt,Get attribute int.
android.media.ExifInterface.getAttributeInt,Returns the integer value of the specified tag.
android.media.ExifInterface.getAttributeInt,If there is no such tag in the image file or the value cannot be parsed as integer return defaultValue.
android.media.ExifInterface.getLatLong,Stores the latitude and longitude value in a float array. The first element is the latitude and the second element is the longitude. Returns false if the Exif tags are not available.
android.media.ExifInterface.getLatLong,Get lat long.
android.media.ExifInterface.getLatLong,Stores the latitude and longitude value in a float array.
android.media.ExifInterface.getLatLong,The first element is the latitude and the second element is the longitude.
android.media.ExifInterface.getLatLong,Returns false if the Exif tags are not available.
android.media.ExifInterface.getThumbnail,Returns the JPEG compressed thumbnail inside the image file or null if there is no JPEG compressed thumbnail. The returned data can be decoded using BitmapFactory.decodeByteArray(byte[] int int).
android.media.ExifInterface.getThumbnail,Get thumbnail.
android.media.ExifInterface.getThumbnail,Returns the JPEG compressed thumbnail inside the image file or null if there is no JPEG compressed thumbnail.
android.media.ExifInterface.getThumbnail,The returned data can be decoded using BitmapFactory.decodeByteArray(byte[] int int).
android.media.ExifInterface.hasThumbnail,Returns true if the image file has a thumbnail.
android.media.ExifInterface.hasThumbnail,Has thumbnail.
android.media.ExifInterface.saveAttributes,Save the tag data into the original image file. This is expensive because it involves copying all the data from one file to another and deleting the old file and renaming the other. It's best to use setAttribute(java.lang.String java.lang.String) to set all attributes to write and make a single call rather than multiple calls for each attribute. This method is only supported for JPEG files. Note: after calling this method any attempts to obtain range information from getAttributeRange(java.lang.String) or getThumbnailRange() will throw IllegalStateException since the offsets may have changed in the newly written file.
android.media.ExifInterface.saveAttributes,Save attributes.
android.media.ExifInterface.saveAttributes,Save the tag data into the original image file.
android.media.ExifInterface.saveAttributes,This is expensive because it involves copying all the data from one file to another and deleting the old file and renaming the other.
android.media.ExifInterface.saveAttributes,It's best to use setAttribute(java.lang.String java.lang.String) to set all attributes to write and make a single call rather than multiple calls for each attribute.
android.media.ExifInterface.saveAttributes,This method is only supported for JPEG files.
android.media.ExifInterface.saveAttributes,Note: after calling this method any attempts to obtain range information from getAttributeRange(java.lang.String) or getThumbnailRange() will throw IllegalStateException since the offsets may have changed in the newly written file.
android.media.ExifInterface.setAttribute,Set the value of the specified tag.
android.media.ExifInterface.setAttribute,Set attribute.
android.media.MediaCodec.configure,Configures a component.
android.media.MediaCodec.configure,Configure.
android.media.MediaCodec.configure,Configure a component to be used with a descrambler.
android.media.MediaCodec.configure,Configure.
android.media.MediaCodec.createDecoderByType,"Instantiate the preferred decoder supporting input data of the given mime type. The following is a partial list of defined mime types and their semantics: ""video/x-vnd.on2.vp8"" - VP8 video (i.e. video in .webm) ""video/x-vnd.on2.vp9"" - VP9 video (i.e. video in .webm) ""video/avc"" - H.264/AVC video ""video/hevc"" - H.265/HEVC video ""video/mp4v-es"" - MPEG4 video ""video/3gpp"" - H.263 video ""audio/3gpp"" - AMR narrowband audio ""audio/amr-wb"" - AMR wideband audio ""audio/mpeg"" - MPEG1/2 audio layer III ""audio/mp4a-latm"" - AAC audio (note this is raw AAC packets not packaged in LATM!) ""audio/vorbis"" - vorbis audio ""audio/g711-alaw"" - G.711 alaw audio ""audio/g711-mlaw"" - G.711 ulaw audio."
android.media.MediaCodec.createDecoderByType,Create decoder by type.
android.media.MediaCodec.createDecoderByType,Instantiate the preferred decoder supporting input data of the given mime type.
android.media.MediaCodec.createDecoderByType,"The following is a partial list of defined mime types and their semantics: ""video/x-vnd.on2.vp8"" - VP8 video (i.e."
android.media.MediaCodec.createDecoderByType,"video in .webm) ""video/x-vnd.on2.vp9"" - VP9 video (i.e."
android.media.MediaCodec.createDecoderByType,"video in .webm) ""video/avc"" - H.264/AVC video ""video/hevc"" - H.265/HEVC video ""video/mp4v-es"" - MPEG4 video ""video/3gpp"" - H.263 video ""audio/3gpp"" - AMR narrowband audio ""audio/amr-wb"" - AMR wideband audio ""audio/mpeg"" - MPEG1/2 audio layer III ""audio/mp4a-latm"" - AAC audio (note this is raw AAC packets not packaged in LATM!) ""audio/vorbis"" - vorbis audio ""audio/g711-alaw"" - G.711 alaw audio ""audio/g711-mlaw"" - G.711 ulaw audio."
android.media.MediaCodec.createEncoderByType,Instantiate the preferred encoder supporting output data of the given mime type. Note: It is preferred to use MediaCodecList#findEncoderForFormat and createByCodecName(String) to ensure that the resulting codec can handle a given format.
android.media.MediaCodec.createEncoderByType,Create encoder by type.
android.media.MediaCodec.createEncoderByType,Instantiate the preferred encoder supporting output data of the given mime type.
android.media.MediaCodec.createEncoderByType,Note: It is preferred to use MediaCodecList#findEncoderForFormat and createByCodecName(String) to ensure that the resulting codec can handle a given format.
android.media.MediaCodec.createInputSurface,Requests a Surface to use as the input to an encoder in place of input buffers. This may only be called after configure(MediaFormat Surface MediaCrypto int) and before start(). The application is responsible for calling release() on the Surface when done. The Surface must be rendered with a hardware-accelerated API such as OpenGL ES. Surface.lockCanvas(android.graphics.Rect) may fail or produce unexpected results.
android.media.MediaCodec.createInputSurface,Create input surface.
android.media.MediaCodec.createInputSurface,Requests a Surface to use as the input to an encoder in place of input buffers.
android.media.MediaCodec.createInputSurface,This may only be called after configure(MediaFormat Surface MediaCrypto int) and before start().
android.media.MediaCodec.createInputSurface,The application is responsible for calling release() on the Surface when done.
android.media.MediaCodec.createInputSurface,The Surface must be rendered with a hardware-accelerated API such as OpenGL ES.
android.media.MediaCodec.createInputSurface,Surface.lockCanvas(android.graphics.Rect) may fail or produce unexpected results.
android.media.MediaCodec.dequeueInputBuffer,"Returns the index of an input buffer to be filled with valid data or -1 if no such buffer is currently available. This method will return immediately if timeoutUs == 0 wait indefinitely for the availability of an input buffer if timeoutUs < 0 or wait up to ""timeoutUs"" microseconds if timeoutUs > 0."
android.media.MediaCodec.dequeueInputBuffer,Dequeue input buffer.
android.media.MediaCodec.dequeueInputBuffer,Returns the index of an input buffer to be filled with valid data or -1 if no such buffer is currently available.
android.media.MediaCodec.dequeueInputBuffer,"This method will return immediately if timeoutUs == 0 wait indefinitely for the availability of an input buffer if timeoutUs < 0 or wait up to ""timeoutUs"" microseconds if timeoutUs > 0."
android.media.MediaCodec.flush,Flush both input and output ports of the component. Upon return all indices previously returned in calls to dequeueInputBuffer and dequeueOutputBuffer — or obtained via Callback#onInputBufferAvailable or Callback#onOutputBufferAvailable callbacks — become invalid and all buffers are owned by the codec. If the codec is configured in asynchronous mode call start() after flush has returned to resume codec operations. The codec will not request input buffers until this has happened. Note however that there may still be outstanding onOutputBufferAvailable callbacks that were not handled prior to calling flush. The indices returned via these callbacks also become invalid upon calling flush and should be discarded. If the codec is configured in synchronous mode codec will resume automatically if it is configured with an input surface. Otherwise it will resume when dequeueInputBuffer is called.
android.media.MediaCodec.flush,Flush.
android.media.MediaCodec.flush,Flush both input and output ports of the component.
android.media.MediaCodec.flush,Upon return all indices previously returned in calls to dequeueInputBuffer and dequeueOutputBuffer — or obtained via Callback#onInputBufferAvailable or Callback#onOutputBufferAvailable callbacks — become invalid and all buffers are owned by the codec.
android.media.MediaCodec.flush,If the codec is configured in asynchronous mode call start() after flush has returned to resume codec operations.
android.media.MediaCodec.flush,The codec will not request input buffers until this has happened.
android.media.MediaCodec.flush,Note however that there may still be outstanding onOutputBufferAvailable callbacks that were not handled prior to calling flush.
android.media.MediaCodec.flush,The indices returned via these callbacks also become invalid upon calling flush and should be discarded.
android.media.MediaCodec.flush,If the codec is configured in synchronous mode codec will resume automatically if it is configured with an input surface.
android.media.MediaCodec.flush,Otherwise it will resume when dequeueInputBuffer is called.
android.media.MediaCodec.getInputBuffers,This method was deprecated in API level 21. Use the new getInputBuffer(int) method instead each time an input buffer is dequeued. Note: As of API 21 dequeued input buffers are automatically cleared. Do not use this method if using an input surface. Retrieve the set of input buffers. Call this after start() returns. After calling this method any ByteBuffers previously returned by an earlier call to this method MUST no longer be used.
android.media.MediaCodec.getInputBuffers,Get input buffers.
android.media.MediaCodec.getInputBuffers,This method was deprecated in API level 21.
android.media.MediaCodec.getInputBuffers,Use the new getInputBuffer(int) method instead each time an input buffer is dequeued.
android.media.MediaCodec.getInputBuffers,Note: As of API 21 dequeued input buffers are automatically cleared.
android.media.MediaCodec.getInputBuffers,Do not use this method if using an input surface.
android.media.MediaCodec.getInputBuffers,Retrieve the set of input buffers.
android.media.MediaCodec.getInputBuffers,Call this after start() returns.
android.media.MediaCodec.getInputBuffers,After calling this method any ByteBuffers previously returned by an earlier call to this method MUST no longer be used.
android.media.MediaCodec.getOutputBuffers,This method was deprecated in API level 21. Use the new getOutputBuffer(int) method instead each time an output buffer is dequeued. This method is not supported if codec is configured in asynchronous mode. Note: As of API 21 the position and limit of output buffers that are dequeued will be set to the valid data range. Do not use this method if using an output surface. Retrieve the set of output buffers. Call this after start() returns and whenever dequeueOutputBuffer signals an output buffer change by returning INFO_OUTPUT_BUFFERS_CHANGED. After calling this method any ByteBuffers previously returned by an earlier call to this method MUST no longer be used.
android.media.MediaCodec.getOutputBuffers,Get output buffers.
android.media.MediaCodec.getOutputBuffers,This method was deprecated in API level 21.
android.media.MediaCodec.getOutputBuffers,Use the new getOutputBuffer(int) method instead each time an output buffer is dequeued.
android.media.MediaCodec.getOutputBuffers,This method is not supported if codec is configured in asynchronous mode.
android.media.MediaCodec.getOutputBuffers,Note: As of API 21 the position and limit of output buffers that are dequeued will be set to the valid data range.
android.media.MediaCodec.getOutputBuffers,Do not use this method if using an output surface.
android.media.MediaCodec.getOutputBuffers,Retrieve the set of output buffers.
android.media.MediaCodec.getOutputBuffers,Call this after start() returns and whenever dequeueOutputBuffer signals an output buffer change by returning INFO_OUTPUT_BUFFERS_CHANGED.
android.media.MediaCodec.getOutputBuffers,After calling this method any ByteBuffers previously returned by an earlier call to this method MUST no longer be used.
android.media.MediaCodec.getOutputFormat,Returns the output format for a specific output buffer.
android.media.MediaCodec.getOutputFormat,Get output format.
android.media.MediaCodec.getOutputFormat,Call this after dequeueOutputBuffer signals a format change by returning INFO_OUTPUT_FORMAT_CHANGED. You can also call this after configure(MediaFormat Surface MediaCrypto int) returns successfully to get the output format initially configured for the codec. Do this to determine what optional configuration parameters were supported by the codec.
android.media.MediaCodec.getOutputFormat,Get output format.
android.media.MediaCodec.getOutputFormat,Call this after dequeueOutputBuffer signals a format change by returning INFO_OUTPUT_FORMAT_CHANGED.
android.media.MediaCodec.getOutputFormat,You can also call this after configure(MediaFormat Surface MediaCrypto int) returns successfully to get the output format initially configured for the codec.
android.media.MediaCodec.getOutputFormat,Do this to determine what optional configuration parameters were supported by the codec.
android.media.MediaCodec.queueInputBuffer,"After filling a range of the input buffer at the specified index submit it to the component. Once an input buffer is queued to the codec it MUST NOT be used until it is later retrieved by getInputBuffer(int) in response to a dequeueInputBuffer(long) return value or a Callback#onInputBufferAvailable callback. Many decoders require the actual compressed data stream to be preceded by ""codec specific data"" i.e. setup data used to initialize the codec such as PPS/SPS in the case of AVC video or code tables in the case of vorbis audio. The class MediaExtractor provides codec specific data as part of the returned track format in entries named ""csd-0"" ""csd-1"" ... These buffers can be submitted directly after start() or flush() by specifying the flag BUFFER_FLAG_CODEC_CONFIG. However if you configure the codec with a MediaFormat containing these keys they will be automatically submitted by MediaCodec directly after start. Therefore the use of BUFFER_FLAG_CODEC_CONFIG flag is discouraged and is recommended only for advanced users. To indicate that this is the final piece of input data (or rather that no more input data follows unless the decoder is subsequently flushed) specify the flag BUFFER_FLAG_END_OF_STREAM. Note: Prior to Build.VERSION_CODES.M presentationTimeUs was not propagated to the frame timestamp of (rendered) Surface output buffers and the resulting frame timestamp was undefined. Use releaseOutputBuffer(int long) to ensure a specific frame timestamp is set. Similarly since frame timestamps can be used by the destination surface for rendering synchronization care must be taken to normalize presentationTimeUs so as to not be mistaken for a system time. (See SurfaceView specifics )."
android.media.MediaCodec.queueInputBuffer,Queue input buffer.
android.media.MediaCodec.queueInputBuffer,After filling a range of the input buffer at the specified index submit it to the component.
android.media.MediaCodec.queueInputBuffer,Once an input buffer is queued to the codec it MUST NOT be used until it is later retrieved by getInputBuffer(int) in response to a dequeueInputBuffer(long) return value or a Callback#onInputBufferAvailable callback.
android.media.MediaCodec.queueInputBuffer,"Many decoders require the actual compressed data stream to be preceded by ""codec specific data"" i.e."
android.media.MediaCodec.queueInputBuffer,setup data used to initialize the codec such as PPS/SPS in the case of AVC video or code tables in the case of vorbis audio.
android.media.MediaCodec.queueInputBuffer,"The class MediaExtractor provides codec specific data as part of the returned track format in entries named ""csd-0"" ""csd-1"" ."
android.media.MediaCodec.queueInputBuffer,These buffers can be submitted directly after start() or flush() by specifying the flag BUFFER_FLAG_CODEC_CONFIG.
android.media.MediaCodec.queueInputBuffer,However if you configure the codec with a MediaFormat containing these keys they will be automatically submitted by MediaCodec directly after start.
android.media.MediaCodec.queueInputBuffer,Therefore the use of BUFFER_FLAG_CODEC_CONFIG flag is discouraged and is recommended only for advanced users.
android.media.MediaCodec.queueInputBuffer,To indicate that this is the final piece of input data (or rather that no more input data follows unless the decoder is subsequently flushed) specify the flag BUFFER_FLAG_END_OF_STREAM.
android.media.MediaCodec.queueInputBuffer,Note: Prior to Build.VERSION_CODES.M presentationTimeUs was not propagated to the frame timestamp of (rendered) Surface output buffers and the resulting frame timestamp was undefined.
android.media.MediaCodec.queueInputBuffer,Use releaseOutputBuffer(int long) to ensure a specific frame timestamp is set.
android.media.MediaCodec.queueInputBuffer,Similarly since frame timestamps can be used by the destination surface for rendering synchronization care must be taken to normalize presentationTimeUs so as to not be mistaken for a system time.
android.media.MediaCodec.queueInputBuffer,(See SurfaceView specifics ).
android.media.MediaCodec.release,Free up resources used by the codec instance. Make sure you call this when you're done to free up any opened component instance instead of relying on the garbage collector to do this for you at some point in the future.
android.media.MediaCodec.release,Release.
android.media.MediaCodec.release,Free up resources used by the codec instance.
android.media.MediaCodec.release,Make sure you call this when you're done to free up any opened component instance instead of relying on the garbage collector to do this for you at some point in the future.
android.media.MediaCodec.releaseOutputBuffer,If you are done with a buffer use this call to return the buffer to the codec or to render it on the output surface. If you configured the codec with an output surface setting render to true will first send the buffer to that output surface. The surface will release the buffer back to the codec once it is no longer used/displayed. Once an output buffer is released to the codec it MUST NOT be used until it is later retrieved by getOutputBuffer(int) in response to a dequeueOutputBuffer(MediaCodec.BufferInfo long) return value or a Callback#onOutputBufferAvailable callback.
android.media.MediaCodec.releaseOutputBuffer,Release output buffer.
android.media.MediaCodec.releaseOutputBuffer,If you are done with a buffer use this call to return the buffer to the codec or to render it on the output surface.
android.media.MediaCodec.releaseOutputBuffer,If you configured the codec with an output surface setting render to true will first send the buffer to that output surface.
android.media.MediaCodec.releaseOutputBuffer,The surface will release the buffer back to the codec once it is no longer used/displayed.
android.media.MediaCodec.releaseOutputBuffer,Once an output buffer is released to the codec it MUST NOT be used until it is later retrieved by getOutputBuffer(int) in response to a dequeueOutputBuffer(MediaCodec.BufferInfo long) return value or a Callback#onOutputBufferAvailable callback.
android.media.MediaCodec.releaseOutputBuffer,If you are done with a buffer use this call to update its surface timestamp and return it to the codec to render it on the output surface. If you have not specified an output surface when configuring this video codec this call will simply return the buffer to the codec. The timestamp may have special meaning depending on the destination surface.
android.media.MediaCodec.releaseOutputBuffer,Release output buffer.
android.media.MediaCodec.releaseOutputBuffer,If you are done with a buffer use this call to update its surface timestamp and return it to the codec to render it on the output surface.
android.media.MediaCodec.releaseOutputBuffer,If you have not specified an output surface when configuring this video codec this call will simply return the buffer to the codec.
android.media.MediaCodec.releaseOutputBuffer,The timestamp may have special meaning depending on the destination surface.
android.media.MediaCodec.signalEndOfInputStream,Signals end-of-stream on input. Equivalent to submitting an empty buffer with BUFFER_FLAG_END_OF_STREAM set. This may only be used with encoders receiving input from a Surface created by createInputSurface().
android.media.MediaCodec.signalEndOfInputStream,Signal end of input stream.
android.media.MediaCodec.signalEndOfInputStream,Signals end-of-stream on input.
android.media.MediaCodec.signalEndOfInputStream,Equivalent to submitting an empty buffer with BUFFER_FLAG_END_OF_STREAM set.
android.media.MediaCodec.signalEndOfInputStream,This may only be used with encoders receiving input from a Surface created by createInputSurface().
android.media.MediaCodec.start,After successfully configuring the component call start. Call start also if the codec is configured in asynchronous mode and it has just been flushed to resume requesting input buffers.
android.media.MediaCodec.start,Start.
android.media.MediaCodec.start,After successfully configuring the component call start.
android.media.MediaCodec.start,Call start also if the codec is configured in asynchronous mode and it has just been flushed to resume requesting input buffers.
android.media.MediaCodecList.getCodecInfoAt,This method was deprecated in API level 21. Use getCodecInfos() instead. Return the MediaCodecInfo object for the codec at the given index in the regular list.
android.media.MediaCodecList.getCodecInfoAt,Get codec info at.
android.media.MediaCodecList.getCodecInfoAt,This method was deprecated in API level 21.
android.media.MediaCodecList.getCodecInfoAt,Use getCodecInfos() instead.
android.media.MediaCodecList.getCodecInfoAt,Return the MediaCodecInfo object for the codec at the given index in the regular list.
android.media.MediaDescription.getDescription,Returns a description suitable for display or null.
android.media.MediaDescription.getDescription,Get description.
android.media.MediaDescription.getExtras,Returns any extras that were added to the description.
android.media.MediaDescription.getExtras,Get extras.
android.media.MediaDescription.getIconBitmap,Returns a bitmap icon suitable for display or null.
android.media.MediaDescription.getIconBitmap,Get icon bitmap.
android.media.MediaDescription.getIconUri,Returns a Uri for an icon suitable for display or null.
android.media.MediaDescription.getIconUri,Get icon uri.
android.media.MediaDescription.getMediaId,Returns the media id or null. See MediaMetadata#METADATA_KEY_MEDIA_ID.
android.media.MediaDescription.getMediaId,Get media id.
android.media.MediaDescription.getMediaId,Returns the media id or null.
android.media.MediaDescription.getMediaId,See MediaMetadata#METADATA_KEY_MEDIA_ID.
android.media.MediaDescription.getSubtitle,Returns a subtitle suitable for display or null.
android.media.MediaDescription.getSubtitle,Get subtitle.
android.media.MediaDescription.getTitle,Returns a title suitable for display or null.
android.media.MediaDescription.getTitle,Get title.
android.media.MediaExtractor.advance,Advance to the next sample. Returns false if no more sample data is available (end of stream). When extracting a local file the behaviors of advance() and readSampleData(ByteBuffer int) are undefined in presence of concurrent writes to the same local file; more specifically end of stream could be signalled earlier than expected.
android.media.MediaExtractor.advance,Advance.
android.media.MediaExtractor.advance,Advance to the next sample.
android.media.MediaExtractor.advance,Returns false if no more sample data is available (end of stream).
android.media.MediaExtractor.advance,When extracting a local file the behaviors of advance() and readSampleData(ByteBuffer int) are undefined in presence of concurrent writes to the same local file; more specifically end of stream could be signalled earlier than expected.
android.media.MediaExtractor.getSampleFlags,Returns the current sample's flags.
android.media.MediaExtractor.getSampleFlags,Get sample flags.
android.media.MediaExtractor.getSampleTime,Returns the current sample's presentation time in microseconds. or -1 if no more samples are available.
android.media.MediaExtractor.getSampleTime,Get sample time.
android.media.MediaExtractor.getSampleTime,Returns the current sample's presentation time in microseconds.
android.media.MediaExtractor.getSampleTime,or -1 if no more samples are available.
android.media.MediaExtractor.getTrackCount,Count the number of tracks found in the data source.
android.media.MediaExtractor.getTrackCount,Get track count.
android.media.MediaExtractor.getTrackFormat,Get the track format at the specified index. More detail on the representation can be found at MediaCodec The following table summarizes support for format keys across android releases:.
android.media.MediaExtractor.getTrackFormat,Get track format.
android.media.MediaExtractor.getTrackFormat,Get the track format at the specified index.
android.media.MediaExtractor.getTrackFormat,More detail on the representation can be found at MediaCodec The following table summarizes support for format keys across android releases:.
android.media.MediaExtractor.readSampleData,Retrieve the current encoded sample and store it in the byte buffer starting at the given offset. Note: As of API 21 on success the position and limit of byteBuf is updated to point to the data just read.
android.media.MediaExtractor.readSampleData,Read sample data.
android.media.MediaExtractor.readSampleData,Retrieve the current encoded sample and store it in the byte buffer starting at the given offset.
android.media.MediaExtractor.readSampleData,Note: As of API 21 on success the position and limit of byteBuf is updated to point to the data just read.
android.media.MediaExtractor.release,Make sure you call this when you're done to free up any resources instead of relying on the garbage collector to do this for you at some point in the future.
android.media.MediaExtractor.release,Release.
android.media.MediaExtractor.seekTo,All selected tracks seek near the requested time according to the specified mode.
android.media.MediaExtractor.seekTo,Seek to.
android.media.MediaExtractor.setDataSource,Sets the data source (AssetFileDescriptor) to use. It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns.
android.media.MediaExtractor.setDataSource,Set data source.
android.media.MediaExtractor.setDataSource,Sets the data source (AssetFileDescriptor) to use.
android.media.MediaExtractor.setDataSource,It is the caller's responsibility to close the file descriptor.
android.media.MediaExtractor.setDataSource,It is safe to do so as soon as this call returns.
android.media.MediaExtractor.setDataSource,Sets the data source as a content Uri.
android.media.MediaExtractor.setDataSource,Set data source.
android.media.MediaExtractor.setDataSource,Sets the data source (FileDescriptor) to use. It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns.
android.media.MediaExtractor.setDataSource,Set data source.
android.media.MediaExtractor.setDataSource,Sets the data source (FileDescriptor) to use.
android.media.MediaExtractor.setDataSource,It is the caller's responsibility to close the file descriptor.
android.media.MediaExtractor.setDataSource,It is safe to do so as soon as this call returns.
android.media.MediaExtractor.setDataSource,Sets the data source (MediaDataSource) to use.
android.media.MediaExtractor.setDataSource,Set data source.
android.media.MediaExtractor.setDataSource,Sets the data source (FileDescriptor) to use. The FileDescriptor must be seekable (N.B. a LocalSocket is not seekable). It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns.
android.media.MediaExtractor.setDataSource,Set data source.
android.media.MediaExtractor.setDataSource,Sets the data source (FileDescriptor) to use.
android.media.MediaExtractor.setDataSource,The FileDescriptor must be seekable (N.B.
android.media.MediaExtractor.setDataSource,a LocalSocket is not seekable).
android.media.MediaExtractor.setDataSource,It is the caller's responsibility to close the file descriptor.
android.media.MediaExtractor.setDataSource,It is safe to do so as soon as this call returns.
android.media.MediaExtractor.setDataSource,Sets the data source (file-path or http URL) to use.
android.media.MediaExtractor.setDataSource,Set data source.
android.media.MediaExtractor.setDataSource,Sets the data source (file-path or http URL) to use.
android.media.MediaExtractor.setDataSource,Set data source.
android.media.MediaExtractor.unselectTrack,Subsequent calls to readSampleData(ByteBuffer int) getSampleTrackIndex() and getSampleTime() only retrieve information for the subset of tracks selected.
android.media.MediaExtractor.unselectTrack,Unselect track.
android.media.MediaFormat.createVideoFormat,Creates a minimal video format.
android.media.MediaFormat.createVideoFormat,Create video format.
android.media.MediaFormat.getByteBuffer,Returns the value of a ByteBuffer key.
android.media.MediaFormat.getByteBuffer,Get byte buffer.
android.media.MediaFormat.getByteBuffer,Returns the value of a ByteBuffer key or the default value if the key is missing.
android.media.MediaFormat.getByteBuffer,Get byte buffer.
android.media.MediaFormat.getInteger,Returns the value of an integer key.
android.media.MediaFormat.getInteger,Get integer.
android.media.MediaFormat.getInteger,Returns the value of an integer key or the default value if the key is missing.
android.media.MediaFormat.getInteger,Get integer.
android.media.MediaFormat.getLong,Returns the value of a long key.
android.media.MediaFormat.getLong,Get long.
android.media.MediaFormat.getLong,Returns the value of an long key or the default value if the key is missing.
android.media.MediaFormat.getLong,Get long.
android.media.MediaFormat.getString,Returns the value of a string key.
android.media.MediaFormat.getString,Get string.
android.media.MediaFormat.getString,Returns the value of an string key or the default value if the key is missing.
android.media.MediaFormat.getString,Get string.
android.media.MediaFormat.setInteger,Sets the value of an integer key.
android.media.MediaFormat.setInteger,Set integer.
android.media.MediaMetadata.getBitmap,Returns a Bitmap for the given key or null if no bitmap exists for the given key.
android.media.MediaMetadata.getBitmap,Get bitmap.
android.media.MediaMetadata.getLong,Returns the value associated with the given key or 0L if no long exists for the given key.
android.media.MediaMetadata.getLong,Get long.
android.media.MediaMetadata.getRating,Returns a Rating for the given key or null if no rating exists for the given key.
android.media.MediaMetadata.getRating,Get rating.
android.media.MediaMetadata.getText,Returns the value associated with the given key or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.
android.media.MediaMetadata.getText,Get text.
android.media.MediaMetadata.keySet,Returns a Set containing the Strings used as keys in this metadata.
android.media.MediaMetadata.keySet,Key set.
android.media.MediaMetadataRetriever.getFrameAtTime,Call this method after setDataSource(). This method finds a representative frame close to the given time position if possible and returns it as a bitmap. Call this method if one does not care how the frame is found as long as it is close to the given time; otherwise please call getFrameAtTime(long int). If you don't need a full-resolution frame (for example because you need a thumbnail image) use getScaledFrameAtTime() instead of this method.
android.media.MediaMetadataRetriever.getFrameAtTime,Get frame at time.
android.media.MediaMetadataRetriever.getFrameAtTime,Call this method after setDataSource().
android.media.MediaMetadataRetriever.getFrameAtTime,This method finds a representative frame close to the given time position if possible and returns it as a bitmap.
android.media.MediaMetadataRetriever.getFrameAtTime,Call this method if one does not care how the frame is found as long as it is close to the given time; otherwise please call getFrameAtTime(long int).
android.media.MediaMetadataRetriever.getFrameAtTime,If you don't need a full-resolution frame (for example because you need a thumbnail image) use getScaledFrameAtTime() instead of this method.
android.media.MediaMetadataRetriever.getFrameAtTime,Call this method after setDataSource(). This method finds a representative frame at any time position if possible and returns it as a bitmap. Call this method if one does not care about where the frame is located; otherwise please call getFrameAtTime(long) or getFrameAtTime(long int) If you don't need a full-resolution frame (for example because you need a thumbnail image) use getScaledFrameAtTime() instead of this method.
android.media.MediaMetadataRetriever.getFrameAtTime,Get frame at time.
android.media.MediaMetadataRetriever.getFrameAtTime,Call this method after setDataSource().
android.media.MediaMetadataRetriever.getFrameAtTime,This method finds a representative frame at any time position if possible and returns it as a bitmap.
android.media.MediaMetadataRetriever.getFrameAtTime,Call this method if one does not care about where the frame is located; otherwise please call getFrameAtTime(long) or getFrameAtTime(long int) If you don't need a full-resolution frame (for example because you need a thumbnail image) use getScaledFrameAtTime() instead of this method.
android.media.MediaMetadataRetriever.getFrameAtTime,Call this method after setDataSource(). This method finds a representative frame close to the given time position by considering the given option if possible and returns it as a bitmap. If you don't need a full-resolution frame (for example because you need a thumbnail image) use getScaledFrameAtTime() instead of this method.
android.media.MediaMetadataRetriever.getFrameAtTime,Get frame at time.
android.media.MediaMetadataRetriever.getFrameAtTime,Call this method after setDataSource().
android.media.MediaMetadataRetriever.getFrameAtTime,This method finds a representative frame close to the given time position by considering the given option if possible and returns it as a bitmap.
android.media.MediaMetadataRetriever.getFrameAtTime,If you don't need a full-resolution frame (for example because you need a thumbnail image) use getScaledFrameAtTime() instead of this method.
android.media.MediaMetadataRetriever.release,Call it when one is done with the object. This method releases the memory allocated internally.
android.media.MediaMetadataRetriever.release,Release.
android.media.MediaMetadataRetriever.release,Call it when one is done with the object.
android.media.MediaMetadataRetriever.release,This method releases the memory allocated internally.
android.media.MediaMetadataRetriever.setDataSource,Sets the data source (FileDescriptor) to use. It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns. Call this method before the rest of the methods in this class. This method may be time-consuming.
android.media.MediaMetadataRetriever.setDataSource,Set data source.
android.media.MediaMetadataRetriever.setDataSource,Sets the data source (FileDescriptor) to use.
android.media.MediaMetadataRetriever.setDataSource,It is the caller's responsibility to close the file descriptor.
android.media.MediaMetadataRetriever.setDataSource,It is safe to do so as soon as this call returns.
android.media.MediaMetadataRetriever.setDataSource,Call this method before the rest of the methods in this class.
android.media.MediaMetadataRetriever.setDataSource,This method may be time-consuming.
android.media.MediaMetadataRetriever.setDataSource,Sets the data source (file pathname) to use. Call this method before the rest of the methods in this class. This method may be time-consuming.
android.media.MediaMetadataRetriever.setDataSource,Set data source.
android.media.MediaMetadataRetriever.setDataSource,Sets the data source (file pathname) to use.
android.media.MediaMetadataRetriever.setDataSource,Call this method before the rest of the methods in this class.
android.media.MediaMetadataRetriever.setDataSource,This method may be time-consuming.
android.media.MediaMetadataRetriever.setDataSource,Sets the data source as a content Uri. Call this method before the rest of the methods in this class. This method may be time-consuming.
android.media.MediaMetadataRetriever.setDataSource,Set data source.
android.media.MediaMetadataRetriever.setDataSource,Sets the data source as a content Uri.
android.media.MediaMetadataRetriever.setDataSource,Call this method before the rest of the methods in this class.
android.media.MediaMetadataRetriever.setDataSource,This method may be time-consuming.
android.media.MediaMetadataRetriever.setDataSource,Sets the data source (FileDescriptor) to use. It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns. Call this method before the rest of the methods in this class. This method may be time-consuming.
android.media.MediaMetadataRetriever.setDataSource,Set data source.
android.media.MediaMetadataRetriever.setDataSource,Sets the data source (FileDescriptor) to use.
android.media.MediaMetadataRetriever.setDataSource,It is the caller's responsibility to close the file descriptor.
android.media.MediaMetadataRetriever.setDataSource,It is safe to do so as soon as this call returns.
android.media.MediaMetadataRetriever.setDataSource,Call this method before the rest of the methods in this class.
android.media.MediaMetadataRetriever.setDataSource,This method may be time-consuming.
android.media.MediaMetadataRetriever.setDataSource,Sets the data source (URI) to use. Call this method before the rest of the methods in this class. This method may be time-consuming.
android.media.MediaMetadataRetriever.setDataSource,Set data source.
android.media.MediaMetadataRetriever.setDataSource,Sets the data source (URI) to use.
android.media.MediaMetadataRetriever.setDataSource,Call this method before the rest of the methods in this class.
android.media.MediaMetadataRetriever.setDataSource,This method may be time-consuming.
android.media.MediaMetadataRetriever.setDataSource,Sets the data source (MediaDataSource) to use.
android.media.MediaMetadataRetriever.setDataSource,Set data source.
android.media.MediaMuxer.addTrack,Adds a track with the specified format. The following table summarizes support for specific format keys across android releases. Keys marked with '+:' are required. The following table summarizes codec support for containers across android releases:.
android.media.MediaMuxer.addTrack,Add track.
android.media.MediaMuxer.addTrack,Adds a track with the specified format.
android.media.MediaMuxer.addTrack,The following table summarizes support for specific format keys across android releases.
android.media.MediaMuxer.addTrack,Keys marked with '+:' are required.
android.media.MediaMuxer.addTrack,The following table summarizes codec support for containers across android releases:.
android.media.MediaMuxer.start,Starts the muxer. Make sure this is called after addTrack(MediaFormat) and before writeSampleData(int ByteBuffer MediaCodec.BufferInfo).
android.media.MediaMuxer.start,Start.
android.media.MediaMuxer.start,Starts the muxer.
android.media.MediaMuxer.start,Make sure this is called after addTrack(MediaFormat) and before writeSampleData(int ByteBuffer MediaCodec.BufferInfo).
android.media.MediaMuxer.stop,Stops the muxer. Once the muxer stops it can not be restarted.
android.media.MediaMuxer.stop,Stop.
android.media.MediaMuxer.stop,Stops the muxer.
android.media.MediaMuxer.stop,Once the muxer stops it can not be restarted.
android.media.MediaPlayer.create,Same factory method as create(android.content.Context android.net.Uri android.view.SurfaceHolder) but that lets you specify the audio attributes and session ID to be used by the new MediaPlayer instance.
android.media.MediaPlayer.create,Create.
android.media.MediaPlayer.create,Same factory method as create(android.content.Context int) but that lets you specify the audio attributes and session ID to be used by the new MediaPlayer instance.
android.media.MediaPlayer.create,Create.
android.media.MediaPlayer.create,Convenience method to create a MediaPlayer for a given Uri. On success prepare() will already have been called and must not be called again. When done with the MediaPlayer you should call release() to free the resources. If not released too many MediaPlayer instances will result in an exception. Note that since prepare() is called automatically in this method you cannot change the audio session ID (see setAudioSessionId(int) ) or audio attributes (see setAudioAttributes(android.media.AudioAttributes) of the new MediaPlayer.
android.media.MediaPlayer.create,Create.
android.media.MediaPlayer.create,Convenience method to create a MediaPlayer for a given Uri.
android.media.MediaPlayer.create,On success prepare() will already have been called and must not be called again.
android.media.MediaPlayer.create,When done with the MediaPlayer you should call release() to free the resources.
android.media.MediaPlayer.create,If not released too many MediaPlayer instances will result in an exception.
android.media.MediaPlayer.create,Note that since prepare() is called automatically in this method you cannot change the audio session ID (see setAudioSessionId(int) ) or audio attributes (see setAudioAttributes(android.media.AudioAttributes) of the new MediaPlayer.
android.media.MediaPlayer.create,Convenience method to create a MediaPlayer for a given resource id. On success prepare() will already have been called and must not be called again. When done with the MediaPlayer you should call release() to free the resources. If not released too many MediaPlayer instances will result in an exception. Note that since prepare() is called automatically in this method you cannot change the audio session ID (see setAudioSessionId(int) ) or audio attributes (see setAudioAttributes(android.media.AudioAttributes) of the new MediaPlayer.
android.media.MediaPlayer.create,Create.
android.media.MediaPlayer.create,Convenience method to create a MediaPlayer for a given resource id.
android.media.MediaPlayer.create,On success prepare() will already have been called and must not be called again.
android.media.MediaPlayer.create,When done with the MediaPlayer you should call release() to free the resources.
android.media.MediaPlayer.create,If not released too many MediaPlayer instances will result in an exception.
android.media.MediaPlayer.create,Note that since prepare() is called automatically in this method you cannot change the audio session ID (see setAudioSessionId(int) ) or audio attributes (see setAudioAttributes(android.media.AudioAttributes) of the new MediaPlayer.
android.media.MediaPlayer.create,Convenience method to create a MediaPlayer for a given Uri. On success prepare() will already have been called and must not be called again. When done with the MediaPlayer you should call release() to free the resources. If not released too many MediaPlayer instances will result in an exception. Note that since prepare() is called automatically in this method you cannot change the audio session ID (see setAudioSessionId(int) ) or audio attributes (see setAudioAttributes(android.media.AudioAttributes) of the new MediaPlayer.
android.media.MediaPlayer.create,Create.
android.media.MediaPlayer.create,Convenience method to create a MediaPlayer for a given Uri.
android.media.MediaPlayer.create,On success prepare() will already have been called and must not be called again.
android.media.MediaPlayer.create,When done with the MediaPlayer you should call release() to free the resources.
android.media.MediaPlayer.create,If not released too many MediaPlayer instances will result in an exception.
android.media.MediaPlayer.create,Note that since prepare() is called automatically in this method you cannot change the audio session ID (see setAudioSessionId(int) ) or audio attributes (see setAudioAttributes(android.media.AudioAttributes) of the new MediaPlayer.
android.media.MediaPlayer.getAudioSessionId,Returns the audio session ID.
android.media.MediaPlayer.getAudioSessionId,Get audio session id.
android.media.MediaPlayer.getCurrentPosition,Gets the current playback position.
android.media.MediaPlayer.getCurrentPosition,Get current position.
android.media.MediaPlayer.getDuration,Gets the duration of the file.
android.media.MediaPlayer.getDuration,Get duration.
android.media.MediaPlayer.getVideoHeight,Returns the height of the video.
android.media.MediaPlayer.getVideoHeight,Get video height.
android.media.MediaPlayer.getVideoWidth,Returns the width of the video.
android.media.MediaPlayer.getVideoWidth,Get video width.
android.media.MediaPlayer.isPlaying,Checks whether the MediaPlayer is playing.
android.media.MediaPlayer.isPlaying,Is playing.
android.media.MediaPlayer.pause,Pauses playback. Call start() to resume.
android.media.MediaPlayer.pause,Pause.
android.media.MediaPlayer.pause,Pauses playback.
android.media.MediaPlayer.pause,Call start() to resume.
android.media.MediaPlayer.prepare,Prepares the player for playback synchronously. After setting the datasource and the display surface you need to either call prepare() or prepareAsync(). For files it is OK to call prepare() which blocks until MediaPlayer is ready for playback.
android.media.MediaPlayer.prepare,Prepare.
android.media.MediaPlayer.prepare,Prepares the player for playback synchronously.
android.media.MediaPlayer.prepare,After setting the datasource and the display surface you need to either call prepare() or prepareAsync().
android.media.MediaPlayer.prepare,For files it is OK to call prepare() which blocks until MediaPlayer is ready for playback.
android.media.MediaPlayer.prepareAsync,Prepares the player for playback asynchronously. After setting the datasource and the display surface you need to either call prepare() or prepareAsync(). For streams you should call prepareAsync() which returns immediately rather than blocking until enough data has been buffered.
android.media.MediaPlayer.prepareAsync,Prepare async.
android.media.MediaPlayer.prepareAsync,Prepares the player for playback asynchronously.
android.media.MediaPlayer.prepareAsync,After setting the datasource and the display surface you need to either call prepare() or prepareAsync().
android.media.MediaPlayer.prepareAsync,For streams you should call prepareAsync() which returns immediately rather than blocking until enough data has been buffered.
android.media.MediaPlayer.release,Releases resources associated with this MediaPlayer object. It is considered good practice to call this method when you're done using the MediaPlayer. In particular whenever an Activity of an application is paused (its onPause() method is called) or stopped (its onStop() method is called) this method should be invoked to release the MediaPlayer object unless the application has a special need to keep the object around. In addition to unnecessary resources (such as memory and instances of codecs) being held failure to call this method immediately if a MediaPlayer object is no longer needed may also lead to continuous battery consumption for mobile devices and playback failure for other applications if no multiple instances of the same codec are supported on a device. Even if multiple instances of the same codec are supported some performance degradation may be expected when unnecessary multiple instances are used at the same time.
android.media.MediaPlayer.release,Release.
android.media.MediaPlayer.release,Releases resources associated with this MediaPlayer object.
android.media.MediaPlayer.release,It is considered good practice to call this method when you're done using the MediaPlayer.
android.media.MediaPlayer.release,In particular whenever an Activity of an application is paused (its onPause() method is called) or stopped (its onStop() method is called) this method should be invoked to release the MediaPlayer object unless the application has a special need to keep the object around.
android.media.MediaPlayer.release,In addition to unnecessary resources (such as memory and instances of codecs) being held failure to call this method immediately if a MediaPlayer object is no longer needed may also lead to continuous battery consumption for mobile devices and playback failure for other applications if no multiple instances of the same codec are supported on a device.
android.media.MediaPlayer.release,Even if multiple instances of the same codec are supported some performance degradation may be expected when unnecessary multiple instances are used at the same time.
android.media.MediaPlayer.reset,Resets the MediaPlayer to its uninitialized state. After calling this method you will have to initialize it again by setting the data source and calling prepare().
android.media.MediaPlayer.reset,Reset.
android.media.MediaPlayer.reset,Resets the MediaPlayer to its uninitialized state.
android.media.MediaPlayer.reset,After calling this method you will have to initialize it again by setting the data source and calling prepare().
android.media.MediaPlayer.seekTo,Seeks to specified time position. Same as seekTo(long int) with mode = SEEK_PREVIOUS_SYNC.
android.media.MediaPlayer.seekTo,Seek to.
android.media.MediaPlayer.seekTo,Seeks to specified time position.
android.media.MediaPlayer.seekTo,Same as seekTo(long int) with mode = SEEK_PREVIOUS_SYNC.
android.media.MediaPlayer.seekTo,Moves the media to specified time position by considering the given mode. When seekTo is finished the user will be notified via OnSeekComplete supplied by the user. There is at most one active seekTo processed at any time. If there is a to-be-completed seekTo new seekTo requests will be queued in such a way that only the last request is kept. When current seekTo is completed the queued request will be processed if that request is different from just-finished seekTo operation i.e. the requested position or mode is different.
android.media.MediaPlayer.seekTo,Seek to.
android.media.MediaPlayer.seekTo,Moves the media to specified time position by considering the given mode.
android.media.MediaPlayer.seekTo,When seekTo is finished the user will be notified via OnSeekComplete supplied by the user.
android.media.MediaPlayer.seekTo,There is at most one active seekTo processed at any time.
android.media.MediaPlayer.seekTo,If there is a to-be-completed seekTo new seekTo requests will be queued in such a way that only the last request is kept.
android.media.MediaPlayer.seekTo,When current seekTo is completed the queued request will be processed if that request is different from just-finished seekTo operation i.e.
android.media.MediaPlayer.seekTo,the requested position or mode is different.
android.media.MediaPlayer.setAudioStreamType,This method was deprecated in API level 26. use setAudioAttributes(android.media.AudioAttributes) Sets the audio stream type for this MediaPlayer. See AudioManager for a list of stream types. Must call this method before prepare() or prepareAsync() in order for the target stream type to become effective thereafter.
android.media.MediaPlayer.setAudioStreamType,Set audio stream type.
android.media.MediaPlayer.setAudioStreamType,This method was deprecated in API level 26.
android.media.MediaPlayer.setAudioStreamType,use setAudioAttributes(android.media.AudioAttributes) Sets the audio stream type for this MediaPlayer.
android.media.MediaPlayer.setAudioStreamType,See AudioManager for a list of stream types.
android.media.MediaPlayer.setAudioStreamType,Must call this method before prepare() or prepareAsync() in order for the target stream type to become effective thereafter.
android.media.MediaPlayer.setDataSource,Sets the data source (AssetFileDescriptor) to use. It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns.
android.media.MediaPlayer.setDataSource,Set data source.
android.media.MediaPlayer.setDataSource,Sets the data source (AssetFileDescriptor) to use.
android.media.MediaPlayer.setDataSource,It is the caller's responsibility to close the file descriptor.
android.media.MediaPlayer.setDataSource,It is safe to do so as soon as this call returns.
android.media.MediaPlayer.setDataSource,Sets the data source (FileDescriptor) to use. It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns.
android.media.MediaPlayer.setDataSource,Set data source.
android.media.MediaPlayer.setDataSource,Sets the data source (FileDescriptor) to use.
android.media.MediaPlayer.setDataSource,It is the caller's responsibility to close the file descriptor.
android.media.MediaPlayer.setDataSource,It is safe to do so as soon as this call returns.
android.media.MediaPlayer.setDataSource,Sets the data source (FileDescriptor) to use. The FileDescriptor must be seekable (N.B. a LocalSocket is not seekable). It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns.
android.media.MediaPlayer.setDataSource,Set data source.
android.media.MediaPlayer.setDataSource,Sets the data source (FileDescriptor) to use.
android.media.MediaPlayer.setDataSource,The FileDescriptor must be seekable (N.B.
android.media.MediaPlayer.setDataSource,a LocalSocket is not seekable).
android.media.MediaPlayer.setDataSource,It is the caller's responsibility to close the file descriptor.
android.media.MediaPlayer.setDataSource,It is safe to do so as soon as this call returns.
android.media.MediaPlayer.setDataSource,Sets the data source (file-path or http/rtsp URL) to use. When path refers to a local file the file may actually be opened by a process other than the calling application. This implies that the pathname should be an absolute path (as any other process runs with unspecified current working directory) and that the pathname should reference a world-readable file. As an alternative the application could first open the file for reading and then use the file descriptor form setDataSource(java.io.FileDescriptor).
android.media.MediaPlayer.setDataSource,Set data source.
android.media.MediaPlayer.setDataSource,Sets the data source (file-path or http/rtsp URL) to use.
android.media.MediaPlayer.setDataSource,When path refers to a local file the file may actually be opened by a process other than the calling application.
android.media.MediaPlayer.setDataSource,This implies that the pathname should be an absolute path (as any other process runs with unspecified current working directory) and that the pathname should reference a world-readable file.
android.media.MediaPlayer.setDataSource,As an alternative the application could first open the file for reading and then use the file descriptor form setDataSource(java.io.FileDescriptor).
android.media.MediaPlayer.setDataSource,"Sets the data source as a content Uri. To provide cookies for the subsequent HTTP requests you can install your own default cookie handler and use other variants of setDataSource APIs instead. Alternatively you can use this API to pass the cookies as a list of HttpCookie. If the app has not installed a CookieHandler already this API creates a CookieManager and populates its CookieStore with the provided cookies. If the app has installed its own handler already this API requires the handler to be of CookieManager type such that the API can update the manager’s CookieStore. Note that the cross domain redirection is allowed by default but that can be changed with key/value pairs through the headers parameter with ""android-allow-cross-domain-redirect"" as the key and ""0"" or ""1"" as the value to disallow or allow cross domain redirection."
android.media.MediaPlayer.setDataSource,Set data source.
android.media.MediaPlayer.setDataSource,Sets the data source as a content Uri.
android.media.MediaPlayer.setDataSource,To provide cookies for the subsequent HTTP requests you can install your own default cookie handler and use other variants of setDataSource APIs instead.
android.media.MediaPlayer.setDataSource,Alternatively you can use this API to pass the cookies as a list of HttpCookie.
android.media.MediaPlayer.setDataSource,If the app has not installed a CookieHandler already this API creates a CookieManager and populates its CookieStore with the provided cookies.
android.media.MediaPlayer.setDataSource,If the app has installed its own handler already this API requires the handler to be of CookieManager type such that the API can update the manager’s CookieStore.
android.media.MediaPlayer.setDataSource,"Note that the cross domain redirection is allowed by default but that can be changed with key/value pairs through the headers parameter with ""android-allow-cross-domain-redirect"" as the key and ""0"" or ""1"" as the value to disallow or allow cross domain redirection."
android.media.MediaPlayer.setDataSource,"Sets the data source as a content Uri. Note that the cross domain redirection is allowed by default but that can be changed with key/value pairs through the headers parameter with ""android-allow-cross-domain-redirect"" as the key and ""0"" or ""1"" as the value to disallow or allow cross domain redirection."
android.media.MediaPlayer.setDataSource,Set data source.
android.media.MediaPlayer.setDataSource,Sets the data source as a content Uri.
android.media.MediaPlayer.setDataSource,"Note that the cross domain redirection is allowed by default but that can be changed with key/value pairs through the headers parameter with ""android-allow-cross-domain-redirect"" as the key and ""0"" or ""1"" as the value to disallow or allow cross domain redirection."
android.media.MediaPlayer.setDataSource,Sets the data source (MediaDataSource) to use.
android.media.MediaPlayer.setDataSource,Set data source.
android.media.MediaPlayer.setDataSource,Sets the data source as a content Uri.
android.media.MediaPlayer.setDataSource,Set data source.
android.media.MediaPlayer.setDisplay,Sets the SurfaceHolder to use for displaying the video portion of the media. Either a surface holder or surface must be set if a display or video sink is needed. Not calling this method or setSurface(android.view.Surface) when playing back a video will result in only the audio track being played. A null surface holder or surface will result in only the audio track being played.
android.media.MediaPlayer.setDisplay,Set display.
android.media.MediaPlayer.setDisplay,Sets the SurfaceHolder to use for displaying the video portion of the media.
android.media.MediaPlayer.setDisplay,Either a surface holder or surface must be set if a display or video sink is needed.
android.media.MediaPlayer.setDisplay,Not calling this method or setSurface(android.view.Surface) when playing back a video will result in only the audio track being played.
android.media.MediaPlayer.setDisplay,A null surface holder or surface will result in only the audio track being played.
android.media.MediaPlayer.setLooping,Sets the player to be looping or non-looping.
android.media.MediaPlayer.setLooping,Set looping.
android.media.MediaPlayer.setScreenOnWhilePlaying,Control whether we should use the attached SurfaceHolder to keep the screen on while video playback is occurring. This is the preferred method over setWakeMode(Context int) where possible since it doesn't require that the application have permission for low-level wake lock access.
android.media.MediaPlayer.setScreenOnWhilePlaying,Set screen on while playing.
android.media.MediaPlayer.setScreenOnWhilePlaying,Control whether we should use the attached SurfaceHolder to keep the screen on while video playback is occurring.
android.media.MediaPlayer.setScreenOnWhilePlaying,This is the preferred method over setWakeMode(Context int) where possible since it doesn't require that the application have permission for low-level wake lock access.
android.media.MediaPlayer.setSurface,Sets the Surface to be used as the sink for the video portion of the media. This is similar to setDisplay(android.view.SurfaceHolder) but does not support setScreenOnWhilePlaying(boolean). Setting a Surface will un-set any Surface or SurfaceHolder that was previously set. A null surface will result in only the audio track being played. If the Surface sends frames to a SurfaceTexture the timestamps returned from SurfaceTexture#getTimestamp() will have an unspecified zero point. These timestamps cannot be directly compared between different media sources different instances of the same media source or multiple runs of the same program. The timestamp is normally monotonically increasing and is unaffected by time-of-day adjustments but it is reset when the position is set.
android.media.MediaPlayer.setSurface,Set surface.
android.media.MediaPlayer.setSurface,Sets the Surface to be used as the sink for the video portion of the media.
android.media.MediaPlayer.setSurface,This is similar to setDisplay(android.view.SurfaceHolder) but does not support setScreenOnWhilePlaying(boolean).
android.media.MediaPlayer.setSurface,Setting a Surface will un-set any Surface or SurfaceHolder that was previously set.
android.media.MediaPlayer.setSurface,A null surface will result in only the audio track being played.
android.media.MediaPlayer.setSurface,If the Surface sends frames to a SurfaceTexture the timestamps returned from SurfaceTexture#getTimestamp() will have an unspecified zero point.
android.media.MediaPlayer.setSurface,These timestamps cannot be directly compared between different media sources different instances of the same media source or multiple runs of the same program.
android.media.MediaPlayer.setSurface,The timestamp is normally monotonically increasing and is unaffected by time-of-day adjustments but it is reset when the position is set.
android.media.MediaPlayer.setVolume,Sets the volume on this player. This API is recommended for balancing the output of audio streams within an application. Unless you are writing an application to control user settings this API should be used in preference to AudioManager#setStreamVolume(int int int) which sets the volume of ALL streams of a particular type. Note that the passed volume values are raw scalars in range 0.0 to 1.0. UI controls should be scaled logarithmically.
android.media.MediaPlayer.setVolume,Set volume.
android.media.MediaPlayer.setVolume,Sets the volume on this player.
android.media.MediaPlayer.setVolume,This API is recommended for balancing the output of audio streams within an application.
android.media.MediaPlayer.setVolume,Unless you are writing an application to control user settings this API should be used in preference to AudioManager#setStreamVolume(int int int) which sets the volume of ALL streams of a particular type.
android.media.MediaPlayer.setVolume,Note that the passed volume values are raw scalars in range 0.0 to 1.0.
android.media.MediaPlayer.setVolume,UI controls should be scaled logarithmically.
android.media.MediaPlayer.start,Starts or resumes playback. If playback had previously been paused playback will continue from where it was paused. If playback had been stopped or never started before playback will start at the beginning.
android.media.MediaPlayer.start,Start.
android.media.MediaPlayer.start,Starts or resumes playback.
android.media.MediaPlayer.start,If playback had previously been paused playback will continue from where it was paused.
android.media.MediaPlayer.start,If playback had been stopped or never started before playback will start at the beginning.
android.media.MediaPlayer.stop,Stops playback after playback has been started or paused.
android.media.MediaPlayer.stop,Stop.
android.media.MediaRecorder.getMaxAmplitude,Returns the maximum absolute amplitude that was sampled since the last call to this method. Call this only after the setAudioSource().
android.media.MediaRecorder.getMaxAmplitude,Get max amplitude.
android.media.MediaRecorder.getMaxAmplitude,Returns the maximum absolute amplitude that was sampled since the last call to this method.
android.media.MediaRecorder.getMaxAmplitude,Call this only after the setAudioSource().
android.media.MediaRecorder.prepare,Prepares the recorder to begin capturing and encoding data. This method must be called after setting up the desired audio and video sources encoders file format etc. but before start().
android.media.MediaRecorder.prepare,Prepare.
android.media.MediaRecorder.prepare,Prepares the recorder to begin capturing and encoding data.
android.media.MediaRecorder.prepare,This method must be called after setting up the desired audio and video sources encoders file format etc.
android.media.MediaRecorder.prepare,but before start().
android.media.MediaRecorder.release,Releases resources associated with this MediaRecorder object. It is good practice to call this method when you're done using the MediaRecorder. In particular whenever an Activity of an application is paused (its onPause() method is called) or stopped (its onStop() method is called) this method should be invoked to release the MediaRecorder object unless the application has a special need to keep the object around. In addition to unnecessary resources (such as memory and instances of codecs) being held failure to call this method immediately if a MediaRecorder object is no longer needed may also lead to continuous battery consumption for mobile devices and recording failure for other applications if no multiple instances of the same codec are supported on a device. Even if multiple instances of the same codec are supported some performance degradation may be expected when unnecessary multiple instances are used at the same time.
android.media.MediaRecorder.release,Release.
android.media.MediaRecorder.release,Releases resources associated with this MediaRecorder object.
android.media.MediaRecorder.release,It is good practice to call this method when you're done using the MediaRecorder.
android.media.MediaRecorder.release,In particular whenever an Activity of an application is paused (its onPause() method is called) or stopped (its onStop() method is called) this method should be invoked to release the MediaRecorder object unless the application has a special need to keep the object around.
android.media.MediaRecorder.release,In addition to unnecessary resources (such as memory and instances of codecs) being held failure to call this method immediately if a MediaRecorder object is no longer needed may also lead to continuous battery consumption for mobile devices and recording failure for other applications if no multiple instances of the same codec are supported on a device.
android.media.MediaRecorder.release,Even if multiple instances of the same codec are supported some performance degradation may be expected when unnecessary multiple instances are used at the same time.
android.media.MediaRecorder.reset,Restarts the MediaRecorder to its idle state. After calling this method you will have to configure it again as if it had just been constructed.
android.media.MediaRecorder.reset,Reset.
android.media.MediaRecorder.reset,Restarts the MediaRecorder to its idle state.
android.media.MediaRecorder.reset,After calling this method you will have to configure it again as if it had just been constructed.
android.media.MediaRecorder.setAudioEncoder,Sets the audio encoder to be used for recording. If this method is not called the output file will not contain an audio track. Call this after setOutputFormat() but before prepare().
android.media.MediaRecorder.setAudioEncoder,Set audio encoder.
android.media.MediaRecorder.setAudioEncoder,Sets the audio encoder to be used for recording.
android.media.MediaRecorder.setAudioEncoder,If this method is not called the output file will not contain an audio track.
android.media.MediaRecorder.setAudioEncoder,Call this after setOutputFormat() but before prepare().
android.media.MediaRecorder.setAudioSource,Sets the audio source to be used for recording. If this method is not called the output file will not contain an audio track. The source needs to be specified before setting recording-parameters or encoders. Call this only before setOutputFormat().
android.media.MediaRecorder.setAudioSource,Set audio source.
android.media.MediaRecorder.setAudioSource,Sets the audio source to be used for recording.
android.media.MediaRecorder.setAudioSource,If this method is not called the output file will not contain an audio track.
android.media.MediaRecorder.setAudioSource,The source needs to be specified before setting recording-parameters or encoders.
android.media.MediaRecorder.setAudioSource,Call this only before setOutputFormat().
android.media.MediaRecorder.setCamera,This method was deprecated in API level 21. Use getSurface() and the android.hardware.camera2 API instead. Sets a Camera to use for recording. Use this function to switch quickly between preview and capture mode without a teardown of the camera object. Camera.unlock() should be called before this. Must call before prepare().
android.media.MediaRecorder.setCamera,Set camera.
android.media.MediaRecorder.setCamera,This method was deprecated in API level 21.
android.media.MediaRecorder.setCamera,Use getSurface() and the android.hardware.camera2 API instead.
android.media.MediaRecorder.setCamera,Sets a Camera to use for recording.
android.media.MediaRecorder.setCamera,Use this function to switch quickly between preview and capture mode without a teardown of the camera object.
android.media.MediaRecorder.setCamera,Camera.unlock() should be called before this.
android.media.MediaRecorder.setCamera,Must call before prepare().
android.media.MediaRecorder.setOrientationHint,Sets the orientation hint for output video playback. This method should be called before prepare(). This method will not trigger the source video frame to rotate during video recording but to add a composition matrix containing the rotation angle in the output video if the output format is OutputFormat.THREE_GPP or OutputFormat.MPEG_4 so that a video player can choose the proper orientation for playback. Note that some video players may choose to ignore the compostion matrix in a video during playback.
android.media.MediaRecorder.setOrientationHint,Set orientation hint.
android.media.MediaRecorder.setOrientationHint,Sets the orientation hint for output video playback.
android.media.MediaRecorder.setOrientationHint,This method should be called before prepare().
android.media.MediaRecorder.setOrientationHint,This method will not trigger the source video frame to rotate during video recording but to add a composition matrix containing the rotation angle in the output video if the output format is OutputFormat.THREE_GPP or OutputFormat.MPEG_4 so that a video player can choose the proper orientation for playback.
android.media.MediaRecorder.setOrientationHint,Note that some video players may choose to ignore the compostion matrix in a video during playback.
android.media.MediaRecorder.setOutputFile,Pass in the file descriptor of the file to be written. Call this after setOutputFormat() but before prepare().
android.media.MediaRecorder.setOutputFile,Set output file.
android.media.MediaRecorder.setOutputFile,Pass in the file descriptor of the file to be written.
android.media.MediaRecorder.setOutputFile,Call this after setOutputFormat() but before prepare().
android.media.MediaRecorder.setOutputFile,Sets the path of the output file to be produced. Call this after setOutputFormat() but before prepare().
android.media.MediaRecorder.setOutputFile,Set output file.
android.media.MediaRecorder.setOutputFile,Sets the path of the output file to be produced.
android.media.MediaRecorder.setOutputFile,Call this after setOutputFormat() but before prepare().
android.media.MediaRecorder.setOutputFile,Pass in the file object to be written. Call this after setOutputFormat() but before prepare(). File should be seekable. After setting the next output file application should not use the file until stop(). Application is responsible for cleaning up unused files after stop() is called.
android.media.MediaRecorder.setOutputFile,Set output file.
android.media.MediaRecorder.setOutputFile,Pass in the file object to be written.
android.media.MediaRecorder.setOutputFile,Call this after setOutputFormat() but before prepare().
android.media.MediaRecorder.setOutputFile,File should be seekable.
android.media.MediaRecorder.setOutputFile,After setting the next output file application should not use the file until stop().
android.media.MediaRecorder.setOutputFile,Application is responsible for cleaning up unused files after stop() is called.
android.media.MediaRecorder.setOutputFormat,Sets the format of the output file produced during recording. Call this after setAudioSource()/setVideoSource() but before prepare(). It is recommended to always use 3GP format when using the H.263 video encoder and AMR audio encoder. Using an MPEG-4 container format may confuse some desktop players.
android.media.MediaRecorder.setOutputFormat,Set output format.
android.media.MediaRecorder.setOutputFormat,Sets the format of the output file produced during recording.
android.media.MediaRecorder.setOutputFormat,Call this after setAudioSource()/setVideoSource() but before prepare().
android.media.MediaRecorder.setOutputFormat,It is recommended to always use 3GP format when using the H.263 video encoder and AMR audio encoder.
android.media.MediaRecorder.setOutputFormat,Using an MPEG-4 container format may confuse some desktop players.
android.media.MediaRecorder.setPreviewDisplay,Sets a Surface to show a preview of recorded media (video). Calls this before prepare() to make sure that the desirable preview display is set. If setCamera(android.hardware.Camera) is used and the surface has been already set to the camera application do not need to call this. If this is called with non-null surface the preview surface of the camera will be replaced by the new surface. If this method is called with null surface or not called at all media recorder will not change the preview surface of the camera.
android.media.MediaRecorder.setPreviewDisplay,Set preview display.
android.media.MediaRecorder.setPreviewDisplay,Sets a Surface to show a preview of recorded media (video).
android.media.MediaRecorder.setPreviewDisplay,Calls this before prepare() to make sure that the desirable preview display is set.
android.media.MediaRecorder.setPreviewDisplay,If setCamera(android.hardware.Camera) is used and the surface has been already set to the camera application do not need to call this.
android.media.MediaRecorder.setPreviewDisplay,If this is called with non-null surface the preview surface of the camera will be replaced by the new surface.
android.media.MediaRecorder.setPreviewDisplay,If this method is called with null surface or not called at all media recorder will not change the preview surface of the camera.
android.media.MediaRecorder.setProfile,Uses the settings from a CamcorderProfile object for recording. This method should be called after the video AND audio sources are set and before setOutputFile(). If a time lapse CamcorderProfile is used audio related source or recording parameters are ignored.
android.media.MediaRecorder.setProfile,Set profile.
android.media.MediaRecorder.setProfile,Uses the settings from a CamcorderProfile object for recording.
android.media.MediaRecorder.setProfile,This method should be called after the video AND audio sources are set and before setOutputFile().
android.media.MediaRecorder.setProfile,If a time lapse CamcorderProfile is used audio related source or recording parameters are ignored.
android.media.MediaRecorder.setVideoSource,Sets the video source to be used for recording. If this method is not called the output file will not contain an video track. The source needs to be specified before setting recording-parameters or encoders. Call this only before setOutputFormat().
android.media.MediaRecorder.setVideoSource,Set video source.
android.media.MediaRecorder.setVideoSource,Sets the video source to be used for recording.
android.media.MediaRecorder.setVideoSource,If this method is not called the output file will not contain an video track.
android.media.MediaRecorder.setVideoSource,The source needs to be specified before setting recording-parameters or encoders.
android.media.MediaRecorder.setVideoSource,Call this only before setOutputFormat().
android.media.MediaRecorder.start,Begins capturing and encoding data to the file specified with setOutputFile(). Call this after prepare(). Since API level 13 if applications set a camera via setCamera(android.hardware.Camera) the apps can use the camera after this method call. The apps do not need to lock the camera again. However if this method fails the apps should still lock the camera back. The apps should not start another recording session during recording.
android.media.MediaRecorder.start,Start.
android.media.MediaRecorder.start,Begins capturing and encoding data to the file specified with setOutputFile().
android.media.MediaRecorder.start,Call this after prepare().
android.media.MediaRecorder.start,Since API level 13 if applications set a camera via setCamera(android.hardware.Camera) the apps can use the camera after this method call.
android.media.MediaRecorder.start,The apps do not need to lock the camera again.
android.media.MediaRecorder.start,However if this method fails the apps should still lock the camera back.
android.media.MediaRecorder.start,The apps should not start another recording session during recording.
android.media.MediaRouter.createRouteCategory,Create a new route category. Each route must belong to a category.
android.media.MediaRouter.createRouteCategory,Create route category.
android.media.MediaRouter.createRouteCategory,Create a new route category.
android.media.MediaRouter.createRouteCategory,Each route must belong to a category.
android.media.MediaRouter.createRouteCategory,Create a new route category. Each route must belong to a category.
android.media.MediaRouter.createRouteCategory,Create route category.
android.media.MediaRouter.createRouteCategory,Create a new route category.
android.media.MediaRouter.createRouteCategory,Each route must belong to a category.
android.media.MediaRouter.getCategoryAt,Return the MediaRouter.RouteCategory at the given index. Valid indices are in the range [0-getCategoryCount).
android.media.MediaRouter.getCategoryAt,Get category at.
android.media.MediaRouter.getCategoryAt,Return the MediaRouter.RouteCategory at the given index.
android.media.MediaRouter.getCategoryAt,Valid indices are in the range [0-getCategoryCount).
android.media.MediaRouter.getCategoryCount,Return the number of MediaRouter.RouteCategory currently represented by routes known to this MediaRouter.
android.media.MediaRouter.getCategoryCount,Get category count.
android.media.MediaRouter.getDefaultRoute,Gets the default route for playing media content on the system. The system always provides a default route.
android.media.MediaRouter.getDefaultRoute,Get default route.
android.media.MediaRouter.getDefaultRoute,Gets the default route for playing media content on the system.
android.media.MediaRouter.getDefaultRoute,The system always provides a default route.
android.media.MediaRouter.getRouteAt,Return the route at the specified index.
android.media.MediaRouter.getRouteAt,Get route at.
android.media.MediaRouter.getRouteCount,Return the number of MediaRouter.RouteInfo currently known to this MediaRouter.
android.media.MediaRouter.getRouteCount,Get route count.
android.media.MediaRouter.getSelectedRoute,Return the currently selected route for any of the given types.
android.media.MediaRouter.getSelectedRoute,Get selected route.
android.media.MediaScannerConnection.connect,Initiates a connection to the media scanner service. MediaScannerConnectionClient#onMediaScannerConnected() will be called when the connection is established.
android.media.MediaScannerConnection.connect,Connect.
android.media.MediaScannerConnection.connect,Initiates a connection to the media scanner service.
android.media.MediaScannerConnection.connect,MediaScannerConnectionClient#onMediaScannerConnected() will be called when the connection is established.
android.media.MediaScannerConnection.disconnect,Releases the connection to the media scanner service.
android.media.MediaScannerConnection.disconnect,Disconnect.
android.media.MediaScannerConnection.isConnected,Returns whether we are connected to the media scanner service.
android.media.MediaScannerConnection.isConnected,Is connected.
android.media.MediaScannerConnection.scanFile,Requests the media scanner to scan a file. Success or failure of the scanning operation cannot be determined until MediaScannerConnectionClient#onScanCompleted(String Uri) is called.
android.media.MediaScannerConnection.scanFile,Scan file.
android.media.MediaScannerConnection.scanFile,Requests the media scanner to scan a file.
android.media.MediaScannerConnection.scanFile,Success or failure of the scanning operation cannot be determined until MediaScannerConnectionClient#onScanCompleted(String Uri) is called.
android.media.MediaScannerConnection.scanFile,Convenience for constructing a MediaScannerConnection calling connect() on it and calling scanFile(Context String[] String[] MediaScannerConnection.OnScanCompletedListener) with the given path and mimeType when the connection is established.
android.media.MediaScannerConnection.scanFile,Scan file.
android.media.Rating.getPercentRating,Return the percentage-based rating value.
android.media.Rating.getPercentRating,Get percent rating.
android.media.Rating.getRatingStyle,Return the rating style.
android.media.Rating.getRatingStyle,Get rating style.
android.media.Rating.getStarRating,Return the star-based rating value.
android.media.Rating.getStarRating,Get star rating.
android.media.Rating.hasHeart,"Return whether the rating is ""heart selected""."
android.media.Rating.hasHeart,Has heart.
android.media.Rating.isRated,Return whether there is a rating value available.
android.media.Rating.isRated,Is rated.
android.media.Rating.isThumbUp,"Return whether the rating is ""thumb up""."
android.media.Rating.isThumbUp,Is thumb up.
android.media.Rating.newHeartRating,Return a Rating instance with a heart-based rating. Create and return a new Rating instance with a rating style of RATING_HEART and a heart-based rating.
android.media.Rating.newHeartRating,New heart rating.
android.media.Rating.newHeartRating,Return a Rating instance with a heart-based rating.
android.media.Rating.newHeartRating,Create and return a new Rating instance with a rating style of RATING_HEART and a heart-based rating.
android.media.Rating.newPercentageRating,Return a Rating instance with a percentage-based rating. Create and return a new Rating instance with a RATING_PERCENTAGE rating style and a rating of the given percentage.
android.media.Rating.newPercentageRating,New percentage rating.
android.media.Rating.newPercentageRating,Return a Rating instance with a percentage-based rating.
android.media.Rating.newPercentageRating,Create and return a new Rating instance with a RATING_PERCENTAGE rating style and a rating of the given percentage.
android.media.Rating.newStarRating,Return a Rating instance with a star-based rating. Create and return a new Rating instance with one of the star-base rating styles and the given integer or fractional number of stars. Non integer values can for instance be used to represent an average rating value which might not be an integer number of stars.
android.media.Rating.newStarRating,New star rating.
android.media.Rating.newStarRating,Return a Rating instance with a star-based rating.
android.media.Rating.newStarRating,Create and return a new Rating instance with one of the star-base rating styles and the given integer or fractional number of stars.
android.media.Rating.newStarRating,Non integer values can for instance be used to represent an average rating value which might not be an integer number of stars.
android.media.Rating.newThumbRating,"Return a Rating instance with a thumb-based rating. Create and return a new Rating instance with a RATING_THUMB_UP_DOWN rating style and a ""thumb up"" or ""thumb down"" rating."
android.media.Rating.newThumbRating,New thumb rating.
android.media.Rating.newThumbRating,Return a Rating instance with a thumb-based rating.
android.media.Rating.newThumbRating,"Create and return a new Rating instance with a RATING_THUMB_UP_DOWN rating style and a ""thumb up"" or ""thumb down"" rating."
android.media.Rating.newUnratedRating,Return a Rating instance with no rating. Create and return a new Rating instance with no rating known for the given rating style.
android.media.Rating.newUnratedRating,New unrated rating.
android.media.Rating.newUnratedRating,Return a Rating instance with no rating.
android.media.Rating.newUnratedRating,Create and return a new Rating instance with no rating known for the given rating style.
android.media.RemoteControlClient.editMetadata,Creates a MetadataEditor.
android.media.RemoteControlClient.editMetadata,Edit metadata.
android.media.RemoteControlClient.setPlaybackState,Sets the current playback state and the matching media position for the current playback speed.
android.media.RemoteControlClient.setPlaybackState,Set playback state.
android.media.RemoteControlClient.setPlaybackState,Sets the current playback state.
android.media.RemoteControlClient.setPlaybackState,Set playback state.
android.media.RemoteControlClient.setTransportControlFlags,Sets the flags for the media transport control buttons that this client supports.
android.media.RemoteControlClient.setTransportControlFlags,Set transport control flags.
android.media.Ringtone.getTitle,Returns a human-presentable title for ringtone. Looks in media content provider. If not in either uses the filename.
android.media.Ringtone.getTitle,Get title.
android.media.Ringtone.getTitle,Returns a human-presentable title for ringtone.
android.media.Ringtone.getTitle,Looks in media content provider.
android.media.Ringtone.getTitle,If not in either uses the filename.
android.media.Ringtone.isPlaying,Whether this ringtone is currently playing.
android.media.Ringtone.isPlaying,Is playing.
android.media.Ringtone.play,Plays the ringtone.
android.media.Ringtone.play,Play.
android.media.RingtoneManager.getActualDefaultRingtoneUri,Gets the current default sound's Uri. This will give the actual sound Uri instead of using this most clients can use System#DEFAULT_RINGTONE_URI.
android.media.RingtoneManager.getActualDefaultRingtoneUri,Get actual default ringtone uri.
android.media.RingtoneManager.getActualDefaultRingtoneUri,Gets the current default sound's Uri.
android.media.RingtoneManager.getActualDefaultRingtoneUri,This will give the actual sound Uri instead of using this most clients can use System#DEFAULT_RINGTONE_URI.
android.media.RingtoneManager.getCursor,Returns a Cursor of all the ringtones available. The returned cursor will be the same cursor returned each time this method is called so do not Cursor#close() the cursor. The cursor can be Cursor#deactivate() safely. If RingtoneManager#RingtoneManager(Activity) was not used the caller should manage the returned cursor through its activity's life cycle to prevent leaking the cursor. Note that the list of ringtones available will differ depending on whether the caller has the Manifest.permission.READ_EXTERNAL_STORAGE permission.
android.media.RingtoneManager.getCursor,Get cursor.
android.media.RingtoneManager.getCursor,Returns a Cursor of all the ringtones available.
android.media.RingtoneManager.getCursor,The returned cursor will be the same cursor returned each time this method is called so do not Cursor#close() the cursor.
android.media.RingtoneManager.getCursor,The cursor can be Cursor#deactivate() safely.
android.media.RingtoneManager.getCursor,If RingtoneManager#RingtoneManager(Activity) was not used the caller should manage the returned cursor through its activity's life cycle to prevent leaking the cursor.
android.media.RingtoneManager.getCursor,Note that the list of ringtones available will differ depending on whether the caller has the Manifest.permission.READ_EXTERNAL_STORAGE permission.
android.media.RingtoneManager.getDefaultUri,Returns the Uri for the default ringtone of a particular type. Rather than returning the actual ringtone's sound Uri this will return the symbolic Uri which will resolved to the actual sound when played.
android.media.RingtoneManager.getDefaultUri,Get default uri.
android.media.RingtoneManager.getDefaultUri,Returns the Uri for the default ringtone of a particular type.
android.media.RingtoneManager.getDefaultUri,Rather than returning the actual ringtone's sound Uri this will return the symbolic Uri which will resolved to the actual sound when played.
android.media.RingtoneManager.getRingtone,Returns a Ringtone for a given sound URI. If the given URI cannot be opened for any reason this method will attempt to fallback on another sound. If it cannot find any it will return null.
android.media.RingtoneManager.getRingtone,Get ringtone.
android.media.RingtoneManager.getRingtone,Returns a Ringtone for a given sound URI.
android.media.RingtoneManager.getRingtone,If the given URI cannot be opened for any reason this method will attempt to fallback on another sound.
android.media.RingtoneManager.getRingtone,If it cannot find any it will return null.
android.media.RingtoneManager.getRingtone,Gets a Ringtone for the ringtone at the given position in the Cursor.
android.media.RingtoneManager.getRingtone,Get ringtone.
android.media.RingtoneManager.isDefault,Returns whether the given Uri is one of the default ringtones.
android.media.RingtoneManager.isDefault,Is default.
android.media.RingtoneManager.setActualDefaultRingtoneUri,Sets the Uri of the default sound for a given sound type.
android.media.RingtoneManager.setActualDefaultRingtoneUri,Set actual default ringtone uri.
android.media.RingtoneManager.setType,Sets which type(s) of ringtones will be listed by this.
android.media.RingtoneManager.setType,Set type.
android.media.SoundPool.autoPause,Pause all active streams. Pause all streams that are currently playing. This function iterates through all the active streams and pauses any that are playing. It also sets a flag so that any streams that are playing can be resumed by calling autoResume().
android.media.SoundPool.autoPause,Auto pause.
android.media.SoundPool.autoPause,Pause all active streams.
android.media.SoundPool.autoPause,Pause all streams that are currently playing.
android.media.SoundPool.autoPause,This function iterates through all the active streams and pauses any that are playing.
android.media.SoundPool.autoPause,It also sets a flag so that any streams that are playing can be resumed by calling autoResume().
android.media.SoundPool.autoResume,Resume all previously active streams. Automatically resumes all streams that were paused in previous calls to autoPause().
android.media.SoundPool.autoResume,Auto resume.
android.media.SoundPool.autoResume,Resume all previously active streams.
android.media.SoundPool.autoResume,Automatically resumes all streams that were paused in previous calls to autoPause().
android.media.SoundPool.load,"Load the sound from the specified APK resource. Note that the extension is dropped. For example if you want to load a sound from the raw resource file ""explosion.mp3"" you would specify ""R.raw.explosion"" as the resource ID. Note that this means you cannot have both an ""explosion.wav"" and an ""explosion.mp3"" in the res/raw directory."
android.media.SoundPool.load,Load.
android.media.SoundPool.load,Load the sound from the specified APK resource.
android.media.SoundPool.load,Note that the extension is dropped.
android.media.SoundPool.load,"For example if you want to load a sound from the raw resource file ""explosion.mp3"" you would specify ""R.raw.explosion"" as the resource ID."
android.media.SoundPool.load,"Note that this means you cannot have both an ""explosion.wav"" and an ""explosion.mp3"" in the res/raw directory."
android.media.SoundPool.load,Load the sound from the specified path.
android.media.SoundPool.load,Load.
android.media.SoundPool.load,Load the sound from an asset file descriptor.
android.media.SoundPool.load,Load.
android.media.SoundPool.load,Load the sound from a FileDescriptor. This version is useful if you store multiple sounds in a single binary. The offset specifies the offset from the start of the file and the length specifies the length of the sound within the file.
android.media.SoundPool.load,Load.
android.media.SoundPool.load,Load the sound from a FileDescriptor.
android.media.SoundPool.load,This version is useful if you store multiple sounds in a single binary.
android.media.SoundPool.load,The offset specifies the offset from the start of the file and the length specifies the length of the sound within the file.
android.media.SoundPool.pause,Pause a playback stream. Pause the stream specified by the streamID. This is the value returned by the play() function. If the stream is playing it will be paused. If the stream is not playing (e.g. is stopped or was previously paused) calling this function will have no effect.
android.media.SoundPool.pause,Pause.
android.media.SoundPool.pause,Pause a playback stream.
android.media.SoundPool.pause,Pause the stream specified by the streamID.
android.media.SoundPool.pause,This is the value returned by the play() function.
android.media.SoundPool.pause,If the stream is playing it will be paused.
android.media.SoundPool.pause,If the stream is not playing (e.g.
android.media.SoundPool.pause,is stopped or was previously paused) calling this function will have no effect.
android.media.SoundPool.play,Play a sound from a sound ID. Play the sound specified by the soundID. This is the value returned by the load() function. Returns a non-zero streamID if successful zero if it fails. The streamID can be used to further control playback. Note that calling play() may cause another sound to stop playing if the maximum number of active streams is exceeded. A loop value of -1 means loop forever a value of 0 means don't loop other values indicate the number of repeats e.g. a value of 1 plays the audio twice. The playback rate allows the application to vary the playback rate (pitch) of the sound. A value of 1.0 means play back at the original frequency. A value of 2.0 means play back twice as fast and a value of 0.5 means playback at half speed.
android.media.SoundPool.play,Play.
android.media.SoundPool.play,Play a sound from a sound ID.
android.media.SoundPool.play,Play the sound specified by the soundID.
android.media.SoundPool.play,This is the value returned by the load() function.
android.media.SoundPool.play,Returns a non-zero streamID if successful zero if it fails.
android.media.SoundPool.play,The streamID can be used to further control playback.
android.media.SoundPool.play,Note that calling play() may cause another sound to stop playing if the maximum number of active streams is exceeded.
android.media.SoundPool.play,A loop value of -1 means loop forever a value of 0 means don't loop other values indicate the number of repeats e.g.
android.media.SoundPool.play,a value of 1 plays the audio twice.
android.media.SoundPool.play,The playback rate allows the application to vary the playback rate (pitch) of the sound.
android.media.SoundPool.play,A value of 1.0 means play back at the original frequency.
android.media.SoundPool.play,A value of 2.0 means play back twice as fast and a value of 0.5 means playback at half speed.
android.media.SoundPool.release,Release the SoundPool resources. Release all memory and native resources used by the SoundPool object. The SoundPool can no longer be used and the reference should be set to null.
android.media.SoundPool.release,Release.
android.media.SoundPool.release,Release the SoundPool resources.
android.media.SoundPool.release,Release all memory and native resources used by the SoundPool object.
android.media.SoundPool.release,The SoundPool can no longer be used and the reference should be set to null.
android.media.SoundPool.resume,Resume a playback stream. Resume the stream specified by the streamID. This is the value returned by the play() function. If the stream is paused this will resume playback. If the stream was not previously paused calling this function will have no effect.
android.media.SoundPool.resume,Resume.
android.media.SoundPool.resume,Resume a playback stream.
android.media.SoundPool.resume,Resume the stream specified by the streamID.
android.media.SoundPool.resume,This is the value returned by the play() function.
android.media.SoundPool.resume,If the stream is paused this will resume playback.
android.media.SoundPool.resume,If the stream was not previously paused calling this function will have no effect.
android.media.SoundPool.setRate,Change playback rate. The playback rate allows the application to vary the playback rate (pitch) of the sound. A value of 1.0 means playback at the original frequency. A value of 2.0 means playback twice as fast and a value of 0.5 means playback at half speed. If the stream does not exist it will have no effect.
android.media.SoundPool.setRate,Set rate.
android.media.SoundPool.setRate,Change playback rate.
android.media.SoundPool.setRate,The playback rate allows the application to vary the playback rate (pitch) of the sound.
android.media.SoundPool.setRate,A value of 1.0 means playback at the original frequency.
android.media.SoundPool.setRate,A value of 2.0 means playback twice as fast and a value of 0.5 means playback at half speed.
android.media.SoundPool.setRate,If the stream does not exist it will have no effect.
android.media.SoundPool.setVolume,Set stream volume. Sets the volume on the stream specified by the streamID. This is the value returned by the play() function. The value must be in the range of 0.0 to 1.0. If the stream does not exist it will have no effect.
android.media.SoundPool.setVolume,Set volume.
android.media.SoundPool.setVolume,Set stream volume.
android.media.SoundPool.setVolume,Sets the volume on the stream specified by the streamID.
android.media.SoundPool.setVolume,This is the value returned by the play() function.
android.media.SoundPool.setVolume,The value must be in the range of 0.0 to 1.0.
android.media.SoundPool.setVolume,If the stream does not exist it will have no effect.
android.media.SoundPool.stop,Stop a playback stream. Stop the stream specified by the streamID. This is the value returned by the play() function. If the stream is playing it will be stopped. It also releases any native resources associated with this stream. If the stream is not playing it will have no effect.
android.media.SoundPool.stop,Stop.
android.media.SoundPool.stop,Stop a playback stream.
android.media.SoundPool.stop,Stop the stream specified by the streamID.
android.media.SoundPool.stop,This is the value returned by the play() function.
android.media.SoundPool.stop,If the stream is playing it will be stopped.
android.media.SoundPool.stop,It also releases any native resources associated with this stream.
android.media.SoundPool.stop,If the stream is not playing it will have no effect.
android.media.SoundPool.unload,Unload a sound from a sound ID. Unloads the sound specified by the soundID. This is the value returned by the load() function. Returns true if the sound is successfully unloaded false if the sound was already unloaded.
android.media.SoundPool.unload,Unload.
android.media.SoundPool.unload,Unload a sound from a sound ID.
android.media.SoundPool.unload,Unloads the sound specified by the soundID.
android.media.SoundPool.unload,This is the value returned by the load() function.
android.media.SoundPool.unload,Returns true if the sound is successfully unloaded false if the sound was already unloaded.
android.media.ThumbnailUtils.createVideoThumbnail,This method was deprecated in API level 29. Callers should migrate to using createVideoThumbnail(java.io.File android.util.Size android.os.CancellationSignal) as it offers more control over resizing and cancellation. Create a thumbnail for given video file.
android.media.ThumbnailUtils.createVideoThumbnail,Create video thumbnail.
android.media.ThumbnailUtils.createVideoThumbnail,This method was deprecated in API level 29.
android.media.ThumbnailUtils.createVideoThumbnail,Callers should migrate to using createVideoThumbnail(java.io.File android.util.Size android.os.CancellationSignal) as it offers more control over resizing and cancellation.
android.media.ThumbnailUtils.createVideoThumbnail,Create a thumbnail for given video file.
android.media.ThumbnailUtils.createVideoThumbnail,Create a thumbnail for given video file.
android.media.ThumbnailUtils.createVideoThumbnail,Create video thumbnail.
android.media.ThumbnailUtils.extractThumbnail,Creates a centered bitmap of the desired size.
android.media.ThumbnailUtils.extractThumbnail,Extract thumbnail.
android.media.ThumbnailUtils.extractThumbnail,Creates a centered bitmap of the desired size.
android.media.ThumbnailUtils.extractThumbnail,Extract thumbnail.
android.media.VolumeProvider.setCurrentVolume,Notify the system that the current volume has been changed. This must be called every time the volume changes to ensure it is displayed properly.
android.media.VolumeProvider.setCurrentVolume,Set current volume.
android.media.VolumeProvider.setCurrentVolume,Notify the system that the current volume has been changed.
android.media.VolumeProvider.setCurrentVolume,This must be called every time the volume changes to ensure it is displayed properly.
android.service.dreams.DreamService.onDreamingStarted,Called when the dream's window has been created and is visible and animation may now begin.
android.service.dreams.DreamService.onDreamingStarted,On dreaming started.
android.service.dreams.DreamService.onDreamingStopped,Called when this Dream is stopped either by external request or by calling finish() before the window has been removed.
android.service.dreams.DreamService.onDreamingStopped,On dreaming stopped.
android.os.Binder.clearCallingIdentity,Reset the identity of the incoming IPC on the current thread. This can be useful if while handling an incoming call you will be calling on interfaces of other objects that may be local to your process and need to do permission checks on the calls coming into them (so they will check the permission of your own local process and not whatever process originally called you).
android.os.Binder.clearCallingIdentity,Clear calling identity.
android.os.Binder.clearCallingIdentity,Reset the identity of the incoming IPC on the current thread.
android.os.Binder.clearCallingIdentity,This can be useful if while handling an incoming call you will be calling on interfaces of other objects that may be local to your process and need to do permission checks on the calls coming into them (so they will check the permission of your own local process and not whatever process originally called you).
android.os.Binder.flushPendingCommands,Flush any Binder commands pending in the current thread to the kernel driver. This can be useful to call before performing an operation that may block for a long time to ensure that any pending object references have been released in order to prevent the process from holding on to objects longer than it needs to.
android.os.Binder.flushPendingCommands,Flush pending commands.
android.os.Binder.flushPendingCommands,Flush any Binder commands pending in the current thread to the kernel driver.
android.os.Binder.flushPendingCommands,This can be useful to call before performing an operation that may block for a long time to ensure that any pending object references have been released in order to prevent the process from holding on to objects longer than it needs to.
android.os.Binder.getCallingPid,Return the ID of the process that sent you the current transaction that is being processed. This pid can be used with higher-level system services to determine its identity and check permissions. If the current thread is not currently executing an incoming transaction then its own pid is returned.
android.os.Binder.getCallingPid,Get calling pid.
android.os.Binder.getCallingPid,Return the ID of the process that sent you the current transaction that is being processed.
android.os.Binder.getCallingPid,This pid can be used with higher-level system services to determine its identity and check permissions.
android.os.Binder.getCallingPid,If the current thread is not currently executing an incoming transaction then its own pid is returned.
android.os.Binder.getCallingUid,Return the Linux uid assigned to the process that sent you the current transaction that is being processed. This uid can be used with higher-level system services to determine its identity and check permissions. If the current thread is not currently executing an incoming transaction then its own uid is returned.
android.os.Binder.getCallingUid,Get calling uid.
android.os.Binder.getCallingUid,Return the Linux uid assigned to the process that sent you the current transaction that is being processed.
android.os.Binder.getCallingUid,This uid can be used with higher-level system services to determine its identity and check permissions.
android.os.Binder.getCallingUid,If the current thread is not currently executing an incoming transaction then its own uid is returned.
android.os.Binder.restoreCallingIdentity,Restore the identity of the incoming IPC on the current thread back to a previously identity that was returned by clearCallingIdentity().
android.os.Binder.restoreCallingIdentity,Restore calling identity.
android.os.Build.getRadioVersion,Returns the version string for the radio firmware. May return null (if for instance the radio is not currently on).
android.os.Build.getRadioVersion,Get radio version.
android.os.Build.getRadioVersion,Returns the version string for the radio firmware.
android.os.Build.getRadioVersion,May return null (if for instance the radio is not currently on).
android.os.Bundle.clear,Removes all elements from the mapping of this Bundle.
android.os.Bundle.clear,Clear.
android.os.Bundle.clone,Clones the current Bundle. The internal map is cloned but the keys and values to which it refers are copied by reference.
android.os.Bundle.clone,Clone.
android.os.Bundle.clone,Clones the current Bundle.
android.os.Bundle.clone,The internal map is cloned but the keys and values to which it refers are copied by reference.
android.os.Bundle.getCharSequence,Returns the value associated with the given key or defaultValue if no mapping of the desired type exists for the given key or if a null value is explicitly associatd with the given key.
android.os.Bundle.getCharSequence,Get char sequence.
android.os.Bundle.getCharSequence,Returns the value associated with the given key or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.
android.os.Bundle.getCharSequence,Get char sequence.
android.os.Bundle.getFloat,Returns the value associated with the given key or defaultValue if no mapping of the desired type exists for the given key.
android.os.Bundle.getFloat,Get float.
android.os.Bundle.getFloat,Returns the value associated with the given key or 0.0f if no mapping of the desired type exists for the given key.
android.os.Bundle.getFloat,Get float.
android.os.Bundle.putAll,Inserts all mappings from the given Bundle into this Bundle.
android.os.Bundle.putAll,Put all.
android.os.Bundle.putBundle,Inserts a Bundle value into the mapping of this Bundle replacing any existing value for the given key. Either key or value may be null.
android.os.Bundle.putBundle,Put bundle.
android.os.Bundle.putBundle,Inserts a Bundle value into the mapping of this Bundle replacing any existing value for the given key.
android.os.Bundle.putBundle,Either key or value may be null.
android.os.Bundle.putByte,Inserts a byte value into the mapping of this Bundle replacing any existing value for the given key.
android.os.Bundle.putByte,Put byte.
android.os.Bundle.putByteArray,Inserts a byte array value into the mapping of this Bundle replacing any existing value for the given key. Either key or value may be null.
android.os.Bundle.putByteArray,Put byte array.
android.os.Bundle.putByteArray,Inserts a byte array value into the mapping of this Bundle replacing any existing value for the given key.
android.os.Bundle.putByteArray,Either key or value may be null.
android.os.Bundle.putChar,Inserts a char value into the mapping of this Bundle replacing any existing value for the given key.
android.os.Bundle.putChar,Put char.
android.os.Bundle.putCharArray,Inserts a char array value into the mapping of this Bundle replacing any existing value for the given key. Either key or value may be null.
android.os.Bundle.putCharArray,Put char array.
android.os.Bundle.putCharArray,Inserts a char array value into the mapping of this Bundle replacing any existing value for the given key.
android.os.Bundle.putCharArray,Either key or value may be null.
android.os.Bundle.putCharSequence,Inserts a CharSequence value into the mapping of this Bundle replacing any existing value for the given key. Either key or value may be null.
android.os.Bundle.putCharSequence,Put char sequence.
android.os.Bundle.putCharSequence,Inserts a CharSequence value into the mapping of this Bundle replacing any existing value for the given key.
android.os.Bundle.putCharSequence,Either key or value may be null.
android.os.Bundle.putCharSequenceArray,Inserts a CharSequence array value into the mapping of this Bundle replacing any existing value for the given key. Either key or value may be null.
android.os.Bundle.putCharSequenceArray,Put char sequence array.
android.os.Bundle.putCharSequenceArray,Inserts a CharSequence array value into the mapping of this Bundle replacing any existing value for the given key.
android.os.Bundle.putCharSequenceArray,Either key or value may be null.
android.os.Bundle.putFloat,Inserts a float value into the mapping of this Bundle replacing any existing value for the given key.
android.os.Bundle.putFloat,Put float.
android.os.Bundle.putFloatArray,Inserts a float array value into the mapping of this Bundle replacing any existing value for the given key. Either key or value may be null.
android.os.Bundle.putFloatArray,Put float array.
android.os.Bundle.putFloatArray,Inserts a float array value into the mapping of this Bundle replacing any existing value for the given key.
android.os.Bundle.putFloatArray,Either key or value may be null.
android.os.Bundle.putParcelable,Inserts a Parcelable value into the mapping of this Bundle replacing any existing value for the given key. Either key or value may be null.
android.os.Bundle.putParcelable,Put parcelable.
android.os.Bundle.putParcelable,Inserts a Parcelable value into the mapping of this Bundle replacing any existing value for the given key.
android.os.Bundle.putParcelable,Either key or value may be null.
android.os.Bundle.putParcelableArray,Inserts an array of Parcelable values into the mapping of this Bundle replacing any existing value for the given key. Either key or value may be null.
android.os.Bundle.putParcelableArray,Put parcelable array.
android.os.Bundle.putParcelableArray,Inserts an array of Parcelable values into the mapping of this Bundle replacing any existing value for the given key.
android.os.Bundle.putParcelableArray,Either key or value may be null.
android.os.Bundle.putParcelableArrayList,Inserts a List of Parcelable values into the mapping of this Bundle replacing any existing value for the given key. Either key or value may be null.
android.os.Bundle.putParcelableArrayList,Put parcelable array list.
android.os.Bundle.putParcelableArrayList,Inserts a List of Parcelable values into the mapping of this Bundle replacing any existing value for the given key.
android.os.Bundle.putParcelableArrayList,Either key or value may be null.
android.os.Bundle.putSerializable,Inserts a Serializable value into the mapping of this Bundle replacing any existing value for the given key. Either key or value may be null.
android.os.Bundle.putSerializable,Put serializable.
android.os.Bundle.putSerializable,Inserts a Serializable value into the mapping of this Bundle replacing any existing value for the given key.
android.os.Bundle.putSerializable,Either key or value may be null.
android.os.Bundle.putShort,Inserts a short value into the mapping of this Bundle replacing any existing value for the given key.
android.os.Bundle.putShort,Put short.
android.os.Bundle.putShortArray,Inserts a short array value into the mapping of this Bundle replacing any existing value for the given key. Either key or value may be null.
android.os.Bundle.putShortArray,Put short array.
android.os.Bundle.putShortArray,Inserts a short array value into the mapping of this Bundle replacing any existing value for the given key.
android.os.Bundle.putShortArray,Either key or value may be null.
android.os.Bundle.putSparseParcelableArray,Inserts a SparceArray of Parcelable values into the mapping of this Bundle replacing any existing value for the given key. Either key or value may be null.
android.os.Bundle.putSparseParcelableArray,Put sparse parcelable array.
android.os.Bundle.putSparseParcelableArray,Inserts a SparceArray of Parcelable values into the mapping of this Bundle replacing any existing value for the given key.
android.os.Bundle.putSparseParcelableArray,Either key or value may be null.
android.os.Bundle.putStringArrayList,Inserts an ArrayList value into the mapping of this Bundle replacing any existing value for the given key. Either key or value may be null.
android.os.Bundle.putStringArrayList,Put string array list.
android.os.Bundle.putStringArrayList,Inserts an ArrayList value into the mapping of this Bundle replacing any existing value for the given key.
android.os.Bundle.putStringArrayList,Either key or value may be null.
android.os.Bundle.readFromParcel,Reads the Parcel contents into this Bundle typically in order for it to be passed through an IBinder connection.
android.os.Bundle.readFromParcel,Read from parcel.
android.os.Bundle.setClassLoader,Changes the ClassLoader this Bundle uses when instantiating objects.
android.os.Bundle.setClassLoader,Set class loader.
android.os.Bundle.writeToParcel,Writes the Bundle contents to a Parcel typically in order for it to be passed through an IBinder connection.
android.os.Bundle.writeToParcel,Write to parcel.
android.os.CancellationSignal.cancel,Cancels the operation and signals the cancellation listener. If the operation has not yet started then it will be canceled as soon as it does.
android.os.CancellationSignal.cancel,Cancel.
android.os.CancellationSignal.cancel,Cancels the operation and signals the cancellation listener.
android.os.CancellationSignal.cancel,If the operation has not yet started then it will be canceled as soon as it does.
android.os.CancellationSignal.isCanceled,Returns true if the operation has been canceled.
android.os.CancellationSignal.isCanceled,Is canceled.
android.os.ConditionVariable.block,Block the current thread until the condition is opened. If the condition is already opened return immediately.
android.os.ConditionVariable.block,Block.
android.os.ConditionVariable.block,Block the current thread until the condition is opened.
android.os.ConditionVariable.block,If the condition is already opened return immediately.
android.os.ConditionVariable.block,Block the current thread until the condition is opened or until timeoutMs milliseconds have passed. If the condition is already opened return immediately.
android.os.ConditionVariable.block,Block.
android.os.ConditionVariable.block,Block the current thread until the condition is opened or until timeoutMs milliseconds have passed.
android.os.ConditionVariable.block,If the condition is already opened return immediately.
android.os.ConditionVariable.close,Reset the condition to the closed state. Any threads that call block() will block until someone calls open.
android.os.ConditionVariable.close,Close.
android.os.ConditionVariable.close,Reset the condition to the closed state.
android.os.ConditionVariable.close,Any threads that call block() will block until someone calls open.
android.os.ConditionVariable.open,Open the condition and release all threads that are blocked. Any threads that later approach block() will not block unless close() is called.
android.os.ConditionVariable.open,Open.
android.os.ConditionVariable.open,Open the condition and release all threads that are blocked.
android.os.ConditionVariable.open,Any threads that later approach block() will not block unless close() is called.
android.os.CountDownTimer.cancel,Cancel the countdown.
android.os.CountDownTimer.cancel,Cancel.
android.os.CountDownTimer.start,Start the countdown.
android.os.CountDownTimer.start,Start.
android.os.Debug.dumpHprofData,"Dump ""hprof"" data to the specified file. This may cause a GC."
android.os.Debug.dumpHprofData,Dump hprof data.
android.os.Debug.dumpHprofData,"Dump ""hprof"" data to the specified file."
android.os.Debug.dumpHprofData,This may cause a GC.
android.os.Debug.getGlobalFreedCount,This method was deprecated in API level 23. Accurate counting is a burden on the runtime and may be removed. Returns the global count of objects freed by the runtime between a start and stop.
android.os.Debug.getGlobalFreedCount,Get global freed count.
android.os.Debug.getGlobalFreedCount,This method was deprecated in API level 23.
android.os.Debug.getGlobalFreedCount,Accurate counting is a burden on the runtime and may be removed.
android.os.Debug.getGlobalFreedCount,Returns the global count of objects freed by the runtime between a start and stop.
android.os.Debug.getGlobalFreedSize,This method was deprecated in API level 23. Accurate counting is a burden on the runtime and may be removed. Returns the global size in bytes of objects freed by the runtime between a start and stop.
android.os.Debug.getGlobalFreedSize,Get global freed size.
android.os.Debug.getGlobalFreedSize,This method was deprecated in API level 23.
android.os.Debug.getGlobalFreedSize,Accurate counting is a burden on the runtime and may be removed.
android.os.Debug.getGlobalFreedSize,Returns the global size in bytes of objects freed by the runtime between a start and stop.
android.os.Debug.getGlobalGcInvocationCount,This method was deprecated in API level 23. Accurate counting is a burden on the runtime and may be removed. Returns the number of non-concurrent GC invocations between a start and stop.
android.os.Debug.getGlobalGcInvocationCount,Get global gc invocation count.
android.os.Debug.getGlobalGcInvocationCount,This method was deprecated in API level 23.
android.os.Debug.getGlobalGcInvocationCount,Accurate counting is a burden on the runtime and may be removed.
android.os.Debug.getGlobalGcInvocationCount,Returns the number of non-concurrent GC invocations between a start and stop.
android.os.Debug.getNativeHeapAllocatedSize,Returns the amount of allocated memory in the native heap.
android.os.Debug.getNativeHeapAllocatedSize,Get native heap allocated size.
android.os.Debug.getNativeHeapFreeSize,Returns the amount of free memory in the native heap.
android.os.Debug.getNativeHeapFreeSize,Get native heap free size.
android.os.Debug.getThreadAllocCount,This method was deprecated in API level 23. Accurate counting is a burden on the runtime and may be removed. Returns the thread-local count of objects allocated by the runtime between a start and stop.
android.os.Debug.getThreadAllocCount,Get thread alloc count.
android.os.Debug.getThreadAllocCount,This method was deprecated in API level 23.
android.os.Debug.getThreadAllocCount,Accurate counting is a burden on the runtime and may be removed.
android.os.Debug.getThreadAllocCount,Returns the thread-local count of objects allocated by the runtime between a start and stop.
android.os.Debug.getThreadAllocSize,This method was deprecated in API level 23. Accurate counting is a burden on the runtime and may be removed. Returns the thread-local size of objects allocated by the runtime between a start and stop.
android.os.Debug.getThreadAllocSize,Get thread alloc size.
android.os.Debug.getThreadAllocSize,This method was deprecated in API level 23.
android.os.Debug.getThreadAllocSize,Accurate counting is a burden on the runtime and may be removed.
android.os.Debug.getThreadAllocSize,Returns the thread-local size of objects allocated by the runtime between a start and stop.
android.os.Debug.startMethodTracing,"Start method tracing with default log name and buffer size. By default the trace file is called ""dmtrace.trace"" and it's placed under your package-specific directory on primary shared/external storage as returned by Context#getExternalFilesDir(String). See Inspect Trace Logs with Traceview for information about reading trace files. When method tracing is enabled the VM will run more slowly than usual so the timings from the trace files should only be considered in relative terms (e.g. was run #1 faster than run #2). The times for native methods will not change so don't try to use this to compare the performance of interpreted and native implementations of the same method. As an alternative consider using sampling-based method tracing via startMethodTracingSampling(java.lang.String int int) or ""native"" tracing in the emulator via startNativeTracing()."
android.os.Debug.startMethodTracing,Start method tracing.
android.os.Debug.startMethodTracing,Start method tracing with default log name and buffer size.
android.os.Debug.startMethodTracing,"By default the trace file is called ""dmtrace.trace"" and it's placed under your package-specific directory on primary shared/external storage as returned by Context#getExternalFilesDir(String)."
android.os.Debug.startMethodTracing,See Inspect Trace Logs with Traceview for information about reading trace files.
android.os.Debug.startMethodTracing,When method tracing is enabled the VM will run more slowly than usual so the timings from the trace files should only be considered in relative terms (e.g.
android.os.Debug.startMethodTracing,was run #1 faster than run #2).
android.os.Debug.startMethodTracing,The times for native methods will not change so don't try to use this to compare the performance of interpreted and native implementations of the same method.
android.os.Debug.startMethodTracing,"As an alternative consider using sampling-based method tracing via startMethodTracingSampling(java.lang.String int int) or ""native"" tracing in the emulator via startNativeTracing()."
android.os.Debug.startMethodTracing,"Start method tracing specifying the trace log file name the buffer size and flags. When a relative file path is given the trace file will be placed under your package-specific directory on primary shared/external storage as returned by Context#getExternalFilesDir(String). See Inspect Trace Logs with Traceview for information about reading trace files. When method tracing is enabled the VM will run more slowly than usual so the timings from the trace files should only be considered in relative terms (e.g. was run #1 faster than run #2). The times for native methods will not change so don't try to use this to compare the performance of interpreted and native implementations of the same method. As an alternative consider using sampling-based method tracing via startMethodTracingSampling(java.lang.String int int) or ""native"" tracing in the emulator via startNativeTracing()."
android.os.Debug.startMethodTracing,Start method tracing.
android.os.Debug.startMethodTracing,Start method tracing specifying the trace log file name the buffer size and flags.
android.os.Debug.startMethodTracing,When a relative file path is given the trace file will be placed under your package-specific directory on primary shared/external storage as returned by Context#getExternalFilesDir(String).
android.os.Debug.startMethodTracing,See Inspect Trace Logs with Traceview for information about reading trace files.
android.os.Debug.startMethodTracing,When method tracing is enabled the VM will run more slowly than usual so the timings from the trace files should only be considered in relative terms (e.g.
android.os.Debug.startMethodTracing,was run #1 faster than run #2).
android.os.Debug.startMethodTracing,The times for native methods will not change so don't try to use this to compare the performance of interpreted and native implementations of the same method.
android.os.Debug.startMethodTracing,"As an alternative consider using sampling-based method tracing via startMethodTracingSampling(java.lang.String int int) or ""native"" tracing in the emulator via startNativeTracing()."
android.os.Debug.startMethodTracing,"Start method tracing specifying the trace log file path. When a relative file path is given the trace file will be placed under your package-specific directory on primary shared/external storage as returned by Context#getExternalFilesDir(String). See Inspect Trace Logs with Traceview for information about reading trace files. When method tracing is enabled the VM will run more slowly than usual so the timings from the trace files should only be considered in relative terms (e.g. was run #1 faster than run #2). The times for native methods will not change so don't try to use this to compare the performance of interpreted and native implementations of the same method. As an alternative consider using sampling-based method tracing via startMethodTracingSampling(java.lang.String int int) or ""native"" tracing in the emulator via startNativeTracing()."
android.os.Debug.startMethodTracing,Start method tracing.
android.os.Debug.startMethodTracing,Start method tracing specifying the trace log file path.
android.os.Debug.startMethodTracing,When a relative file path is given the trace file will be placed under your package-specific directory on primary shared/external storage as returned by Context#getExternalFilesDir(String).
android.os.Debug.startMethodTracing,See Inspect Trace Logs with Traceview for information about reading trace files.
android.os.Debug.startMethodTracing,When method tracing is enabled the VM will run more slowly than usual so the timings from the trace files should only be considered in relative terms (e.g.
android.os.Debug.startMethodTracing,was run #1 faster than run #2).
android.os.Debug.startMethodTracing,The times for native methods will not change so don't try to use this to compare the performance of interpreted and native implementations of the same method.
android.os.Debug.startMethodTracing,"As an alternative consider using sampling-based method tracing via startMethodTracingSampling(java.lang.String int int) or ""native"" tracing in the emulator via startNativeTracing()."
android.os.Debug.startMethodTracing,"Start method tracing specifying the trace log file name and the buffer size. When a relative file path is given the trace file will be placed under your package-specific directory on primary shared/external storage as returned by Context#getExternalFilesDir(String). See Inspect Trace Logs with Traceview for information about reading trace files. When method tracing is enabled the VM will run more slowly than usual so the timings from the trace files should only be considered in relative terms (e.g. was run #1 faster than run #2). The times for native methods will not change so don't try to use this to compare the performance of interpreted and native implementations of the same method. As an alternative consider using sampling-based method tracing via startMethodTracingSampling(java.lang.String int int) or ""native"" tracing in the emulator via startNativeTracing()."
android.os.Debug.startMethodTracing,Start method tracing.
android.os.Debug.startMethodTracing,Start method tracing specifying the trace log file name and the buffer size.
android.os.Debug.startMethodTracing,When a relative file path is given the trace file will be placed under your package-specific directory on primary shared/external storage as returned by Context#getExternalFilesDir(String).
android.os.Debug.startMethodTracing,See Inspect Trace Logs with Traceview for information about reading trace files.
android.os.Debug.startMethodTracing,When method tracing is enabled the VM will run more slowly than usual so the timings from the trace files should only be considered in relative terms (e.g.
android.os.Debug.startMethodTracing,was run #1 faster than run #2).
android.os.Debug.startMethodTracing,The times for native methods will not change so don't try to use this to compare the performance of interpreted and native implementations of the same method.
android.os.Debug.startMethodTracing,"As an alternative consider using sampling-based method tracing via startMethodTracingSampling(java.lang.String int int) or ""native"" tracing in the emulator via startNativeTracing()."
android.os.Debug.stopMethodTracing,Stop method tracing.
android.os.Debug.stopMethodTracing,Stop method tracing.
android.os.Debug.waitForDebugger,Wait until a debugger attaches. As soon as the debugger attaches this returns so you will need to place a breakpoint after the waitForDebugger() call if you want to start tracing immediately.
android.os.Debug.waitForDebugger,Wait for debugger.
android.os.Debug.waitForDebugger,Wait until a debugger attaches.
android.os.Debug.waitForDebugger,As soon as the debugger attaches this returns so you will need to place a breakpoint after the waitForDebugger() call if you want to start tracing immediately.
android.os.Debug.waitingForDebugger,"Returns ""true"" if one or more threads is waiting for a debugger to attach."
android.os.Debug.waitingForDebugger,Waiting for debugger.
android.os.Environment.getDataDirectory,Return the user data directory.
android.os.Environment.getDataDirectory,Get data directory.
android.os.Environment.getDownloadCacheDirectory,Return the download/cache content directory.
android.os.Environment.getDownloadCacheDirectory,Get download cache directory.
android.os.Environment.getExternalStorageDirectory,"This method was deprecated in API level 29. To improve user privacy direct access to shared/external storage devices is deprecated. When an app targets Build.VERSION_CODES.Q the path returned from this method is no longer directly accessible to apps. Apps can continue to access content stored on shared/external storage by migrating to alternatives such as Context#getExternalFilesDir(String) MediaStore or Intent#ACTION_OPEN_DOCUMENT. Return the primary shared/external storage directory. This directory may not currently be accessible if it has been mounted by the user on their computer has been removed from the device or some other problem has happened. You can determine its current state with getExternalStorageState(). Note: don't be confused by the word ""external"" here. This directory can better be thought as media/shared storage. It is a filesystem that can hold a relatively large amount of data and that is shared across all applications (does not enforce permissions). Traditionally this is an SD card but it may also be implemented as built-in storage in a device that is distinct from the protected internal storage and can be mounted as a filesystem on a computer. On devices with multiple users (as described by UserManager ) each user has their own isolated shared storage. Applications only have access to the shared storage for the user they're running as. In devices with multiple shared/external storage directories this directory represents the primary storage that the user will interact with. Access to secondary storage is available through Context#getExternalFilesDirs(String) Context#getExternalCacheDirs() and Context#getExternalMediaDirs(). Applications should not directly use this top-level directory in order to avoid polluting the user's root namespace. Any files that are private to the application should be placed in a directory returned by Context.getExternalFilesDir which the system will take care of deleting if the application is uninstalled. Other shared files should be placed in one of the directories returned by getExternalStoragePublicDirectory(String). Writing to this path requires the Manifest.permission.WRITE_EXTERNAL_STORAGE permission and starting in Build.VERSION_CODES.KITKAT read access requires the Manifest.permission.READ_EXTERNAL_STORAGE permission which is automatically granted if you hold the write permission. Starting in Build.VERSION_CODES.KITKAT if your application only needs to store internal data consider using Context#getExternalFilesDir(String) Context#getExternalCacheDir() or Context#getExternalMediaDirs() which require no permissions to read or write. This path may change between platform versions so applications should only persist relative paths. Here is an example of typical code to monitor the state of external storage:."
android.os.Environment.getExternalStorageDirectory,Get external storage directory.
android.os.Environment.getExternalStorageDirectory,This method was deprecated in API level 29.
android.os.Environment.getExternalStorageDirectory,To improve user privacy direct access to shared/external storage devices is deprecated.
android.os.Environment.getExternalStorageDirectory,When an app targets Build.VERSION_CODES.Q the path returned from this method is no longer directly accessible to apps.
android.os.Environment.getExternalStorageDirectory,Apps can continue to access content stored on shared/external storage by migrating to alternatives such as Context#getExternalFilesDir(String) MediaStore or Intent#ACTION_OPEN_DOCUMENT.
android.os.Environment.getExternalStorageDirectory,Return the primary shared/external storage directory.
android.os.Environment.getExternalStorageDirectory,This directory may not currently be accessible if it has been mounted by the user on their computer has been removed from the device or some other problem has happened.
android.os.Environment.getExternalStorageDirectory,You can determine its current state with getExternalStorageState().
android.os.Environment.getExternalStorageDirectory,"Note: don't be confused by the word ""external"" here."
android.os.Environment.getExternalStorageDirectory,This directory can better be thought as media/shared storage.
android.os.Environment.getExternalStorageDirectory,It is a filesystem that can hold a relatively large amount of data and that is shared across all applications (does not enforce permissions).
android.os.Environment.getExternalStorageDirectory,Traditionally this is an SD card but it may also be implemented as built-in storage in a device that is distinct from the protected internal storage and can be mounted as a filesystem on a computer.
android.os.Environment.getExternalStorageDirectory,On devices with multiple users (as described by UserManager ) each user has their own isolated shared storage.
android.os.Environment.getExternalStorageDirectory,Applications only have access to the shared storage for the user they're running as.
android.os.Environment.getExternalStorageDirectory,In devices with multiple shared/external storage directories this directory represents the primary storage that the user will interact with.
android.os.Environment.getExternalStorageDirectory,Access to secondary storage is available through Context#getExternalFilesDirs(String) Context#getExternalCacheDirs() and Context#getExternalMediaDirs().
android.os.Environment.getExternalStorageDirectory,Applications should not directly use this top-level directory in order to avoid polluting the user's root namespace.
android.os.Environment.getExternalStorageDirectory,Any files that are private to the application should be placed in a directory returned by Context.getExternalFilesDir which the system will take care of deleting if the application is uninstalled.
android.os.Environment.getExternalStorageDirectory,Other shared files should be placed in one of the directories returned by getExternalStoragePublicDirectory(String).
android.os.Environment.getExternalStorageDirectory,Writing to this path requires the Manifest.permission.WRITE_EXTERNAL_STORAGE permission and starting in Build.VERSION_CODES.KITKAT read access requires the Manifest.permission.READ_EXTERNAL_STORAGE permission which is automatically granted if you hold the write permission.
android.os.Environment.getExternalStorageDirectory,Starting in Build.VERSION_CODES.KITKAT if your application only needs to store internal data consider using Context#getExternalFilesDir(String) Context#getExternalCacheDir() or Context#getExternalMediaDirs() which require no permissions to read or write.
android.os.Environment.getExternalStorageDirectory,This path may change between platform versions so applications should only persist relative paths.
android.os.Environment.getExternalStorageDirectory,Here is an example of typical code to monitor the state of external storage:.
android.os.Environment.getExternalStoragePublicDirectory,This method was deprecated in API level 29. To improve user privacy direct access to shared/external storage devices is deprecated. When an app targets Build.VERSION_CODES.Q the path returned from this method is no longer directly accessible to apps. Apps can continue to access content stored on shared/external storage by migrating to alternatives such as Context#getExternalFilesDir(String) MediaStore or Intent#ACTION_OPEN_DOCUMENT. Get a top-level shared/external storage directory for placing files of a particular type. This is where the user will typically place and manage their own files so you should be careful about what you put here to ensure you don't erase their files or get in the way of their own organization. On devices with multiple users (as described by UserManager ) each user has their own isolated shared storage. Applications only have access to the shared storage for the user they're running as. Here is an example of typical code to manipulate a picture on the public shared storage:.
android.os.Environment.getExternalStoragePublicDirectory,Get external storage public directory.
android.os.Environment.getExternalStoragePublicDirectory,This method was deprecated in API level 29.
android.os.Environment.getExternalStoragePublicDirectory,To improve user privacy direct access to shared/external storage devices is deprecated.
android.os.Environment.getExternalStoragePublicDirectory,When an app targets Build.VERSION_CODES.Q the path returned from this method is no longer directly accessible to apps.
android.os.Environment.getExternalStoragePublicDirectory,Apps can continue to access content stored on shared/external storage by migrating to alternatives such as Context#getExternalFilesDir(String) MediaStore or Intent#ACTION_OPEN_DOCUMENT.
android.os.Environment.getExternalStoragePublicDirectory,Get a top-level shared/external storage directory for placing files of a particular type.
android.os.Environment.getExternalStoragePublicDirectory,This is where the user will typically place and manage their own files so you should be careful about what you put here to ensure you don't erase their files or get in the way of their own organization.
android.os.Environment.getExternalStoragePublicDirectory,On devices with multiple users (as described by UserManager ) each user has their own isolated shared storage.
android.os.Environment.getExternalStoragePublicDirectory,Applications only have access to the shared storage for the user they're running as.
android.os.Environment.getExternalStoragePublicDirectory,Here is an example of typical code to manipulate a picture on the public shared storage:.
android.os.Environment.getExternalStorageState,Returns the current state of the primary shared/external storage media.
android.os.Environment.getExternalStorageState,Get external storage state.
android.os.Environment.getExternalStorageState,Returns the current state of the shared/external storage media at the given path.
android.os.Environment.getExternalStorageState,Get external storage state.
android.os.Environment.getRootDirectory,"Return root of the ""system"" partition holding the core Android OS. Always present and mounted read-only."
android.os.Environment.getRootDirectory,Get root directory.
android.os.Environment.getRootDirectory,"Return root of the ""system"" partition holding the core Android OS."
android.os.Environment.getRootDirectory,Always present and mounted read-only.
android.os.Environment.getStorageState,This method was deprecated in API level 21. use getExternalStorageState(java.io.File).
android.os.Environment.getStorageState,Get storage state.
android.os.Environment.getStorageState,This method was deprecated in API level 21.
android.os.Environment.getStorageState,use getExternalStorageState(java.io.File).
android.os.Environment.isExternalStorageEmulated,Returns whether the primary shared/external storage media is emulated. The contents of emulated storage devices are backed by a private user data partition which means there is little benefit to apps storing data here instead of the private directories returned by Context#getFilesDir() etc. This returns true when emulated storage is backed by either internal storage or an adopted storage device.
android.os.Environment.isExternalStorageEmulated,Is external storage emulated.
android.os.Environment.isExternalStorageEmulated,Returns whether the primary shared/external storage media is emulated.
android.os.Environment.isExternalStorageEmulated,The contents of emulated storage devices are backed by a private user data partition which means there is little benefit to apps storing data here instead of the private directories returned by Context#getFilesDir() etc.
android.os.Environment.isExternalStorageEmulated,This returns true when emulated storage is backed by either internal storage or an adopted storage device.
android.os.Environment.isExternalStorageEmulated,Returns whether the shared/external storage media at the given path is emulated. The contents of emulated storage devices are backed by a private user data partition which means there is little benefit to apps storing data here instead of the private directories returned by Context#getFilesDir() etc. This returns true when emulated storage is backed by either internal storage or an adopted storage device.
android.os.Environment.isExternalStorageEmulated,Is external storage emulated.
android.os.Environment.isExternalStorageEmulated,Returns whether the shared/external storage media at the given path is emulated.
android.os.Environment.isExternalStorageEmulated,The contents of emulated storage devices are backed by a private user data partition which means there is little benefit to apps storing data here instead of the private directories returned by Context#getFilesDir() etc.
android.os.Environment.isExternalStorageEmulated,This returns true when emulated storage is backed by either internal storage or an adopted storage device.
android.os.Environment.isExternalStorageRemovable,Returns whether the shared/external storage media at the given path is physically removable.
android.os.Environment.isExternalStorageRemovable,Is external storage removable.
android.os.Environment.isExternalStorageRemovable,Returns whether the primary shared/external storage media is physically removable.
android.os.Environment.isExternalStorageRemovable,Is external storage removable.
android.os.FileObserver.startWatching,Start watching for events. The monitored file or directory must exist at this time or else no events will be reported (even if it appears later). If monitoring is already started this call has no effect.
android.os.FileObserver.startWatching,Start watching.
android.os.FileObserver.startWatching,Start watching for events.
android.os.FileObserver.startWatching,The monitored file or directory must exist at this time or else no events will be reported (even if it appears later).
android.os.FileObserver.startWatching,If monitoring is already started this call has no effect.
android.os.FileObserver.stopWatching,Stop watching for events. Some events may be in process so events may continue to be reported even after this method completes. If monitoring is already stopped this call has no effect.
android.os.FileObserver.stopWatching,Stop watching.
android.os.FileObserver.stopWatching,Stop watching for events.
android.os.FileObserver.stopWatching,Some events may be in process so events may continue to be reported even after this method completes.
android.os.FileObserver.stopWatching,If monitoring is already stopped this call has no effect.
android.os.Handler.dispatchMessage,Handle system messages here.
android.os.Handler.dispatchMessage,Dispatch message.
android.os.Handler.handleMessage,Subclasses must implement this to receive messages.
android.os.Handler.handleMessage,Handle message.
android.os.Handler.hasMessages,Check if there are any pending posts of messages with code 'what' in the message queue.
android.os.Handler.hasMessages,Has messages.
android.os.Handler.hasMessages,Check if there are any pending posts of messages with code 'what' and whose obj is 'object' in the message queue.
android.os.Handler.hasMessages,Has messages.
android.os.Handler.obtainMessage,Same as obtainMessage() except that it also sets the what and obj members of the returned Message.
android.os.Handler.obtainMessage,Obtain message.
android.os.Handler.obtainMessage,Returns a new Message from the global message pool. More efficient than creating and allocating new instances. The retrieved message has its handler set to this instance (Message.target == this). If you don't want that facility just call Message.obtain() instead.
android.os.Handler.obtainMessage,Obtain message.
android.os.Handler.obtainMessage,Returns a new Message from the global message pool.
android.os.Handler.obtainMessage,More efficient than creating and allocating new instances.
android.os.Handler.obtainMessage,The retrieved message has its handler set to this instance (Message.target == this).
android.os.Handler.obtainMessage,If you don't want that facility just call Message.obtain() instead.
android.os.Handler.obtainMessage,Same as obtainMessage() except that it also sets the what arg1 and arg2 members of the returned Message.
android.os.Handler.obtainMessage,Obtain message.
android.os.Handler.obtainMessage,Same as obtainMessage() except that it also sets the what obj arg1and arg2 values on the returned Message.
android.os.Handler.obtainMessage,Obtain message.
android.os.Handler.obtainMessage,Same as obtainMessage() except that it also sets the what member of the returned Message.
android.os.Handler.obtainMessage,Obtain message.
android.os.Handler.post,Causes the Runnable r to be added to the message queue. The runnable will be run on the thread to which this handler is attached.
android.os.Handler.post,Post.
android.os.Handler.post,Causes the Runnable r to be added to the message queue.
android.os.Handler.post,The runnable will be run on the thread to which this handler is attached.
android.os.Handler.postAtFrontOfQueue,Posts a message to an object that implements Runnable. Causes the Runnable r to executed on the next iteration through the message queue. The runnable will be run on the thread to which this handler is attached. This method is only for use in very special circumstances -- it can easily starve the message queue cause ordering problems or have other unexpected side-effects.
android.os.Handler.postAtFrontOfQueue,Post at front of queue.
android.os.Handler.postAtFrontOfQueue,Posts a message to an object that implements Runnable.
android.os.Handler.postAtFrontOfQueue,Causes the Runnable r to executed on the next iteration through the message queue.
android.os.Handler.postAtFrontOfQueue,The runnable will be run on the thread to which this handler is attached.
android.os.Handler.postAtFrontOfQueue,This method is only for use in very special circumstances -- it can easily starve the message queue cause ordering problems or have other unexpected side-effects.
android.os.Handler.postAtTime,Causes the Runnable r to be added to the message queue to be run at a specific time given by uptimeMillis. The time-base is SystemClock.uptimeMillis(). Time spent in deep sleep will add an additional delay to execution. The runnable will be run on the thread to which this handler is attached.
android.os.Handler.postAtTime,Post at time.
android.os.Handler.postAtTime,Causes the Runnable r to be added to the message queue to be run at a specific time given by uptimeMillis.
android.os.Handler.postAtTime,The time-base is SystemClock.uptimeMillis().
android.os.Handler.postAtTime,Time spent in deep sleep will add an additional delay to execution.
android.os.Handler.postAtTime,The runnable will be run on the thread to which this handler is attached.
android.os.Handler.postAtTime,Causes the Runnable r to be added to the message queue to be run at a specific time given by uptimeMillis. The time-base is SystemClock.uptimeMillis(). Time spent in deep sleep will add an additional delay to execution. The runnable will be run on the thread to which this handler is attached.
android.os.Handler.postAtTime,Post at time.
android.os.Handler.postAtTime,Causes the Runnable r to be added to the message queue to be run at a specific time given by uptimeMillis.
android.os.Handler.postAtTime,The time-base is SystemClock.uptimeMillis().
android.os.Handler.postAtTime,Time spent in deep sleep will add an additional delay to execution.
android.os.Handler.postAtTime,The runnable will be run on the thread to which this handler is attached.
android.os.Handler.postDelayed,Causes the Runnable r to be added to the message queue to be run after the specified amount of time elapses. The runnable will be run on the thread to which this handler is attached. The time-base is SystemClock.uptimeMillis(). Time spent in deep sleep will add an additional delay to execution.
android.os.Handler.postDelayed,Post delayed.
android.os.Handler.postDelayed,Causes the Runnable r to be added to the message queue to be run after the specified amount of time elapses.
android.os.Handler.postDelayed,The runnable will be run on the thread to which this handler is attached.
android.os.Handler.postDelayed,The time-base is SystemClock.uptimeMillis().
android.os.Handler.postDelayed,Time spent in deep sleep will add an additional delay to execution.
android.os.Handler.postDelayed,Causes the Runnable r to be added to the message queue to be run after the specified amount of time elapses. The runnable will be run on the thread to which this handler is attached. The time-base is SystemClock.uptimeMillis(). Time spent in deep sleep will add an additional delay to execution.
android.os.Handler.postDelayed,Post delayed.
android.os.Handler.postDelayed,Causes the Runnable r to be added to the message queue to be run after the specified amount of time elapses.
android.os.Handler.postDelayed,The runnable will be run on the thread to which this handler is attached.
android.os.Handler.postDelayed,The time-base is SystemClock.uptimeMillis().
android.os.Handler.postDelayed,Time spent in deep sleep will add an additional delay to execution.
android.os.Handler.removeCallbacks,Remove any pending posts of Runnable r that are in the message queue.
android.os.Handler.removeCallbacks,Remove callbacks.
android.os.Handler.removeCallbacks,Remove any pending posts of Runnable r with Object token that are in the message queue. If token is null all callbacks will be removed.
android.os.Handler.removeCallbacks,Remove callbacks.
android.os.Handler.removeCallbacks,Remove any pending posts of Runnable r with Object token that are in the message queue.
android.os.Handler.removeCallbacks,If token is null all callbacks will be removed.
android.os.Handler.removeCallbacksAndMessages,Remove any pending posts of callbacks and sent messages whose obj is token. If token is null all callbacks and messages will be removed.
android.os.Handler.removeCallbacksAndMessages,Remove callbacks and messages.
android.os.Handler.removeCallbacksAndMessages,Remove any pending posts of callbacks and sent messages whose obj is token.
android.os.Handler.removeCallbacksAndMessages,If token is null all callbacks and messages will be removed.
android.os.Handler.removeMessages,Remove any pending posts of messages with code 'what' that are in the message queue.
android.os.Handler.removeMessages,Remove messages.
android.os.Handler.removeMessages,Remove any pending posts of messages with code 'what' and whose obj is 'object' that are in the message queue. If object is null all messages will be removed.
android.os.Handler.removeMessages,Remove messages.
android.os.Handler.removeMessages,Remove any pending posts of messages with code 'what' and whose obj is 'object' that are in the message queue.
android.os.Handler.removeMessages,If object is null all messages will be removed.
android.os.Handler.sendEmptyMessage,Sends a Message containing only the what value.
android.os.Handler.sendEmptyMessage,Send empty message.
android.os.Handler.sendEmptyMessageAtTime,Sends a Message containing only the what value to be delivered at a specific time.
android.os.Handler.sendEmptyMessageAtTime,Send empty message at time.
android.os.Handler.sendEmptyMessageDelayed,Sends a Message containing only the what value to be delivered after the specified amount of time elapses.
android.os.Handler.sendEmptyMessageDelayed,Send empty message delayed.
android.os.Handler.sendMessage,Pushes a message onto the end of the message queue after all pending messages before the current time. It will be received in handleMessage(Message) in the thread attached to this handler.
android.os.Handler.sendMessage,Send message.
android.os.Handler.sendMessage,Pushes a message onto the end of the message queue after all pending messages before the current time.
android.os.Handler.sendMessage,It will be received in handleMessage(Message) in the thread attached to this handler.
android.os.Handler.sendMessageAtFrontOfQueue,Enqueue a message at the front of the message queue to be processed on the next iteration of the message loop. You will receive it in handleMessage(Message) in the thread attached to this handler. This method is only for use in very special circumstances -- it can easily starve the message queue cause ordering problems or have other unexpected side-effects.
android.os.Handler.sendMessageAtFrontOfQueue,Send message at front of queue.
android.os.Handler.sendMessageAtFrontOfQueue,Enqueue a message at the front of the message queue to be processed on the next iteration of the message loop.
android.os.Handler.sendMessageAtFrontOfQueue,You will receive it in handleMessage(Message) in the thread attached to this handler.
android.os.Handler.sendMessageAtFrontOfQueue,This method is only for use in very special circumstances -- it can easily starve the message queue cause ordering problems or have other unexpected side-effects.
android.os.Handler.sendMessageAtTime,Enqueue a message into the message queue after all pending messages before the absolute time (in milliseconds) uptimeMillis. The time-base is SystemClock.uptimeMillis(). Time spent in deep sleep will add an additional delay to execution. You will receive it in handleMessage(Message) in the thread attached to this handler.
android.os.Handler.sendMessageAtTime,Send message at time.
android.os.Handler.sendMessageAtTime,Enqueue a message into the message queue after all pending messages before the absolute time (in milliseconds) uptimeMillis.
android.os.Handler.sendMessageAtTime,The time-base is SystemClock.uptimeMillis().
android.os.Handler.sendMessageAtTime,Time spent in deep sleep will add an additional delay to execution.
android.os.Handler.sendMessageAtTime,You will receive it in handleMessage(Message) in the thread attached to this handler.
android.os.Handler.sendMessageDelayed,Enqueue a message into the message queue after all pending messages before (current time + delayMillis). You will receive it in handleMessage(Message) in the thread attached to this handler.
android.os.Handler.sendMessageDelayed,Send message delayed.
android.os.Handler.sendMessageDelayed,Enqueue a message into the message queue after all pending messages before (current time + delayMillis).
android.os.Handler.sendMessageDelayed,You will receive it in handleMessage(Message) in the thread attached to this handler.
android.os.HandlerThread.getLooper,This method returns the Looper associated with this thread. If this thread not been started or for any reason isAlive() returns false this method will return null. If this thread has been started this method will block until the looper has been initialized.
android.os.HandlerThread.getLooper,Get looper.
android.os.HandlerThread.getLooper,This method returns the Looper associated with this thread.
android.os.HandlerThread.getLooper,If this thread not been started or for any reason isAlive() returns false this method will return null.
android.os.HandlerThread.getLooper,If this thread has been started this method will block until the looper has been initialized.
android.os.HandlerThread.quit,Quits the handler thread's looper. Causes the handler thread's looper to terminate without processing any more messages in the message queue. Any attempt to post messages to the queue after the looper is asked to quit will fail. For example the Handler#sendMessage(Message) method will return false. Using this method may be unsafe because some messages may not be delivered before the looper terminates. Consider using quitSafely() instead to ensure that all pending work is completed in an orderly manner.
android.os.HandlerThread.quit,Quit.
android.os.HandlerThread.quit,Quits the handler thread's looper.
android.os.HandlerThread.quit,Causes the handler thread's looper to terminate without processing any more messages in the message queue.
android.os.HandlerThread.quit,Any attempt to post messages to the queue after the looper is asked to quit will fail.
android.os.HandlerThread.quit,For example the Handler#sendMessage(Message) method will return false.
android.os.HandlerThread.quit,Using this method may be unsafe because some messages may not be delivered before the looper terminates.
android.os.HandlerThread.quit,Consider using quitSafely() instead to ensure that all pending work is completed in an orderly manner.
android.os.HandlerThread.run,If this thread was constructed using a separate Runnable run object then that Runnable object's run method is called; otherwise this method does nothing and returns. Subclasses of Thread should override this method.
android.os.HandlerThread.run,Run.
android.os.HandlerThread.run,If this thread was constructed using a separate Runnable run object then that Runnable object's run method is called; otherwise this method does nothing and returns.
android.os.HandlerThread.run,Subclasses of Thread should override this method.
android.os.Looper.getMainLooper,Returns the application's main looper which lives in the main thread of the application.
android.os.Looper.getMainLooper,Get main looper.
android.os.Looper.getThread,Gets the Thread associated with this Looper.
android.os.Looper.getThread,Get thread.
android.os.Looper.loop,Run the message queue in this thread. Be sure to call quit() to end the loop.
android.os.Looper.loop,Loop.
android.os.Looper.loop,Run the message queue in this thread.
android.os.Looper.loop,Be sure to call quit() to end the loop.
android.os.Looper.myLooper,Return the Looper object associated with the current thread. Returns null if the calling thread is not associated with a Looper.
android.os.Looper.myLooper,My looper.
android.os.Looper.myLooper,Return the Looper object associated with the current thread.
android.os.Looper.myLooper,Returns null if the calling thread is not associated with a Looper.
android.os.Looper.myQueue,Return the MessageQueue object associated with the current thread. This must be called from a thread running a Looper or a NullPointerException will be thrown.
android.os.Looper.myQueue,My queue.
android.os.Looper.myQueue,Return the MessageQueue object associated with the current thread.
android.os.Looper.myQueue,This must be called from a thread running a Looper or a NullPointerException will be thrown.
android.os.Looper.prepare,Initialize the current thread as a looper. This gives you a chance to create handlers that then reference this looper before actually starting the loop. Be sure to call loop() after calling this method and end it by calling quit().
android.os.Looper.prepare,Prepare.
android.os.Looper.prepare,Initialize the current thread as a looper.
android.os.Looper.prepare,This gives you a chance to create handlers that then reference this looper before actually starting the loop.
android.os.Looper.prepare,Be sure to call loop() after calling this method and end it by calling quit().
android.os.Looper.quit,Quits the looper. Causes the loop() method to terminate without processing any more messages in the message queue. Any attempt to post messages to the queue after the looper is asked to quit will fail. For example the Handler#sendMessage(Message) method will return false. Using this method may be unsafe because some messages may not be delivered before the looper terminates. Consider using quitSafely() instead to ensure that all pending work is completed in an orderly manner.
android.os.Looper.quit,Quit.
android.os.Looper.quit,Quits the looper.
android.os.Looper.quit,Causes the loop() method to terminate without processing any more messages in the message queue.
android.os.Looper.quit,Any attempt to post messages to the queue after the looper is asked to quit will fail.
android.os.Looper.quit,For example the Handler#sendMessage(Message) method will return false.
android.os.Looper.quit,Using this method may be unsafe because some messages may not be delivered before the looper terminates.
android.os.Looper.quit,Consider using quitSafely() instead to ensure that all pending work is completed in an orderly manner.
android.os.Message.copyFrom,Make this message like o. Performs a shallow copy of the data field. Does not copy the linked list fields nor the timestamp or target/callback of the original message.
android.os.Message.copyFrom,Copy from.
android.os.Message.copyFrom,Make this message like o.
android.os.Message.copyFrom,Performs a shallow copy of the data field.
android.os.Message.copyFrom,Does not copy the linked list fields nor the timestamp or target/callback of the original message.
android.os.Message.getCallback,Retrieve callback object that will execute when this message is handled. This object must implement Runnable. This is called by the target Handler that is receiving this Message to dispatch it. If not set the message will be dispatched to the receiving Handler's Handler#handleMessage(Message).
android.os.Message.getCallback,Get callback.
android.os.Message.getCallback,Retrieve callback object that will execute when this message is handled.
android.os.Message.getCallback,This object must implement Runnable.
android.os.Message.getCallback,This is called by the target Handler that is receiving this Message to dispatch it.
android.os.Message.getCallback,If not set the message will be dispatched to the receiving Handler's Handler#handleMessage(Message).
android.os.Message.getData,Obtains a Bundle of arbitrary data associated with this event lazily creating it if necessary. Set this value by calling setData(android.os.Bundle). Note that when transferring data across processes via Messenger you will need to set your ClassLoader on the Bundle via Bundle#setClassLoader(ClassLoader) so that it can instantiate your objects when you retrieve them.
android.os.Message.getData,Get data.
android.os.Message.getData,Obtains a Bundle of arbitrary data associated with this event lazily creating it if necessary.
android.os.Message.getData,Set this value by calling setData(android.os.Bundle).
android.os.Message.getData,Note that when transferring data across processes via Messenger you will need to set your ClassLoader on the Bundle via Bundle#setClassLoader(ClassLoader) so that it can instantiate your objects when you retrieve them.
android.os.Message.obtain,Same as obtain() but sets the value for the target member on the Message returned.
android.os.Message.obtain,Obtain.
android.os.Message.obtain,Same as obtain() but sets the values for both target and what members on the Message.
android.os.Message.obtain,Obtain.
android.os.Message.obtain,Same as obtain(android.os.Handler) but assigns a callback Runnable on the Message that is returned.
android.os.Message.obtain,Obtain.
android.os.Message.obtain,Same as obtain() but copies the values of an existing message (including its target) into the new one.
android.os.Message.obtain,Obtain.
android.os.Message.obtain,Same as obtain() but sets the values of the target what arg1 arg2 and obj members.
android.os.Message.obtain,Obtain.
android.os.Message.obtain,Same as obtain() but sets the values of the target what arg1 and arg2 members.
android.os.Message.obtain,Obtain.
android.os.Message.obtain,Same as obtain() but sets the values of the target what and obj members.
android.os.Message.obtain,Obtain.
android.os.Message.obtain,Return a new Message instance from the global pool. Allows us to avoid allocating new objects in many cases.
android.os.Message.obtain,Obtain.
android.os.Message.obtain,Return a new Message instance from the global pool.
android.os.Message.obtain,Allows us to avoid allocating new objects in many cases.
android.os.Message.sendToTarget,Sends this Message to the Handler specified by getTarget(). Throws a null pointer exception if this field has not been set.
android.os.Message.sendToTarget,Send to target.
android.os.Message.sendToTarget,Sends this Message to the Handler specified by getTarget().
android.os.Message.sendToTarget,Throws a null pointer exception if this field has not been set.
android.os.Message.setData,Sets a Bundle of arbitrary data values. Use arg1 and arg2 members as a lower cost way to send a few simple integer values if you can.
android.os.Message.setData,Set data.
android.os.Message.setData,Sets a Bundle of arbitrary data values.
android.os.Message.setData,Use arg1 and arg2 members as a lower cost way to send a few simple integer values if you can.
android.os.Messenger.getBinder,Retrieve the IBinder that this Messenger is using to communicate with its associated Handler.
android.os.Messenger.getBinder,Get binder.
android.os.Messenger.send,Send a Message to this Messenger's Handler.
android.os.Messenger.send,Send.
android.os.Parcel.createBinderArrayList,Read and return a new ArrayList containing IBinder objects from the parcel that was written with writeBinderList(List ) at the current dataPosition(). Returns null if the previously written list object was null.
android.os.Parcel.createBinderArrayList,Create binder array list.
android.os.Parcel.createBinderArrayList,Read and return a new ArrayList containing IBinder objects from the parcel that was written with writeBinderList(List ) at the current dataPosition().
android.os.Parcel.createBinderArrayList,Returns null if the previously written list object was null.
android.os.Parcel.createByteArray,Read and return a byte[] object from the parcel.
android.os.Parcel.createByteArray,Create byte array.
android.os.Parcel.createStringArrayList,Read and return a new ArrayList containing String objects from the parcel that was written with writeStringList(List ) at the current dataPosition(). Returns null if the previously written list object was null.
android.os.Parcel.createStringArrayList,Create string array list.
android.os.Parcel.createStringArrayList,Read and return a new ArrayList containing String objects from the parcel that was written with writeStringList(List ) at the current dataPosition().
android.os.Parcel.createStringArrayList,Returns null if the previously written list object was null.
android.os.Parcel.dataPosition,Returns the current position in the parcel data. Never more than dataSize().
android.os.Parcel.dataPosition,Data position.
android.os.Parcel.dataPosition,Returns the current position in the parcel data.
android.os.Parcel.dataPosition,Never more than dataSize().
android.os.Parcel.dataSize,Returns the total amount of data contained in the parcel.
android.os.Parcel.dataSize,Data size.
android.os.Parcel.marshall,Returns the raw bytes of the parcel. The data you retrieve here must not be placed in any kind of persistent storage (on local disk across a network etc). For that you should use standard serialization or another kind of general serialization mechanism. The Parcel marshalled representation is highly optimized for local IPC and as such does not attempt to maintain compatibility with data created in different versions of the platform.
android.os.Parcel.marshall,Marshall.
android.os.Parcel.marshall,Returns the raw bytes of the parcel.
android.os.Parcel.marshall,The data you retrieve here must not be placed in any kind of persistent storage (on local disk across a network etc).
android.os.Parcel.marshall,For that you should use standard serialization or another kind of general serialization mechanism.
android.os.Parcel.marshall,The Parcel marshalled representation is highly optimized for local IPC and as such does not attempt to maintain compatibility with data created in different versions of the platform.
android.os.Parcel.obtain,Retrieve a new Parcel object from the pool.
android.os.Parcel.obtain,Obtain.
android.os.Parcel.readArray,Read and return a new Object array from the parcel at the current dataPosition(). Returns null if the previously written array was null. The given class loader will be used to load any enclosed Parcelables.
android.os.Parcel.readArray,Read array.
android.os.Parcel.readArray,Read and return a new Object array from the parcel at the current dataPosition().
android.os.Parcel.readArray,Returns null if the previously written array was null.
android.os.Parcel.readArray,The given class loader will be used to load any enclosed Parcelables.
android.os.Parcel.readArrayList,Read and return a new ArrayList object from the parcel at the current dataPosition(). Returns null if the previously written list object was null. The given class loader will be used to load any enclosed Parcelables.
android.os.Parcel.readArrayList,Read array list.
android.os.Parcel.readArrayList,Read and return a new ArrayList object from the parcel at the current dataPosition().
android.os.Parcel.readArrayList,Returns null if the previously written list object was null.
android.os.Parcel.readArrayList,The given class loader will be used to load any enclosed Parcelables.
android.os.Parcel.readBundle,Read and return a new Bundle object from the parcel at the current dataPosition(). Returns null if the previously written Bundle object was null.
android.os.Parcel.readBundle,Read bundle.
android.os.Parcel.readBundle,Read and return a new Bundle object from the parcel at the current dataPosition().
android.os.Parcel.readBundle,Returns null if the previously written Bundle object was null.
android.os.Parcel.readBundle,Read and return a new Bundle object from the parcel at the current dataPosition() using the given class loader to initialize the class loader of the Bundle for later retrieval of Parcelable objects. Returns null if the previously written Bundle object was null.
android.os.Parcel.readBundle,Read bundle.
android.os.Parcel.readBundle,Read and return a new Bundle object from the parcel at the current dataPosition() using the given class loader to initialize the class loader of the Bundle for later retrieval of Parcelable objects.
android.os.Parcel.readBundle,Returns null if the previously written Bundle object was null.
android.os.Parcel.readByte,Read a byte value from the parcel at the current dataPosition().
android.os.Parcel.readByte,Read byte.
android.os.Parcel.readByteArray,Read a byte[] object from the parcel and copy it into the given byte array.
android.os.Parcel.readByteArray,Read byte array.
android.os.Parcel.readDouble,Read a double precision floating point value from the parcel at the current dataPosition().
android.os.Parcel.readDouble,Read double.
android.os.Parcel.readException,Special function for reading an exception result from the header of a parcel to be used after receiving the result of a transaction. This will throw the exception for you if it had been written to the Parcel otherwise return and let you read the normal result data from the Parcel.
android.os.Parcel.readException,Read exception.
android.os.Parcel.readException,Special function for reading an exception result from the header of a parcel to be used after receiving the result of a transaction.
android.os.Parcel.readException,This will throw the exception for you if it had been written to the Parcel otherwise return and let you read the normal result data from the Parcel.
android.os.Parcel.readException,Throw an exception with the given message. Not intended for use outside the Parcel class.
android.os.Parcel.readException,Read exception.
android.os.Parcel.readException,Throw an exception with the given message.
android.os.Parcel.readException,Not intended for use outside the Parcel class.
android.os.Parcel.readFileDescriptor,Read a FileDescriptor from the parcel at the current dataPosition().
android.os.Parcel.readFileDescriptor,Read file descriptor.
android.os.Parcel.readFloat,Read a floating point value from the parcel at the current dataPosition().
android.os.Parcel.readFloat,Read float.
android.os.Parcel.readHashMap,Please use readBundle(java.lang.ClassLoader) instead (whose data must have been written with writeBundle(Bundle). Read and return a new HashMap object from the parcel at the current dataPosition() using the given class loader to load any enclosed Parcelables. Returns null if the previously written map object was null.
android.os.Parcel.readHashMap,Read hash map.
android.os.Parcel.readHashMap,Please use readBundle(java.lang.ClassLoader) instead (whose data must have been written with writeBundle(Bundle).
android.os.Parcel.readHashMap,Read and return a new HashMap object from the parcel at the current dataPosition() using the given class loader to load any enclosed Parcelables.
android.os.Parcel.readHashMap,Returns null if the previously written map object was null.
android.os.Parcel.readInt,Read an integer value from the parcel at the current dataPosition().
android.os.Parcel.readInt,Read int.
android.os.Parcel.readList,Read into an existing List object from the parcel at the current dataPosition() using the given class loader to load any enclosed Parcelables. If it is null the default class loader is used.
android.os.Parcel.readList,Read list.
android.os.Parcel.readList,Read into an existing List object from the parcel at the current dataPosition() using the given class loader to load any enclosed Parcelables.
android.os.Parcel.readList,If it is null the default class loader is used.
android.os.Parcel.readLong,Read a long integer value from the parcel at the current dataPosition().
android.os.Parcel.readLong,Read long.
android.os.Parcel.readParcelable,Read and return a new Parcelable from the parcel. The given class loader will be used to load any enclosed Parcelables. If it is null the default class loader will be used.
android.os.Parcel.readParcelable,Read parcelable.
android.os.Parcel.readParcelable,Read and return a new Parcelable from the parcel.
android.os.Parcel.readParcelable,The given class loader will be used to load any enclosed Parcelables.
android.os.Parcel.readParcelable,If it is null the default class loader will be used.
android.os.Parcel.readParcelableArray,Read and return a new Parcelable array from the parcel. The given class loader will be used to load any enclosed Parcelables.
android.os.Parcel.readParcelableArray,Read parcelable array.
android.os.Parcel.readParcelableArray,Read and return a new Parcelable array from the parcel.
android.os.Parcel.readParcelableArray,The given class loader will be used to load any enclosed Parcelables.
android.os.Parcel.readSerializable,Read and return a new Serializable object from the parcel.
android.os.Parcel.readSerializable,Read serializable.
android.os.Parcel.readString,Read a string value from the parcel at the current dataPosition().
android.os.Parcel.readString,Read string.
android.os.Parcel.readStringList,Read into the given List items String objects that were written with writeStringList(List ) at the current dataPosition().
android.os.Parcel.readStringList,Read string list.
android.os.Parcel.readStrongBinder,Read an object from the parcel at the current dataPosition().
android.os.Parcel.readStrongBinder,Read strong binder.
android.os.Parcel.readValue,Read a typed object from a parcel. The given class loader will be used to load any enclosed Parcelables. If it is null the default class loader will be used.
android.os.Parcel.readValue,Read value.
android.os.Parcel.readValue,Read a typed object from a parcel.
android.os.Parcel.readValue,The given class loader will be used to load any enclosed Parcelables.
android.os.Parcel.readValue,If it is null the default class loader will be used.
android.os.Parcel.recycle,Put a Parcel object back into the pool. You must not touch the object after this call.
android.os.Parcel.recycle,Recycle.
android.os.Parcel.recycle,Put a Parcel object back into the pool.
android.os.Parcel.recycle,You must not touch the object after this call.
android.os.Parcel.setDataPosition,Move the current read/write position in the parcel.
android.os.Parcel.setDataPosition,Set data position.
android.os.Parcel.unmarshall,Set the bytes in data to be the raw bytes of this Parcel.
android.os.Parcel.unmarshall,Unmarshall.
android.os.Parcel.writeArray,Flatten an Object array into the parcel at the current dataPosition() growing dataCapacity() if needed. The array values are written using writeValue(Object) and must follow the specification there.
android.os.Parcel.writeArray,Write array.
android.os.Parcel.writeArray,Flatten an Object array into the parcel at the current dataPosition() growing dataCapacity() if needed.
android.os.Parcel.writeArray,The array values are written using writeValue(Object) and must follow the specification there.
android.os.Parcel.writeBinderList,Flatten a List containing IBinder objects into the parcel at the current dataPosition() and growing dataCapacity() if needed. They can later be retrieved with createBinderArrayList() or readBinderList(List ).
android.os.Parcel.writeBinderList,Write binder list.
android.os.Parcel.writeBinderList,Flatten a List containing IBinder objects into the parcel at the current dataPosition() and growing dataCapacity() if needed.
android.os.Parcel.writeBinderList,They can later be retrieved with createBinderArrayList() or readBinderList(List ).
android.os.Parcel.writeBundle,Flatten a Bundle into the parcel at the current dataPosition() growing dataCapacity() if needed.
android.os.Parcel.writeBundle,Write bundle.
android.os.Parcel.writeByte,Write a byte value into the parcel at the current dataPosition() growing dataCapacity() if needed. Note: This method currently delegates to writeInt but may change in the future.
android.os.Parcel.writeByte,Write byte.
android.os.Parcel.writeByte,Write a byte value into the parcel at the current dataPosition() growing dataCapacity() if needed.
android.os.Parcel.writeByte,Note: This method currently delegates to writeInt but may change in the future.
android.os.Parcel.writeByteArray,Write a byte array into the parcel at the current dataPosition() growing dataCapacity() if needed.
android.os.Parcel.writeByteArray,Write byte array.
android.os.Parcel.writeByteArray,Write a byte array into the parcel at the current dataPosition() growing dataCapacity() if needed.
android.os.Parcel.writeByteArray,Write byte array.
android.os.Parcel.writeDouble,Write a double precision floating point value into the parcel at the current dataPosition() growing dataCapacity() if needed.
android.os.Parcel.writeDouble,Write double.
android.os.Parcel.writeFileDescriptor,Write a FileDescriptor into the parcel at the current dataPosition() growing dataCapacity() if needed. The file descriptor will not be closed which may result in file descriptor leaks when objects are returned from Binder calls. Use ParcelFileDescriptor#writeToParcel instead which accepts contextual flags and will close the original file descriptor if Parcelable#PARCELABLE_WRITE_RETURN_VALUE is set.
android.os.Parcel.writeFileDescriptor,Write file descriptor.
android.os.Parcel.writeFileDescriptor,Write a FileDescriptor into the parcel at the current dataPosition() growing dataCapacity() if needed.
android.os.Parcel.writeFileDescriptor,The file descriptor will not be closed which may result in file descriptor leaks when objects are returned from Binder calls.
android.os.Parcel.writeFileDescriptor,Use ParcelFileDescriptor#writeToParcel instead which accepts contextual flags and will close the original file descriptor if Parcelable#PARCELABLE_WRITE_RETURN_VALUE is set.
android.os.Parcel.writeFloat,Write a floating point value into the parcel at the current dataPosition() growing dataCapacity() if needed.
android.os.Parcel.writeFloat,Write float.
android.os.Parcel.writeInt,Write an integer value into the parcel at the current dataPosition() growing dataCapacity() if needed.
android.os.Parcel.writeInt,Write int.
android.os.Parcel.writeInterfaceToken,Store or read an IBinder interface token in the parcel at the current dataPosition(). This is used to validate that the marshalled transaction is intended for the target interface.
android.os.Parcel.writeInterfaceToken,Write interface token.
android.os.Parcel.writeInterfaceToken,Store or read an IBinder interface token in the parcel at the current dataPosition().
android.os.Parcel.writeInterfaceToken,This is used to validate that the marshalled transaction is intended for the target interface.
android.os.Parcel.writeList,Flatten a List into the parcel at the current dataPosition() growing dataCapacity() if needed. The List values are written using writeValue(Object) and must follow the specification there.
android.os.Parcel.writeList,Write list.
android.os.Parcel.writeList,Flatten a List into the parcel at the current dataPosition() growing dataCapacity() if needed.
android.os.Parcel.writeList,The List values are written using writeValue(Object) and must follow the specification there.
android.os.Parcel.writeLong,Write a long integer value into the parcel at the current dataPosition() growing dataCapacity() if needed.
android.os.Parcel.writeLong,Write long.
android.os.Parcel.writeMap,Please use writeBundle(Bundle) instead. Flattens a Map into the parcel at the current dataPosition() growing dataCapacity() if needed. The Map keys must be String objects. The Map values are written using writeValue(Object) and must follow the specification there. It is strongly recommended to use writeBundle(Bundle) instead of this method since the Bundle class provides a type-safe API that allows you to avoid mysterious type errors at the point of marshalling.
android.os.Parcel.writeMap,Write map.
android.os.Parcel.writeMap,Please use writeBundle(Bundle) instead.
android.os.Parcel.writeMap,Flattens a Map into the parcel at the current dataPosition() growing dataCapacity() if needed.
android.os.Parcel.writeMap,The Map keys must be String objects.
android.os.Parcel.writeMap,The Map values are written using writeValue(Object) and must follow the specification there.
android.os.Parcel.writeMap,It is strongly recommended to use writeBundle(Bundle) instead of this method since the Bundle class provides a type-safe API that allows you to avoid mysterious type errors at the point of marshalling.
android.os.Parcel.writeNoException,Special function for writing information at the front of the Parcel indicating that no exception occurred.
android.os.Parcel.writeNoException,Write no exception.
android.os.Parcel.writeParcelable,Flatten the name of the class of the Parcelable and its contents into the parcel.
android.os.Parcel.writeParcelable,Write parcelable.
android.os.Parcel.writeSerializable,Write a generic serializable object in to a Parcel. It is strongly recommended that this method be avoided since the serialization overhead is extremely large and this approach will be much slower than using the other approaches to writing data in to a Parcel.
android.os.Parcel.writeSerializable,Write serializable.
android.os.Parcel.writeSerializable,Write a generic serializable object in to a Parcel.
android.os.Parcel.writeSerializable,It is strongly recommended that this method be avoided since the serialization overhead is extremely large and this approach will be much slower than using the other approaches to writing data in to a Parcel.
android.os.Parcel.writeString,Write a string value into the parcel at the current dataPosition() growing dataCapacity() if needed.
android.os.Parcel.writeString,Write string.
android.os.Parcel.writeStringList,Flatten a List containing String objects into the parcel at the current dataPosition() and growing dataCapacity() if needed. They can later be retrieved with createStringArrayList() or readStringList(List ).
android.os.Parcel.writeStringList,Write string list.
android.os.Parcel.writeStringList,Flatten a List containing String objects into the parcel at the current dataPosition() and growing dataCapacity() if needed.
android.os.Parcel.writeStringList,They can later be retrieved with createStringArrayList() or readStringList(List ).
android.os.Parcel.writeStrongBinder,Write an object into the parcel at the current dataPosition() growing dataCapacity() if needed.
android.os.Parcel.writeStrongBinder,Write strong binder.
android.os.Parcel.writeTypedList,Flatten a List containing a particular object type into the parcel at the current dataPosition() and growing dataCapacity() if needed. The type of the objects in the list must be one that implements Parcelable. Unlike the generic writeList() method however only the raw data of the objects is written and not their type so you must use the corresponding readTypedList() to unmarshall them.
android.os.Parcel.writeTypedList,Write typed list.
android.os.Parcel.writeTypedList,Flatten a List containing a particular object type into the parcel at the current dataPosition() and growing dataCapacity() if needed.
android.os.Parcel.writeTypedList,The type of the objects in the list must be one that implements Parcelable.
android.os.Parcel.writeTypedList,Unlike the generic writeList() method however only the raw data of the objects is written and not their type so you must use the corresponding readTypedList() to unmarshall them.
android.os.Parcel.writeValue,Flatten a generic object in to a parcel. The given Object value may currently be one of the following types: null String Byte Short Integer Long Float Double Boolean String[] boolean[] byte[] int[] long[] Object[] (supporting objects of the same type defined here). Bundle Map (as supported by writeMap(Map) ). Any object that implements the Parcelable protocol. Parcelable[] CharSequence (as supported by TextUtils#writeToParcel ). List (as supported by writeList(List) ). SparseArray (as supported by writeSparseArray(android.util.SparseArray) ). IBinder Any object that implements Serializable (but see writeSerializable(Serializable) for caveats). Note that all of the previous types have relatively efficient implementations for writing to a Parcel; having to rely on the generic serialization approach is much less efficient and should be avoided whenever possible. Parcelable objects are written with Parcelable#writeToParcel using contextual flags of 0. When serializing objects containing ParcelFileDescriptor s this may result in file descriptor leaks when they are returned from Binder calls (where Parcelable#PARCELABLE_WRITE_RETURN_VALUE should be used).
android.os.Parcel.writeValue,Write value.
android.os.Parcel.writeValue,Flatten a generic object in to a parcel.
android.os.Parcel.writeValue,The given Object value may currently be one of the following types: null String Byte Short Integer Long Float Double Boolean String[] boolean[] byte[] int[] long[] Object[] (supporting objects of the same type defined here).
android.os.Parcel.writeValue,Bundle Map (as supported by writeMap(Map) ).
android.os.Parcel.writeValue,Any object that implements the Parcelable protocol.
android.os.Parcel.writeValue,Parcelable[] CharSequence (as supported by TextUtils#writeToParcel ).
android.os.Parcel.writeValue,List (as supported by writeList(List) ).
android.os.Parcel.writeValue,SparseArray (as supported by writeSparseArray(android.util.SparseArray) ).
android.os.Parcel.writeValue,IBinder Any object that implements Serializable (but see writeSerializable(Serializable) for caveats).
android.os.Parcel.writeValue,Note that all of the previous types have relatively efficient implementations for writing to a Parcel; having to rely on the generic serialization approach is much less efficient and should be avoided whenever possible.
android.os.Parcel.writeValue,Parcelable objects are written with Parcelable#writeToParcel using contextual flags of 0.
android.os.Parcel.writeValue,When serializing objects containing ParcelFileDescriptor s this may result in file descriptor leaks when they are returned from Binder calls (where Parcelable#PARCELABLE_WRITE_RETURN_VALUE should be used).
android.os.ParcelFileDescriptor.close,Close the ParcelFileDescriptor. This implementation closes the underlying OS resources allocated to represent this stream.
android.os.ParcelFileDescriptor.close,Close.
android.os.ParcelFileDescriptor.close,Close the ParcelFileDescriptor.
android.os.ParcelFileDescriptor.close,This implementation closes the underlying OS resources allocated to represent this stream.
android.os.ParcelFileDescriptor.createPipe,Create two ParcelFileDescriptors structured as a data pipe. The first ParcelFileDescriptor in the returned array is the read side; the second is the write side.
android.os.ParcelFileDescriptor.createPipe,Create pipe.
android.os.ParcelFileDescriptor.createPipe,Create two ParcelFileDescriptors structured as a data pipe.
android.os.ParcelFileDescriptor.createPipe,The first ParcelFileDescriptor in the returned array is the read side; the second is the write side.
android.os.ParcelFileDescriptor.getFd,Return the native fd int for this ParcelFileDescriptor. The ParcelFileDescriptor still owns the fd and it still must be closed through this API. WARNING: Do not call close on the return value of this function or pass it to a function that assumes ownership of the fd.
android.os.ParcelFileDescriptor.getFd,Get fd.
android.os.ParcelFileDescriptor.getFd,Return the native fd int for this ParcelFileDescriptor.
android.os.ParcelFileDescriptor.getFd,The ParcelFileDescriptor still owns the fd and it still must be closed through this API.
android.os.ParcelFileDescriptor.getFd,WARNING: Do not call close on the return value of this function or pass it to a function that assumes ownership of the fd.
android.os.ParcelFileDescriptor.getFileDescriptor,Retrieve the actual FileDescriptor associated with this object.
android.os.ParcelFileDescriptor.getFileDescriptor,Get file descriptor.
android.os.ParcelFileDescriptor.getStatSize,Return the total size of the file representing this fd as determined by stat(). Returns -1 if the fd is not a file.
android.os.ParcelFileDescriptor.getStatSize,Get stat size.
android.os.ParcelFileDescriptor.getStatSize,Return the total size of the file representing this fd as determined by stat().
android.os.ParcelFileDescriptor.getStatSize,Returns -1 if the fd is not a file.
android.os.ParcelFileDescriptor.open,Create a new ParcelFileDescriptor accessing a given file.
android.os.ParcelFileDescriptor.open,Open.
android.os.ParcelFileDescriptor.open,Create a new ParcelFileDescriptor accessing a given file.
android.os.ParcelFileDescriptor.open,Open.
android.os.ParcelFileDescriptor.writeToParcel,Flatten this object in to a Parcel. If Parcelable#PARCELABLE_WRITE_RETURN_VALUE is set in flags the file descriptor will be closed after a copy is written to the Parcel.
android.os.ParcelFileDescriptor.writeToParcel,Write to parcel.
android.os.ParcelFileDescriptor.writeToParcel,Flatten this object in to a Parcel.
android.os.ParcelFileDescriptor.writeToParcel,If Parcelable#PARCELABLE_WRITE_RETURN_VALUE is set in flags the file descriptor will be closed after a copy is written to the Parcel.
android.os.PowerManager.isInteractive,"Returns true if the device is in an interactive state. When this method returns true the device is awake and ready to interact with the user (although this is not a guarantee that the user is actively interacting with the device just this moment). The main screen is usually turned on while in this state. Certain features such as the proximity sensor may temporarily turn off the screen while still leaving the device in an interactive state. Note in particular that the device is still considered to be interactive while dreaming (since dreams can be interactive) but not when it is dozing or asleep. When this method returns false the device is dozing or asleep and must be awoken before it will become ready to interact with the user again. The main screen is usually turned off while in this state. Certain features such as ""ambient mode"" may cause the main screen to remain on (albeit in a low power state) to display system-provided content while the device dozes. The system will send a screen on or screen off broadcast whenever the interactive state of the device changes. For historical reasons the names of these broadcasts refer to the power state of the screen but they are actually sent in response to changes in the overall interactive state of the device as described by this method. Services may use the non-interactive state as a hint to conserve power since the user is not present."
android.os.PowerManager.isInteractive,Is interactive.
android.os.PowerManager.isInteractive,Returns true if the device is in an interactive state.
android.os.PowerManager.isInteractive,When this method returns true the device is awake and ready to interact with the user (although this is not a guarantee that the user is actively interacting with the device just this moment).
android.os.PowerManager.isInteractive,The main screen is usually turned on while in this state.
android.os.PowerManager.isInteractive,Certain features such as the proximity sensor may temporarily turn off the screen while still leaving the device in an interactive state.
android.os.PowerManager.isInteractive,Note in particular that the device is still considered to be interactive while dreaming (since dreams can be interactive) but not when it is dozing or asleep.
android.os.PowerManager.isInteractive,When this method returns false the device is dozing or asleep and must be awoken before it will become ready to interact with the user again.
android.os.PowerManager.isInteractive,The main screen is usually turned off while in this state.
android.os.PowerManager.isInteractive,"Certain features such as ""ambient mode"" may cause the main screen to remain on (albeit in a low power state) to display system-provided content while the device dozes."
android.os.PowerManager.isInteractive,The system will send a screen on or screen off broadcast whenever the interactive state of the device changes.
android.os.PowerManager.isInteractive,For historical reasons the names of these broadcasts refer to the power state of the screen but they are actually sent in response to changes in the overall interactive state of the device as described by this method.
android.os.PowerManager.isInteractive,Services may use the non-interactive state as a hint to conserve power since the user is not present.
android.os.PowerManager.isScreenOn,This method was deprecated in API level 20. Use isInteractive() instead. Returns true if the device is in an interactive state. For historical reasons the name of this method refers to the power state of the screen but it actually describes the overall interactive state of the device. This method has been replaced by isInteractive(). The value returned by this method only indicates whether the device is in an interactive state which may have nothing to do with the screen being on or off. To determine the actual state of the screen use Display.getState().
android.os.PowerManager.isScreenOn,Is screen on.
android.os.PowerManager.isScreenOn,This method was deprecated in API level 20.
android.os.PowerManager.isScreenOn,Use isInteractive() instead.
android.os.PowerManager.isScreenOn,Returns true if the device is in an interactive state.
android.os.PowerManager.isScreenOn,For historical reasons the name of this method refers to the power state of the screen but it actually describes the overall interactive state of the device.
android.os.PowerManager.isScreenOn,This method has been replaced by isInteractive().
android.os.PowerManager.isScreenOn,The value returned by this method only indicates whether the device is in an interactive state which may have nothing to do with the screen being on or off.
android.os.PowerManager.isScreenOn,To determine the actual state of the screen use Display.getState().
android.os.PowerManager.newWakeLock,Creates a new wake lock with the specified level and flags. The levelAndFlags parameter specifies a wake lock level and optional flags combined using the logical OR operator. The wake lock levels are: PARTIAL_WAKE_LOCK FULL_WAKE_LOCK SCREEN_DIM_WAKE_LOCK and SCREEN_BRIGHT_WAKE_LOCK. Exactly one wake lock level must be specified as part of the levelAndFlags parameter. The wake lock flags are: ACQUIRE_CAUSES_WAKEUP and ON_AFTER_RELEASE. Multiple flags can be combined as part of the levelAndFlags parameters. Call WakeLock#acquire() on the object to acquire the wake lock and WakeLock#release when you are done. Although a wake lock can be created without special permissions the Manifest.permission.WAKE_LOCK permission is required to actually acquire or release the wake lock that is returned. If using this to keep the screen on you should strongly consider using WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON instead. This window flag will be correctly managed by the platform as the user moves between applications and doesn't require a special permission. Recommended naming conventions for tags to make debugging easier: use a unique prefix delimited by a colon for your app/library (e.g. gmail:mytag) to make it easier to understand where the wake locks comes from. This namespace will also avoid collision for tags inside your app coming from different libraries which will make debugging easier. use constants (e.g. do not include timestamps in the tag) to make it easier for tools to aggregate similar wake locks. When collecting debugging data the platform only monitors a finite number of tags using constants will help tools to provide better debugging data. avoid using Class#getName() or similar method since this class name can be transformed by java optimizer and obfuscator tools. avoid wrapping the tag or a prefix to avoid collision with wake lock tags from the platform (e.g. *alarm*). never include personnally identifiable information for privacy reasons.
android.os.PowerManager.newWakeLock,New wake lock.
android.os.PowerManager.newWakeLock,Creates a new wake lock with the specified level and flags.
android.os.PowerManager.newWakeLock,The levelAndFlags parameter specifies a wake lock level and optional flags combined using the logical OR operator.
android.os.PowerManager.newWakeLock,The wake lock levels are: PARTIAL_WAKE_LOCK FULL_WAKE_LOCK SCREEN_DIM_WAKE_LOCK and SCREEN_BRIGHT_WAKE_LOCK.
android.os.PowerManager.newWakeLock,Exactly one wake lock level must be specified as part of the levelAndFlags parameter.
android.os.PowerManager.newWakeLock,The wake lock flags are: ACQUIRE_CAUSES_WAKEUP and ON_AFTER_RELEASE.
android.os.PowerManager.newWakeLock,Multiple flags can be combined as part of the levelAndFlags parameters.
android.os.PowerManager.newWakeLock,Call WakeLock#acquire() on the object to acquire the wake lock and WakeLock#release when you are done.
android.os.PowerManager.newWakeLock,Although a wake lock can be created without special permissions the Manifest.permission.WAKE_LOCK permission is required to actually acquire or release the wake lock that is returned.
android.os.PowerManager.newWakeLock,If using this to keep the screen on you should strongly consider using WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON instead.
android.os.PowerManager.newWakeLock,This window flag will be correctly managed by the platform as the user moves between applications and doesn't require a special permission.
android.os.PowerManager.newWakeLock,Recommended naming conventions for tags to make debugging easier: use a unique prefix delimited by a colon for your app/library (e.g.
android.os.PowerManager.newWakeLock,gmail:mytag) to make it easier to understand where the wake locks comes from.
android.os.PowerManager.newWakeLock,This namespace will also avoid collision for tags inside your app coming from different libraries which will make debugging easier.
android.os.PowerManager.newWakeLock,use constants (e.g.
android.os.PowerManager.newWakeLock,do not include timestamps in the tag) to make it easier for tools to aggregate similar wake locks.
android.os.PowerManager.newWakeLock,When collecting debugging data the platform only monitors a finite number of tags using constants will help tools to provide better debugging data.
android.os.PowerManager.newWakeLock,avoid using Class#getName() or similar method since this class name can be transformed by java optimizer and obfuscator tools.
android.os.PowerManager.newWakeLock,avoid wrapping the tag or a prefix to avoid collision with wake lock tags from the platform (e.g.
android.os.PowerManager.newWakeLock,*alarm*).
android.os.PowerManager.newWakeLock,never include personnally identifiable information for privacy reasons.
android.os.Process.getElapsedCpuTime,Returns elapsed milliseconds of the time this process has run.
android.os.Process.getElapsedCpuTime,Get elapsed cpu time.
android.os.Process.getThreadPriority,Return the current priority of a thread based on Linux priorities.
android.os.Process.getThreadPriority,Get thread priority.
android.os.Process.killProcess,Kill the process with the given PID. Note that though this API allows us to request to kill any process based on its PID the kernel will still impose standard restrictions on which PIDs you are actually able to kill. Typically this means only the process running the caller's packages/application and any additional processes created by that app; packages sharing a common UID will also be able to kill each other's processes.
android.os.Process.killProcess,Kill process.
android.os.Process.killProcess,Kill the process with the given PID.
android.os.Process.killProcess,Note that though this API allows us to request to kill any process based on its PID the kernel will still impose standard restrictions on which PIDs you are actually able to kill.
android.os.Process.killProcess,Typically this means only the process running the caller's packages/application and any additional processes created by that app; packages sharing a common UID will also be able to kill each other's processes.
android.os.Process.myPid,Returns the identifier of this process which can be used with killProcess(int) and sendSignal(int int).
android.os.Process.myPid,My pid.
android.os.Process.myTid,Returns the identifier of the calling thread which be used with setThreadPriority(int int).
android.os.Process.myTid,My tid.
android.os.Process.myUid,Returns the identifier of this process's uid. This is the kernel uid that the process is running under which is the identity of its app-specific sandbox. It is different from myUserHandle() in that a uid identifies a specific app sandbox in a specific user.
android.os.Process.myUid,My uid.
android.os.Process.myUid,Returns the identifier of this process's uid.
android.os.Process.myUid,This is the kernel uid that the process is running under which is the identity of its app-specific sandbox.
android.os.Process.myUid,It is different from myUserHandle() in that a uid identifies a specific app sandbox in a specific user.
android.os.Process.setThreadPriority,Set the priority of a thread based on Linux priorities.
android.os.Process.setThreadPriority,Set thread priority.
android.os.Process.setThreadPriority,Set the priority of the calling thread based on Linux priorities. See setThreadPriority(int int) for more information.
android.os.Process.setThreadPriority,Set thread priority.
android.os.Process.setThreadPriority,Set the priority of the calling thread based on Linux priorities.
android.os.Process.setThreadPriority,See setThreadPriority(int int) for more information.
android.os.ResultReceiver.send,Deliver a result to this receiver. Will call onReceiveResult(int Bundle) always asynchronously if the receiver has supplied a Handler in which to dispatch the result.
android.os.ResultReceiver.send,Send.
android.os.ResultReceiver.send,Deliver a result to this receiver.
android.os.ResultReceiver.send,Will call onReceiveResult(int Bundle) always asynchronously if the receiver has supplied a Handler in which to dispatch the result.
android.os.StatFs.getAvailableBlocks,This method was deprecated in API level 18. Use getAvailableBlocksLong() instead.
android.os.StatFs.getAvailableBlocks,Get available blocks.
android.os.StatFs.getAvailableBlocks,This method was deprecated in API level 18.
android.os.StatFs.getAvailableBlocks,Use getAvailableBlocksLong() instead.
android.os.StatFs.getAvailableBlocksLong,The number of blocks that are free on the file system and available to applications. This corresponds to the Unix statvfs.f_bavail field.
android.os.StatFs.getAvailableBlocksLong,Get available blocks long.
android.os.StatFs.getAvailableBlocksLong,The number of blocks that are free on the file system and available to applications.
android.os.StatFs.getAvailableBlocksLong,This corresponds to the Unix statvfs.f_bavail field.
android.os.StatFs.getBlockCount,This method was deprecated in API level 18. Use getBlockCountLong() instead.
android.os.StatFs.getBlockCount,Get block count.
android.os.StatFs.getBlockCount,This method was deprecated in API level 18.
android.os.StatFs.getBlockCount,Use getBlockCountLong() instead.
android.os.StatFs.getBlockSize,This method was deprecated in API level 18. Use getBlockSizeLong() instead.
android.os.StatFs.getBlockSize,Get block size.
android.os.StatFs.getBlockSize,This method was deprecated in API level 18.
android.os.StatFs.getBlockSize,Use getBlockSizeLong() instead.
android.os.StatFs.getBlockSizeLong,The size in bytes of a block on the file system. This corresponds to the Unix statvfs.f_frsize field.
android.os.StatFs.getBlockSizeLong,Get block size long.
android.os.StatFs.getBlockSizeLong,The size in bytes of a block on the file system.
android.os.StatFs.getBlockSizeLong,This corresponds to the Unix statvfs.f_frsize field.
android.os.StatFs.getFreeBlocks,This method was deprecated in API level 18. Use getFreeBlocksLong() instead.
android.os.StatFs.getFreeBlocks,Get free blocks.
android.os.StatFs.getFreeBlocks,This method was deprecated in API level 18.
android.os.StatFs.getFreeBlocks,Use getFreeBlocksLong() instead.
android.os.StatFs.restat,Perform a restat of the file system referenced by this object. This is the same as re-constructing the object with the same file system path and the new stat values are available upon return.
android.os.StatFs.restat,Restat.
android.os.StatFs.restat,Perform a restat of the file system referenced by this object.
android.os.StatFs.restat,This is the same as re-constructing the object with the same file system path and the new stat values are available upon return.
android.os.SystemClock.currentThreadTimeMillis,Returns milliseconds running in the current thread.
android.os.SystemClock.currentThreadTimeMillis,Current thread time millis.
android.os.SystemClock.elapsedRealtime,Returns milliseconds since boot including time spent in sleep.
android.os.SystemClock.elapsedRealtime,Elapsed realtime.
android.os.SystemClock.elapsedRealtimeNanos,Returns nanoseconds since boot including time spent in sleep.
android.os.SystemClock.elapsedRealtimeNanos,Elapsed realtime nanos.
android.os.SystemClock.sleep,Waits a given number of milliseconds (of uptimeMillis) before returning. Similar to Thread.sleep(long) but does not throw InterruptedException ; Thread#interrupt() events are deferred until the next interruptible operation. Does not return until at least the specified number of milliseconds has elapsed.
android.os.SystemClock.sleep,Sleep.
android.os.SystemClock.sleep,Waits a given number of milliseconds (of uptimeMillis) before returning.
android.os.SystemClock.sleep,Similar to Thread.sleep(long) but does not throw InterruptedException ; Thread#interrupt() events are deferred until the next interruptible operation.
android.os.SystemClock.sleep,Does not return until at least the specified number of milliseconds has elapsed.
android.os.SystemClock.uptimeMillis,Returns milliseconds since boot not counting time spent in deep sleep.
android.os.SystemClock.uptimeMillis,Uptime millis.
android.os.UserHandle.readFromParcel,Read a UserHandle from a Parcel that was previously written with writeToParcel(android.os.UserHandle android.os.Parcel) returning either a null or new object as appropriate.
android.os.UserHandle.readFromParcel,Read from parcel.
android.os.Vibrator.cancel,Turn the vibrator off. Requires Manifest.permission.VIBRATE.
android.os.Vibrator.cancel,Cancel.
android.os.Vibrator.cancel,Turn the vibrator off.
android.os.Vibrator.cancel,Requires Manifest.permission.VIBRATE.
android.os.Vibrator.hasVibrator,Check whether the hardware has a vibrator.
android.os.Vibrator.hasVibrator,Has vibrator.
android.os.Vibrator.vibrate,This method was deprecated in API level 26. Use vibrate(android.os.VibrationEffect) instead. Vibrate constantly for the specified period of time. Requires Manifest.permission.VIBRATE.
android.os.Vibrator.vibrate,Vibrate.
android.os.Vibrator.vibrate,This method was deprecated in API level 26.
android.os.Vibrator.vibrate,Use vibrate(android.os.VibrationEffect) instead.
android.os.Vibrator.vibrate,Vibrate constantly for the specified period of time.
android.os.Vibrator.vibrate,Requires Manifest.permission.VIBRATE.
android.os.Vibrator.vibrate,Requires Manifest.permission.VIBRATE.
android.os.Vibrator.vibrate,Vibrate.
android.os.Vibrator.vibrate,This method was deprecated in API level 26. Use vibrate(android.os.VibrationEffect) instead. Vibrate with a given pattern. Pass in an array of ints that are the durations for which to turn on or off the vibrator in milliseconds. The first value indicates the number of milliseconds to wait before turning the vibrator on. The next value indicates the number of milliseconds for which to keep the vibrator on before turning it off. Subsequent values alternate between durations in milliseconds to turn the vibrator off or to turn the vibrator on. To cause the pattern to repeat pass the index into the pattern array at which to start the repeat or -1 to disable repeating.
android.os.Vibrator.vibrate,Vibrate.
android.os.Vibrator.vibrate,This method was deprecated in API level 26.
android.os.Vibrator.vibrate,Use vibrate(android.os.VibrationEffect) instead.
android.os.Vibrator.vibrate,Vibrate with a given pattern.
android.os.Vibrator.vibrate,Pass in an array of ints that are the durations for which to turn on or off the vibrator in milliseconds.
android.os.Vibrator.vibrate,The first value indicates the number of milliseconds to wait before turning the vibrator on.
android.os.Vibrator.vibrate,The next value indicates the number of milliseconds for which to keep the vibrator on before turning it off.
android.os.Vibrator.vibrate,Subsequent values alternate between durations in milliseconds to turn the vibrator off or to turn the vibrator on.
android.os.Vibrator.vibrate,To cause the pattern to repeat pass the index into the pattern array at which to start the repeat or -1 to disable repeating.
android.os.Vibrator.vibrate,This method was deprecated in API level 26. Use vibrate(android.os.VibrationEffect android.media.AudioAttributes) instead. Vibrate with a given pattern. Pass in an array of ints that are the durations for which to turn on or off the vibrator in milliseconds. The first value indicates the number of milliseconds to wait before turning the vibrator on. The next value indicates the number of milliseconds for which to keep the vibrator on before turning it off. Subsequent values alternate between durations in milliseconds to turn the vibrator off or to turn the vibrator on. To cause the pattern to repeat pass the index into the pattern array at which to start the repeat or -1 to disable repeating.
android.os.Vibrator.vibrate,Vibrate.
android.os.Vibrator.vibrate,This method was deprecated in API level 26.
android.os.Vibrator.vibrate,Use vibrate(android.os.VibrationEffect android.media.AudioAttributes) instead.
android.os.Vibrator.vibrate,Vibrate with a given pattern.
android.os.Vibrator.vibrate,Pass in an array of ints that are the durations for which to turn on or off the vibrator in milliseconds.
android.os.Vibrator.vibrate,The first value indicates the number of milliseconds to wait before turning the vibrator on.
android.os.Vibrator.vibrate,The next value indicates the number of milliseconds for which to keep the vibrator on before turning it off.
android.os.Vibrator.vibrate,Subsequent values alternate between durations in milliseconds to turn the vibrator off or to turn the vibrator on.
android.os.Vibrator.vibrate,To cause the pattern to repeat pass the index into the pattern array at which to start the repeat or -1 to disable repeating.
android.os.Vibrator.vibrate,Requires Manifest.permission.VIBRATE.
android.os.Vibrator.vibrate,Vibrate.
android.os.Vibrator.vibrate,This method was deprecated in API level 26. Use vibrate(android.os.VibrationEffect android.media.AudioAttributes) instead. Vibrate constantly for the specified period of time. Requires Manifest.permission.VIBRATE.
android.os.Vibrator.vibrate,Vibrate.
android.os.Vibrator.vibrate,This method was deprecated in API level 26.
android.os.Vibrator.vibrate,Use vibrate(android.os.VibrationEffect android.media.AudioAttributes) instead.
android.os.Vibrator.vibrate,Vibrate constantly for the specified period of time.
android.os.Vibrator.vibrate,Requires Manifest.permission.VIBRATE.
android.service.notification.NotificationListenerService.onBind,This is not the lifecycle event you are looking for. The service should wait for the onListenerConnected() event before performing any operations.
android.service.notification.NotificationListenerService.onBind,On bind.
android.service.notification.NotificationListenerService.onBind,This is not the lifecycle event you are looking for.
android.service.notification.NotificationListenerService.onBind,The service should wait for the onListenerConnected() event before performing any operations.
android.service.notification.StatusBarNotification.getId,The id supplied to NotificationManager.notify(int Notification).
android.service.notification.StatusBarNotification.getId,Get id.
android.service.notification.StatusBarNotification.getNotification,The Notification supplied to NotificationManager.notify(int Notification). * @apiSince 18.
android.service.notification.StatusBarNotification.getNotification,Get notification.
android.service.notification.StatusBarNotification.getNotification,The Notification supplied to NotificationManager.notify(int Notification).
android.service.notification.StatusBarNotification.getNotification,* @apiSince 18.
android.service.notification.StatusBarNotification.getPackageName,The package that the notification belongs to.
android.service.notification.StatusBarNotification.getPackageName,Get package name.
android.service.notification.StatusBarNotification.getTag,The tag supplied to NotificationManager.notify(int Notification) or null if no tag was specified. * @apiSince 18.
android.service.notification.StatusBarNotification.getTag,Get tag.
android.service.notification.StatusBarNotification.getTag,The tag supplied to NotificationManager.notify(int Notification) or null if no tag was specified.
android.service.notification.StatusBarNotification.getTag,* @apiSince 18.
android.speech.tts.TextToSpeech.getFeatures,This method was deprecated in API level 21. As of API level 21 please use voices. In order to query features of the voice call getVoices() to retrieve the list of available voices and Voice#getFeatures() to retrieve the set of features. Queries the engine for the set of features it supports for a given locale. Features can either be framework defined e.g. TextToSpeech.Engine#KEY_FEATURE_NETWORK_SYNTHESIS or engine specific. Engine specific keys must be prefixed by the name of the engine they are intended for. These keys can be used as parameters to TextToSpeech#speak(String int java.util.HashMap) and TextToSpeech#synthesizeToFile(String java.util.HashMap String). Features values are strings and their values must meet restrictions described in their documentation.
android.speech.tts.TextToSpeech.getFeatures,Get features.
android.speech.tts.TextToSpeech.getFeatures,This method was deprecated in API level 21.
android.speech.tts.TextToSpeech.getFeatures,As of API level 21 please use voices.
android.speech.tts.TextToSpeech.getFeatures,In order to query features of the voice call getVoices() to retrieve the list of available voices and Voice#getFeatures() to retrieve the set of features.
android.speech.tts.TextToSpeech.getFeatures,Queries the engine for the set of features it supports for a given locale.
android.speech.tts.TextToSpeech.getFeatures,Features can either be framework defined e.g.
android.speech.tts.TextToSpeech.getFeatures,TextToSpeech.Engine#KEY_FEATURE_NETWORK_SYNTHESIS or engine specific.
android.speech.tts.TextToSpeech.getFeatures,Engine specific keys must be prefixed by the name of the engine they are intended for.
android.speech.tts.TextToSpeech.getFeatures,These keys can be used as parameters to TextToSpeech#speak(String int java.util.HashMap) and TextToSpeech#synthesizeToFile(String java.util.HashMap String).
android.speech.tts.TextToSpeech.getFeatures,Features values are strings and their values must meet restrictions described in their documentation.
android.speech.tts.TextToSpeech.playSilence,This method was deprecated in API level 21. As of API level 21 replaced by playSilentUtterance(long int java.lang.String). Plays silence for the specified amount of time using the specified queue mode. This method is asynchronous i.e. the method just adds the request to the queue of TTS requests and then returns. The synthesis might not have finished (or even started!) at the time when this method returns. In order to reliably detect errors during synthesis we recommend setting an utterance progress listener (see setOnUtteranceProgressListener(UtteranceProgressListener) ) and using the Engine#KEY_PARAM_UTTERANCE_ID parameter.
android.speech.tts.TextToSpeech.playSilence,Play silence.
android.speech.tts.TextToSpeech.playSilence,This method was deprecated in API level 21.
android.speech.tts.TextToSpeech.playSilence,As of API level 21 replaced by playSilentUtterance(long int java.lang.String).
android.speech.tts.TextToSpeech.playSilence,Plays silence for the specified amount of time using the specified queue mode.
android.speech.tts.TextToSpeech.playSilence,This method is asynchronous i.e.
android.speech.tts.TextToSpeech.playSilence,the method just adds the request to the queue of TTS requests and then returns.
android.speech.tts.TextToSpeech.playSilence,The synthesis might not have finished (or even started!) at the time when this method returns.
android.speech.tts.TextToSpeech.playSilence,In order to reliably detect errors during synthesis we recommend setting an utterance progress listener (see setOnUtteranceProgressListener(UtteranceProgressListener) ) and using the Engine#KEY_PARAM_UTTERANCE_ID parameter.
android.speech.tts.TextToSpeech.setOnUtteranceProgressListener,Sets the listener that will be notified of various events related to the synthesis of a given utterance. See UtteranceProgressListener and TextToSpeech.Engine#KEY_PARAM_UTTERANCE_ID.
android.speech.tts.TextToSpeech.setOnUtteranceProgressListener,Set on utterance progress listener.
android.speech.tts.TextToSpeech.setOnUtteranceProgressListener,Sets the listener that will be notified of various events related to the synthesis of a given utterance.
android.speech.tts.TextToSpeech.setOnUtteranceProgressListener,See UtteranceProgressListener and TextToSpeech.Engine#KEY_PARAM_UTTERANCE_ID.
android.speech.tts.TextToSpeech.setPitch,Sets the speech pitch for the TextToSpeech engine. This has no effect on any pre-recorded speech.
android.speech.tts.TextToSpeech.setPitch,Set pitch.
android.speech.tts.TextToSpeech.setPitch,Sets the speech pitch for the TextToSpeech engine.
android.speech.tts.TextToSpeech.setPitch,This has no effect on any pre-recorded speech.
android.speech.tts.TextToSpeech.setSpeechRate,Sets the speech rate. This has no effect on any pre-recorded speech.
android.speech.tts.TextToSpeech.setSpeechRate,Set speech rate.
android.speech.tts.TextToSpeech.setSpeechRate,Sets the speech rate.
android.speech.tts.TextToSpeech.setSpeechRate,This has no effect on any pre-recorded speech.
android.speech.tts.TextToSpeech.shutdown,Releases the resources used by the TextToSpeech engine. It is good practice for instance to call this method in the onDestroy() method of an Activity so the TextToSpeech engine can be cleanly stopped.
android.speech.tts.TextToSpeech.shutdown,Shutdown.
android.speech.tts.TextToSpeech.shutdown,Releases the resources used by the TextToSpeech engine.
android.speech.tts.TextToSpeech.shutdown,It is good practice for instance to call this method in the onDestroy() method of an Activity so the TextToSpeech engine can be cleanly stopped.
android.speech.tts.TextToSpeech.speak,Speaks the text using the specified queuing strategy and speech parameters the text may be spanned with TtsSpans. This method is asynchronous i.e. the method just adds the request to the queue of TTS requests and then returns. The synthesis might not have finished (or even started!) at the time when this method returns. In order to reliably detect errors during synthesis we recommend setting an utterance progress listener (see setOnUtteranceProgressListener(UtteranceProgressListener) ) and using the Engine#KEY_PARAM_UTTERANCE_ID parameter.
android.speech.tts.TextToSpeech.speak,Speak.
android.speech.tts.TextToSpeech.speak,Speaks the text using the specified queuing strategy and speech parameters the text may be spanned with TtsSpans.
android.speech.tts.TextToSpeech.speak,This method is asynchronous i.e.
android.speech.tts.TextToSpeech.speak,the method just adds the request to the queue of TTS requests and then returns.
android.speech.tts.TextToSpeech.speak,The synthesis might not have finished (or even started!) at the time when this method returns.
android.speech.tts.TextToSpeech.speak,In order to reliably detect errors during synthesis we recommend setting an utterance progress listener (see setOnUtteranceProgressListener(UtteranceProgressListener) ) and using the Engine#KEY_PARAM_UTTERANCE_ID parameter.
android.speech.tts.TextToSpeech.speak,This method was deprecated in API level 21. As of API level 21 replaced by speak(java.lang.CharSequence int android.os.Bundle java.lang.String). Speaks the string using the specified queuing strategy and speech parameters. This method is asynchronous i.e. the method just adds the request to the queue of TTS requests and then returns. The synthesis might not have finished (or even started!) at the time when this method returns. In order to reliably detect errors during synthesis we recommend setting an utterance progress listener (see setOnUtteranceProgressListener(UtteranceProgressListener) ) and using the Engine#KEY_PARAM_UTTERANCE_ID parameter.
android.speech.tts.TextToSpeech.speak,Speak.
android.speech.tts.TextToSpeech.speak,This method was deprecated in API level 21.
android.speech.tts.TextToSpeech.speak,As of API level 21 replaced by speak(java.lang.CharSequence int android.os.Bundle java.lang.String).
android.speech.tts.TextToSpeech.speak,Speaks the string using the specified queuing strategy and speech parameters.
android.speech.tts.TextToSpeech.speak,This method is asynchronous i.e.
android.speech.tts.TextToSpeech.speak,the method just adds the request to the queue of TTS requests and then returns.
android.speech.tts.TextToSpeech.speak,The synthesis might not have finished (or even started!) at the time when this method returns.
android.speech.tts.TextToSpeech.speak,In order to reliably detect errors during synthesis we recommend setting an utterance progress listener (see setOnUtteranceProgressListener(UtteranceProgressListener) ) and using the Engine#KEY_PARAM_UTTERANCE_ID parameter.
android.speech.tts.TextToSpeech.stop,Interrupts the current utterance (whether played or rendered to file) and discards other utterances in the queue.
android.speech.tts.TextToSpeech.stop,Stop.
android.renderscript.Allocation.copyTo,Copy from the Allocation into a Bitmap. The bitmap must match the dimensions of the Allocation.
android.renderscript.Allocation.copyTo,Copy to.
android.renderscript.Allocation.copyTo,Copy from the Allocation into a Bitmap.
android.renderscript.Allocation.copyTo,The bitmap must match the dimensions of the Allocation.
android.renderscript.Allocation.copyTo,Copy from the Allocation into a short array. This variant is type checked and will generate exceptions if the Allocation's Element is not a 16 bit integer nor a vector of 16 bit integers Element.DataType. If the Allocation does not have Vec3 Elements then the size of the array in bytes must be at least the size of the Allocation getBytesSize(). If the Allocation has Vec3 Elements and AutoPadding is disabled then the size of the array in bytes must be at least the size of the Allocation getBytesSize(). The padding bytes for the cells will be part of the array. If the Allocation has Vec3 Elements and AutoPadding is enabled then the size of the array in bytes must be at least 3/4 the size of the Allocation getBytesSize(). The padding bytes for the cells must not be part of the array.
android.renderscript.Allocation.copyTo,Copy to.
android.renderscript.Allocation.copyTo,Copy from the Allocation into a short array.
android.renderscript.Allocation.copyTo,This variant is type checked and will generate exceptions if the Allocation's Element is not a 16 bit integer nor a vector of 16 bit integers Element.DataType.
android.renderscript.Allocation.copyTo,If the Allocation does not have Vec3 Elements then the size of the array in bytes must be at least the size of the Allocation getBytesSize().
android.renderscript.Allocation.copyTo,If the Allocation has Vec3 Elements and AutoPadding is disabled then the size of the array in bytes must be at least the size of the Allocation getBytesSize().
android.renderscript.Allocation.copyTo,The padding bytes for the cells will be part of the array.
android.renderscript.Allocation.copyTo,If the Allocation has Vec3 Elements and AutoPadding is enabled then the size of the array in bytes must be at least 3/4 the size of the Allocation getBytesSize().
android.renderscript.Allocation.copyTo,The padding bytes for the cells must not be part of the array.
android.renderscript.Allocation.copyTo,Copy from the Allocation into a byte array. This variant is type checked and will generate exceptions if the Allocation's Element is neither an 8 bit integer nor a vector of 8 bit integers Element.DataType. If the Allocation does not have Vec3 Elements then the size of the array in bytes must be at least the size of the Allocation getBytesSize(). If the Allocation has Vec3 Elements and AutoPadding is disabled then the size of the array in bytes must be at least the size of the Allocation getBytesSize(). The padding bytes for the cells will be part of the array. If the Allocation has Vec3 Elements and AutoPadding is enabled then the size of the array in bytes must be at least 3/4 the size of the Allocation getBytesSize(). The padding bytes for the cells must not be part of the array.
android.renderscript.Allocation.copyTo,Copy to.
android.renderscript.Allocation.copyTo,Copy from the Allocation into a byte array.
android.renderscript.Allocation.copyTo,This variant is type checked and will generate exceptions if the Allocation's Element is neither an 8 bit integer nor a vector of 8 bit integers Element.DataType.
android.renderscript.Allocation.copyTo,If the Allocation does not have Vec3 Elements then the size of the array in bytes must be at least the size of the Allocation getBytesSize().
android.renderscript.Allocation.copyTo,If the Allocation has Vec3 Elements and AutoPadding is disabled then the size of the array in bytes must be at least the size of the Allocation getBytesSize().
android.renderscript.Allocation.copyTo,The padding bytes for the cells will be part of the array.
android.renderscript.Allocation.copyTo,If the Allocation has Vec3 Elements and AutoPadding is enabled then the size of the array in bytes must be at least 3/4 the size of the Allocation getBytesSize().
android.renderscript.Allocation.copyTo,The padding bytes for the cells must not be part of the array.
android.renderscript.Allocation.copyTo,Copy from the Allocation into a float array. This variant is type checked and will generate exceptions if the Allocation's Element is neither a 32 bit float nor a vector of 32 bit floats Element.DataType. If the Allocation does not have Vec3 Elements then the size of the array in bytes must be at least the size of the Allocation getBytesSize(). If the Allocation has Vec3 Elements and AutoPadding is disabled then the size of the array in bytes must be at least the size of the Allocation getBytesSize(). The padding bytes for the cells will be part of the array. If the Allocation has Vec3 Elements and AutoPadding is enabled then the size of the array in bytes must be at least 3/4 the size of the Allocation getBytesSize(). The padding bytes for the cells must not be part of the array.
android.renderscript.Allocation.copyTo,Copy to.
android.renderscript.Allocation.copyTo,Copy from the Allocation into a float array.
android.renderscript.Allocation.copyTo,This variant is type checked and will generate exceptions if the Allocation's Element is neither a 32 bit float nor a vector of 32 bit floats Element.DataType.
android.renderscript.Allocation.copyTo,If the Allocation does not have Vec3 Elements then the size of the array in bytes must be at least the size of the Allocation getBytesSize().
android.renderscript.Allocation.copyTo,If the Allocation has Vec3 Elements and AutoPadding is disabled then the size of the array in bytes must be at least the size of the Allocation getBytesSize().
android.renderscript.Allocation.copyTo,The padding bytes for the cells will be part of the array.
android.renderscript.Allocation.copyTo,If the Allocation has Vec3 Elements and AutoPadding is enabled then the size of the array in bytes must be at least 3/4 the size of the Allocation getBytesSize().
android.renderscript.Allocation.copyTo,The padding bytes for the cells must not be part of the array.
android.renderscript.Allocation.copyTo,Copy from the Allocation into a int array. This variant is type checked and will generate exceptions if the Allocation's Element is not a 32 bit integer nor a vector of 32 bit integers Element.DataType. If the Allocation does not have Vec3 Elements then the size of the array in bytes must be at least the size of the Allocation getBytesSize(). If the Allocation has Vec3 Elements and AutoPadding is disabled then the size of the array in bytes must be at least the size of the Allocation getBytesSize(). The padding bytes for the cells will be part of the array. If the Allocation has Vec3 Elements and AutoPadding is enabled then the size of the array in bytes must be at least 3/4 the size of the Allocation getBytesSize(). The padding bytes for the cells must not be part of the array.
android.renderscript.Allocation.copyTo,Copy to.
android.renderscript.Allocation.copyTo,Copy from the Allocation into a int array.
android.renderscript.Allocation.copyTo,This variant is type checked and will generate exceptions if the Allocation's Element is not a 32 bit integer nor a vector of 32 bit integers Element.DataType.
android.renderscript.Allocation.copyTo,If the Allocation does not have Vec3 Elements then the size of the array in bytes must be at least the size of the Allocation getBytesSize().
android.renderscript.Allocation.copyTo,If the Allocation has Vec3 Elements and AutoPadding is disabled then the size of the array in bytes must be at least the size of the Allocation getBytesSize().
android.renderscript.Allocation.copyTo,The padding bytes for the cells will be part of the array.
android.renderscript.Allocation.copyTo,If the Allocation has Vec3 Elements and AutoPadding is enabled then the size of the array in bytes must be at least 3/4 the size of the Allocation getBytesSize().
android.renderscript.Allocation.copyTo,The padding bytes for the cells must not be part of the array.
android.renderscript.Allocation.copyTo,Copy from the Allocation into an array. The method is type checked and will generate exceptions if the Allocation's Element does not match the input data type. If the Allocation does not have Vec3 Elements then the size of the array in bytes must be at least the size of the Allocation getBytesSize(). If the Allocation has Vec3 Elements and AutoPadding is disabled then the size of the array in bytes must be at least the size of the Allocation getBytesSize(). The padding bytes for the cells will be part of the array. If the Allocation has Vec3 Elements and AutoPadding is enabled then the size of the array in bytes must be at least 3/4 the size of the Allocation getBytesSize(). The padding bytes for the cells must not be part of the array.
android.renderscript.Allocation.copyTo,Copy to.
android.renderscript.Allocation.copyTo,Copy from the Allocation into an array.
android.renderscript.Allocation.copyTo,The method is type checked and will generate exceptions if the Allocation's Element does not match the input data type.
android.renderscript.Allocation.copyTo,If the Allocation does not have Vec3 Elements then the size of the array in bytes must be at least the size of the Allocation getBytesSize().
android.renderscript.Allocation.copyTo,If the Allocation has Vec3 Elements and AutoPadding is disabled then the size of the array in bytes must be at least the size of the Allocation getBytesSize().
android.renderscript.Allocation.copyTo,The padding bytes for the cells will be part of the array.
android.renderscript.Allocation.copyTo,If the Allocation has Vec3 Elements and AutoPadding is enabled then the size of the array in bytes must be at least 3/4 the size of the Allocation getBytesSize().
android.renderscript.Allocation.copyTo,The padding bytes for the cells must not be part of the array.
android.renderscript.Allocation.createTyped,Creates a new Allocation with the given Type mipmap flag and usage flags.
android.renderscript.Allocation.createTyped,Create typed.
android.renderscript.Allocation.createTyped,Creates an Allocation for use by scripts with a given Type and no mipmaps.
android.renderscript.Allocation.createTyped,Create typed.
android.renderscript.Allocation.createTyped,Creates an Allocation with the size specified by the type and no mipmaps generated by default.
android.renderscript.Allocation.createTyped,Create typed.
android.renderscript.Allocation.getType,Get the Type of the Allocation.
android.renderscript.Allocation.getType,Get type.
android.renderscript.RenderScript.create,Gets or creates a RenderScript context of the specified type. The returned context will be cached for future reuse within the process. When an application is finished using RenderScript it should call releaseAllContexts() A process context is a context designed for easy creation and lifecycle management. Multiple calls to this function will return the same object provided they are called with the same options. This allows it to be used any time a RenderScript context is needed. Prior to API 23 this always created a new context.
android.renderscript.RenderScript.create,Create.
android.renderscript.RenderScript.create,Gets or creates a RenderScript context of the specified type.
android.renderscript.RenderScript.create,The returned context will be cached for future reuse within the process.
android.renderscript.RenderScript.create,When an application is finished using RenderScript it should call releaseAllContexts() A process context is a context designed for easy creation and lifecycle management.
android.renderscript.RenderScript.create,Multiple calls to this function will return the same object provided they are called with the same options.
android.renderscript.RenderScript.create,This allows it to be used any time a RenderScript context is needed.
android.renderscript.RenderScript.create,Prior to API 23 this always created a new context.
android.renderscript.RenderScript.create,calls create(ctx ct CREATE_FLAG_NONE) See documentation for @create for details.
android.renderscript.RenderScript.create,Create.
android.renderscript.RenderScript.create,calls create(ctx ContextType.NORMAL CREATE_FLAG_NONE) See documentation for @create for details.
android.renderscript.RenderScript.create,Create.
android.renderscript.ScriptIntrinsicBlur.create,Create an intrinsic for applying a blur to an allocation. The default radius is 5.0. Supported elements types are Element#U8 Element#U8_4.
android.renderscript.ScriptIntrinsicBlur.create,Create.
android.renderscript.ScriptIntrinsicBlur.create,Create an intrinsic for applying a blur to an allocation.
android.renderscript.ScriptIntrinsicBlur.create,The default radius is 5.0.
android.renderscript.ScriptIntrinsicBlur.create,Supported elements types are Element#U8 Element#U8_4.
android.renderscript.ScriptIntrinsicBlur.forEach,Apply the filter to the input and save to the specified allocation.
android.renderscript.ScriptIntrinsicBlur.forEach,For each.
android.renderscript.ScriptIntrinsicBlur.forEach,Apply the filter to the input and save to the specified allocation.
android.renderscript.ScriptIntrinsicBlur.forEach,For each.
android.renderscript.ScriptIntrinsicBlur.setInput,Set the input of the blur. Must match the element type supplied during create.
android.renderscript.ScriptIntrinsicBlur.setInput,Set input.
android.renderscript.ScriptIntrinsicBlur.setInput,Set the input of the blur.
android.renderscript.ScriptIntrinsicBlur.setInput,Must match the element type supplied during create.
android.renderscript.ScriptIntrinsicBlur.setRadius,Set the radius of the Blur. Supported range 0 < radius <= 25.
android.renderscript.ScriptIntrinsicBlur.setRadius,Set radius.
android.renderscript.ScriptIntrinsicBlur.setRadius,Set the radius of the Blur.
android.renderscript.ScriptIntrinsicBlur.setRadius,Supported range 0 < radius <= 25.
android.system.Os.posix_fallocate,See posix_fallocate(3).
android.system.Os.posix_fallocate,Posix _fallocate.
android.text.format.DateFormat.format,Given a format string and a Date object returns a CharSequence containing the requested date.
android.text.format.DateFormat.format,Format.
android.text.format.DateFormat.format,Given a format string and a Calendar object returns a CharSequence containing the requested date.
android.text.format.DateFormat.format,Format.
android.text.format.DateFormat.format,Given a format string and a time in milliseconds since Jan 1 1970 GMT returns a CharSequence containing the requested date.
android.text.format.DateFormat.format,Format.
android.text.format.DateFormat.getDateFormat,Returns a DateFormat object that can format the date in short form according to the context's locale.
android.text.format.DateFormat.getDateFormat,Get date format.
android.text.format.DateFormat.getTimeFormat,Returns a DateFormat object that can format the time according to the context's locale and the user's 12-/24-hour clock preference.
android.text.format.DateFormat.getTimeFormat,Get time format.
android.text.format.DateFormat.is24HourFormat,Returns true if times should be formatted as 24 hour times false if times should be formatted as 12 hour (AM/PM) times. Based on the user's chosen locale and other preferences.
android.text.format.DateFormat.is24HourFormat,Is 2 4 hour format.
android.text.format.DateFormat.is24HourFormat,Returns true if times should be formatted as 24 hour times false if times should be formatted as 12 hour (AM/PM) times.
android.text.format.DateFormat.is24HourFormat,Based on the user's chosen locale and other preferences.
android.text.format.DateUtils.formatDateRange,"Formats a date or a time range according to the local conventions. Example output strings (date formats in these examples are shown using the US date format convention but that may change depending on the local settings): 10:15am 3:00pm - 4:00pm 3pm - 4pm 3PM - 4PM 08:00 - 17:00 Oct 9 Tue Oct 9 October 9 2007 Oct 9 - 10 Oct 9 - 10 2007 Oct 28 - Nov 3 2007 Dec 31 2007 - Jan 1 2008 Oct 9 8:00am - Oct 10 5:00pm 12/31/2007 - 01/01/2008 The flags argument is a bitmask of options from the following list: FORMAT_SHOW_TIME FORMAT_SHOW_WEEKDAY FORMAT_SHOW_YEAR FORMAT_SHOW_DATE FORMAT_NO_MONTH_DAY FORMAT_12HOUR FORMAT_24HOUR FORMAT_CAP_AMPM FORMAT_NO_NOON FORMAT_CAP_NOON FORMAT_NO_MIDNIGHT FORMAT_CAP_MIDNIGHT FORMAT_UTC FORMAT_ABBREV_TIME FORMAT_ABBREV_WEEKDAY FORMAT_ABBREV_MONTH FORMAT_ABBREV_ALL FORMAT_NUMERIC_DATE If FORMAT_SHOW_TIME is set the time is shown as part of the date range. If the start and end time are the same then just the start time is shown. If FORMAT_SHOW_WEEKDAY is set then the weekday is shown. If FORMAT_SHOW_YEAR is set then the year is always shown. If FORMAT_SHOW_YEAR is not set then the year is shown only if it is different from the current year or if the start and end dates fall on different years. Normally the date is shown unless the start and end day are the same. If FORMAT_SHOW_DATE is set then the date is always shown even for same day ranges. If FORMAT_NO_MONTH_DAY is set then if the date is shown just the month name will be shown not the day of the month. For example ""January 2008"" instead of ""January 6 - 12 2008"". If FORMAT_CAP_AMPM is set and 12-hour time is used then the ""AM"" and ""PM"" are capitalized. You should not use this flag because in some locales these terms cannot be capitalized and in many others it doesn't make sense to do so even though it is possible. If FORMAT_NO_NOON is set and 12-hour time is used then ""12pm"" is shown instead of ""noon"". If FORMAT_CAP_NOON is set and 12-hour time is used then ""Noon"" is shown instead of ""noon"". You should probably not use this flag because in many locales it will not make sense to capitalize the term. If FORMAT_NO_MIDNIGHT is set and 12-hour time is used then ""12am"" is shown instead of ""midnight"". If FORMAT_CAP_MIDNIGHT is set and 12-hour time is used then ""Midnight"" is shown instead of ""midnight"". You should probably not use this flag because in many locales it will not make sense to capitalize the term. If FORMAT_12HOUR is set and the time is shown then the time is shown in the 12-hour time format. You should not normally set this. Instead let the time format be chosen automatically according to the system settings. If both FORMAT_12HOUR and FORMAT_24HOUR are set then FORMAT_24HOUR takes precedence. If FORMAT_24HOUR is set and the time is shown then the time is shown in the 24-hour time format. You should not normally set this. Instead let the time format be chosen automatically according to the system settings. If both FORMAT_12HOUR and FORMAT_24HOUR are set then FORMAT_24HOUR takes precedence. If FORMAT_UTC is set then the UTC time zone is used for the start and end milliseconds unless a time zone is specified. If a time zone is specified it will be used regardless of the FORMAT_UTC flag. If FORMAT_ABBREV_TIME is set and 12-hour time format is used then the start and end times (if shown) are abbreviated by not showing the minutes if they are zero. For example instead of ""3:00pm"" the time would be abbreviated to ""3pm"". If FORMAT_ABBREV_WEEKDAY is set then the weekday (if shown) is abbreviated to a 3-letter string. If FORMAT_ABBREV_MONTH is set then the month (if shown) is abbreviated to a 3-letter string. If FORMAT_ABBREV_ALL is set then the weekday and the month (if shown) are abbreviated to 3-letter strings. If FORMAT_NUMERIC_DATE is set then the date is shown in numeric format instead of using the name of the month. For example ""12/31/2008"" instead of ""December 31 2008"". If the end date ends at 12:00am at the beginning of a day it is formatted as the end of the previous day in two scenarios: For single day events. This results in ""8pm - midnight"" instead of ""Nov 10 8pm - Nov 11 12am"". When the time is not displayed. This results in ""Nov 10 - 11"" for an event with a start date of Nov 10 and an end date of Nov 12 at 00:00."
android.text.format.DateUtils.formatDateRange,Format date range.
android.text.format.DateUtils.formatDateRange,Formats a date or a time range according to the local conventions.
android.text.format.DateUtils.formatDateRange,Example output strings (date formats in these examples are shown using the US date format convention but that may change depending on the local settings): 10:15am 3:00pm - 4:00pm 3pm - 4pm 3PM - 4PM 08:00 - 17:00 Oct 9 Tue Oct 9 October 9 2007 Oct 9 - 10 Oct 9 - 10 2007 Oct 28 - Nov 3 2007 Dec 31 2007 - Jan 1 2008 Oct 9 8:00am - Oct 10 5:00pm 12/31/2007 - 01/01/2008 The flags argument is a bitmask of options from the following list: FORMAT_SHOW_TIME FORMAT_SHOW_WEEKDAY FORMAT_SHOW_YEAR FORMAT_SHOW_DATE FORMAT_NO_MONTH_DAY FORMAT_12HOUR FORMAT_24HOUR FORMAT_CAP_AMPM FORMAT_NO_NOON FORMAT_CAP_NOON FORMAT_NO_MIDNIGHT FORMAT_CAP_MIDNIGHT FORMAT_UTC FORMAT_ABBREV_TIME FORMAT_ABBREV_WEEKDAY FORMAT_ABBREV_MONTH FORMAT_ABBREV_ALL FORMAT_NUMERIC_DATE If FORMAT_SHOW_TIME is set the time is shown as part of the date range.
android.text.format.DateUtils.formatDateRange,If the start and end time are the same then just the start time is shown.
android.text.format.DateUtils.formatDateRange,If FORMAT_SHOW_WEEKDAY is set then the weekday is shown.
android.text.format.DateUtils.formatDateRange,If FORMAT_SHOW_YEAR is set then the year is always shown.
android.text.format.DateUtils.formatDateRange,If FORMAT_SHOW_YEAR is not set then the year is shown only if it is different from the current year or if the start and end dates fall on different years.
android.text.format.DateUtils.formatDateRange,Normally the date is shown unless the start and end day are the same.
android.text.format.DateUtils.formatDateRange,If FORMAT_SHOW_DATE is set then the date is always shown even for same day ranges.
android.text.format.DateUtils.formatDateRange,If FORMAT_NO_MONTH_DAY is set then if the date is shown just the month name will be shown not the day of the month.
android.text.format.DateUtils.formatDateRange,"For example ""January 2008"" instead of ""January 6 - 12 2008""."
android.text.format.DateUtils.formatDateRange,"If FORMAT_CAP_AMPM is set and 12-hour time is used then the ""AM"" and ""PM"" are capitalized."
android.text.format.DateUtils.formatDateRange,You should not use this flag because in some locales these terms cannot be capitalized and in many others it doesn't make sense to do so even though it is possible.
android.text.format.DateUtils.formatDateRange,"If FORMAT_NO_NOON is set and 12-hour time is used then ""12pm"" is shown instead of ""noon""."
android.text.format.DateUtils.formatDateRange,"If FORMAT_CAP_NOON is set and 12-hour time is used then ""Noon"" is shown instead of ""noon""."
android.text.format.DateUtils.formatDateRange,You should probably not use this flag because in many locales it will not make sense to capitalize the term.
android.text.format.DateUtils.formatDateRange,"If FORMAT_NO_MIDNIGHT is set and 12-hour time is used then ""12am"" is shown instead of ""midnight""."
android.text.format.DateUtils.formatDateRange,"If FORMAT_CAP_MIDNIGHT is set and 12-hour time is used then ""Midnight"" is shown instead of ""midnight""."
android.text.format.DateUtils.formatDateRange,You should probably not use this flag because in many locales it will not make sense to capitalize the term.
android.text.format.DateUtils.formatDateRange,If FORMAT_12HOUR is set and the time is shown then the time is shown in the 12-hour time format.
android.text.format.DateUtils.formatDateRange,You should not normally set this.
android.text.format.DateUtils.formatDateRange,Instead let the time format be chosen automatically according to the system settings.
android.text.format.DateUtils.formatDateRange,If both FORMAT_12HOUR and FORMAT_24HOUR are set then FORMAT_24HOUR takes precedence.
android.text.format.DateUtils.formatDateRange,If FORMAT_24HOUR is set and the time is shown then the time is shown in the 24-hour time format.
android.text.format.DateUtils.formatDateRange,You should not normally set this.
android.text.format.DateUtils.formatDateRange,Instead let the time format be chosen automatically according to the system settings.
android.text.format.DateUtils.formatDateRange,If both FORMAT_12HOUR and FORMAT_24HOUR are set then FORMAT_24HOUR takes precedence.
android.text.format.DateUtils.formatDateRange,If FORMAT_UTC is set then the UTC time zone is used for the start and end milliseconds unless a time zone is specified.
android.text.format.DateUtils.formatDateRange,If a time zone is specified it will be used regardless of the FORMAT_UTC flag.
android.text.format.DateUtils.formatDateRange,If FORMAT_ABBREV_TIME is set and 12-hour time format is used then the start and end times (if shown) are abbreviated by not showing the minutes if they are zero.
android.text.format.DateUtils.formatDateRange,"For example instead of ""3:00pm"" the time would be abbreviated to ""3pm""."
android.text.format.DateUtils.formatDateRange,If FORMAT_ABBREV_WEEKDAY is set then the weekday (if shown) is abbreviated to a 3-letter string.
android.text.format.DateUtils.formatDateRange,If FORMAT_ABBREV_MONTH is set then the month (if shown) is abbreviated to a 3-letter string.
android.text.format.DateUtils.formatDateRange,If FORMAT_ABBREV_ALL is set then the weekday and the month (if shown) are abbreviated to 3-letter strings.
android.text.format.DateUtils.formatDateRange,If FORMAT_NUMERIC_DATE is set then the date is shown in numeric format instead of using the name of the month.
android.text.format.DateUtils.formatDateRange,"For example ""12/31/2008"" instead of ""December 31 2008""."
android.text.format.DateUtils.formatDateRange,If the end date ends at 12:00am at the beginning of a day it is formatted as the end of the previous day in two scenarios: For single day events.
android.text.format.DateUtils.formatDateRange,"This results in ""8pm - midnight"" instead of ""Nov 10 8pm - Nov 11 12am""."
android.text.format.DateUtils.formatDateRange,When the time is not displayed.
android.text.format.DateUtils.formatDateRange,"This results in ""Nov 10 - 11"" for an event with a start date of Nov 10 and an end date of Nov 12 at 00:00."
android.text.format.DateUtils.formatDateRange,Formats a date or a time range according to the local conventions. Note that this is a convenience method for formatting the date or time range in the local time zone. If you want to specify the time zone please use formatDateRange.
android.text.format.DateUtils.formatDateRange,Format date range.
android.text.format.DateUtils.formatDateRange,Formats a date or a time range according to the local conventions.
android.text.format.DateUtils.formatDateRange,Note that this is a convenience method for formatting the date or time range in the local time zone.
android.text.format.DateUtils.formatDateRange,If you want to specify the time zone please use formatDateRange.
android.text.format.DateUtils.formatDateRange,Formats a date or a time range according to the local conventions. Note that this is a convenience method. Using it involves creating an internal Formatter instance on-the-fly which is somewhat costly in terms of memory and time. This is probably acceptable if you use the method only rarely but if you rely on it for formatting a large number of dates consider creating and reusing your own Formatter instance and use the version of formatDateRange that takes a Formatter.
android.text.format.DateUtils.formatDateRange,Format date range.
android.text.format.DateUtils.formatDateRange,Formats a date or a time range according to the local conventions.
android.text.format.DateUtils.formatDateRange,Note that this is a convenience method.
android.text.format.DateUtils.formatDateRange,Using it involves creating an internal Formatter instance on-the-fly which is somewhat costly in terms of memory and time.
android.text.format.DateUtils.formatDateRange,This is probably acceptable if you use the method only rarely but if you rely on it for formatting a large number of dates consider creating and reusing your own Formatter instance and use the version of formatDateRange that takes a Formatter.
android.text.format.DateUtils.formatDateTime,Formats a date or a time according to the local conventions. There are lots of options that allow the caller to control for example if the time is shown if the day of the week is shown if the month name is abbreviated if noon is shown instead of 12pm and so on. For the complete list of options see the documentation for formatDateRange(Context Formatter long long int). Example output strings (date formats in these examples are shown using the US date format convention but that may change depending on the local settings): 10:15am 3:00pm 3pm 3PM 08:00 17:00 noon Noon midnight Midnight Oct 31 Oct 31 2007 October 31 2007 10am Oct 31 17:00 Oct 31 Wed Wednesday 10am Wed Oct 31 Wed Oct 31 Wednesday Oct 31 Wed Oct 31 2007 Wed October 31 10/31/2007.
android.text.format.DateUtils.formatDateTime,Format date time.
android.text.format.DateUtils.formatDateTime,Formats a date or a time according to the local conventions.
android.text.format.DateUtils.formatDateTime,There are lots of options that allow the caller to control for example if the time is shown if the day of the week is shown if the month name is abbreviated if noon is shown instead of 12pm and so on.
android.text.format.DateUtils.formatDateTime,For the complete list of options see the documentation for formatDateRange(Context Formatter long long int).
android.text.format.DateUtils.formatDateTime,Example output strings (date formats in these examples are shown using the US date format convention but that may change depending on the local settings): 10:15am 3:00pm 3pm 3PM 08:00 17:00 noon Noon midnight Midnight Oct 31 Oct 31 2007 October 31 2007 10am Oct 31 17:00 Oct 31 Wed Wednesday 10am Wed Oct 31 Wed Oct 31 Wednesday Oct 31 Wed Oct 31 2007 Wed October 31 10/31/2007.
android.text.format.DateUtils.formatSameDayTime,Format a date / time such that if the then is on the same day as now it shows just the time and if it's a different day it shows just the date. The parameters dateFormat and timeFormat should each be one of DateFormat.DEFAULT DateFormat.FULL DateFormat.LONG DateFormat.MEDIUM or DateFormat.SHORT.
android.text.format.DateUtils.formatSameDayTime,Format same day time.
android.text.format.DateUtils.formatSameDayTime,Format a date / time such that if the then is on the same day as now it shows just the time and if it's a different day it shows just the date.
android.text.format.DateUtils.formatSameDayTime,The parameters dateFormat and timeFormat should each be one of DateFormat.DEFAULT DateFormat.FULL DateFormat.LONG DateFormat.MEDIUM or DateFormat.SHORT.
android.text.format.DateUtils.getDayOfWeekString,This method was deprecated in API level 17. Use SimpleDateFormat instead. Return a string for the day of the week.
android.text.format.DateUtils.getDayOfWeekString,Get day of week string.
android.text.format.DateUtils.getDayOfWeekString,This method was deprecated in API level 17.
android.text.format.DateUtils.getDayOfWeekString,Use SimpleDateFormat instead.
android.text.format.DateUtils.getDayOfWeekString,Return a string for the day of the week.
android.text.format.DateUtils.getRelativeTimeSpanString,.
android.text.format.DateUtils.getRelativeTimeSpanString,Get relative time span string.
android.text.format.DateUtils.getRelativeTimeSpanString,"Returns a string describing 'time' as a time relative to 'now'. Time spans in the past are formatted like ""42 minutes ago"". Time spans in the future are formatted like ""In 42 minutes"". Can use FORMAT_ABBREV_RELATIVE flag to use abbreviated relative times like ""42 mins ago""."
android.text.format.DateUtils.getRelativeTimeSpanString,Get relative time span string.
android.text.format.DateUtils.getRelativeTimeSpanString,Returns a string describing 'time' as a time relative to 'now'.
android.text.format.DateUtils.getRelativeTimeSpanString,"Time spans in the past are formatted like ""42 minutes ago""."
android.text.format.DateUtils.getRelativeTimeSpanString,"Time spans in the future are formatted like ""In 42 minutes""."
android.text.format.DateUtils.getRelativeTimeSpanString,"Can use FORMAT_ABBREV_RELATIVE flag to use abbreviated relative times like ""42 mins ago""."
android.text.format.DateUtils.getRelativeTimeSpanString,Returns a string describing the elapsed time since startTime. The minimum timespan to report is set to MINUTE_IN_MILLIS.
android.text.format.DateUtils.getRelativeTimeSpanString,Get relative time span string.
android.text.format.DateUtils.getRelativeTimeSpanString,Returns a string describing the elapsed time since startTime.
android.text.format.DateUtils.getRelativeTimeSpanString,The minimum timespan to report is set to MINUTE_IN_MILLIS.
android.text.format.DateUtils.getRelativeTimeSpanString,"Returns a string describing 'time' as a time relative to 'now'. Time spans in the past are formatted like ""42 minutes ago"". Time spans in the future are formatted like ""In 42 minutes""."
android.text.format.DateUtils.getRelativeTimeSpanString,Get relative time span string.
android.text.format.DateUtils.getRelativeTimeSpanString,Returns a string describing 'time' as a time relative to 'now'.
android.text.format.DateUtils.getRelativeTimeSpanString,"Time spans in the past are formatted like ""42 minutes ago""."
android.text.format.DateUtils.getRelativeTimeSpanString,"Time spans in the future are formatted like ""In 42 minutes""."
android.text.format.DateUtils.getRelativeTimeSpanString,Convenience function to return relative time string without preposition.
android.text.format.DateUtils.getRelativeTimeSpanString,Get relative time span string.
android.text.format.Formatter.formatFileSize,"Formats a content size to be in the form of bytes kilobytes megabytes etc. As of O the prefixes are used in their standard meanings in the SI system so kB = 1000 bytes MB = 1000000 bytes etc. In Build.VERSION_CODES.N and earlier powers of 1024 are used instead with KB = 1024 bytes MB = 1048576 bytes etc. If the context has a right-to-left locale the returned string is wrapped in bidi formatting characters to make sure it's displayed correctly if inserted inside a right-to-left string. (This is useful in cases where the unit strings like ""MB"" are left-to-right but the locale is right-to-left.)."
android.text.format.Formatter.formatFileSize,Format file size.
android.text.format.Formatter.formatFileSize,Formats a content size to be in the form of bytes kilobytes megabytes etc.
android.text.format.Formatter.formatFileSize,As of O the prefixes are used in their standard meanings in the SI system so kB = 1000 bytes MB = 1000000 bytes etc.
android.text.format.Formatter.formatFileSize,In Build.VERSION_CODES.N and earlier powers of 1024 are used instead with KB = 1024 bytes MB = 1048576 bytes etc.
android.text.format.Formatter.formatFileSize,If the context has a right-to-left locale the returned string is wrapped in bidi formatting characters to make sure it's displayed correctly if inserted inside a right-to-left string.
android.text.format.Formatter.formatFileSize,"(This is useful in cases where the unit strings like ""MB"" are left-to-right but the locale is right-to-left.)."
android.text.format.Formatter.formatIpAddress,"This method was deprecated in API level 15. Use InetAddress.getHostAddress() which supports both IPv4 and IPv6 addresses. This method does not support IPv6 addresses. Returns a string in the canonical IPv4 format ###.###.###.### from a packed integer containing the IP address. The IPv4 address is expected to be in little-endian format (LSB first). That is 0x01020304 will return ""4.3.2.1""."
android.text.format.Formatter.formatIpAddress,Format ip address.
android.text.format.Formatter.formatIpAddress,This method was deprecated in API level 15.
android.text.format.Formatter.formatIpAddress,Use InetAddress.getHostAddress() which supports both IPv4 and IPv6 addresses.
android.text.format.Formatter.formatIpAddress,This method does not support IPv6 addresses.
android.text.format.Formatter.formatIpAddress,Returns a string in the canonical IPv4 format ###.###.###.### from a packed integer containing the IP address.
android.text.format.Formatter.formatIpAddress,The IPv4 address is expected to be in little-endian format (LSB first).
android.text.format.Formatter.formatIpAddress,"That is 0x01020304 will return ""4.3.2.1""."
android.text.format.Time.compare,Compare two Time objects and return a negative number if a is less than b a positive number if a is greater than b or 0 if they are equal. This method can return an incorrect answer when the date / time fields of either Time have been set to a local time that contradicts the available timezone information.
android.text.format.Time.compare,Compare.
android.text.format.Time.compare,Compare two Time objects and return a negative number if a is less than b a positive number if a is greater than b or 0 if they are equal.
android.text.format.Time.compare,This method can return an incorrect answer when the date / time fields of either Time have been set to a local time that contradicts the available timezone information.
android.text.format.Time.format,Print the current value given the format string provided. See man strftime for what means what. The final string must be less than 256 characters.
android.text.format.Time.format,Format.
android.text.format.Time.format,Print the current value given the format string provided.
android.text.format.Time.format,See man strftime for what means what.
android.text.format.Time.format,The final string must be less than 256 characters.
android.text.format.Time.format2445,"Format according to RFC 2445 DATE-TIME type. The same as format(""%Y%m%dT%H%M%S"") or format(""%Y%m%dT%H%M%SZ"") for a Time with a timezone set to ""UTC""."
android.text.format.Time.format2445,Format 2 4 4 5.
android.text.format.Time.format2445,Format according to RFC 2445 DATE-TIME type.
android.text.format.Time.format2445,"The same as format(""%Y%m%dT%H%M%S"") or format(""%Y%m%dT%H%M%SZ"") for a Time with a timezone set to ""UTC""."
android.text.format.Time.format3339,Return a string in the RFC 3339 format. If allDay is true expresses the time as Y-M-D Otherwise if the timezone is UTC expresses the time as Y-M-D-T-H-M-S UTC Otherwise the time is expressed the time as Y-M-D-T-H-M-S +- GMT.
android.text.format.Time.format3339,Format 3 3 3 9.
android.text.format.Time.format3339,Return a string in the RFC 3339 format.
android.text.format.Time.format3339,If allDay is true expresses the time as Y-M-D Otherwise if the timezone is UTC expresses the time as Y-M-D-T-H-M-S UTC Otherwise the time is expressed the time as Y-M-D-T-H-M-S +- GMT.
android.text.format.Time.getActualMaximum,Return the maximum possible value for the given field given the value of the other fields. Requires that it be normalized for MONTH_DAY and YEAR_DAY.
android.text.format.Time.getActualMaximum,Get actual maximum.
android.text.format.Time.getActualMaximum,Return the maximum possible value for the given field given the value of the other fields.
android.text.format.Time.getActualMaximum,Requires that it be normalized for MONTH_DAY and YEAR_DAY.
android.text.format.Time.getCurrentTimezone,Returns the timezone string that is currently set for the device.
android.text.format.Time.getCurrentTimezone,Get current timezone.
android.text.format.Time.getJulianDay,"Computes the Julian day number for a point in time in a particular timezone. The Julian day for a given date is the same for every timezone. For example the Julian day for July 1 2008 is 2454649. Callers must pass the time in UTC millisecond (as can be returned by toMillis(boolean) or normalize(boolean) ) and the offset from UTC of the timezone in seconds (as might be in gmtoff ). The Julian day is useful for testing if two events occur on the same calendar date and for determining the relative time of an event from the present (""yesterday"" ""3 days ago"" etc.)."
android.text.format.Time.getJulianDay,Get julian day.
android.text.format.Time.getJulianDay,Computes the Julian day number for a point in time in a particular timezone.
android.text.format.Time.getJulianDay,The Julian day for a given date is the same for every timezone.
android.text.format.Time.getJulianDay,For example the Julian day for July 1 2008 is 2454649.
android.text.format.Time.getJulianDay,Callers must pass the time in UTC millisecond (as can be returned by toMillis(boolean) or normalize(boolean) ) and the offset from UTC of the timezone in seconds (as might be in gmtoff ).
android.text.format.Time.getJulianDay,"The Julian day is useful for testing if two events occur on the same calendar date and for determining the relative time of an event from the present (""yesterday"" ""3 days ago"" etc.)."
android.text.format.Time.isEpoch,Returns true if the day of the given time is the epoch on the Julian Calendar (January 1 1970 on the Gregorian calendar). This method can return an incorrect answer when the date / time fields have been set to a local time that contradicts the available timezone information.
android.text.format.Time.isEpoch,Is epoch.
android.text.format.Time.isEpoch,Returns true if the day of the given time is the epoch on the Julian Calendar (January 1 1970 on the Gregorian calendar).
android.text.format.Time.isEpoch,This method can return an incorrect answer when the date / time fields have been set to a local time that contradicts the available timezone information.
android.text.format.Time.normalize,"Ensures the values in each field are in range. For example if the current value of this calendar is March 32 normalize() will convert it to April 1. It also fills in weekDay yearDay isDst and gmtoff. If ""ignoreDst"" is true then this method sets the ""isDst"" field to -1 (the ""unknown"" value) before normalizing. It then computes the time in milliseconds and sets the correct value for ""isDst"" if the fields resolve to a valid date / time. See toMillis(boolean) for more information about when to use true or false for ""ignoreDst"" and when -1 might be returned."
android.text.format.Time.normalize,Normalize.
android.text.format.Time.normalize,Ensures the values in each field are in range.
android.text.format.Time.normalize,For example if the current value of this calendar is March 32 normalize() will convert it to April 1.
android.text.format.Time.normalize,It also fills in weekDay yearDay isDst and gmtoff.
android.text.format.Time.normalize,"If ""ignoreDst"" is true then this method sets the ""isDst"" field to -1 (the ""unknown"" value) before normalizing."
android.text.format.Time.normalize,"It then computes the time in milliseconds and sets the correct value for ""isDst"" if the fields resolve to a valid date / time."
android.text.format.Time.normalize,"See toMillis(boolean) for more information about when to use true or false for ""ignoreDst"" and when -1 might be returned."
android.text.format.Time.parse,"Parses a date-time string in either the RFC 2445 format or an abbreviated format that does not include the ""time"" field. For example all of the following strings are valid: ""20081013T160000Z"" ""20081013T160000"" ""20081013""."
android.text.format.Time.parse,Parse.
android.text.format.Time.parse,"Parses a date-time string in either the RFC 2445 format or an abbreviated format that does not include the ""time"" field."
android.text.format.Time.parse,"For example all of the following strings are valid: ""20081013T160000Z"" ""20081013T160000"" ""20081013""."
android.text.format.Time.parse3339,"Parse a time in RFC 3339 format. This method also parses simple dates (that is strings that contain no time or time offset). For example all of the following strings are valid: ""2008-10-13T16:00:00.000Z"" ""2008-10-13T16:00:00.000+07:00"" ""2008-10-13T16:00:00.000-07:00"" ""2008-10-13"" If the string contains a time and time offset then the time offset will be used to convert the time value to UTC. If the given string contains just a date (with no time field) then the allDay field is set to true and the hour minute and second fields are set to zero. Returns true if the resulting time value is in UTC time."
android.text.format.Time.parse3339,Parse 3 3 3 9.
android.text.format.Time.parse3339,Parse a time in RFC 3339 format.
android.text.format.Time.parse3339,This method also parses simple dates (that is strings that contain no time or time offset).
android.text.format.Time.parse3339,"For example all of the following strings are valid: ""2008-10-13T16:00:00.000Z"" ""2008-10-13T16:00:00.000+07:00"" ""2008-10-13T16:00:00.000-07:00"" ""2008-10-13"" If the string contains a time and time offset then the time offset will be used to convert the time value to UTC."
android.text.format.Time.parse3339,If the given string contains just a date (with no time field) then the allDay field is set to true and the hour minute and second fields are set to zero.
android.text.format.Time.parse3339,Returns true if the resulting time value is in UTC time.
android.text.format.Time.set,Copy the value of that to this Time object. No normalization happens.
android.text.format.Time.set,Set.
android.text.format.Time.set,Copy the value of that to this Time object.
android.text.format.Time.set,No normalization happens.
android.text.format.Time.set,Sets the fields. Sets weekDay yearDay and gmtoff to 0 and isDst to -1. Call normalize(boolean) if you need those.
android.text.format.Time.set,Set.
android.text.format.Time.set,Sets the fields.
android.text.format.Time.set,Sets weekDay yearDay and gmtoff to 0 and isDst to -1.
android.text.format.Time.set,Call normalize(boolean) if you need those.
android.text.format.Time.set,Sets the date from the given fields. Also sets allDay to true. Sets weekDay yearDay and gmtoff to 0 and isDst to -1. Call normalize(boolean) if you need those.
android.text.format.Time.set,Set.
android.text.format.Time.set,Sets the date from the given fields.
android.text.format.Time.set,Also sets allDay to true.
android.text.format.Time.set,Sets weekDay yearDay and gmtoff to 0 and isDst to -1.
android.text.format.Time.set,Call normalize(boolean) if you need those.
android.text.format.Time.set,"Sets the fields in this Time object given the UTC milliseconds. After this method returns all the fields are normalized. This also sets the ""isDst"" field to the correct value."
android.text.format.Time.set,Set.
android.text.format.Time.set,Sets the fields in this Time object given the UTC milliseconds.
android.text.format.Time.set,After this method returns all the fields are normalized.
android.text.format.Time.set,"This also sets the ""isDst"" field to the correct value."
android.text.format.Time.setToNow,Sets the time of the given Time object to the current time.
android.text.format.Time.setToNow,Set to now.
android.text.format.Time.switchTimezone,Convert this time object so the time represented remains the same but is instead located in a different timezone. This method automatically calls normalize() in some cases. This method can return incorrect results if the date / time cannot be normalized.
android.text.format.Time.switchTimezone,Switch timezone.
android.text.format.Time.switchTimezone,Convert this time object so the time represented remains the same but is instead located in a different timezone.
android.text.format.Time.switchTimezone,This method automatically calls normalize() in some cases.
android.text.format.Time.switchTimezone,This method can return incorrect results if the date / time cannot be normalized.
android.text.format.Time.toMillis,"Converts this time to milliseconds. Suitable for interacting with the standard java libraries. The time is in UTC milliseconds since the epoch. This does an implicit normalization to compute the milliseconds but does not change any of the fields in this Time object. If you want to normalize the fields in this Time object and also get the milliseconds then use normalize(boolean). If ""ignoreDst"" is false then this method uses the current setting of the ""isDst"" field and will adjust the returned time if the ""isDst"" field is wrong for the given time. See the sample code below for an example of this. If ""ignoreDst"" is true then this method ignores the current setting of the ""isDst"" field in this Time object and will instead figure out the correct value of ""isDst"" (as best it can) from the fields in this Time object. The only case where this method cannot figure out the correct value of the ""isDst"" field is when the time is inherently ambiguous because it falls in the hour that is repeated when switching from Daylight-Saving Time to Standard Time. Here is an example where toMillis(true) adjusts the time assuming that DST changes at 2am on Sunday Nov 4 2007. To avoid this problem use toMillis(true) after adding or subtracting days or explicitly setting the ""monthDay"" field. On the other hand if you are adding or subtracting hours or minutes then you should use toMillis(false). You should also use toMillis(false) if you want to read back the same milliseconds that you set with set(long) or set(android.text.format.Time) or after parsing a date string. This method can return -1 when the date / time fields have been set to a local time that conflicts with available timezone information. For example when daylight savings transitions cause an hour to be skipped: times within that hour will return -1 if isDst = -1."
android.text.format.Time.toMillis,To millis.
android.text.format.Time.toMillis,Converts this time to milliseconds.
android.text.format.Time.toMillis,Suitable for interacting with the standard java libraries.
android.text.format.Time.toMillis,The time is in UTC milliseconds since the epoch.
android.text.format.Time.toMillis,This does an implicit normalization to compute the milliseconds but does not change any of the fields in this Time object.
android.text.format.Time.toMillis,If you want to normalize the fields in this Time object and also get the milliseconds then use normalize(boolean).
android.text.format.Time.toMillis,"If ""ignoreDst"" is false then this method uses the current setting of the ""isDst"" field and will adjust the returned time if the ""isDst"" field is wrong for the given time."
android.text.format.Time.toMillis,See the sample code below for an example of this.
android.text.format.Time.toMillis,"If ""ignoreDst"" is true then this method ignores the current setting of the ""isDst"" field in this Time object and will instead figure out the correct value of ""isDst"" (as best it can) from the fields in this Time object."
android.text.format.Time.toMillis,"The only case where this method cannot figure out the correct value of the ""isDst"" field is when the time is inherently ambiguous because it falls in the hour that is repeated when switching from Daylight-Saving Time to Standard Time."
android.text.format.Time.toMillis,Here is an example where toMillis(true) adjusts the time assuming that DST changes at 2am on Sunday Nov 4 2007.
android.text.format.Time.toMillis,"To avoid this problem use toMillis(true) after adding or subtracting days or explicitly setting the ""monthDay"" field."
android.text.format.Time.toMillis,On the other hand if you are adding or subtracting hours or minutes then you should use toMillis(false).
android.text.format.Time.toMillis,You should also use toMillis(false) if you want to read back the same milliseconds that you set with set(long) or set(android.text.format.Time) or after parsing a date string.
android.text.format.Time.toMillis,This method can return -1 when the date / time fields have been set to a local time that conflicts with available timezone information.
android.text.format.Time.toMillis,For example when daylight savings transitions cause an hour to be skipped: times within that hour will return -1 if isDst = -1.
android.text.util.Linkify.addLinks,Scans the text of the provided Spannable and turns all occurrences of the link types indicated in the mask into clickable links. If the mask is nonzero it also removes any existing URLSpans attached to the Spannable to avoid problems if you call it repeatedly on the same text.
android.text.util.Linkify.addLinks,Add links.
android.text.util.Linkify.addLinks,Scans the text of the provided Spannable and turns all occurrences of the link types indicated in the mask into clickable links.
android.text.util.Linkify.addLinks,If the mask is nonzero it also removes any existing URLSpans attached to the Spannable to avoid problems if you call it repeatedly on the same text.
android.text.util.Linkify.addLinks,Applies a regex to the text of a TextView turning the matches into links. If links are found then UrlSpans are applied to the link text match areas and the movement method for the text is changed to LinkMovementMethod.
android.text.util.Linkify.addLinks,Add links.
android.text.util.Linkify.addLinks,Applies a regex to the text of a TextView turning the matches into links.
android.text.util.Linkify.addLinks,If links are found then UrlSpans are applied to the link text match areas and the movement method for the text is changed to LinkMovementMethod.
android.text.util.Linkify.addLinks,Applies a regex to the text of a TextView turning the matches into links. If links are found then UrlSpans are applied to the link text match areas and the movement method for the text is changed to LinkMovementMethod.
android.text.util.Linkify.addLinks,Add links.
android.text.util.Linkify.addLinks,Applies a regex to the text of a TextView turning the matches into links.
android.text.util.Linkify.addLinks,If links are found then UrlSpans are applied to the link text match areas and the movement method for the text is changed to LinkMovementMethod.
android.text.util.Linkify.addLinks,Applies a regex to a Spannable turning the matches into links.
android.text.util.Linkify.addLinks,Add links.
android.text.util.Linkify.addLinks,Applies a regex to a Spannable turning the matches into links.
android.text.util.Linkify.addLinks,Add links.
android.text.util.Linkify.addLinks,Scans the text of the provided Spannable and turns all occurrences of the link types indicated in the mask into clickable links. If the mask is nonzero it also removes any existing URLSpans attached to the Spannable to avoid problems if you call it repeatedly on the same text.
android.text.util.Linkify.addLinks,Add links.
android.text.util.Linkify.addLinks,Scans the text of the provided Spannable and turns all occurrences of the link types indicated in the mask into clickable links.
android.text.util.Linkify.addLinks,If the mask is nonzero it also removes any existing URLSpans attached to the Spannable to avoid problems if you call it repeatedly on the same text.
android.text.util.Linkify.addLinks,Applies a regex to the text of a TextView turning the matches into links. If links are found then UrlSpans are applied to the link text match areas and the movement method for the text is changed to LinkMovementMethod.
android.text.util.Linkify.addLinks,Add links.
android.text.util.Linkify.addLinks,Applies a regex to the text of a TextView turning the matches into links.
android.text.util.Linkify.addLinks,If links are found then UrlSpans are applied to the link text match areas and the movement method for the text is changed to LinkMovementMethod.
android.text.util.Linkify.addLinks,Applies a regex to a Spannable turning the matches into links.
android.text.util.Linkify.addLinks,Add links.
android.text.util.Linkify.addLinks,Applies a regex to a Spannable turning the matches into links.
android.text.util.Linkify.addLinks,Add links.
android.text.util.Linkify.addLinks,Scans the text of the provided TextView and turns all occurrences of the link types indicated in the mask into clickable links. If matches are found the movement method for the TextView is set to LinkMovementMethod.
android.text.util.Linkify.addLinks,Add links.
android.text.util.Linkify.addLinks,Scans the text of the provided TextView and turns all occurrences of the link types indicated in the mask into clickable links.
android.text.util.Linkify.addLinks,If matches are found the movement method for the TextView is set to LinkMovementMethod.
android.text.util.Rfc822Token.getAddress,Returns the address part.
android.text.util.Rfc822Token.getAddress,Get address.
android.text.util.Rfc822Token.getName,Returns the name part.
android.text.util.Rfc822Token.getName,Get name.
android.text.util.Rfc822Token.toString,Returns the name (with quoting added if necessary) the comment (in parentheses) and the address (in angle brackets). This should be suitable for inclusion in an RFC 822 address list.
android.text.util.Rfc822Token.toString,To string.
android.text.util.Rfc822Token.toString,Returns the name (with quoting added if necessary) the comment (in parentheses) and the address (in angle brackets).
android.text.util.Rfc822Token.toString,This should be suitable for inclusion in an RFC 822 address list.
android.text.util.Rfc822Tokenizer.tokenize,"This constructor will try to take a string like ""Foo Bar (something) <foo\@google.com> blah\@google.com (something)"" and convert it into one or more Rfc822Tokens output into the supplied collection. It does *not* decode MIME encoded-words; charset conversion must already have taken place if necessary. It will try to be tolerant of broken syntax instead of returning an error."
android.text.util.Rfc822Tokenizer.tokenize,Tokenize.
android.text.util.Rfc822Tokenizer.tokenize,"This constructor will try to take a string like ""Foo Bar (something) <foo\@google.com> blah\@google.com (something)"" and convert it into one or more Rfc822Tokens output into the supplied collection."
android.text.util.Rfc822Tokenizer.tokenize,It does *not* decode MIME encoded-words; charset conversion must already have taken place if necessary.
android.text.util.Rfc822Tokenizer.tokenize,It will try to be tolerant of broken syntax instead of returning an error.
android.text.util.Rfc822Tokenizer.tokenize,"This method will try to take a string like ""Foo Bar (something) <foo\@google.com> blah\@google.com (something)"" and convert it into one or more Rfc822Tokens. It does *not* decode MIME encoded-words; charset conversion must already have taken place if necessary. It will try to be tolerant of broken syntax instead of returning an error."
android.text.util.Rfc822Tokenizer.tokenize,Tokenize.
android.text.util.Rfc822Tokenizer.tokenize,"This method will try to take a string like ""Foo Bar (something) <foo\@google.com> blah\@google.com (something)"" and convert it into one or more Rfc822Tokens."
android.text.util.Rfc822Tokenizer.tokenize,It does *not* decode MIME encoded-words; charset conversion must already have taken place if necessary.
android.text.util.Rfc822Tokenizer.tokenize,It will try to be tolerant of broken syntax instead of returning an error.
android.text.method.DigitsKeyListener.getInstance,Returns a DigitsKeyListener that accepts only the characters that appear in the specified String. Note that not all characters may be available on every keyboard.
android.text.method.DigitsKeyListener.getInstance,Get instance.
android.text.method.DigitsKeyListener.getInstance,Returns a DigitsKeyListener that accepts only the characters that appear in the specified String.
android.text.method.DigitsKeyListener.getInstance,Note that not all characters may be available on every keyboard.
android.text.method.DigitsKeyListener.getInstance,This method was deprecated in API level 26. Use getInstance(java.util.Locale) instead. Returns a DigitsKeyListener that accepts the ASCII digits 0 through 9.
android.text.method.DigitsKeyListener.getInstance,Get instance.
android.text.method.DigitsKeyListener.getInstance,This method was deprecated in API level 26.
android.text.method.DigitsKeyListener.getInstance,Use getInstance(java.util.Locale) instead.
android.text.method.DigitsKeyListener.getInstance,Returns a DigitsKeyListener that accepts the ASCII digits 0 through 9.
android.text.method.DigitsKeyListener.getInstance,Returns a DigitsKeyListener that accepts the locale-appropriate digits.
android.text.method.DigitsKeyListener.getInstance,Get instance.
android.text.method.DigitsKeyListener.getInstance,Returns a DigitsKeyListener that accepts the locale-appropriate digits plus the locale-appropriate plus or minus sign (only at the beginning) and/or the locale-appropriate decimal separator (only one per field) if specified.
android.text.method.DigitsKeyListener.getInstance,Get instance.
android.text.method.DigitsKeyListener.getInstance,This method was deprecated in API level 26. Use getInstance(java.util.Locale boolean boolean) instead. Returns a DigitsKeyListener that accepts the ASCII digits 0 through 9 plus the ASCII plus or minus sign (only at the beginning) and/or the ASCII period ('.') as the decimal point (only one per field) if specified.
android.text.method.DigitsKeyListener.getInstance,Get instance.
android.text.method.DigitsKeyListener.getInstance,This method was deprecated in API level 26.
android.text.method.DigitsKeyListener.getInstance,Use getInstance(java.util.Locale boolean boolean) instead.
android.text.method.DigitsKeyListener.getInstance,Returns a DigitsKeyListener that accepts the ASCII digits 0 through 9 plus the ASCII plus or minus sign (only at the beginning) and/or the ASCII period ('.') as the decimal point (only one per field) if specified.
android.text.method.QwertyKeyListener.markAsReplaced,Marks the specified region of content as having contained original prior to AutoText replacement. Call this method when you have done or are about to do an AutoText-style replacement on a region of text and want to let the same mechanism (the user pressing DEL immediately after the change) undo the replacement.
android.text.method.QwertyKeyListener.markAsReplaced,Mark as replaced.
android.text.method.QwertyKeyListener.markAsReplaced,Marks the specified region of content as having contained original prior to AutoText replacement.
android.text.method.QwertyKeyListener.markAsReplaced,Call this method when you have done or are about to do an AutoText-style replacement on a region of text and want to let the same mechanism (the user pressing DEL immediately after the change) undo the replacement.
android.text.method.TextKeyListener.getInstance,Returns a new or existing instance with the specified capitalization and correction properties.
android.text.method.TextKeyListener.getInstance,Get instance.
android.text.method.TextKeyListener.getInstance,Returns a new or existing instance with no automatic capitalization or correction.
android.text.method.TextKeyListener.getInstance,Get instance.
android.telephony.PhoneNumberUtils.formatNumber,Format the phone number only if the given number hasn't been formatted. The number which has only dailable character is treated as not being formatted.
android.telephony.PhoneNumberUtils.formatNumber,Format number.
android.telephony.PhoneNumberUtils.formatNumber,Format the phone number only if the given number hasn't been formatted.
android.telephony.PhoneNumberUtils.formatNumber,The number which has only dailable character is treated as not being formatted.
android.telephony.PhoneNumberUtils.formatNumber,This method was deprecated in API level 21. Use link #formatNumber(String phoneNumber String defaultCountryIso) instead Formats a phone number in-place. Currently FORMAT_JAPAN and FORMAT_NANP is supported as a second argument.
android.telephony.PhoneNumberUtils.formatNumber,Format number.
android.telephony.PhoneNumberUtils.formatNumber,This method was deprecated in API level 21.
android.telephony.PhoneNumberUtils.formatNumber,Use link #formatNumber(String phoneNumber String defaultCountryIso) instead Formats a phone number in-place.
android.telephony.PhoneNumberUtils.formatNumber,Currently FORMAT_JAPAN and FORMAT_NANP is supported as a second argument.
android.telephony.PhoneNumberUtils.formatNumber,This method was deprecated in API level 21. Use link #formatNumber(String phoneNumber String defaultCountryIso) instead Breaks the given number down and formats it according to the rules for the country the number is from.
android.telephony.PhoneNumberUtils.formatNumber,Format number.
android.telephony.PhoneNumberUtils.formatNumber,This method was deprecated in API level 21.
android.telephony.PhoneNumberUtils.formatNumber,Use link #formatNumber(String phoneNumber String defaultCountryIso) instead Breaks the given number down and formats it according to the rules for the country the number is from.
android.telephony.PhoneNumberUtils.formatNumber,Format a phone number. If the given number doesn't have the country code the phone will be formatted to the default country's convention.
android.telephony.PhoneNumberUtils.formatNumber,Format number.
android.telephony.PhoneNumberUtils.formatNumber,Format a phone number.
android.telephony.PhoneNumberUtils.formatNumber,If the given number doesn't have the country code the phone will be formatted to the default country's convention.
android.telephony.PhoneNumberUtils.isEmergencyNumber,This method was deprecated in API level 29. Please use TelephonyManager#isEmergencyNumber(String) instead. Checks a given number against the list of emergency numbers provided by the RIL and SIM card.
android.telephony.PhoneNumberUtils.isEmergencyNumber,Is emergency number.
android.telephony.PhoneNumberUtils.isEmergencyNumber,This method was deprecated in API level 29.
android.telephony.PhoneNumberUtils.isEmergencyNumber,Please use TelephonyManager#isEmergencyNumber(String) instead.
android.telephony.PhoneNumberUtils.isEmergencyNumber,Checks a given number against the list of emergency numbers provided by the RIL and SIM card.
android.telephony.PhoneNumberUtils.stripSeparators,Strips separators from a phone number string.
android.telephony.PhoneNumberUtils.stripSeparators,Strip separators.
android.telephony.PhoneNumberUtils.toCallerIDMinMatch,Returns the rightmost MIN_MATCH (5) characters in the network portion in *reversed* order This can be used to do a database lookup against the column that stores getStrippedReversed() Returns null if phoneNumber == null.
android.telephony.PhoneNumberUtils.toCallerIDMinMatch,To caller i d min match.
android.telephony.PhoneStateListener.onCallStateChanged,Callback invoked when device call state changes. Reports the state of Telephony (mobile) calls on the device for the registered subscription. Note: the registration subId comes from TelephonyManager object which registers PhoneStateListener by TelephonyManager#listen(PhoneStateListener int). If this TelephonyManager object was created with TelephonyManager#createForSubscriptionId(int) then the callback applies to the subId. Otherwise this callback applies to SubscriptionManager#getDefaultSubscriptionId(). Note: The state returned here may differ from that returned by TelephonyManager#getCallState(). Receivers of this callback should be aware that calling TelephonyManager#getCallState() from within this callback may return a different state than the callback reports.
android.telephony.PhoneStateListener.onCallStateChanged,On call state changed.
android.telephony.PhoneStateListener.onCallStateChanged,Callback invoked when device call state changes.
android.telephony.PhoneStateListener.onCallStateChanged,Reports the state of Telephony (mobile) calls on the device for the registered subscription.
android.telephony.PhoneStateListener.onCallStateChanged,Note: the registration subId comes from TelephonyManager object which registers PhoneStateListener by TelephonyManager#listen(PhoneStateListener int).
android.telephony.PhoneStateListener.onCallStateChanged,If this TelephonyManager object was created with TelephonyManager#createForSubscriptionId(int) then the callback applies to the subId.
android.telephony.PhoneStateListener.onCallStateChanged,Otherwise this callback applies to SubscriptionManager#getDefaultSubscriptionId().
android.telephony.PhoneStateListener.onCallStateChanged,Note: The state returned here may differ from that returned by TelephonyManager#getCallState().
android.telephony.PhoneStateListener.onCallStateChanged,Receivers of this callback should be aware that calling TelephonyManager#getCallState() from within this callback may return a different state than the callback reports.
android.telephony.PhoneStateListener.onServiceStateChanged,Callback invoked when device service state changes on the registered subscription. Note the registration subId comes from TelephonyManager object which registers PhoneStateListener by TelephonyManager#listen(PhoneStateListener int). If this TelephonyManager object was created with TelephonyManager#createForSubscriptionId(int) then the callback applies to the subId. Otherwise this callback applies to SubscriptionManager#getDefaultSubscriptionId().
android.telephony.PhoneStateListener.onServiceStateChanged,On service state changed.
android.telephony.PhoneStateListener.onServiceStateChanged,Callback invoked when device service state changes on the registered subscription.
android.telephony.PhoneStateListener.onServiceStateChanged,Note the registration subId comes from TelephonyManager object which registers PhoneStateListener by TelephonyManager#listen(PhoneStateListener int).
android.telephony.PhoneStateListener.onServiceStateChanged,If this TelephonyManager object was created with TelephonyManager#createForSubscriptionId(int) then the callback applies to the subId.
android.telephony.PhoneStateListener.onServiceStateChanged,Otherwise this callback applies to SubscriptionManager#getDefaultSubscriptionId().
android.telephony.ServiceState.getRoaming,Get current roaming indicator of phone (note: not just decoding from TS 27.007 7.2).
android.telephony.ServiceState.getRoaming,Get roaming.
android.telephony.ServiceState.getState,Get current voice service state.
android.telephony.ServiceState.getState,Get state.
android.telephony.SmsManager.divideMessage,Divide a message text into several fragments none bigger than the maximum SMS message size.
android.telephony.SmsManager.divideMessage,Divide message.
android.telephony.SmsManager.getDefault,Get the SmsManager associated with the default subscription id. The instance will always be associated with the default subscription id even if the default subscription id changes. Note: For devices that support multiple active subscriptions at a time SmsManager will track the subscription set by the user as the default SMS subscription. If the user has not set a default SmsManager may start an activity to kick off a subscription disambiguation dialog. Most operations will not complete until the user has chosen the subscription that will be associated with the operation. If the user cancels the dialog without choosing a subscription one of the following will happen depending on the target SDK version of the application. For compatibility purposes if the target SDK level is <= 28 telephony will still send the SMS over the first available subscription. If the target SDK level is > 28 the operation will fail to complete. Note: If this method is used to perform an operation on a device that has multiple active subscriptions the user has not set a default SMS subscription and the operation is being performed while the application is not in the foreground the SMS disambiguation dialog will not be shown. The result of the operation will conclude as if the user cancelled the disambiguation dialog and the operation will finish as outlined above depending on the target SDK version of the calling application. It is safer to use getSmsManagerForSubscriptionId(int) if the application will perform the operation while in the background because this can cause unpredictable results such as the operation being sent over the wrong subscription or failing completely depending on the user's default SMS subscription setting.
android.telephony.SmsManager.getDefault,Get default.
android.telephony.SmsManager.getDefault,Get the SmsManager associated with the default subscription id.
android.telephony.SmsManager.getDefault,The instance will always be associated with the default subscription id even if the default subscription id changes.
android.telephony.SmsManager.getDefault,Note: For devices that support multiple active subscriptions at a time SmsManager will track the subscription set by the user as the default SMS subscription.
android.telephony.SmsManager.getDefault,If the user has not set a default SmsManager may start an activity to kick off a subscription disambiguation dialog.
android.telephony.SmsManager.getDefault,Most operations will not complete until the user has chosen the subscription that will be associated with the operation.
android.telephony.SmsManager.getDefault,If the user cancels the dialog without choosing a subscription one of the following will happen depending on the target SDK version of the application.
android.telephony.SmsManager.getDefault,For compatibility purposes if the target SDK level is <= 28 telephony will still send the SMS over the first available subscription.
android.telephony.SmsManager.getDefault,If the target SDK level is > 28 the operation will fail to complete.
android.telephony.SmsManager.getDefault,Note: If this method is used to perform an operation on a device that has multiple active subscriptions the user has not set a default SMS subscription and the operation is being performed while the application is not in the foreground the SMS disambiguation dialog will not be shown.
android.telephony.SmsManager.getDefault,The result of the operation will conclude as if the user cancelled the disambiguation dialog and the operation will finish as outlined above depending on the target SDK version of the calling application.
android.telephony.SmsManager.getDefault,It is safer to use getSmsManagerForSubscriptionId(int) if the application will perform the operation while in the background because this can cause unpredictable results such as the operation being sent over the wrong subscription or failing completely depending on the user's default SMS subscription setting.
android.telephony.SmsManager.sendMultipartTextMessage,"Send a multi-part text based SMS. The callee should have already divided the message into correctly sized parts by calling divideMessage. Note: Using this method requires that your app has the Manifest.permission.SEND_SMS permission. Note: Beginning with Android 4.4 (API level 19) if and only if an app is not selected as the default SMS app the system automatically writes messages sent using this method to the SMS Provider (the default SMS app is always responsible for writing its sent messages to the SMS Provider). For information about how to behave as the default SMS app see Telephony. Note: If getDefault() is used to instantiate this manager on a multi-SIM device this operation may fail sending the SMS message because no suitable default subscription could be found. In this case if sentIntent is non-null then the PendingIntent will be sent with an error code RESULT_ERROR_GENERIC_FAILURE and an extra string ""noDefault"" containing the boolean value true. See getDefault() for more information on the conditions where this operation may fail."
android.telephony.SmsManager.sendMultipartTextMessage,Send multipart text message.
android.telephony.SmsManager.sendMultipartTextMessage,Send a multi-part text based SMS.
android.telephony.SmsManager.sendMultipartTextMessage,The callee should have already divided the message into correctly sized parts by calling divideMessage.
android.telephony.SmsManager.sendMultipartTextMessage,Note: Using this method requires that your app has the Manifest.permission.SEND_SMS permission.
android.telephony.SmsManager.sendMultipartTextMessage,Note: Beginning with Android 4.4 (API level 19) if and only if an app is not selected as the default SMS app the system automatically writes messages sent using this method to the SMS Provider (the default SMS app is always responsible for writing its sent messages to the SMS Provider).
android.telephony.SmsManager.sendMultipartTextMessage,For information about how to behave as the default SMS app see Telephony.
android.telephony.SmsManager.sendMultipartTextMessage,Note: If getDefault() is used to instantiate this manager on a multi-SIM device this operation may fail sending the SMS message because no suitable default subscription could be found.
android.telephony.SmsManager.sendMultipartTextMessage,"In this case if sentIntent is non-null then the PendingIntent will be sent with an error code RESULT_ERROR_GENERIC_FAILURE and an extra string ""noDefault"" containing the boolean value true."
android.telephony.SmsManager.sendMultipartTextMessage,See getDefault() for more information on the conditions where this operation may fail.
android.telephony.SmsManager.sendTextMessage,"Send a text based SMS. Note: Using this method requires that your app has the Manifest.permission.SEND_SMS permission. Note: Beginning with Android 4.4 (API level 19) if and only if an app is not selected as the default SMS app the system automatically writes messages sent using this method to the SMS Provider (the default SMS app is always responsible for writing its sent messages to the SMS Provider). For information about how to behave as the default SMS app see Telephony. Note: If getDefault() is used to instantiate this manager on a multi-SIM device this operation may fail sending the SMS message because no suitable default subscription could be found. In this case if sentIntent is non-null then the PendingIntent will be sent with an error code RESULT_ERROR_GENERIC_FAILURE and an extra string ""noDefault"" containing the boolean value true. See getDefault() for more information on the conditions where this operation may fail."
android.telephony.SmsManager.sendTextMessage,Send text message.
android.telephony.SmsManager.sendTextMessage,Send a text based SMS.
android.telephony.SmsManager.sendTextMessage,Note: Using this method requires that your app has the Manifest.permission.SEND_SMS permission.
android.telephony.SmsManager.sendTextMessage,Note: Beginning with Android 4.4 (API level 19) if and only if an app is not selected as the default SMS app the system automatically writes messages sent using this method to the SMS Provider (the default SMS app is always responsible for writing its sent messages to the SMS Provider).
android.telephony.SmsManager.sendTextMessage,For information about how to behave as the default SMS app see Telephony.
android.telephony.SmsManager.sendTextMessage,Note: If getDefault() is used to instantiate this manager on a multi-SIM device this operation may fail sending the SMS message because no suitable default subscription could be found.
android.telephony.SmsManager.sendTextMessage,"In this case if sentIntent is non-null then the PendingIntent will be sent with an error code RESULT_ERROR_GENERIC_FAILURE and an extra string ""noDefault"" containing the boolean value true."
android.telephony.SmsManager.sendTextMessage,See getDefault() for more information on the conditions where this operation may fail.
android.telephony.SmsMessage.createFromPdu,This method was deprecated in API level 23. Use createFromPdu(byte[] java.lang.String) instead. Create an SmsMessage from a raw PDU. Guess format based on Voice technology first if it fails use other format. All applications which handle incoming SMS messages by processing the SMS_RECEIVED_ACTION broadcast intent must now pass the new format String extra from the intent into the new method createFromPdu(byte[] String) which takes an extra format parameter. This is required in order to correctly decode the PDU on devices that require support for both 3GPP and 3GPP2 formats at the same time such as dual-mode GSM/CDMA and CDMA/LTE phones.
android.telephony.SmsMessage.createFromPdu,Create from pdu.
android.telephony.SmsMessage.createFromPdu,This method was deprecated in API level 23.
android.telephony.SmsMessage.createFromPdu,Use createFromPdu(byte[] java.lang.String) instead.
android.telephony.SmsMessage.createFromPdu,Create an SmsMessage from a raw PDU.
android.telephony.SmsMessage.createFromPdu,Guess format based on Voice technology first if it fails use other format.
android.telephony.SmsMessage.createFromPdu,All applications which handle incoming SMS messages by processing the SMS_RECEIVED_ACTION broadcast intent must now pass the new format String extra from the intent into the new method createFromPdu(byte[] String) which takes an extra format parameter.
android.telephony.SmsMessage.createFromPdu,This is required in order to correctly decode the PDU on devices that require support for both 3GPP and 3GPP2 formats at the same time such as dual-mode GSM/CDMA and CDMA/LTE phones.
android.telephony.SmsMessage.createFromPdu,"Create an SmsMessage from a raw PDU with the specified message format. The message format is passed in the Telephony.Sms.Intents.SMS_RECEIVED_ACTION as the format String extra and will be either ""3gpp"" for GSM/UMTS/LTE messages in 3GPP format or ""3gpp2"" for CDMA/LTE messages in 3GPP2 format."
android.telephony.SmsMessage.createFromPdu,Create from pdu.
android.telephony.SmsMessage.createFromPdu,Create an SmsMessage from a raw PDU with the specified message format.
android.telephony.SmsMessage.createFromPdu,"The message format is passed in the Telephony.Sms.Intents.SMS_RECEIVED_ACTION as the format String extra and will be either ""3gpp"" for GSM/UMTS/LTE messages in 3GPP format or ""3gpp2"" for CDMA/LTE messages in 3GPP2 format."
android.telephony.SmsMessage.getDisplayMessageBody,Returns the message body or email message body if this message was from an email gateway. Returns null if message body unavailable.
android.telephony.SmsMessage.getDisplayMessageBody,Get display message body.
android.telephony.SmsMessage.getDisplayMessageBody,Returns the message body or email message body if this message was from an email gateway.
android.telephony.SmsMessage.getDisplayMessageBody,Returns null if message body unavailable.
android.telephony.SmsMessage.getMessageBody,Returns the message body as a String if it exists and is text based.
android.telephony.SmsMessage.getMessageBody,Get message body.
android.telephony.SmsMessage.getOriginatingAddress,Returns the originating address (sender) of this SMS message in String form or null if unavailable. If the address is a GSM-formatted address it will be in a format specified by 3GPP 23.040 Sec 9.1.2.5. If it is a CDMA address it will be a format specified by 3GPP2 C.S005-D Table 2.7.1.3.2.4-2. The choice of format is carrier-specific so callers of the should be careful to avoid assumptions about the returned content.
android.telephony.SmsMessage.getOriginatingAddress,Get originating address.
android.telephony.SmsMessage.getOriginatingAddress,Returns the originating address (sender) of this SMS message in String form or null if unavailable.
android.telephony.SmsMessage.getOriginatingAddress,If the address is a GSM-formatted address it will be in a format specified by 3GPP 23.040 Sec 9.1.2.5.
android.telephony.SmsMessage.getOriginatingAddress,If it is a CDMA address it will be a format specified by 3GPP2 C.S005-D Table 2.7.1.3.2.4-2.
android.telephony.SmsMessage.getOriginatingAddress,The choice of format is carrier-specific so callers of the should be careful to avoid assumptions about the returned content.
android.telephony.SmsMessage.getTimestampMillis,Returns the service centre timestamp in currentTimeMillis() format.
android.telephony.SmsMessage.getTimestampMillis,Get timestamp millis.
android.telephony.TelephonyManager.getCallState,Returns the state of all calls on the device. This method considers not only calls in the Telephony stack but also calls via other ConnectionService implementations. Note: The call state returned via this method may differ from what is reported by PhoneStateListener#onCallStateChanged(int String) as that callback only considers Telephony (mobile) calls.
android.telephony.TelephonyManager.getCallState,Get call state.
android.telephony.TelephonyManager.getCallState,Returns the state of all calls on the device.
android.telephony.TelephonyManager.getCallState,This method considers not only calls in the Telephony stack but also calls via other ConnectionService implementations.
android.telephony.TelephonyManager.getCallState,Note: The call state returned via this method may differ from what is reported by PhoneStateListener#onCallStateChanged(int String) as that callback only considers Telephony (mobile) calls.
android.telephony.TelephonyManager.getCellLocation,This method was deprecated in API level 26. use getAllCellInfo() instead which returns a superset of this API. Returns the current location of the device. If there is only one radio in the device and that radio has an LTE connection this method will return null. The implementation must not to try add LTE identifiers into the existing cdma/gsm classes. Requires Manifest.permission.ACCESS_FINE_LOCATION.
android.telephony.TelephonyManager.getCellLocation,Get cell location.
android.telephony.TelephonyManager.getCellLocation,This method was deprecated in API level 26.
android.telephony.TelephonyManager.getCellLocation,use getAllCellInfo() instead which returns a superset of this API.
android.telephony.TelephonyManager.getCellLocation,Returns the current location of the device.
android.telephony.TelephonyManager.getCellLocation,If there is only one radio in the device and that radio has an LTE connection this method will return null.
android.telephony.TelephonyManager.getCellLocation,The implementation must not to try add LTE identifiers into the existing cdma/gsm classes.
android.telephony.TelephonyManager.getCellLocation,Requires Manifest.permission.ACCESS_FINE_LOCATION.
android.telephony.TelephonyManager.getDataActivity,Returns a constant indicating the type of activity on a data connection (cellular).
android.telephony.TelephonyManager.getDataActivity,Get data activity.
android.telephony.TelephonyManager.getDeviceId,This method was deprecated in API level 26. Use (@link getImei} which returns IMEI for GSM or (@link getMeid} which returns MEID for CDMA. Returns the unique device ID for example the IMEI for GSM and the MEID or ESN for CDMA phones. Return null if device ID is not available. Requires Permission: READ_PRIVILEGED_PHONE_STATE for the calling app to be the device or profile owner and have the READ_PHONE_STATE permission or that the calling app has carrier privileges (see hasCarrierPrivileges() ). The profile owner is an app that owns a managed profile on the device; for more details see Work profiles. Profile owner access is deprecated and will be removed in a future release. If the calling app does not meet one of these requirements then this method will behave as follows: If the calling app's target SDK is API level 28 or lower and the app has the READ_PHONE_STATE permission then null is returned. If the calling app's target SDK is API level 28 or lower and the app does not have the READ_PHONE_STATE permission or if the calling app is targeting API level 29 or higher then a SecurityException is thrown.
android.telephony.TelephonyManager.getDeviceId,Get device id.
android.telephony.TelephonyManager.getDeviceId,This method was deprecated in API level 26.
android.telephony.TelephonyManager.getDeviceId,Use (@link getImei} which returns IMEI for GSM or (@link getMeid} which returns MEID for CDMA.
android.telephony.TelephonyManager.getDeviceId,Returns the unique device ID for example the IMEI for GSM and the MEID or ESN for CDMA phones.
android.telephony.TelephonyManager.getDeviceId,Return null if device ID is not available.
android.telephony.TelephonyManager.getDeviceId,Requires Permission: READ_PRIVILEGED_PHONE_STATE for the calling app to be the device or profile owner and have the READ_PHONE_STATE permission or that the calling app has carrier privileges (see hasCarrierPrivileges() ).
android.telephony.TelephonyManager.getDeviceId,The profile owner is an app that owns a managed profile on the device; for more details see Work profiles.
android.telephony.TelephonyManager.getDeviceId,Profile owner access is deprecated and will be removed in a future release.
android.telephony.TelephonyManager.getDeviceId,If the calling app does not meet one of these requirements then this method will behave as follows: If the calling app's target SDK is API level 28 or lower and the app has the READ_PHONE_STATE permission then null is returned.
android.telephony.TelephonyManager.getDeviceId,If the calling app's target SDK is API level 28 or lower and the app does not have the READ_PHONE_STATE permission or if the calling app is targeting API level 29 or higher then a SecurityException is thrown.
android.telephony.TelephonyManager.getDeviceId,This method was deprecated in API level 26. Use (@link getImei} which returns IMEI for GSM or (@link getMeid} which returns MEID for CDMA. Returns the unique device ID of a subscription for example the IMEI for GSM and the MEID for CDMA phones. Return null if device ID is not available. Requires Permission: READ_PRIVILEGED_PHONE_STATE for the calling app to be the device or profile owner and have the READ_PHONE_STATE permission or that the calling app has carrier privileges (see hasCarrierPrivileges() ). The profile owner is an app that owns a managed profile on the device; for more details see Work profiles. Profile owner access is deprecated and will be removed in a future release. If the calling app does not meet one of these requirements then this method will behave as follows: If the calling app's target SDK is API level 28 or lower and the app has the READ_PHONE_STATE permission then null is returned. If the calling app's target SDK is API level 28 or lower and the app does not have the READ_PHONE_STATE permission or if the calling app is targeting API level 29 or higher then a SecurityException is thrown.
android.telephony.TelephonyManager.getDeviceId,Get device id.
android.telephony.TelephonyManager.getDeviceId,This method was deprecated in API level 26.
android.telephony.TelephonyManager.getDeviceId,Use (@link getImei} which returns IMEI for GSM or (@link getMeid} which returns MEID for CDMA.
android.telephony.TelephonyManager.getDeviceId,Returns the unique device ID of a subscription for example the IMEI for GSM and the MEID for CDMA phones.
android.telephony.TelephonyManager.getDeviceId,Return null if device ID is not available.
android.telephony.TelephonyManager.getDeviceId,Requires Permission: READ_PRIVILEGED_PHONE_STATE for the calling app to be the device or profile owner and have the READ_PHONE_STATE permission or that the calling app has carrier privileges (see hasCarrierPrivileges() ).
android.telephony.TelephonyManager.getDeviceId,The profile owner is an app that owns a managed profile on the device; for more details see Work profiles.
android.telephony.TelephonyManager.getDeviceId,Profile owner access is deprecated and will be removed in a future release.
android.telephony.TelephonyManager.getDeviceId,If the calling app does not meet one of these requirements then this method will behave as follows: If the calling app's target SDK is API level 28 or lower and the app has the READ_PHONE_STATE permission then null is returned.
android.telephony.TelephonyManager.getDeviceId,If the calling app's target SDK is API level 28 or lower and the app does not have the READ_PHONE_STATE permission or if the calling app is targeting API level 29 or higher then a SecurityException is thrown.
android.telephony.TelephonyManager.getLine1Number,Returns the phone number string for line 1 for example the MSISDN for a GSM phone. Return null if it is unavailable. Requires Permission: READ_PHONE_STATE READ_SMS READ_PHONE_NUMBERS that the caller is the default SMS app or that the caller has carrier privileges (see hasCarrierPrivileges() ). Requires Manifest.permission.READ_PHONE_STATE or Manifest.permission.READ_SMS or Manifest.permission.READ_PHONE_NUMBERS.
android.telephony.TelephonyManager.getLine1Number,Get line 1 number.
android.telephony.TelephonyManager.getLine1Number,Returns the phone number string for line 1 for example the MSISDN for a GSM phone.
android.telephony.TelephonyManager.getLine1Number,Return null if it is unavailable.
android.telephony.TelephonyManager.getLine1Number,Requires Permission: READ_PHONE_STATE READ_SMS READ_PHONE_NUMBERS that the caller is the default SMS app or that the caller has carrier privileges (see hasCarrierPrivileges() ).
android.telephony.TelephonyManager.getLine1Number,Requires Manifest.permission.READ_PHONE_STATE or Manifest.permission.READ_SMS or Manifest.permission.READ_PHONE_NUMBERS.
android.telephony.TelephonyManager.getNetworkCountryIso,Returns the ISO country code equivalent of the MCC (Mobile Country Code) of the current registered operator or the cell nearby if available. . Note: Result may be unreliable on CDMA networks (use getPhoneType() to determine if on a CDMA network).
android.telephony.TelephonyManager.getNetworkCountryIso,Get network country iso.
android.telephony.TelephonyManager.getNetworkCountryIso,Returns the ISO country code equivalent of the MCC (Mobile Country Code) of the current registered operator or the cell nearby if available.
android.telephony.TelephonyManager.getNetworkCountryIso,.
android.telephony.TelephonyManager.getNetworkCountryIso,Note: Result may be unreliable on CDMA networks (use getPhoneType() to determine if on a CDMA network).
android.telephony.TelephonyManager.getNetworkOperator,Returns the numeric name (MCC+MNC) of current registered operator. Availability: Only when user is registered to a network. Result may be unreliable on CDMA networks (use getPhoneType() to determine if on a CDMA network).
android.telephony.TelephonyManager.getNetworkOperator,Get network operator.
android.telephony.TelephonyManager.getNetworkOperator,Returns the numeric name (MCC+MNC) of current registered operator.
android.telephony.TelephonyManager.getNetworkOperator,Availability: Only when user is registered to a network.
android.telephony.TelephonyManager.getNetworkOperator,Result may be unreliable on CDMA networks (use getPhoneType() to determine if on a CDMA network).
android.telephony.TelephonyManager.getNetworkOperatorName,Returns the alphabetic name of current registered operator. Availability: Only when user is registered to a network. Result may be unreliable on CDMA networks (use getPhoneType() to determine if on a CDMA network).
android.telephony.TelephonyManager.getNetworkOperatorName,Get network operator name.
android.telephony.TelephonyManager.getNetworkOperatorName,Returns the alphabetic name of current registered operator.
android.telephony.TelephonyManager.getNetworkOperatorName,Availability: Only when user is registered to a network.
android.telephony.TelephonyManager.getNetworkOperatorName,Result may be unreliable on CDMA networks (use getPhoneType() to determine if on a CDMA network).
android.telephony.TelephonyManager.getPhoneType,Returns a constant indicating the device phone type. This indicates the type of radio used to transmit voice calls.
android.telephony.TelephonyManager.getPhoneType,Get phone type.
android.telephony.TelephonyManager.getPhoneType,Returns a constant indicating the device phone type.
android.telephony.TelephonyManager.getPhoneType,This indicates the type of radio used to transmit voice calls.
android.telephony.TelephonyManager.getSimCountryIso,Returns the ISO country code equivalent for the SIM provider's country code.
android.telephony.TelephonyManager.getSimCountryIso,Get sim country iso.
android.telephony.TelephonyManager.getSimOperator,Returns the MCC+MNC (mobile country code + mobile network code) of the provider of the SIM. 5 or 6 decimal digits. Availability: SIM state must be SIM_STATE_READY.
android.telephony.TelephonyManager.getSimOperator,Get sim operator.
android.telephony.TelephonyManager.getSimOperator,Returns the MCC+MNC (mobile country code + mobile network code) of the provider of the SIM.
android.telephony.TelephonyManager.getSimOperator,5 or 6 decimal digits.
android.telephony.TelephonyManager.getSimOperator,Availability: SIM state must be SIM_STATE_READY.
android.telephony.TelephonyManager.getSimOperatorName,Returns the Service Provider Name (SPN). Availability: SIM state must be SIM_STATE_READY.
android.telephony.TelephonyManager.getSimOperatorName,Get sim operator name.
android.telephony.TelephonyManager.getSimOperatorName,Returns the Service Provider Name (SPN).
android.telephony.TelephonyManager.getSimOperatorName,Availability: SIM state must be SIM_STATE_READY.
android.telephony.TelephonyManager.getSimSerialNumber,Returns the serial number of the SIM if applicable. Return null if it is unavailable. Requires Permission: READ_PRIVILEGED_PHONE_STATE for the calling app to be the device or profile owner and have the READ_PHONE_STATE permission or that the calling app has carrier privileges (see hasCarrierPrivileges() ). The profile owner is an app that owns a managed profile on the device; for more details see Work profiles. Profile owner access is deprecated and will be removed in a future release. If the calling app does not meet one of these requirements then this method will behave as follows: If the calling app's target SDK is API level 28 or lower and the app has the READ_PHONE_STATE permission then null is returned. If the calling app's target SDK is API level 28 or lower and the app does not have the READ_PHONE_STATE permission or if the calling app is targeting API level 29 or higher then a SecurityException is thrown.
android.telephony.TelephonyManager.getSimSerialNumber,Get sim serial number.
android.telephony.TelephonyManager.getSimSerialNumber,Returns the serial number of the SIM if applicable.
android.telephony.TelephonyManager.getSimSerialNumber,Return null if it is unavailable.
android.telephony.TelephonyManager.getSimSerialNumber,Requires Permission: READ_PRIVILEGED_PHONE_STATE for the calling app to be the device or profile owner and have the READ_PHONE_STATE permission or that the calling app has carrier privileges (see hasCarrierPrivileges() ).
android.telephony.TelephonyManager.getSimSerialNumber,The profile owner is an app that owns a managed profile on the device; for more details see Work profiles.
android.telephony.TelephonyManager.getSimSerialNumber,Profile owner access is deprecated and will be removed in a future release.
android.telephony.TelephonyManager.getSimSerialNumber,If the calling app does not meet one of these requirements then this method will behave as follows: If the calling app's target SDK is API level 28 or lower and the app has the READ_PHONE_STATE permission then null is returned.
android.telephony.TelephonyManager.getSimSerialNumber,If the calling app's target SDK is API level 28 or lower and the app does not have the READ_PHONE_STATE permission or if the calling app is targeting API level 29 or higher then a SecurityException is thrown.
android.telephony.TelephonyManager.getSimState,Returns a constant indicating the state of the default SIM card.
android.telephony.TelephonyManager.getSimState,Get sim state.
android.telephony.TelephonyManager.getSimState,Returns a constant indicating the state of the device SIM card in a slot.
android.telephony.TelephonyManager.getSimState,Get sim state.
android.telephony.TelephonyManager.getSubscriberId,Returns the unique subscriber ID for example the IMSI for a GSM phone. Return null if it is unavailable. Requires Permission: READ_PRIVILEGED_PHONE_STATE for the calling app to be the device or profile owner and have the READ_PHONE_STATE permission or that the calling app has carrier privileges (see hasCarrierPrivileges() ). The profile owner is an app that owns a managed profile on the device; for more details see Work profiles. Profile owner access is deprecated and will be removed in a future release. If the calling app does not meet one of these requirements then this method will behave as follows: If the calling app's target SDK is API level 28 or lower and the app has the READ_PHONE_STATE permission then null is returned. If the calling app's target SDK is API level 28 or lower and the app does not have the READ_PHONE_STATE permission or if the calling app is targeting API level 29 or higher then a SecurityException is thrown.
android.telephony.TelephonyManager.getSubscriberId,Get subscriber id.
android.telephony.TelephonyManager.getSubscriberId,Returns the unique subscriber ID for example the IMSI for a GSM phone.
android.telephony.TelephonyManager.getSubscriberId,Return null if it is unavailable.
android.telephony.TelephonyManager.getSubscriberId,Requires Permission: READ_PRIVILEGED_PHONE_STATE for the calling app to be the device or profile owner and have the READ_PHONE_STATE permission or that the calling app has carrier privileges (see hasCarrierPrivileges() ).
android.telephony.TelephonyManager.getSubscriberId,The profile owner is an app that owns a managed profile on the device; for more details see Work profiles.
android.telephony.TelephonyManager.getSubscriberId,Profile owner access is deprecated and will be removed in a future release.
android.telephony.TelephonyManager.getSubscriberId,If the calling app does not meet one of these requirements then this method will behave as follows: If the calling app's target SDK is API level 28 or lower and the app has the READ_PHONE_STATE permission then null is returned.
android.telephony.TelephonyManager.getSubscriberId,If the calling app's target SDK is API level 28 or lower and the app does not have the READ_PHONE_STATE permission or if the calling app is targeting API level 29 or higher then a SecurityException is thrown.
android.telephony.TelephonyManager.isNetworkRoaming,Returns true if the device is considered roaming on the current network for GSM purposes. Availability: Only when user registered to a network.
android.telephony.TelephonyManager.isNetworkRoaming,Is network roaming.
android.telephony.TelephonyManager.isNetworkRoaming,Returns true if the device is considered roaming on the current network for GSM purposes.
android.telephony.TelephonyManager.isNetworkRoaming,Availability: Only when user registered to a network.
android.telephony.TelephonyManager.listen,Registers a listener object to receive notification of changes in specified telephony states. To register a listener pass a PhoneStateListener and specify at least one telephony state of interest in the events argument. At registration and when a specified telephony state changes the telephony manager invokes the appropriate callback method on the listener object and passes the current (updated) values. To un-register a listener pass the listener object and set the events argument to PhoneStateListener#LISTEN_NONE (0). If this TelephonyManager object has been created with createForSubscriptionId(int) applies to the given subId. Otherwise applies to SubscriptionManager#getDefaultSubscriptionId(). To listen events for multiple subIds pass a separate listener object to each TelephonyManager object created with createForSubscriptionId(int). Note: if you call this method while in the middle of a binder transaction you must call Binder.clearCallingIdentity() before calling this method. A SecurityException will be thrown otherwise.
android.telephony.TelephonyManager.listen,Listen.
android.telephony.TelephonyManager.listen,Registers a listener object to receive notification of changes in specified telephony states.
android.telephony.TelephonyManager.listen,To register a listener pass a PhoneStateListener and specify at least one telephony state of interest in the events argument.
android.telephony.TelephonyManager.listen,At registration and when a specified telephony state changes the telephony manager invokes the appropriate callback method on the listener object and passes the current (updated) values.
android.telephony.TelephonyManager.listen,To un-register a listener pass the listener object and set the events argument to PhoneStateListener#LISTEN_NONE (0).
android.telephony.TelephonyManager.listen,If this TelephonyManager object has been created with createForSubscriptionId(int) applies to the given subId.
android.telephony.TelephonyManager.listen,Otherwise applies to SubscriptionManager#getDefaultSubscriptionId().
android.telephony.TelephonyManager.listen,To listen events for multiple subIds pass a separate listener object to each TelephonyManager object created with createForSubscriptionId(int).
android.telephony.TelephonyManager.listen,Note: if you call this method while in the middle of a binder transaction you must call Binder.clearCallingIdentity() before calling this method.
android.telephony.TelephonyManager.listen,A SecurityException will be thrown otherwise.
android.text.ClipboardManager.getText,Returns the text on the clipboard. It will eventually be possible to store types other than text too in which case this will return null if the type cannot be coerced to text.
android.text.ClipboardManager.getText,Get text.
android.text.ClipboardManager.getText,Returns the text on the clipboard.
android.text.ClipboardManager.getText,It will eventually be possible to store types other than text too in which case this will return null if the type cannot be coerced to text.
android.text.ClipboardManager.hasText,Returns true if the clipboard contains text; false otherwise.
android.text.ClipboardManager.hasText,Has text.
android.text.ClipboardManager.setText,Sets the contents of the clipboard to the specified text.
android.text.ClipboardManager.setText,Set text.
android.text.Layout.draw,Draw this Layout on the specified Canvas.
android.text.Layout.draw,Draw.
android.text.Layout.draw,Draw this Layout on the specified canvas with the highlight path drawn between the background and the text.
android.text.Layout.draw,Draw.
android.text.Layout.getDesiredWidth,Return how wide a layout must be in order to display the specified text with one line per paragraph. As of O Uses TextDirectionHeuristics#FIRSTSTRONG_LTR as the default text direction heuristics. In the earlier versions uses TextDirectionHeuristics#LTR as the default.
android.text.Layout.getDesiredWidth,Get desired width.
android.text.Layout.getDesiredWidth,Return how wide a layout must be in order to display the specified text with one line per paragraph.
android.text.Layout.getDesiredWidth,As of O Uses TextDirectionHeuristics#FIRSTSTRONG_LTR as the default text direction heuristics.
android.text.Layout.getDesiredWidth,In the earlier versions uses TextDirectionHeuristics#LTR as the default.
android.text.Layout.getDesiredWidth,Return how wide a layout must be in order to display the specified text slice with one line per paragraph. As of O Uses TextDirectionHeuristics#FIRSTSTRONG_LTR as the default text direction heuristics. In the earlier versions uses TextDirectionHeuristics#LTR as the default.
android.text.Layout.getDesiredWidth,Get desired width.
android.text.Layout.getDesiredWidth,Return how wide a layout must be in order to display the specified text slice with one line per paragraph.
android.text.Layout.getDesiredWidth,As of O Uses TextDirectionHeuristics#FIRSTSTRONG_LTR as the default text direction heuristics.
android.text.Layout.getDesiredWidth,In the earlier versions uses TextDirectionHeuristics#LTR as the default.
android.text.Layout.getHeight,Return the total height of this layout.
android.text.Layout.getHeight,Get height.
android.text.Layout.getLineBaseline,Return the vertical position of the baseline of the specified line.
android.text.Layout.getLineBaseline,Get line baseline.
android.text.Layout.getLineBounds,Return the baseline for the specified line (0…getLineCount() - 1) If bounds is not null return the top left right bottom extents of the specified line in it.
android.text.Layout.getLineBounds,Get line bounds.
android.text.Layout.getLineCount,Return the number of lines of text in this layout.
android.text.Layout.getLineCount,Get line count.
android.text.Layout.getLineDescent,Return the descent of the specified line(0…getLineCount() - 1).
android.text.Layout.getLineDescent,Get line descent.
android.text.Layout.getLineForOffset,Get the line number on which the specified text offset appears. If you ask for a position before 0 you get 0; if you ask for a position beyond the end of the text you get the last line.
android.text.Layout.getLineForOffset,Get line for offset.
android.text.Layout.getLineForOffset,Get the line number on which the specified text offset appears.
android.text.Layout.getLineForOffset,If you ask for a position before 0 you get 0; if you ask for a position beyond the end of the text you get the last line.
android.text.Layout.getLineForVertical,Get the line number corresponding to the specified vertical position. If you ask for a position above 0 you get 0; if you ask for a position below the bottom of the text you get the last line.
android.text.Layout.getLineForVertical,Get line for vertical.
android.text.Layout.getLineForVertical,Get the line number corresponding to the specified vertical position.
android.text.Layout.getLineForVertical,If you ask for a position above 0 you get 0; if you ask for a position below the bottom of the text you get the last line.
android.text.Layout.getLineLeft,Get the leftmost position that should be exposed for horizontal scrolling on the specified line.
android.text.Layout.getLineLeft,Get line left.
android.text.Layout.getLineRight,Get the rightmost position that should be exposed for horizontal scrolling on the specified line.
android.text.Layout.getLineRight,Get line right.
android.text.Layout.getLineTop,Return the vertical position of the top of the specified line (0…getLineCount()). If the specified line is equal to the line count returns the bottom of the last line.
android.text.Layout.getLineTop,Get line top.
android.text.Layout.getLineTop,Return the vertical position of the top of the specified line (0…getLineCount()).
android.text.Layout.getLineTop,If the specified line is equal to the line count returns the bottom of the last line.
android.text.Layout.getLineWidth,Gets the unsigned horizontal extent of the specified line including leading margin indent and trailing whitespace.
android.text.Layout.getLineWidth,Get line width.
android.text.Layout.getOffsetForHorizontal,Get the character offset on the specified line whose position is closest to the specified horizontal position.
android.text.Layout.getOffsetForHorizontal,Get offset for horizontal.
android.text.Layout.getPaint,Return the base Paint properties for this layout. Do NOT change the paint which may result in funny drawing for this layout.
android.text.Layout.getPaint,Get paint.
android.text.Layout.getPaint,Return the base Paint properties for this layout.
android.text.Layout.getPaint,Do NOT change the paint which may result in funny drawing for this layout.
android.text.Layout.getPrimaryHorizontal,Get the primary horizontal position for the specified text offset. This is the location where a new character would be inserted in the paragraph's primary direction.
android.text.Layout.getPrimaryHorizontal,Get primary horizontal.
android.text.Layout.getPrimaryHorizontal,Get the primary horizontal position for the specified text offset.
android.text.Layout.getPrimaryHorizontal,This is the location where a new character would be inserted in the paragraph's primary direction.
android.text.Layout.getSpacingAdd,Return the number of units of leading that are added to each line.
android.text.Layout.getSpacingAdd,Get spacing add.
android.text.Layout.getSpacingMultiplier,Return what the text height is multiplied by to get the line height.
android.text.Layout.getSpacingMultiplier,Get spacing multiplier.
android.text.Layout.getText,Return the text that is displayed by this Layout.
android.text.Layout.getText,Get text.
android.text.Layout.getWidth,Return the width of this layout.
android.text.Layout.getWidth,Get width.
android.text.Selection.getSelectionEnd,Return the offset of the selection edge or cursor or -1 if there is no selection or cursor.
android.text.Selection.getSelectionEnd,Get selection end.
android.text.Selection.getSelectionStart,Return the offset of the selection anchor or cursor or -1 if there is no selection or cursor.
android.text.Selection.getSelectionStart,Get selection start.
android.text.Selection.removeSelection,Remove the selection or cursor if any from the text.
android.text.Selection.removeSelection,Remove selection.
android.text.Selection.setSelection,Set the selection anchor to start and the selection edge to stop.
android.text.Selection.setSelection,Set selection.
android.text.Selection.setSelection,Move the cursor to offset index.
android.text.Selection.setSelection,Set selection.
android.text.SpannableString.getSpanEnd,Return the end of the range of text to which the specified markup object is attached or -1 if the object is not attached.
android.text.SpannableString.getSpanEnd,Get span end.
android.text.SpannableString.getSpanStart,Return the beginning of the range of text to which the specified markup object is attached or -1 if the object is not attached.
android.text.SpannableString.getSpanStart,Get span start.
android.text.SpannableString.getSpans,Return an array of the markup objects attached to the specified slice of this CharSequence and whose type is the specified type or a subclass of it. Specify Object.class for the type if you want all the objects regardless of type.
android.text.SpannableString.getSpans,Get spans.
android.text.SpannableString.getSpans,Return an array of the markup objects attached to the specified slice of this CharSequence and whose type is the specified type or a subclass of it.
android.text.SpannableString.getSpans,Specify Object.class for the type if you want all the objects regardless of type.
android.text.SpannableString.length,Returns the length of this character sequence. The length is the number of 16-bit char s in the sequence.
android.text.SpannableString.length,Length.
android.text.SpannableString.length,Returns the length of this character sequence.
android.text.SpannableString.length,The length is the number of 16-bit char s in the sequence.
android.text.SpannableString.subSequence,Returns a CharSequence that is a subsequence of this sequence. The subsequence starts with the char value at the specified index and ends with the char value at index end - 1. The length (in char s) of the returned sequence is end - start so if start == end then an empty sequence is returned.
android.text.SpannableString.subSequence,Sub sequence.
android.text.SpannableString.subSequence,Returns a CharSequence that is a subsequence of this sequence.
android.text.SpannableString.subSequence,The subsequence starts with the char value at the specified index and ends with the char value at index end - 1.
android.text.SpannableString.subSequence,The length (in char s) of the returned sequence is end - start so if start == end then an empty sequence is returned.
android.text.SpannableStringBuilder.append,Convenience for append(String.valueOf(text)).
android.text.SpannableStringBuilder.append,Append.
android.text.SpannableStringBuilder.append,Appends the character sequence text and spans what over the appended part. See Spanned for an explanation of what the flags mean.
android.text.SpannableStringBuilder.append,Append.
android.text.SpannableStringBuilder.append,Appends the character sequence text and spans what over the appended part.
android.text.SpannableStringBuilder.append,See Spanned for an explanation of what the flags mean.
android.text.SpannableStringBuilder.append,Convenience for replace(length() length() text start end).
android.text.SpannableStringBuilder.append,Append.
android.text.SpannableStringBuilder.append,Convenience for replace(length() length() text 0 text.length()).
android.text.SpannableStringBuilder.append,Append.
android.text.SpannableStringBuilder.charAt,Return the char at the specified offset within the buffer.
android.text.SpannableStringBuilder.charAt,Char at.
android.text.SpannableStringBuilder.clear,"Convenience for replace(0 length() """" 0 0). Note that this clears the text not the spans; use clearSpans() if you need that."
android.text.SpannableStringBuilder.clear,Clear.
android.text.SpannableStringBuilder.clear,"Convenience for replace(0 length() """" 0 0)."
android.text.SpannableStringBuilder.clear,Note that this clears the text not the spans; use clearSpans() if you need that.
android.text.SpannableStringBuilder.clearSpans,Removes all spans from the Editable as if by calling Spannable.removeSpan(Object) on each of them.
android.text.SpannableStringBuilder.clearSpans,Clear spans.
android.text.SpannableStringBuilder.getSpanEnd,Return the buffer offset of the end of the specified markup object or -1 if it is not attached to this buffer.
android.text.SpannableStringBuilder.getSpanEnd,Get span end.
android.text.SpannableStringBuilder.getSpanFlags,Return the flags of the end of the specified markup object or 0 if it is not attached to this buffer.
android.text.SpannableStringBuilder.getSpanFlags,Get span flags.
android.text.SpannableStringBuilder.getSpanStart,Return the buffer offset of the beginning of the specified markup object or -1 if it is not attached to this buffer.
android.text.SpannableStringBuilder.getSpanStart,Get span start.
android.text.SpannableStringBuilder.getSpans,Return an array of the spans of the specified type that overlap the specified range of the buffer. The kind may be Object.class to get a list of all the spans regardless of type.
android.text.SpannableStringBuilder.getSpans,Get spans.
android.text.SpannableStringBuilder.getSpans,Return an array of the spans of the specified type that overlap the specified range of the buffer.
android.text.SpannableStringBuilder.getSpans,The kind may be Object.class to get a list of all the spans regardless of type.
android.text.SpannableStringBuilder.length,Return the number of chars in the buffer.
android.text.SpannableStringBuilder.length,Length.
android.text.SpannableStringBuilder.setSpan,Mark the specified range of text with the specified object. The flags determine how the span will behave when text is inserted at the start or end of the span's range.
android.text.SpannableStringBuilder.setSpan,Set span.
android.text.SpannableStringBuilder.setSpan,Mark the specified range of text with the specified object.
android.text.SpannableStringBuilder.setSpan,The flags determine how the span will behave when text is inserted at the start or end of the span's range.
android.text.SpannableStringBuilder.toString,Return a String containing a copy of the chars in this buffer.
android.text.SpannableStringBuilder.toString,To string.
android.text.StaticLayout.getLineStart,Return the text offset of the beginning of the specified line ( 0…getLineCount()). If the specified line is equal to the line count returns the length of the text.
android.text.StaticLayout.getLineStart,Get line start.
android.text.StaticLayout.getLineStart,Return the text offset of the beginning of the specified line ( 0…getLineCount()).
android.text.StaticLayout.getLineStart,If the specified line is equal to the line count returns the length of the text.
android.text.TextPaint.set,Copy the fields from tp into this TextPaint including the fields inherited from Paint.
android.text.TextPaint.set,Set.
android.text.TextUtils.copySpansFrom,Copies the spans from the region start...end in source to the region destoff...destoff+end-start in dest. Spans in source that begin before start or end after end but overlap this range are trimmed as if they began at start or ended at end.
android.text.TextUtils.copySpansFrom,Copy spans from.
android.text.TextUtils.copySpansFrom,Copies the spans from the region start...end in source to the region destoff...destoff+end-start in dest.
android.text.TextUtils.copySpansFrom,Spans in source that begin before start or end after end but overlap this range are trimmed as if they began at start or ended at end.
android.text.TextUtils.equals,Returns true if a and b are equal including if they are both null. Note: In platform versions 1.1 and earlier this method only worked well if both the arguments were instances of String.
android.text.TextUtils.equals,Equals.
android.text.TextUtils.equals,Returns true if a and b are equal including if they are both null.
android.text.TextUtils.equals,Note: In platform versions 1.1 and earlier this method only worked well if both the arguments were instances of String.
android.text.TextUtils.getTrimmedLength,Returns the length that the specified CharSequence would have if spaces and ASCII control characters were trimmed from the start and end as by String#trim.
android.text.TextUtils.getTrimmedLength,Get trimmed length.
android.text.TextUtils.htmlEncode,Html-encode the string.
android.text.TextUtils.htmlEncode,Html encode.
android.text.TextUtils.isDigitsOnly,Returns whether the given CharSequence contains only digits.
android.text.TextUtils.isDigitsOnly,Is digits only.
android.text.TextUtils.isEmpty,Returns true if the string is null or 0-length.
android.text.TextUtils.isEmpty,Is empty.
android.text.TextUtils.isGraphic,Returns whether the given CharSequence contains any printable characters.
android.text.TextUtils.isGraphic,Is graphic.
android.text.TextUtils.isGraphic,This method was deprecated in API level 24. Use isGraphic(java.lang.CharSequence) instead. Returns whether this character is a printable character. This does not support non-BMP characters and should not be used.
android.text.TextUtils.isGraphic,Is graphic.
android.text.TextUtils.isGraphic,This method was deprecated in API level 24.
android.text.TextUtils.isGraphic,Use isGraphic(java.lang.CharSequence) instead.
android.text.TextUtils.isGraphic,Returns whether this character is a printable character.
android.text.TextUtils.isGraphic,This does not support non-BMP characters and should not be used.
android.text.TextUtils.join,Returns a string containing the tokens joined by delimiters.
android.text.TextUtils.join,Join.
android.text.TextUtils.join,Returns a string containing the tokens joined by delimiters.
android.text.TextUtils.join,Join.
android.text.TextUtils.split,"Splits a string on a pattern. This method yields the same result as pattern.split(text -1) except that if text.isEmpty() then this method returns an empty array whereas pattern.split("""" -1) would have returned an array with a single """". The -1 means that trailing empty Strings are not removed from the result; Note that whether a leading zero-width match can result in a leading """" depends on whether your app targets an SDK version <= 28 ; see Pattern#split(CharSequence int)."
android.text.TextUtils.split,Split.
android.text.TextUtils.split,Splits a string on a pattern.
android.text.TextUtils.split,"This method yields the same result as pattern.split(text -1) except that if text.isEmpty() then this method returns an empty array whereas pattern.split("""" -1) would have returned an array with a single """"."
android.text.TextUtils.split,"The -1 means that trailing empty Strings are not removed from the result; Note that whether a leading zero-width match can result in a leading """" depends on whether your app targets an SDK version <= 28 ; see Pattern#split(CharSequence int)."
android.text.TextUtils.split,"This method yields the same result as text.split(expression -1) except that if text.isEmpty() then this method returns an empty array whereas """".split(expression -1) would have returned an array with a single """". The -1 means that trailing empty Strings are not removed from the result; for example split(""a"" """" ) returns {""a"" """"}. Note that whether a leading zero-width match can result in a leading """" depends on whether your app targets an SDK version <= 28 ; see Pattern#split(CharSequence int)."
android.text.TextUtils.split,Split.
android.text.TextUtils.split,"This method yields the same result as text.split(expression -1) except that if text.isEmpty() then this method returns an empty array whereas """".split(expression -1) would have returned an array with a single """"."
android.text.TextUtils.split,"The -1 means that trailing empty Strings are not removed from the result; for example split(""a"" """" ) returns {""a"" """"}."
android.text.TextUtils.split,"Note that whether a leading zero-width match can result in a leading """" depends on whether your app targets an SDK version <= 28 ; see Pattern#split(CharSequence int)."
android.text.TextUtils.substring,Create a new String object containing the given range of characters from the source string. This is different than simply calling CharSequence#subSequence(int int) in that it does not preserve any style runs in the source sequence allowing a more efficient implementation.
android.text.TextUtils.substring,Substring.
android.text.TextUtils.substring,Create a new String object containing the given range of characters from the source string.
android.text.TextUtils.substring,This is different than simply calling CharSequence#subSequence(int int) in that it does not preserve any style runs in the source sequence allowing a more efficient implementation.
android.text.TextUtils.writeToParcel,Flatten a CharSequence and whatever styles can be copied across processes into the parcel.
android.text.TextUtils.writeToParcel,Write to parcel.
android.view.accessibility.AccessibilityEvent.appendRecord,Appends an AccessibilityRecord to the end of event records.
android.view.accessibility.AccessibilityEvent.appendRecord,Append record.
android.view.accessibility.AccessibilityEvent.getEventTime,Gets the time in which this event was sent.
android.view.accessibility.AccessibilityEvent.getEventTime,Get event time.
android.view.accessibility.AccessibilityEvent.getEventType,Gets the event type.
android.view.accessibility.AccessibilityEvent.getEventType,Get event type.
android.view.accessibility.AccessibilityEvent.getPackageName,Gets the package name of the source.
android.view.accessibility.AccessibilityEvent.getPackageName,Get package name.
android.view.accessibility.AccessibilityEvent.getRecord,Gets the record at a given index.
android.view.accessibility.AccessibilityEvent.getRecord,Get record.
android.view.accessibility.AccessibilityEvent.getRecordCount,Gets the number of records contained in the event.
android.view.accessibility.AccessibilityEvent.getRecordCount,Get record count.
android.view.accessibility.AccessibilityEvent.obtain,Returns a cached instance if such is available or a new one is created. The returned instance is initialized from the given event.
android.view.accessibility.AccessibilityEvent.obtain,Obtain.
android.view.accessibility.AccessibilityEvent.obtain,Returns a cached instance if such is available or a new one is created.
android.view.accessibility.AccessibilityEvent.obtain,The returned instance is initialized from the given event.
android.view.accessibility.AccessibilityEvent.obtain,Returns a cached instance if such is available or a new one is instantiated.
android.view.accessibility.AccessibilityEvent.obtain,Obtain.
android.view.accessibility.AccessibilityEvent.obtain,Returns a cached instance if such is available or a new one is instantiated with its type property set.
android.view.accessibility.AccessibilityEvent.obtain,Obtain.
android.view.accessibility.AccessibilityEvent.recycle,Recycles an instance back to be reused. Note: You must not touch the object after calling this function.
android.view.accessibility.AccessibilityEvent.recycle,Recycle.
android.view.accessibility.AccessibilityEvent.recycle,Recycles an instance back to be reused.
android.view.accessibility.AccessibilityEvent.recycle,Note: You must not touch the object after calling this function.
android.view.accessibility.AccessibilityEvent.setEventTime,Sets the time in which this event was sent.
android.view.accessibility.AccessibilityEvent.setEventTime,Set event time.
android.view.accessibility.AccessibilityEvent.setPackageName,Sets the package name of the source.
android.view.accessibility.AccessibilityEvent.setPackageName,Set package name.
android.view.accessibility.AccessibilityNodeInfo.addAction,This method was deprecated in API level 21. This has been deprecated for addAction(android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction) Adds an action that can be performed on the node. Note: Cannot be called from an AccessibilityService. This class is made immutable before being delivered to an AccessibilityService.
android.view.accessibility.AccessibilityNodeInfo.addAction,Add action.
android.view.accessibility.AccessibilityNodeInfo.addAction,This method was deprecated in API level 21.
android.view.accessibility.AccessibilityNodeInfo.addAction,This has been deprecated for addAction(android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction) Adds an action that can be performed on the node.
android.view.accessibility.AccessibilityNodeInfo.addAction,Note: Cannot be called from an AccessibilityService.
android.view.accessibility.AccessibilityNodeInfo.addAction,This class is made immutable before being delivered to an AccessibilityService.
android.view.accessibility.AccessibilityNodeInfo.addAction,Adds an action that can be performed on the node. To add a standard action use the static constants on AccessibilityAction. To add a custom action create a new AccessibilityAction by passing in a resource id from your application as the action id and an optional label that describes the action. To override one of the standard actions use as the action id of a standard action id such as ACTION_CLICK and an optional label that describes the action. Note: Cannot be called from an AccessibilityService. This class is made immutable before being delivered to an AccessibilityService.
android.view.accessibility.AccessibilityNodeInfo.addAction,Add action.
android.view.accessibility.AccessibilityNodeInfo.addAction,Adds an action that can be performed on the node.
android.view.accessibility.AccessibilityNodeInfo.addAction,To add a standard action use the static constants on AccessibilityAction.
android.view.accessibility.AccessibilityNodeInfo.addAction,To add a custom action create a new AccessibilityAction by passing in a resource id from your application as the action id and an optional label that describes the action.
android.view.accessibility.AccessibilityNodeInfo.addAction,To override one of the standard actions use as the action id of a standard action id such as ACTION_CLICK and an optional label that describes the action.
android.view.accessibility.AccessibilityNodeInfo.addAction,Note: Cannot be called from an AccessibilityService.
android.view.accessibility.AccessibilityNodeInfo.addAction,This class is made immutable before being delivered to an AccessibilityService.
android.view.accessibility.AccessibilityNodeInfo.findAccessibilityNodeInfosByText,Finds AccessibilityNodeInfo s by text. The match is case insensitive containment. The search is relative to this info i.e. this info is the root of the traversed tree. Note: It is a client responsibility to recycle the received info by calling AccessibilityNodeInfo#recycle() to avoid creating of multiple instances.
android.view.accessibility.AccessibilityNodeInfo.findAccessibilityNodeInfosByText,Find accessibility node infos by text.
android.view.accessibility.AccessibilityNodeInfo.findAccessibilityNodeInfosByText,Finds AccessibilityNodeInfo s by text.
android.view.accessibility.AccessibilityNodeInfo.findAccessibilityNodeInfosByText,The match is case insensitive containment.
android.view.accessibility.AccessibilityNodeInfo.findAccessibilityNodeInfosByText,The search is relative to this info i.e.
android.view.accessibility.AccessibilityNodeInfo.findAccessibilityNodeInfosByText,this info is the root of the traversed tree.
android.view.accessibility.AccessibilityNodeInfo.findAccessibilityNodeInfosByText,Note: It is a client responsibility to recycle the received info by calling AccessibilityNodeInfo#recycle() to avoid creating of multiple instances.
android.view.accessibility.AccessibilityNodeInfo.findFocus,Find the view that has the specified focus type. The search starts from the view represented by this node info.
android.view.accessibility.AccessibilityNodeInfo.findFocus,Find focus.
android.view.accessibility.AccessibilityNodeInfo.findFocus,Find the view that has the specified focus type.
android.view.accessibility.AccessibilityNodeInfo.findFocus,The search starts from the view represented by this node info.
android.view.accessibility.AccessibilityNodeInfo.focusSearch,Searches for the nearest view in the specified direction that can take the input focus.
android.view.accessibility.AccessibilityNodeInfo.focusSearch,Focus search.
android.view.accessibility.AccessibilityNodeInfo.getActions,This method was deprecated in API level 21. Use getActionList(). Gets the actions that can be performed on the node.
android.view.accessibility.AccessibilityNodeInfo.getActions,Get actions.
android.view.accessibility.AccessibilityNodeInfo.getActions,This method was deprecated in API level 21.
android.view.accessibility.AccessibilityNodeInfo.getActions,Use getActionList().
android.view.accessibility.AccessibilityNodeInfo.getActions,Gets the actions that can be performed on the node.
android.view.accessibility.AccessibilityNodeInfo.getChild,Get the child at given index. Note: It is a client responsibility to recycle the received info by calling AccessibilityNodeInfo#recycle() to avoid creating of multiple instances.
android.view.accessibility.AccessibilityNodeInfo.getChild,Get child.
android.view.accessibility.AccessibilityNodeInfo.getChild,Get the child at given index.
android.view.accessibility.AccessibilityNodeInfo.getChild,Note: It is a client responsibility to recycle the received info by calling AccessibilityNodeInfo#recycle() to avoid creating of multiple instances.
android.view.accessibility.AccessibilityNodeInfo.getChildCount,Gets the number of children.
android.view.accessibility.AccessibilityNodeInfo.getChildCount,Get child count.
android.view.accessibility.AccessibilityNodeInfo.getCollectionInfo,Gets the collection info if the node is a collection. A collection child is always a collection item.
android.view.accessibility.AccessibilityNodeInfo.getCollectionInfo,Get collection info.
android.view.accessibility.AccessibilityNodeInfo.getCollectionInfo,Gets the collection info if the node is a collection.
android.view.accessibility.AccessibilityNodeInfo.getCollectionInfo,A collection child is always a collection item.
android.view.accessibility.AccessibilityNodeInfo.getCollectionItemInfo,Gets the collection item info if the node is a collection item. A collection item is always a child of a collection.
android.view.accessibility.AccessibilityNodeInfo.getCollectionItemInfo,Get collection item info.
android.view.accessibility.AccessibilityNodeInfo.getCollectionItemInfo,Gets the collection item info if the node is a collection item.
android.view.accessibility.AccessibilityNodeInfo.getCollectionItemInfo,A collection item is always a child of a collection.
android.view.accessibility.AccessibilityNodeInfo.getLiveRegion,"Gets the node's live region mode. A live region is a node that contains information that is important for the user and when it changes the user should be notified. For example in a login screen with a TextView that displays an ""incorrect password"" notification that view should be marked as a live region with mode View#ACCESSIBILITY_LIVE_REGION_POLITE. It is the responsibility of the accessibility service to monitor AccessibilityEvent#TYPE_WINDOW_CONTENT_CHANGED events indicating changes to live region nodes and their children."
android.view.accessibility.AccessibilityNodeInfo.getLiveRegion,Get live region.
android.view.accessibility.AccessibilityNodeInfo.getLiveRegion,Gets the node's live region mode.
android.view.accessibility.AccessibilityNodeInfo.getLiveRegion,A live region is a node that contains information that is important for the user and when it changes the user should be notified.
android.view.accessibility.AccessibilityNodeInfo.getLiveRegion,"For example in a login screen with a TextView that displays an ""incorrect password"" notification that view should be marked as a live region with mode View#ACCESSIBILITY_LIVE_REGION_POLITE."
android.view.accessibility.AccessibilityNodeInfo.getLiveRegion,It is the responsibility of the accessibility service to monitor AccessibilityEvent#TYPE_WINDOW_CONTENT_CHANGED events indicating changes to live region nodes and their children.
android.view.accessibility.AccessibilityNodeInfo.getParent,Gets the parent. Note: It is a client responsibility to recycle the received info by calling AccessibilityNodeInfo#recycle() to avoid creating of multiple instances.
android.view.accessibility.AccessibilityNodeInfo.getParent,Get parent.
android.view.accessibility.AccessibilityNodeInfo.getParent,Gets the parent.
android.view.accessibility.AccessibilityNodeInfo.getParent,Note: It is a client responsibility to recycle the received info by calling AccessibilityNodeInfo#recycle() to avoid creating of multiple instances.
android.view.accessibility.AccessibilityNodeInfo.getRangeInfo,Gets the range info if this node is a range.
android.view.accessibility.AccessibilityNodeInfo.getRangeInfo,Get range info.
android.view.accessibility.AccessibilityNodeInfo.getWindowId,Gets the id of the window from which the info comes from.
android.view.accessibility.AccessibilityNodeInfo.getWindowId,Get window id.
android.view.accessibility.AccessibilityNodeInfo.performAction,Performs an action on the node. Note: An action can be performed only if the request is made from an AccessibilityService.
android.view.accessibility.AccessibilityNodeInfo.performAction,Perform action.
android.view.accessibility.AccessibilityNodeInfo.performAction,Performs an action on the node.
android.view.accessibility.AccessibilityNodeInfo.performAction,Note: An action can be performed only if the request is made from an AccessibilityService.
android.view.accessibility.AccessibilityNodeInfo.performAction,Performs an action on the node. Note: An action can be performed only if the request is made from an AccessibilityService.
android.view.accessibility.AccessibilityNodeInfo.performAction,Perform action.
android.view.accessibility.AccessibilityNodeInfo.performAction,Performs an action on the node.
android.view.accessibility.AccessibilityNodeInfo.performAction,Note: An action can be performed only if the request is made from an AccessibilityService.
android.view.accessibility.AccessibilityNodeInfo.setCheckable,Sets whether this node is checkable. Note: Cannot be called from an AccessibilityService. This class is made immutable before being delivered to an AccessibilityService.
android.view.accessibility.AccessibilityNodeInfo.setCheckable,Set checkable.
android.view.accessibility.AccessibilityNodeInfo.setCheckable,Sets whether this node is checkable.
android.view.accessibility.AccessibilityNodeInfo.setCheckable,Note: Cannot be called from an AccessibilityService.
android.view.accessibility.AccessibilityNodeInfo.setCheckable,This class is made immutable before being delivered to an AccessibilityService.
android.view.accessibility.AccessibilityNodeInfo.setChecked,Sets whether this node is checked. Note: Cannot be called from an AccessibilityService. This class is made immutable before being delivered to an AccessibilityService.
android.view.accessibility.AccessibilityNodeInfo.setChecked,Set checked.
android.view.accessibility.AccessibilityNodeInfo.setChecked,Sets whether this node is checked.
android.view.accessibility.AccessibilityNodeInfo.setChecked,Note: Cannot be called from an AccessibilityService.
android.view.accessibility.AccessibilityNodeInfo.setChecked,This class is made immutable before being delivered to an AccessibilityService.
android.view.accessibility.AccessibilityNodeInfo.setLiveRegion,Sets the node's live region mode. Note: Cannot be called from an AccessibilityService. This class is made immutable before being delivered to an AccessibilityService.
android.view.accessibility.AccessibilityNodeInfo.setLiveRegion,Set live region.
android.view.accessibility.AccessibilityNodeInfo.setLiveRegion,Sets the node's live region mode.
android.view.accessibility.AccessibilityNodeInfo.setLiveRegion,Note: Cannot be called from an AccessibilityService.
android.view.accessibility.AccessibilityNodeInfo.setLiveRegion,This class is made immutable before being delivered to an AccessibilityService.
android.view.accessibility.AccessibilityNodeInfo.setPassword,Sets whether this node is a password. Note: Cannot be called from an AccessibilityService. This class is made immutable before being delivered to an AccessibilityService.
android.view.accessibility.AccessibilityNodeInfo.setPassword,Set password.
android.view.accessibility.AccessibilityNodeInfo.setPassword,Sets whether this node is a password.
android.view.accessibility.AccessibilityNodeInfo.setPassword,Note: Cannot be called from an AccessibilityService.
android.view.accessibility.AccessibilityNodeInfo.setPassword,This class is made immutable before being delivered to an AccessibilityService.
android.view.accessibility.AccessibilityNodeInfo.setText,Sets the text of this node. Note: Cannot be called from an AccessibilityService. This class is made immutable before being delivered to an AccessibilityService.
android.view.accessibility.AccessibilityNodeInfo.setText,Set text.
android.view.accessibility.AccessibilityNodeInfo.setText,Sets the text of this node.
android.view.accessibility.AccessibilityNodeInfo.setText,Note: Cannot be called from an AccessibilityService.
android.view.accessibility.AccessibilityNodeInfo.setText,This class is made immutable before being delivered to an AccessibilityService.
android.view.accessibility.AccessibilityNodeInfo.setViewIdResourceName,Sets the fully qualified resource name of the source view's id. Note: Cannot be called from an AccessibilityService. This class is made immutable before being delivered to an AccessibilityService.
android.view.accessibility.AccessibilityNodeInfo.setViewIdResourceName,Set view id resource name.
android.view.accessibility.AccessibilityNodeInfo.setViewIdResourceName,Sets the fully qualified resource name of the source view's id.
android.view.accessibility.AccessibilityNodeInfo.setViewIdResourceName,Note: Cannot be called from an AccessibilityService.
android.view.accessibility.AccessibilityNodeInfo.setViewIdResourceName,This class is made immutable before being delivered to an AccessibilityService.
android.view.accessibility.AccessibilityRecord.getAddedCount,Gets the number of added characters.
android.view.accessibility.AccessibilityRecord.getAddedCount,Get added count.
android.view.accessibility.AccessibilityRecord.getClassName,Gets the class name of the source.
android.view.accessibility.AccessibilityRecord.getClassName,Get class name.
android.view.accessibility.AccessibilityRecord.getContentDescription,Gets the description of the source.
android.view.accessibility.AccessibilityRecord.getContentDescription,Get content description.
android.view.accessibility.AccessibilityRecord.getCurrentItemIndex,Gets the index of the source in the list of items the can be visited.
android.view.accessibility.AccessibilityRecord.getCurrentItemIndex,Get current item index.
android.view.accessibility.AccessibilityRecord.getFromIndex,Gets the index of the first character of the changed sequence or the beginning of a text selection or the index of the first visible item when scrolling.
android.view.accessibility.AccessibilityRecord.getFromIndex,Get from index.
android.view.accessibility.AccessibilityRecord.getItemCount,Gets the number of items that can be visited.
android.view.accessibility.AccessibilityRecord.getItemCount,Get item count.
android.view.accessibility.AccessibilityRecord.getMaxScrollX,Gets the max scroll offset of the source left edge in pixels.
android.view.accessibility.AccessibilityRecord.getMaxScrollX,Get max scroll x.
android.view.accessibility.AccessibilityRecord.getMaxScrollY,Gets the max scroll offset of the source top edge in pixels.
android.view.accessibility.AccessibilityRecord.getMaxScrollY,Get max scroll y.
android.view.accessibility.AccessibilityRecord.getParcelableData,Gets the Parcelable data.
android.view.accessibility.AccessibilityRecord.getParcelableData,Get parcelable data.
android.view.accessibility.AccessibilityRecord.getRemovedCount,Gets the number of removed characters.
android.view.accessibility.AccessibilityRecord.getRemovedCount,Get removed count.
android.view.accessibility.AccessibilityRecord.getScrollX,Gets the scroll offset of the source left edge in pixels.
android.view.accessibility.AccessibilityRecord.getScrollX,Get scroll x.
android.view.accessibility.AccessibilityRecord.getScrollY,Gets the scroll offset of the source top edge in pixels.
android.view.accessibility.AccessibilityRecord.getScrollY,Get scroll y.
android.view.accessibility.AccessibilityRecord.getSource,Gets the AccessibilityNodeInfo of the event source. Note: It is a client responsibility to recycle the received info by calling AccessibilityNodeInfo#recycle() to avoid creating of multiple instances.
android.view.accessibility.AccessibilityRecord.getSource,Get source.
android.view.accessibility.AccessibilityRecord.getSource,Gets the AccessibilityNodeInfo of the event source.
android.view.accessibility.AccessibilityRecord.getSource,Note: It is a client responsibility to recycle the received info by calling AccessibilityNodeInfo#recycle() to avoid creating of multiple instances.
android.view.accessibility.AccessibilityRecord.getText,Gets the text of the event. The index in the list represents the priority of the text. Specifically the lower the index the higher the priority.
android.view.accessibility.AccessibilityRecord.getText,Get text.
android.view.accessibility.AccessibilityRecord.getText,Gets the text of the event.
android.view.accessibility.AccessibilityRecord.getText,The index in the list represents the priority of the text.
android.view.accessibility.AccessibilityRecord.getText,Specifically the lower the index the higher the priority.
android.view.accessibility.AccessibilityRecord.getToIndex,Gets the index of text selection end or the index of the last visible item when scrolling.
android.view.accessibility.AccessibilityRecord.getToIndex,Get to index.
android.view.accessibility.AccessibilityRecord.getWindowId,Gets the id of the window from which the event comes from.
android.view.accessibility.AccessibilityRecord.getWindowId,Get window id.
android.view.accessibility.AccessibilityRecord.isChecked,Gets if the source is checked.
android.view.accessibility.AccessibilityRecord.isChecked,Is checked.
android.view.accessibility.AccessibilityRecord.isEnabled,Gets if the source is enabled.
android.view.accessibility.AccessibilityRecord.isEnabled,Is enabled.
android.view.accessibility.AccessibilityRecord.isFullScreen,Gets if the source is taking the entire screen.
android.view.accessibility.AccessibilityRecord.isFullScreen,Is full screen.
android.view.accessibility.AccessibilityRecord.isPassword,Gets if the source is a password field.
android.view.accessibility.AccessibilityRecord.isPassword,Is password.
android.view.accessibility.AccessibilityRecord.isScrollable,Gets if the source is scrollable.
android.view.accessibility.AccessibilityRecord.isScrollable,Is scrollable.
android.view.accessibility.AccessibilityRecord.setAddedCount,Sets the number of added characters.
android.view.accessibility.AccessibilityRecord.setAddedCount,Set added count.
android.view.accessibility.AccessibilityRecord.setBeforeText,Sets the text before a change.
android.view.accessibility.AccessibilityRecord.setBeforeText,Set before text.
android.view.accessibility.AccessibilityRecord.setChecked,Sets if the source is checked.
android.view.accessibility.AccessibilityRecord.setChecked,Set checked.
android.view.accessibility.AccessibilityRecord.setClassName,Sets the class name of the source.
android.view.accessibility.AccessibilityRecord.setClassName,Set class name.
android.view.accessibility.AccessibilityRecord.setContentDescription,Sets the description of the source.
android.view.accessibility.AccessibilityRecord.setContentDescription,Set content description.
android.view.accessibility.AccessibilityRecord.setCurrentItemIndex,Sets the index of the source in the list of items that can be visited.
android.view.accessibility.AccessibilityRecord.setCurrentItemIndex,Set current item index.
android.view.accessibility.AccessibilityRecord.setEnabled,Sets if the source is enabled.
android.view.accessibility.AccessibilityRecord.setEnabled,Set enabled.
android.view.accessibility.AccessibilityRecord.setFullScreen,Sets if the source is taking the entire screen.
android.view.accessibility.AccessibilityRecord.setFullScreen,Set full screen.
android.view.accessibility.AccessibilityRecord.setMaxScrollX,Sets the max scroll offset of the source left edge in pixels.
android.view.accessibility.AccessibilityRecord.setMaxScrollX,Set max scroll x.
android.view.accessibility.AccessibilityRecord.setMaxScrollY,Sets the max scroll offset of the source top edge in pixels.
android.view.accessibility.AccessibilityRecord.setMaxScrollY,Set max scroll y.
android.view.accessibility.AccessibilityRecord.setParcelableData,Sets the Parcelable data of the event.
android.view.accessibility.AccessibilityRecord.setParcelableData,Set parcelable data.
android.view.accessibility.AccessibilityRecord.setPassword,Sets if the source is a password field.
android.view.accessibility.AccessibilityRecord.setPassword,Set password.
android.view.accessibility.AccessibilityRecord.setRemovedCount,Sets the number of removed characters.
android.view.accessibility.AccessibilityRecord.setRemovedCount,Set removed count.
android.view.accessibility.AccessibilityRecord.setScrollX,Sets the scroll offset of the source left edge in pixels.
android.view.accessibility.AccessibilityRecord.setScrollX,Set scroll x.
android.view.accessibility.AccessibilityRecord.setScrollY,Sets the scroll offset of the source top edge in pixels.
android.view.accessibility.AccessibilityRecord.setScrollY,Set scroll y.
android.text.style.ClickableSpan.onClick,Performs the click action associated with this span.
android.text.style.ClickableSpan.onClick,On click.
android.text.style.ClickableSpan.updateDrawState,Makes the text underlined and in the link color.
android.text.style.ClickableSpan.updateDrawState,Update draw state.
android.text.style.ImageSpan.getDrawable,Your subclass must implement this method to provide the bitmap to be drawn. The dimensions of the bitmap must be the same from each call to the next.
android.text.style.ImageSpan.getDrawable,Get drawable.
android.text.style.ImageSpan.getDrawable,Your subclass must implement this method to provide the bitmap to be drawn.
android.text.style.ImageSpan.getDrawable,The dimensions of the bitmap must be the same from each call to the next.
android.provider.DocumentsContract.buildChildDocumentsUriUsingTree,Build URI representing the children of the target directory in a document provider. When queried a provider will return zero or more rows with columns defined by Document. However instead of directly accessing the target directory the returned URI will leverage access granted through a subtree URI typically returned by Intent#ACTION_OPEN_DOCUMENT_TREE. The target directory must be a descendant (child grandchild etc) of the subtree. This is typically used to access documents under a user-selected directory tree since it doesn't require the user to separately confirm each new document access.
android.provider.DocumentsContract.buildChildDocumentsUriUsingTree,Build child documents uri using tree.
android.provider.DocumentsContract.buildChildDocumentsUriUsingTree,Build URI representing the children of the target directory in a document provider.
android.provider.DocumentsContract.buildChildDocumentsUriUsingTree,When queried a provider will return zero or more rows with columns defined by Document.
android.provider.DocumentsContract.buildChildDocumentsUriUsingTree,However instead of directly accessing the target directory the returned URI will leverage access granted through a subtree URI typically returned by Intent#ACTION_OPEN_DOCUMENT_TREE.
android.provider.DocumentsContract.buildChildDocumentsUriUsingTree,The target directory must be a descendant (child grandchild etc) of the subtree.
android.provider.DocumentsContract.buildChildDocumentsUriUsingTree,This is typically used to access documents under a user-selected directory tree since it doesn't require the user to separately confirm each new document access.
android.provider.DocumentsContract.buildDocumentUriUsingTree,Build URI representing the target Document#COLUMN_DOCUMENT_ID in a document provider. When queried a provider will return a single row with columns defined by Document. However instead of directly accessing the target document the returned URI will leverage access granted through a subtree URI typically returned by Intent#ACTION_OPEN_DOCUMENT_TREE. The target document must be a descendant (child grandchild etc) of the subtree. This is typically used to access documents under a user-selected directory tree since it doesn't require the user to separately confirm each new document access.
android.provider.DocumentsContract.buildDocumentUriUsingTree,Build document uri using tree.
android.provider.DocumentsContract.buildDocumentUriUsingTree,Build URI representing the target Document#COLUMN_DOCUMENT_ID in a document provider.
android.provider.DocumentsContract.buildDocumentUriUsingTree,When queried a provider will return a single row with columns defined by Document.
android.provider.DocumentsContract.buildDocumentUriUsingTree,However instead of directly accessing the target document the returned URI will leverage access granted through a subtree URI typically returned by Intent#ACTION_OPEN_DOCUMENT_TREE.
android.provider.DocumentsContract.buildDocumentUriUsingTree,The target document must be a descendant (child grandchild etc) of the subtree.
android.provider.DocumentsContract.buildDocumentUriUsingTree,This is typically used to access documents under a user-selected directory tree since it doesn't require the user to separately confirm each new document access.
android.provider.DocumentsContract.createDocument,Create a new document with given MIME type and display name.
android.provider.DocumentsContract.createDocument,Create document.
android.provider.DocumentsContract.deleteDocument,Delete the given document.
android.provider.DocumentsContract.deleteDocument,Delete document.
android.provider.DocumentsContract.getDocumentId,Extract the Document#COLUMN_DOCUMENT_ID from the given URI.
android.provider.DocumentsContract.getDocumentId,Get document id.
android.provider.DocumentsContract.getTreeDocumentId,Extract the via Document#COLUMN_DOCUMENT_ID from the given URI.
android.provider.DocumentsContract.getTreeDocumentId,Get tree document id.
android.provider.DocumentsContract.isDocumentUri,Test if the given URI represents a Document backed by a DocumentsProvider.
android.provider.DocumentsContract.isDocumentUri,Is document uri.
android.provider.DocumentsContract.renameDocument,Change the display name of an existing document. If the underlying provider needs to create a new Document#COLUMN_DOCUMENT_ID to represent the updated display name that new document is returned and the original document is no longer valid. Otherwise the original document is returned.
android.provider.DocumentsContract.renameDocument,Rename document.
android.provider.DocumentsContract.renameDocument,Change the display name of an existing document.
android.provider.DocumentsContract.renameDocument,If the underlying provider needs to create a new Document#COLUMN_DOCUMENT_ID to represent the updated display name that new document is returned and the original document is no longer valid.
android.provider.DocumentsContract.renameDocument,Otherwise the original document is returned.
android.provider.SearchRecentSuggestions.clearHistory,"Completely delete the history. Use this call to implement a ""clear history"" UI. Any application that implements search suggestions based on previous actions (such as recent queries page/items viewed etc.) should provide a way for the user to clear the history. This gives the user a measure of privacy if they do not wish for their recent searches to be replayed by other users of the device (via suggestions)."
android.provider.SearchRecentSuggestions.clearHistory,Clear history.
android.provider.SearchRecentSuggestions.clearHistory,Completely delete the history.
android.provider.SearchRecentSuggestions.clearHistory,"Use this call to implement a ""clear history"" UI."
android.provider.SearchRecentSuggestions.clearHistory,Any application that implements search suggestions based on previous actions (such as recent queries page/items viewed etc.) should provide a way for the user to clear the history.
android.provider.SearchRecentSuggestions.clearHistory,This gives the user a measure of privacy if they do not wish for their recent searches to be replayed by other users of the device (via suggestions).
android.view.animation.Animation.cancel,Cancel the animation. Cancelling an animation invokes the animation listener if set to notify the end of the animation. If you cancel an animation manually you must call reset() before starting the animation again.
android.view.animation.Animation.cancel,Cancel.
android.view.animation.Animation.cancel,Cancel the animation.
android.view.animation.Animation.cancel,Cancelling an animation invokes the animation listener if set to notify the end of the animation.
android.view.animation.Animation.cancel,If you cancel an animation manually you must call reset() before starting the animation again.
android.view.animation.Animation.getDuration,How long this animation should last Related XML Attributes: android:duration.
android.view.animation.Animation.getDuration,Get duration.
android.view.animation.Animation.getTransformation,Gets the transformation to apply at a specified point in time. Implementations of this method should always replace the specified Transformation or document they are doing otherwise.
android.view.animation.Animation.getTransformation,Get transformation.
android.view.animation.Animation.getTransformation,Gets the transformation to apply at a specified point in time.
android.view.animation.Animation.getTransformation,Implementations of this method should always replace the specified Transformation or document they are doing otherwise.
android.view.animation.Animation.getTransformation,Gets the transformation to apply at a specified point in time. Implementations of this method should always replace the specified Transformation or document they are doing otherwise.
android.view.animation.Animation.getTransformation,Get transformation.
android.view.animation.Animation.getTransformation,Gets the transformation to apply at a specified point in time.
android.view.animation.Animation.getTransformation,Implementations of this method should always replace the specified Transformation or document they are doing otherwise.
android.view.animation.Animation.hasEnded,Indicates whether this animation has ended or not.
android.view.animation.Animation.hasEnded,Has ended.
android.view.animation.Animation.hasStarted,Indicates whether this animation has started or not.
android.view.animation.Animation.hasStarted,Has started.
android.view.animation.Animation.initialize,Initialize this animation with the dimensions of the object being animated as well as the objects parents. (This is to support animation sizes being specified relative to these dimensions.) Objects that interpret Animations should call this method when the sizes of the object being animated and its parent are known and before calling getTransformation(long Transformation).
android.view.animation.Animation.initialize,Initialize.
android.view.animation.Animation.initialize,Initialize this animation with the dimensions of the object being animated as well as the objects parents.
android.view.animation.Animation.initialize,(This is to support animation sizes being specified relative to these dimensions.) Objects that interpret Animations should call this method when the sizes of the object being animated and its parent are known and before calling getTransformation(long Transformation).
android.view.animation.Animation.reset,Reset the initialization state of this animation.
android.view.animation.Animation.reset,Reset.
android.view.animation.Animation.setDuration,How long this animation should last. The duration cannot be negative. Related XML Attributes: android:duration.
android.view.animation.Animation.setDuration,Set duration.
android.view.animation.Animation.setDuration,How long this animation should last.
android.view.animation.Animation.setDuration,The duration cannot be negative.
android.view.animation.Animation.setDuration,Related XML Attributes: android:duration.
android.view.animation.Animation.setFillAfter,If fillAfter is true the transformation that this animation performed will persist when it is finished. Defaults to false if not set. Note that this applies to individual animations and when using an AnimationSet to chain animations. Related XML Attributes: android:fillAfter.
android.view.animation.Animation.setFillAfter,Set fill after.
android.view.animation.Animation.setFillAfter,If fillAfter is true the transformation that this animation performed will persist when it is finished.
android.view.animation.Animation.setFillAfter,Defaults to false if not set.
android.view.animation.Animation.setFillAfter,Note that this applies to individual animations and when using an AnimationSet to chain animations.
android.view.animation.Animation.setFillAfter,Related XML Attributes: android:fillAfter.
android.view.animation.Animation.setFillBefore,If fillBefore is true this animation will apply its transformation before the start time of the animation. Defaults to true if setFillEnabled(boolean) is not set to true. Note that this applies when using an AnimationSet to chain animations. The transformation is not applied before the AnimationSet itself starts. Related XML Attributes: android:fillBefore.
android.view.animation.Animation.setFillBefore,Set fill before.
android.view.animation.Animation.setFillBefore,If fillBefore is true this animation will apply its transformation before the start time of the animation.
android.view.animation.Animation.setFillBefore,Defaults to true if setFillEnabled(boolean) is not set to true.
android.view.animation.Animation.setFillBefore,Note that this applies when using an AnimationSet to chain animations.
android.view.animation.Animation.setFillBefore,The transformation is not applied before the AnimationSet itself starts.
android.view.animation.Animation.setFillBefore,Related XML Attributes: android:fillBefore.
android.view.animation.Animation.setFillEnabled,If fillEnabled is true the animation will apply the value of fillBefore. Otherwise fillBefore is ignored and the animation transformation is always applied until the animation ends. Related XML Attributes: android:fillEnabled.
android.view.animation.Animation.setFillEnabled,Set fill enabled.
android.view.animation.Animation.setFillEnabled,If fillEnabled is true the animation will apply the value of fillBefore.
android.view.animation.Animation.setFillEnabled,Otherwise fillBefore is ignored and the animation transformation is always applied until the animation ends.
android.view.animation.Animation.setFillEnabled,Related XML Attributes: android:fillEnabled.
android.view.animation.Animation.setInterpolator,Sets the acceleration curve for this animation. The interpolator is loaded as a resource from the specified context. Related XML Attributes: android:interpolator.
android.view.animation.Animation.setInterpolator,Set interpolator.
android.view.animation.Animation.setInterpolator,Sets the acceleration curve for this animation.
android.view.animation.Animation.setInterpolator,The interpolator is loaded as a resource from the specified context.
android.view.animation.Animation.setInterpolator,Related XML Attributes: android:interpolator.
android.view.animation.Animation.setInterpolator,Sets the acceleration curve for this animation. Defaults to a linear interpolation. Related XML Attributes: android:interpolator.
android.view.animation.Animation.setInterpolator,Set interpolator.
android.view.animation.Animation.setInterpolator,Sets the acceleration curve for this animation.
android.view.animation.Animation.setInterpolator,Defaults to a linear interpolation.
android.view.animation.Animation.setInterpolator,Related XML Attributes: android:interpolator.
android.view.animation.Animation.setStartOffset,When this animation should start relative to the start time. This is most useful when composing complex animations using an AnimationSet where some of the animations components start at different times. Related XML Attributes: android:startOffset.
android.view.animation.Animation.setStartOffset,Set start offset.
android.view.animation.Animation.setStartOffset,When this animation should start relative to the start time.
android.view.animation.Animation.setStartOffset,This is most useful when composing complex animations using an AnimationSet where some of the animations components start at different times.
android.view.animation.Animation.setStartOffset,Related XML Attributes: android:startOffset.
android.view.animation.Animation.setStartTime,When this animation should start. When the start time is set to START_ON_FIRST_FRAME the animation will start the first time getTransformation(long android.view.animation.Transformation) is invoked. The time passed to this method should be obtained by calling AnimationUtils#currentAnimationTimeMillis() instead of System#currentTimeMillis().
android.view.animation.Animation.setStartTime,Set start time.
android.view.animation.Animation.setStartTime,When this animation should start.
android.view.animation.Animation.setStartTime,When the start time is set to START_ON_FIRST_FRAME the animation will start the first time getTransformation(long android.view.animation.Transformation) is invoked.
android.view.animation.Animation.setStartTime,The time passed to this method should be obtained by calling AnimationUtils#currentAnimationTimeMillis() instead of System#currentTimeMillis().
android.view.animation.Animation.start,Convenience method to start the animation the first time getTransformation(long android.view.animation.Transformation) is invoked.
android.view.animation.Animation.start,Start.
android.view.animation.Animation.startNow,Convenience method to start the animation at the current time in milliseconds.
android.view.animation.Animation.startNow,Start now.
android.view.animation.AnimationSet.addAnimation,Add a child animation to this animation set. The transforms of the child animations are applied in the order that they were added.
android.view.animation.AnimationSet.addAnimation,Add animation.
android.view.animation.AnimationSet.addAnimation,Add a child animation to this animation set.
android.view.animation.AnimationSet.addAnimation,The transforms of the child animations are applied in the order that they were added.
android.view.animation.AnimationSet.getDuration,The duration of an AnimationSet is defined to be the duration of the longest child animation.
android.view.animation.AnimationSet.getDuration,Get duration.
android.view.animation.AnimationSet.setDuration,Sets the duration of every child animation.
android.view.animation.AnimationSet.setDuration,Set duration.
android.view.animation.AnimationUtils.currentAnimationTimeMillis,"Returns the current animation time in milliseconds. This time should be used when invoking Animation#setStartTime(long). Refer to SystemClock for more information about the different available clocks. The clock used by this method is not the ""wall"" clock (it is not System#currentTimeMillis )."
android.view.animation.AnimationUtils.currentAnimationTimeMillis,Current animation time millis.
android.view.animation.AnimationUtils.currentAnimationTimeMillis,Returns the current animation time in milliseconds.
android.view.animation.AnimationUtils.currentAnimationTimeMillis,This time should be used when invoking Animation#setStartTime(long).
android.view.animation.AnimationUtils.currentAnimationTimeMillis,Refer to SystemClock for more information about the different available clocks.
android.view.animation.AnimationUtils.currentAnimationTimeMillis,"The clock used by this method is not the ""wall"" clock (it is not System#currentTimeMillis )."
android.view.animation.AnimationUtils.loadAnimation,Loads an Animation object from a resource.
android.view.animation.AnimationUtils.loadAnimation,Load animation.
android.view.animation.AnimationUtils.loadInterpolator,Loads an Interpolator object from a resource.
android.view.animation.AnimationUtils.loadInterpolator,Load interpolator.
android.view.animation.AnimationUtils.loadLayoutAnimation,Loads a LayoutAnimationController object from a resource.
android.view.animation.AnimationUtils.loadLayoutAnimation,Load layout animation.
android.view.animation.LayoutAnimationController.setDelay,Sets the delay as a fraction of the animation duration by which the children's animations are offset. The general formula is:.
android.view.animation.LayoutAnimationController.setDelay,Set delay.
android.view.animation.LayoutAnimationController.setDelay,Sets the delay as a fraction of the animation duration by which the children's animations are offset.
android.view.animation.LayoutAnimationController.setDelay,The general formula is:.
android.view.animation.LayoutAnimationController.setOrder,Sets the order used to compute the delay of each child's animation. Related XML Attributes: android:animationOrder.
android.view.animation.LayoutAnimationController.setOrder,Set order.
android.view.animation.LayoutAnimationController.setOrder,Sets the order used to compute the delay of each child's animation.
android.view.animation.LayoutAnimationController.setOrder,Related XML Attributes: android:animationOrder.
android.view.animation.Transformation.setAlpha,Sets the degree of transparency.
android.view.animation.Transformation.setAlpha,Set alpha.
android.util.Base64.decode,Decode the Base64-encoded data in input and return the data in a new byte array. The padding '=' characters at the end are considered optional but if any are present there must be the correct number of them.
android.util.Base64.decode,Decode.
android.util.Base64.decode,Decode the Base64-encoded data in input and return the data in a new byte array.
android.util.Base64.decode,The padding '=' characters at the end are considered optional but if any are present there must be the correct number of them.
android.util.Base64.decode,Decode the Base64-encoded data in input and return the data in a new byte array. The padding '=' characters at the end are considered optional but if any are present there must be the correct number of them.
android.util.Base64.decode,Decode.
android.util.Base64.decode,Decode the Base64-encoded data in input and return the data in a new byte array.
android.util.Base64.decode,The padding '=' characters at the end are considered optional but if any are present there must be the correct number of them.
android.util.Base64.decode,Decode the Base64-encoded data in input and return the data in a new byte array. The padding '=' characters at the end are considered optional but if any are present there must be the correct number of them.
android.util.Base64.decode,Decode.
android.util.Base64.decode,Decode the Base64-encoded data in input and return the data in a new byte array.
android.util.Base64.decode,The padding '=' characters at the end are considered optional but if any are present there must be the correct number of them.
android.util.Base64.encode,Base64-encode the given data and return a newly allocated byte[] with the result.
android.util.Base64.encode,Encode.
android.util.Base64.encode,Base64-encode the given data and return a newly allocated byte[] with the result.
android.util.Base64.encode,Encode.
android.util.Base64.encodeToString,Base64-encode the given data and return a newly allocated String with the result.
android.util.Base64.encodeToString,Encode to string.
android.util.Base64.encodeToString,Base64-encode the given data and return a newly allocated String with the result.
android.util.Base64.encodeToString,Encode to string.
android.util.Base64OutputStream.close,Closes this output stream and releases any system resources associated with the stream. The close method of FilterOutputStream calls its flush method and then calls the close method of its underlying output stream.
android.util.Base64OutputStream.close,Close.
android.util.Base64OutputStream.close,Closes this output stream and releases any system resources associated with the stream.
android.util.Base64OutputStream.close,The close method of FilterOutputStream calls its flush method and then calls the close method of its underlying output stream.
android.util.Base64OutputStream.write,Writes len bytes from the specified byte array starting at offset off to this output stream. The write method of FilterOutputStream calls the write method of one argument on each byte to output. Note that this method does not call the write method of its underlying input stream with the same arguments. Subclasses of FilterOutputStream should provide a more efficient implementation of this method.
android.util.Base64OutputStream.write,Write.
android.util.Base64OutputStream.write,Writes len bytes from the specified byte array starting at offset off to this output stream.
android.util.Base64OutputStream.write,The write method of FilterOutputStream calls the write method of one argument on each byte to output.
android.util.Base64OutputStream.write,Note that this method does not call the write method of its underlying input stream with the same arguments.
android.util.Base64OutputStream.write,Subclasses of FilterOutputStream should provide a more efficient implementation of this method.
android.util.Base64OutputStream.write,Writes the specified byte to this output stream. The write method of FilterOutputStream calls the write method of its underlying output stream that is it performs out.write(b). Implements the abstract write method of OutputStream.
android.util.Base64OutputStream.write,Write.
android.util.Base64OutputStream.write,Writes the specified byte to this output stream.
android.util.Base64OutputStream.write,The write method of FilterOutputStream calls the write method of its underlying output stream that is it performs out.write(b).
android.util.Base64OutputStream.write,Implements the abstract write method of OutputStream.
android.util.JsonReader.beginArray,Consumes the next token from the JSON stream and asserts that it is the beginning of a new array.
android.util.JsonReader.beginArray,Begin array.
android.util.JsonReader.beginObject,Consumes the next token from the JSON stream and asserts that it is the beginning of a new object.
android.util.JsonReader.beginObject,Begin object.
android.util.JsonReader.close,Closes this JSON reader and the underlying Reader.
android.util.JsonReader.close,Close.
android.util.JsonReader.endArray,Consumes the next token from the JSON stream and asserts that it is the end of the current array.
android.util.JsonReader.endArray,End array.
android.util.JsonReader.hasNext,Returns true if the current array or object has another element.
android.util.JsonReader.hasNext,Has next.
android.util.JsonReader.nextName,Returns the next token a JsonToken#NAME and consumes it.
android.util.JsonReader.nextName,Next name.
android.util.JsonReader.nextString,Returns the JsonToken#STRING value of the next token consuming it. If the next token is a number this method will return its string form.
android.util.JsonReader.nextString,Next string.
android.util.JsonReader.nextString,Returns the JsonToken#STRING value of the next token consuming it.
android.util.JsonReader.nextString,If the next token is a number this method will return its string form.
android.util.JsonReader.peek,Returns the type of the next token without consuming it.
android.util.JsonReader.peek,Peek.
android.util.JsonReader.skipValue,Skips the next value recursively. If it is an object or array all nested elements are skipped. This method is intended for use when the JSON token stream contains unrecognized or unhandled values.
android.util.JsonReader.skipValue,Skip value.
android.util.JsonReader.skipValue,Skips the next value recursively.
android.util.JsonReader.skipValue,If it is an object or array all nested elements are skipped.
android.util.JsonReader.skipValue,This method is intended for use when the JSON token stream contains unrecognized or unhandled values.
android.util.JsonWriter.beginArray,Begins encoding a new array. Each call to this method must be paired with a call to endArray().
android.util.JsonWriter.beginArray,Begin array.
android.util.JsonWriter.beginArray,Begins encoding a new array.
android.util.JsonWriter.beginArray,Each call to this method must be paired with a call to endArray().
android.util.JsonWriter.beginObject,Begins encoding a new object. Each call to this method must be paired with a call to endObject().
android.util.JsonWriter.beginObject,Begin object.
android.util.JsonWriter.beginObject,Begins encoding a new object.
android.util.JsonWriter.beginObject,Each call to this method must be paired with a call to endObject().
android.util.JsonWriter.close,Flushes and closes this writer and the underlying Writer.
android.util.JsonWriter.close,Close.
android.util.JsonWriter.endArray,Ends encoding the current array.
android.util.JsonWriter.endArray,End array.
android.util.JsonWriter.endObject,Ends encoding the current object.
android.util.JsonWriter.endObject,End object.
android.util.JsonWriter.name,Encodes the property name.
android.util.JsonWriter.name,Name.
android.util.JsonWriter.nullValue,Encodes null.
android.util.JsonWriter.nullValue,Null value.
android.util.JsonWriter.value,Encodes value.
android.util.JsonWriter.value,Value.
android.util.JsonWriter.value,Encodes value.
android.util.JsonWriter.value,Value.
android.util.JsonWriter.value,Encodes value.
android.util.JsonWriter.value,Value.
android.util.JsonWriter.value,Encodes value.
android.util.JsonWriter.value,Value.
android.util.JsonWriter.value,Encodes value.
android.util.JsonWriter.value,Value.
android.util.Log.d,Send a DEBUG log message and log the exception.
android.util.Log.d,D.
android.util.Log.d,Send a DEBUG log message.
android.util.Log.d,D.
android.util.Log.e,Send an ERROR log message.
android.util.Log.e,E.
android.util.Log.e,Send a ERROR log message and log the exception.
android.util.Log.e,E.
android.util.Log.getStackTraceString,Handy function to get a loggable stack trace from a Throwable.
android.util.Log.getStackTraceString,Get stack trace string.
android.util.Log.i,Send a INFO log message and log the exception.
android.util.Log.i,I.
android.util.Log.i,Send an INFO log message.
android.util.Log.i,I.
android.util.Log.isLoggable,Checks to see whether or not a log for the specified tag is loggable at the specified level. The default level of any tag is set to INFO. This means that any level above and including INFO will be logged. Before you make any calls to a logging method you should check to see if your tag should be logged. You can change the default level by setting a system property: 'setprop log.tag.<YOUR_LOG_TAG> <LEVEL>' Where level is either VERBOSE DEBUG INFO WARN ERROR or ASSERT. You can also create a local.prop file that with the following in it: 'log.tag.<YOUR_LOG_TAG>=<LEVEL>' and place that in /data/local.prop.
android.util.Log.isLoggable,Is loggable.
android.util.Log.isLoggable,Checks to see whether or not a log for the specified tag is loggable at the specified level.
android.util.Log.isLoggable,The default level of any tag is set to INFO.
android.util.Log.isLoggable,This means that any level above and including INFO will be logged.
android.util.Log.isLoggable,Before you make any calls to a logging method you should check to see if your tag should be logged.
android.util.Log.isLoggable,You can change the default level by setting a system property: 'setprop log.tag.<YOUR_LOG_TAG> <LEVEL>' Where level is either VERBOSE DEBUG INFO WARN ERROR or ASSERT.
android.util.Log.isLoggable,You can also create a local.prop file that with the following in it: 'log.tag.<YOUR_LOG_TAG>=<LEVEL>' and place that in /data/local.prop.
android.util.Log.println,Low-level logging call.
android.util.Log.println,Println.
android.util.Log.v,Send a VERBOSE log message.
android.util.Log.v,V.
android.util.Log.v,Send a VERBOSE log message and log the exception.
android.util.Log.v,V.
android.util.Log.w,Send a WARN log message and log the exception.
android.util.Log.w,W.
android.util.Log.w,Send a WARN log message and log the exception.
android.util.Log.w,W.
android.util.Log.w,Send a WARN log message.
android.util.Log.w,W.
android.util.Log.wtf,What a Terrible Failure: Report a condition that should never happen. The error will always be logged at level ASSERT with the call stack. Depending on system configuration a report may be added to the DropBoxManager and/or the process may be terminated immediately with an error dialog.
android.util.Log.wtf,Wtf.
android.util.Log.wtf,What a Terrible Failure: Report a condition that should never happen.
android.util.Log.wtf,The error will always be logged at level ASSERT with the call stack.
android.util.Log.wtf,Depending on system configuration a report may be added to the DropBoxManager and/or the process may be terminated immediately with an error dialog.
android.util.Log.wtf,What a Terrible Failure: Report an exception that should never happen. Similar to wtf(java.lang.String java.lang.String) with an exception to log.
android.util.Log.wtf,Wtf.
android.util.Log.wtf,What a Terrible Failure: Report an exception that should never happen.
android.util.Log.wtf,Similar to wtf(java.lang.String java.lang.String) with an exception to log.
android.util.Log.wtf,What a Terrible Failure: Report an exception that should never happen. Similar to wtf(java.lang.String java.lang.Throwable) with a message as well.
android.util.Log.wtf,Wtf.
android.util.Log.wtf,What a Terrible Failure: Report an exception that should never happen.
android.util.Log.wtf,Similar to wtf(java.lang.String java.lang.Throwable) with a message as well.
android.transition.Transition.addTarget,Sets the target view instances that this Transition is interested in animating. By default there are no targets and a Transition will listen for changes on every view in the hierarchy below the sceneRoot of the Scene being transitioned into. Setting targets constrains the Transition to only listen for and act on these views. All other views will be ignored. The target list is like the targetId list except this list specifies the actual View instances not the ids of the views. This is an important distinction when scene changes involve view hierarchies which have been inflated separately; different views may share the same id but not actually be the same instance. If the transition should treat those views as the same then addTarget(int) should be used instead of addTarget(android.view.View). If on the other hand scene changes involve changes all within the same view hierarchy among views which do not necessarily have ids set on them then the target list of views may be more convenient.
android.transition.Transition.addTarget,Add target.
android.transition.Transition.addTarget,Sets the target view instances that this Transition is interested in animating.
android.transition.Transition.addTarget,By default there are no targets and a Transition will listen for changes on every view in the hierarchy below the sceneRoot of the Scene being transitioned into.
android.transition.Transition.addTarget,Setting targets constrains the Transition to only listen for and act on these views.
android.transition.Transition.addTarget,All other views will be ignored.
android.transition.Transition.addTarget,The target list is like the targetId list except this list specifies the actual View instances not the ids of the views.
android.transition.Transition.addTarget,This is an important distinction when scene changes involve view hierarchies which have been inflated separately; different views may share the same id but not actually be the same instance.
android.transition.Transition.addTarget,If the transition should treat those views as the same then addTarget(int) should be used instead of addTarget(android.view.View).
android.transition.Transition.addTarget,If on the other hand scene changes involve changes all within the same view hierarchy among views which do not necessarily have ids set on them then the target list of views may be more convenient.
android.transition.Transition.addTarget,Adds the id of a target view that this Transition is interested in animating. By default there are no targetIds and a Transition will listen for changes on every view in the hierarchy below the sceneRoot of the Scene being transitioned into. Setting targetIds constrains the Transition to only listen for and act on views with these IDs. Views with different IDs or no IDs whatsoever will be ignored. Note that using ids to specify targets implies that ids should be unique within the view hierarchy underneath the scene root.
android.transition.Transition.addTarget,Add target.
android.transition.Transition.addTarget,Adds the id of a target view that this Transition is interested in animating.
android.transition.Transition.addTarget,By default there are no targetIds and a Transition will listen for changes on every view in the hierarchy below the sceneRoot of the Scene being transitioned into.
android.transition.Transition.addTarget,Setting targetIds constrains the Transition to only listen for and act on views with these IDs.
android.transition.Transition.addTarget,Views with different IDs or no IDs whatsoever will be ignored.
android.transition.Transition.addTarget,Note that using ids to specify targets implies that ids should be unique within the view hierarchy underneath the scene root.
android.transition.Transition.addTarget,Adds the Class of a target view that this Transition is interested in animating. By default there are no targetTypes and a Transition will listen for changes on every view in the hierarchy below the sceneRoot of the Scene being transitioned into. Setting targetTypes constrains the Transition to only listen for and act on views with these classes. Views with different classes will be ignored. Note that any View that can be cast to targetType will be included so if targetType is View.class all Views will be included.
android.transition.Transition.addTarget,Add target.
android.transition.Transition.addTarget,Adds the Class of a target view that this Transition is interested in animating.
android.transition.Transition.addTarget,By default there are no targetTypes and a Transition will listen for changes on every view in the hierarchy below the sceneRoot of the Scene being transitioned into.
android.transition.Transition.addTarget,Setting targetTypes constrains the Transition to only listen for and act on views with these classes.
android.transition.Transition.addTarget,Views with different classes will be ignored.
android.transition.Transition.addTarget,Note that any View that can be cast to targetType will be included so if targetType is View.class all Views will be included.
android.transition.Transition.addTarget,Adds the transitionName of a target view that this Transition is interested in animating. By default there are no targetNames and a Transition will listen for changes on every view in the hierarchy below the sceneRoot of the Scene being transitioned into. Setting targetNames constrains the Transition to only listen for and act on views with these transitionNames. Views with different transitionNames or no transitionName whatsoever will be ignored. Note that transitionNames should be unique within the view hierarchy.
android.transition.Transition.addTarget,Add target.
android.transition.Transition.addTarget,Adds the transitionName of a target view that this Transition is interested in animating.
android.transition.Transition.addTarget,By default there are no targetNames and a Transition will listen for changes on every view in the hierarchy below the sceneRoot of the Scene being transitioned into.
android.transition.Transition.addTarget,Setting targetNames constrains the Transition to only listen for and act on views with these transitionNames.
android.transition.Transition.addTarget,Views with different transitionNames or no transitionName whatsoever will be ignored.
android.transition.Transition.addTarget,Note that transitionNames should be unique within the view hierarchy.
android.transition.Transition.excludeTarget,Whether to add the given target to the list of targets to exclude from this transition. The exclude parameter specifies whether the target should be added to or removed from the excluded list. Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded either by their id or by their instance reference or by the Class of that view (eg Spinner ).
android.transition.Transition.excludeTarget,Exclude target.
android.transition.Transition.excludeTarget,Whether to add the given target to the list of targets to exclude from this transition.
android.transition.Transition.excludeTarget,The exclude parameter specifies whether the target should be added to or removed from the excluded list.
android.transition.Transition.excludeTarget,Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition.
android.transition.Transition.excludeTarget,For example you may want to avoid animating children of a specific ListView or Spinner.
android.transition.Transition.excludeTarget,Views can be excluded either by their id or by their instance reference or by the Class of that view (eg Spinner ).
android.transition.Transition.excludeTarget,Whether to add the given type to the list of types to exclude from this transition. The exclude parameter specifies whether the target type should be added to or removed from the excluded list. Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded either by their id or by their instance reference or by the Class of that view (eg Spinner ).
android.transition.Transition.excludeTarget,Exclude target.
android.transition.Transition.excludeTarget,Whether to add the given type to the list of types to exclude from this transition.
android.transition.Transition.excludeTarget,The exclude parameter specifies whether the target type should be added to or removed from the excluded list.
android.transition.Transition.excludeTarget,Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition.
android.transition.Transition.excludeTarget,For example you may want to avoid animating children of a specific ListView or Spinner.
android.transition.Transition.excludeTarget,Views can be excluded either by their id or by their instance reference or by the Class of that view (eg Spinner ).
android.transition.Transition.excludeTarget,Whether to add the given transitionName to the list of target transitionNames to exclude from this transition. The exclude parameter specifies whether the target should be added to or removed from the excluded list. Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded by their id their instance reference their transitionName or by the Class of that view (eg Spinner ).
android.transition.Transition.excludeTarget,Exclude target.
android.transition.Transition.excludeTarget,Whether to add the given transitionName to the list of target transitionNames to exclude from this transition.
android.transition.Transition.excludeTarget,The exclude parameter specifies whether the target should be added to or removed from the excluded list.
android.transition.Transition.excludeTarget,Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition.
android.transition.Transition.excludeTarget,For example you may want to avoid animating children of a specific ListView or Spinner.
android.transition.Transition.excludeTarget,Views can be excluded by their id their instance reference their transitionName or by the Class of that view (eg Spinner ).
android.transition.Transition.excludeTarget,Whether to add the given id to the list of target ids to exclude from this transition. The exclude parameter specifies whether the target should be added to or removed from the excluded list. Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded either by their id or by their instance reference or by the Class of that view (eg Spinner ).
android.transition.Transition.excludeTarget,Exclude target.
android.transition.Transition.excludeTarget,Whether to add the given id to the list of target ids to exclude from this transition.
android.transition.Transition.excludeTarget,The exclude parameter specifies whether the target should be added to or removed from the excluded list.
android.transition.Transition.excludeTarget,Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition.
android.transition.Transition.excludeTarget,For example you may want to avoid animating children of a specific ListView or Spinner.
android.transition.Transition.excludeTarget,Views can be excluded either by their id or by their instance reference or by the Class of that view (eg Spinner ).
android.transition.Transition.getTargetIds,Returns the list of target IDs that this transition limits itself to tracking and animating. If the list is null or empty for getTargetIds() getTargets() getTargetNames() and getTargetTypes() then this transition is not limited to specific views and will handle changes to any views in the hierarchy of a scene change.
android.transition.Transition.getTargetIds,Get target ids.
android.transition.Transition.getTargetIds,Returns the list of target IDs that this transition limits itself to tracking and animating.
android.transition.Transition.getTargetIds,If the list is null or empty for getTargetIds() getTargets() getTargetNames() and getTargetTypes() then this transition is not limited to specific views and will handle changes to any views in the hierarchy of a scene change.
android.transition.Transition.getTargetNames,Returns the list of target transitionNames that this transition limits itself to tracking and animating. If the list is null or empty for getTargetIds() getTargets() getTargetNames() and getTargetTypes() then this transition is not limited to specific views and will handle changes to any views in the hierarchy of a scene change.
android.transition.Transition.getTargetNames,Get target names.
android.transition.Transition.getTargetNames,Returns the list of target transitionNames that this transition limits itself to tracking and animating.
android.transition.Transition.getTargetNames,If the list is null or empty for getTargetIds() getTargets() getTargetNames() and getTargetTypes() then this transition is not limited to specific views and will handle changes to any views in the hierarchy of a scene change.
android.transition.Transition.getTargets,Returns the list of target views that this transition limits itself to tracking and animating. If the list is null or empty for getTargetIds() getTargets() getTargetNames() and getTargetTypes() then this transition is not limited to specific views and will handle changes to any views in the hierarchy of a scene change.
android.transition.Transition.getTargets,Get targets.
android.transition.Transition.getTargets,Returns the list of target views that this transition limits itself to tracking and animating.
android.transition.Transition.getTargets,If the list is null or empty for getTargetIds() getTargets() getTargetNames() and getTargetTypes() then this transition is not limited to specific views and will handle changes to any views in the hierarchy of a scene change.
android.transition.Transition.removeTarget,Removes the given targetId from the list of ids that this Transition is interested in animating.
android.transition.Transition.removeTarget,Remove target.
android.transition.Transition.removeTarget,Removes the given target from the list of targets that this Transition is interested in animating.
android.transition.Transition.removeTarget,Remove target.
android.transition.Transition.removeTarget,Removes the given targetName from the list of transitionNames that this Transition is interested in animating.
android.transition.Transition.removeTarget,Remove target.
android.transition.Transition.removeTarget,Removes the given target from the list of targets that this Transition is interested in animating.
android.transition.Transition.removeTarget,Remove target.
android.transition.TransitionManager.beginDelayedTransition,Convenience method to animate to a new scene defined by all changes within the given scene root between calling this method and the next rendering frame. Calling this method causes TransitionManager to capture current values in the scene root and then post a request to run a transition on the next frame. At that time the new values in the scene root will be captured and changes will be animated. There is no need to create a Scene; it is implied by changes which take place between calling this method and the next frame when the transition begins. Calling this method several times before the next frame (for example if unrelated code also wants to make dynamic changes and run a transition on the same scene root) only the first call will trigger capturing values and exiting the current scene. Subsequent calls to the method with the same scene root during the same frame will be ignored. Passing in null for the transition parameter will cause the TransitionManager to use its default transition.
android.transition.TransitionManager.beginDelayedTransition,Begin delayed transition.
android.transition.TransitionManager.beginDelayedTransition,Convenience method to animate to a new scene defined by all changes within the given scene root between calling this method and the next rendering frame.
android.transition.TransitionManager.beginDelayedTransition,Calling this method causes TransitionManager to capture current values in the scene root and then post a request to run a transition on the next frame.
android.transition.TransitionManager.beginDelayedTransition,At that time the new values in the scene root will be captured and changes will be animated.
android.transition.TransitionManager.beginDelayedTransition,There is no need to create a Scene; it is implied by changes which take place between calling this method and the next frame when the transition begins.
android.transition.TransitionManager.beginDelayedTransition,Calling this method several times before the next frame (for example if unrelated code also wants to make dynamic changes and run a transition on the same scene root) only the first call will trigger capturing values and exiting the current scene.
android.transition.TransitionManager.beginDelayedTransition,Subsequent calls to the method with the same scene root during the same frame will be ignored.
android.transition.TransitionManager.beginDelayedTransition,Passing in null for the transition parameter will cause the TransitionManager to use its default transition.
android.transition.TransitionManager.beginDelayedTransition,Convenience method to animate using the default transition to a new scene defined by all changes within the given scene root between calling this method and the next rendering frame. Equivalent to calling beginDelayedTransition(android.view.ViewGroup android.transition.Transition) with a value of null for the transition parameter.
android.transition.TransitionManager.beginDelayedTransition,Begin delayed transition.
android.transition.TransitionManager.beginDelayedTransition,Convenience method to animate using the default transition to a new scene defined by all changes within the given scene root between calling this method and the next rendering frame.
android.transition.TransitionManager.beginDelayedTransition,Equivalent to calling beginDelayedTransition(android.view.ViewGroup android.transition.Transition) with a value of null for the transition parameter.
android.transition.TransitionSet.addTransition,Adds child transition to this set. The order in which this child transition is added relative to other child transitions that are added in addition to the ordering property determines the order in which the transitions are started. If this transitionSet has a duration interpolator propagation delay path motion or epicenter callback set on it the child transition will inherit the values that are set. Transitions are assumed to have a maximum of one transitionSet parent.
android.transition.TransitionSet.addTransition,Add transition.
android.transition.TransitionSet.addTransition,Adds child transition to this set.
android.transition.TransitionSet.addTransition,The order in which this child transition is added relative to other child transitions that are added in addition to the ordering property determines the order in which the transitions are started.
android.transition.TransitionSet.addTransition,If this transitionSet has a duration interpolator propagation delay path motion or epicenter callback set on it the child transition will inherit the values that are set.
android.transition.TransitionSet.addTransition,Transitions are assumed to have a maximum of one transitionSet parent.
android.transition.TransitionSet.getTransitionAt,Returns the child Transition at the specified position in the TransitionSet.
android.transition.TransitionSet.getTransitionAt,Get transition at.
android.transition.TransitionSet.getTransitionCount,Returns the number of child transitions in the TransitionSet.
android.transition.TransitionSet.getTransitionCount,Get transition count.
android.transition.TransitionSet.setOrdering,Sets the play order of this set's child transitions.
android.transition.TransitionSet.setOrdering,Set ordering.
android.view.inputmethod.InputConnectionWrapper.deleteSurroundingText,Delete beforeLength characters of text before the current cursor position and delete afterLength characters of text after the current cursor position excluding the selection. Before and after refer to the order of the characters in the string not to their visual representation: this means you don't have to figure out the direction of the text and can just use the indices as-is. The lengths are supplied in Java chars not in code points or in glyphs. Since this method only operates on text before and after the selection it can't affect the contents of the selection. This may affect the composing span if the span includes characters that are to be deleted but otherwise will not change it. If some characters in the composing span are deleted the composing span will persist but get shortened by however many chars inside it have been removed. IME authors: please be careful not to delete only half of a surrogate pair. Also take care not to delete more characters than are in the editor as that may have ill effects on the application. Calling this method will cause the editor to call InputMethodService.onUpdateSelection(int int int int int int) on your service after the batch input is over. Editor authors: please be careful of race conditions in implementing this call. An IME can make a change to the text or change the selection position and use this method right away; you need to make sure the effects are consistent with the results of the latest edits. Also although the IME should not send lengths bigger than the contents of the string you should check the values for overflows and trim the indices to the size of the contents to avoid crashes. Since this changes the contents of the editor you need to make the changes known to the input method by calling InputMethodManager#updateSelection(View int int int int) but be careful to wait until the batch edit is over if one is in progress.
android.view.inputmethod.InputConnectionWrapper.deleteSurroundingText,Delete surrounding text.
android.view.inputmethod.InputConnectionWrapper.deleteSurroundingText,Delete beforeLength characters of text before the current cursor position and delete afterLength characters of text after the current cursor position excluding the selection.
android.view.inputmethod.InputConnectionWrapper.deleteSurroundingText,Before and after refer to the order of the characters in the string not to their visual representation: this means you don't have to figure out the direction of the text and can just use the indices as-is.
android.view.inputmethod.InputConnectionWrapper.deleteSurroundingText,The lengths are supplied in Java chars not in code points or in glyphs.
android.view.inputmethod.InputConnectionWrapper.deleteSurroundingText,Since this method only operates on text before and after the selection it can't affect the contents of the selection.
android.view.inputmethod.InputConnectionWrapper.deleteSurroundingText,This may affect the composing span if the span includes characters that are to be deleted but otherwise will not change it.
android.view.inputmethod.InputConnectionWrapper.deleteSurroundingText,If some characters in the composing span are deleted the composing span will persist but get shortened by however many chars inside it have been removed.
android.view.inputmethod.InputConnectionWrapper.deleteSurroundingText,IME authors: please be careful not to delete only half of a surrogate pair.
android.view.inputmethod.InputConnectionWrapper.deleteSurroundingText,Also take care not to delete more characters than are in the editor as that may have ill effects on the application.
android.view.inputmethod.InputConnectionWrapper.deleteSurroundingText,Calling this method will cause the editor to call InputMethodService.onUpdateSelection(int int int int int int) on your service after the batch input is over.
android.view.inputmethod.InputConnectionWrapper.deleteSurroundingText,Editor authors: please be careful of race conditions in implementing this call.
android.view.inputmethod.InputConnectionWrapper.deleteSurroundingText,An IME can make a change to the text or change the selection position and use this method right away; you need to make sure the effects are consistent with the results of the latest edits.
android.view.inputmethod.InputConnectionWrapper.deleteSurroundingText,Also although the IME should not send lengths bigger than the contents of the string you should check the values for overflows and trim the indices to the size of the contents to avoid crashes.
android.view.inputmethod.InputConnectionWrapper.deleteSurroundingText,Since this changes the contents of the editor you need to make the changes known to the input method by calling InputMethodManager#updateSelection(View int int int int) but be careful to wait until the batch edit is over if one is in progress.
android.view.inputmethod.InputMethodInfo.getId,Return a unique ID for this input method. The ID is generated from the package and class name implementing the method.
android.view.inputmethod.InputMethodInfo.getId,Get id.
android.view.inputmethod.InputMethodInfo.getId,Return a unique ID for this input method.
android.view.inputmethod.InputMethodInfo.getId,The ID is generated from the package and class name implementing the method.
android.view.inputmethod.InputMethodInfo.getPackageName,Return the .apk package that implements this input method.
android.view.inputmethod.InputMethodInfo.getPackageName,Get package name.
android.view.inputmethod.InputMethodInfo.getServiceInfo,Return the raw information about the Service implementing this input method. Do not modify the returned object.
android.view.inputmethod.InputMethodInfo.getServiceInfo,Get service info.
android.view.inputmethod.InputMethodInfo.getServiceInfo,Return the raw information about the Service implementing this input method.
android.view.inputmethod.InputMethodInfo.getServiceInfo,Do not modify the returned object.
android.view.inputmethod.InputMethodManager.hideSoftInputFromInputMethod,This method was deprecated in API level 28. Use InputMethodService#requestHideSelf(int) instead. This method was intended for IME developers who should be accessing APIs through the service. APIs in this class are intended for app developers interacting with the IME. Close/hide the input method's soft input area so the user no longer sees it or can interact with it. This can only be called from the currently active input method as validated by the given token.
android.view.inputmethod.InputMethodManager.hideSoftInputFromInputMethod,Hide soft input from input method.
android.view.inputmethod.InputMethodManager.hideSoftInputFromInputMethod,This method was deprecated in API level 28.
android.view.inputmethod.InputMethodManager.hideSoftInputFromInputMethod,Use InputMethodService#requestHideSelf(int) instead.
android.view.inputmethod.InputMethodManager.hideSoftInputFromInputMethod,This method was intended for IME developers who should be accessing APIs through the service.
android.view.inputmethod.InputMethodManager.hideSoftInputFromInputMethod,APIs in this class are intended for app developers interacting with the IME.
android.view.inputmethod.InputMethodManager.hideSoftInputFromInputMethod,Close/hide the input method's soft input area so the user no longer sees it or can interact with it.
android.view.inputmethod.InputMethodManager.hideSoftInputFromInputMethod,This can only be called from the currently active input method as validated by the given token.
android.view.inputmethod.InputMethodManager.hideSoftInputFromWindow,Synonym for hideSoftInputFromWindow(android.os.IBinder int android.os.ResultReceiver) without a result: request to hide the soft input window from the context of the window that is currently accepting input.
android.view.inputmethod.InputMethodManager.hideSoftInputFromWindow,Hide soft input from window.
android.view.inputmethod.InputMethodManager.hideSoftInputFromWindow,Request to hide the soft input window from the context of the window that is currently accepting input. This should be called as a result of the user doing some actually than fairly explicitly requests to have the input window hidden. Caveat: ResultReceiver instance passed to this method can be a long-lived object because it may not be garbage-collected until all the corresponding ResultReceiver objects transferred to different processes get garbage-collected. Follow the general patterns to avoid memory leaks in Android. Consider to use WeakReference so that application logic objects such as Activity and Context can be garbage collected regardless of the lifetime of ResultReceiver.
android.view.inputmethod.InputMethodManager.hideSoftInputFromWindow,Hide soft input from window.
android.view.inputmethod.InputMethodManager.hideSoftInputFromWindow,Request to hide the soft input window from the context of the window that is currently accepting input.
android.view.inputmethod.InputMethodManager.hideSoftInputFromWindow,This should be called as a result of the user doing some actually than fairly explicitly requests to have the input window hidden.
android.view.inputmethod.InputMethodManager.hideSoftInputFromWindow,Caveat: ResultReceiver instance passed to this method can be a long-lived object because it may not be garbage-collected until all the corresponding ResultReceiver objects transferred to different processes get garbage-collected.
android.view.inputmethod.InputMethodManager.hideSoftInputFromWindow,Follow the general patterns to avoid memory leaks in Android.
android.view.inputmethod.InputMethodManager.hideSoftInputFromWindow,Consider to use WeakReference so that application logic objects such as Activity and Context can be garbage collected regardless of the lifetime of ResultReceiver.
android.view.inputmethod.InputMethodManager.isActive,Return true if any view is currently active in the input method.
android.view.inputmethod.InputMethodManager.isActive,Is active.
android.view.inputmethod.InputMethodManager.isActive,Return true if the given view is the currently active view for the input method.
android.view.inputmethod.InputMethodManager.isActive,Is active.
android.view.inputmethod.InputMethodManager.isFullscreenMode,Allows you to discover whether the attached input method is running in fullscreen mode. Return true if it is fullscreen entirely covering your UI else returns false.
android.view.inputmethod.InputMethodManager.isFullscreenMode,Is fullscreen mode.
android.view.inputmethod.InputMethodManager.isFullscreenMode,Allows you to discover whether the attached input method is running in fullscreen mode.
android.view.inputmethod.InputMethodManager.isFullscreenMode,Return true if it is fullscreen entirely covering your UI else returns false.
android.view.inputmethod.InputMethodManager.restartInput,If the input method is currently connected to the given view restart it with its new contents. You should call this when the text within your view changes outside of the normal input method or key input flow such as when an application calls TextView.setText().
android.view.inputmethod.InputMethodManager.restartInput,Restart input.
android.view.inputmethod.InputMethodManager.restartInput,If the input method is currently connected to the given view restart it with its new contents.
android.view.inputmethod.InputMethodManager.restartInput,You should call this when the text within your view changes outside of the normal input method or key input flow such as when an application calls TextView.setText().
android.view.inputmethod.InputMethodManager.showSoftInput,Explicitly request that the current input method's soft input area be shown to the user if needed. Call this if the user interacts with your view in such a way that they have expressed they would like to start performing input into it. Caveat: ResultReceiver instance passed to this method can be a long-lived object because it may not be garbage-collected until all the corresponding ResultReceiver objects transferred to different processes get garbage-collected. Follow the general patterns to avoid memory leaks in Android. Consider to use WeakReference so that application logic objects such as Activity and Context can be garbage collected regardless of the lifetime of ResultReceiver.
android.view.inputmethod.InputMethodManager.showSoftInput,Show soft input.
android.view.inputmethod.InputMethodManager.showSoftInput,Explicitly request that the current input method's soft input area be shown to the user if needed.
android.view.inputmethod.InputMethodManager.showSoftInput,Call this if the user interacts with your view in such a way that they have expressed they would like to start performing input into it.
android.view.inputmethod.InputMethodManager.showSoftInput,Caveat: ResultReceiver instance passed to this method can be a long-lived object because it may not be garbage-collected until all the corresponding ResultReceiver objects transferred to different processes get garbage-collected.
android.view.inputmethod.InputMethodManager.showSoftInput,Follow the general patterns to avoid memory leaks in Android.
android.view.inputmethod.InputMethodManager.showSoftInput,Consider to use WeakReference so that application logic objects such as Activity and Context can be garbage collected regardless of the lifetime of ResultReceiver.
android.view.inputmethod.InputMethodManager.showSoftInput,Synonym for showSoftInput(android.view.View int android.os.ResultReceiver) without a result receiver: explicitly request that the current input method's soft input area be shown to the user if needed.
android.view.inputmethod.InputMethodManager.showSoftInput,Show soft input.
android.view.inputmethod.InputMethodManager.showSoftInputFromInputMethod,This method was deprecated in API level 28. Use InputMethodService#requestShowSelf(int) instead. This method was intended for IME developers who should be accessing APIs through the service. APIs in this class are intended for app developers interacting with the IME. Show the input method's soft input area so the user sees the input method window and can interact with it. This can only be called from the currently active input method as validated by the given token.
android.view.inputmethod.InputMethodManager.showSoftInputFromInputMethod,Show soft input from input method.
android.view.inputmethod.InputMethodManager.showSoftInputFromInputMethod,This method was deprecated in API level 28.
android.view.inputmethod.InputMethodManager.showSoftInputFromInputMethod,Use InputMethodService#requestShowSelf(int) instead.
android.view.inputmethod.InputMethodManager.showSoftInputFromInputMethod,This method was intended for IME developers who should be accessing APIs through the service.
android.view.inputmethod.InputMethodManager.showSoftInputFromInputMethod,APIs in this class are intended for app developers interacting with the IME.
android.view.inputmethod.InputMethodManager.showSoftInputFromInputMethod,Show the input method's soft input area so the user sees the input method window and can interact with it.
android.view.inputmethod.InputMethodManager.showSoftInputFromInputMethod,This can only be called from the currently active input method as validated by the given token.
android.view.inputmethod.InputMethodManager.toggleSoftInputFromWindow,This method toggles the input method window display. If the input window is already displayed it gets hidden. If not the input window will be displayed.
android.view.inputmethod.InputMethodManager.toggleSoftInputFromWindow,Toggle soft input from window.
android.view.inputmethod.InputMethodManager.toggleSoftInputFromWindow,This method toggles the input method window display.
android.view.inputmethod.InputMethodManager.toggleSoftInputFromWindow,If the input window is already displayed it gets hidden.
android.view.inputmethod.InputMethodManager.toggleSoftInputFromWindow,If not the input window will be displayed.
android.view.ActionMode.getCustomView,Returns the current custom view for this action mode.
android.view.ActionMode.getCustomView,Get custom view.
android.view.ActionMode.getMenuInflater,Returns a MenuInflater with the ActionMode's context.
android.view.ActionMode.getMenuInflater,Get menu inflater.
android.view.ActionMode.getSubtitle,Returns the current subtitle of this action mode.
android.view.ActionMode.getSubtitle,Get subtitle.
android.view.ActionMode.getTag,Retrieve the tag object associated with this ActionMode. Like the tag available to views this allows applications to associate arbitrary data with an ActionMode for later reference.
android.view.ActionMode.getTag,Get tag.
android.view.ActionMode.getTag,Retrieve the tag object associated with this ActionMode.
android.view.ActionMode.getTag,Like the tag available to views this allows applications to associate arbitrary data with an ActionMode for later reference.
android.view.ActionMode.getTitle,Returns the current title of this action mode.
android.view.ActionMode.getTitle,Get title.
android.view.ActionMode.invalidate,Invalidate the action mode and refresh menu content. The mode's ActionMode.Callback will have its Callback#onPrepareActionMode(ActionMode Menu) method called. If it returns true the menu will be scanned for updated content and any relevant changes will be reflected to the user.
android.view.ActionMode.invalidate,Invalidate.
android.view.ActionMode.invalidate,Invalidate the action mode and refresh menu content.
android.view.ActionMode.invalidate,The mode's ActionMode.Callback will have its Callback#onPrepareActionMode(ActionMode Menu) method called.
android.view.ActionMode.invalidate,If it returns true the menu will be scanned for updated content and any relevant changes will be reflected to the user.
android.view.ActionMode.setCustomView,Set a custom view for this action mode. The custom view will take the place of the title and subtitle. Useful for things like search boxes.
android.view.ActionMode.setCustomView,Set custom view.
android.view.ActionMode.setCustomView,Set a custom view for this action mode.
android.view.ActionMode.setCustomView,The custom view will take the place of the title and subtitle.
android.view.ActionMode.setCustomView,Useful for things like search boxes.
android.view.ActionMode.setSubtitle,Set the subtitle of the action mode. This method will have no visible effect if a custom view has been set.
android.view.ActionMode.setSubtitle,Set subtitle.
android.view.ActionMode.setSubtitle,Set the subtitle of the action mode.
android.view.ActionMode.setSubtitle,This method will have no visible effect if a custom view has been set.
android.view.ActionMode.setSubtitle,Set the subtitle of the action mode. This method will have no visible effect if a custom view has been set.
android.view.ActionMode.setSubtitle,Set subtitle.
android.view.ActionMode.setSubtitle,Set the subtitle of the action mode.
android.view.ActionMode.setSubtitle,This method will have no visible effect if a custom view has been set.
android.view.ActionMode.setTag,Set a tag object associated with this ActionMode. Like the tag available to views this allows applications to associate arbitrary data with an ActionMode for later reference.
android.view.ActionMode.setTag,Set tag.
android.view.ActionMode.setTag,Set a tag object associated with this ActionMode.
android.view.ActionMode.setTag,Like the tag available to views this allows applications to associate arbitrary data with an ActionMode for later reference.
android.view.ActionMode.setTitle,Set the title of the action mode. This method will have no visible effect if a custom view has been set.
android.view.ActionMode.setTitle,Set title.
android.view.ActionMode.setTitle,Set the title of the action mode.
android.view.ActionMode.setTitle,This method will have no visible effect if a custom view has been set.
android.view.ActionMode.setTitle,Set the title of the action mode. This method will have no visible effect if a custom view has been set.
android.view.ActionMode.setTitle,Set title.
android.view.ActionMode.setTitle,Set the title of the action mode.
android.view.ActionMode.setTitle,This method will have no visible effect if a custom view has been set.
android.view.Display.getCurrentSizeRange,Return the range of display sizes an application can expect to encounter under normal operation as long as there is no physical change in screen size. This is basically the sizes you will see as the orientation changes taking into account whatever screen decoration there is in each rotation. For example the status bar is always at the top of the screen so it will reduce the height both in landscape and portrait and the smallest height returned here will be the smaller of the two. This is intended for applications to get an idea of the range of sizes they will encounter while going through device rotations to provide a stable UI through rotation. The sizes here take into account all standard system decorations that reduce the size actually available to the application: the status bar navigation bar system bar etc. It does not take into account more transient elements like an IME soft keyboard.
android.view.Display.getCurrentSizeRange,Get current size range.
android.view.Display.getCurrentSizeRange,Return the range of display sizes an application can expect to encounter under normal operation as long as there is no physical change in screen size.
android.view.Display.getCurrentSizeRange,This is basically the sizes you will see as the orientation changes taking into account whatever screen decoration there is in each rotation.
android.view.Display.getCurrentSizeRange,For example the status bar is always at the top of the screen so it will reduce the height both in landscape and portrait and the smallest height returned here will be the smaller of the two.
android.view.Display.getCurrentSizeRange,This is intended for applications to get an idea of the range of sizes they will encounter while going through device rotations to provide a stable UI through rotation.
android.view.Display.getCurrentSizeRange,The sizes here take into account all standard system decorations that reduce the size actually available to the application: the status bar navigation bar system bar etc.
android.view.Display.getCurrentSizeRange,It does not take into account more transient elements like an IME soft keyboard.
android.view.Display.getDisplayId,Gets the display id. Each logical display has a unique id. The default display has id DEFAULT_DISPLAY.
android.view.Display.getDisplayId,Get display id.
android.view.Display.getDisplayId,Gets the display id.
android.view.Display.getDisplayId,Each logical display has a unique id.
android.view.Display.getDisplayId,The default display has id DEFAULT_DISPLAY.
android.view.Display.getMetrics,Gets display metrics that describe the size and density of this display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. 1. The returned size may be adjusted to exclude certain system decor elements that are always visible. 2. It may be scaled to provide compatibility with older applications that were originally designed for smaller displays. 3. It can be different depending on the WindowManager to which the display belongs. - If requested from non-Activity context (e.g. Application context via (WindowManager) getApplicationContext().getSystemService(Context.WINDOW_SERVICE) ) metrics will report the size of the entire display based on current rotation and with subtracted system decoration areas. - If requested from activity (either using getWindowManager() or (WindowManager) getSystemService(Context.WINDOW_SERVICE) ) resulting metrics will correspond to current app window metrics. In this case the size can be smaller than physical size in multi-window mode.
android.view.Display.getMetrics,Get metrics.
android.view.Display.getMetrics,Gets display metrics that describe the size and density of this display.
android.view.Display.getMetrics,The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display.
android.view.Display.getMetrics,1.
android.view.Display.getMetrics,The returned size may be adjusted to exclude certain system decor elements that are always visible.
android.view.Display.getMetrics,2.
android.view.Display.getMetrics,It may be scaled to provide compatibility with older applications that were originally designed for smaller displays.
android.view.Display.getMetrics,3.
android.view.Display.getMetrics,It can be different depending on the WindowManager to which the display belongs.
android.view.Display.getMetrics,- If requested from non-Activity context (e.g.
android.view.Display.getMetrics,Application context via (WindowManager) getApplicationContext().getSystemService(Context.WINDOW_SERVICE) ) metrics will report the size of the entire display based on current rotation and with subtracted system decoration areas.
android.view.Display.getMetrics,- If requested from activity (either using getWindowManager() or (WindowManager) getSystemService(Context.WINDOW_SERVICE) ) resulting metrics will correspond to current app window metrics.
android.view.Display.getMetrics,In this case the size can be smaller than physical size in multi-window mode.
android.view.Display.getOrientation,This method was deprecated in API level 15. use getRotation().
android.view.Display.getOrientation,Get orientation.
android.view.Display.getOrientation,This method was deprecated in API level 15.
android.view.Display.getOrientation,use getRotation().
android.view.Display.getPixelFormat,This method was deprecated in API level 17. This method is no longer supported. The result is always PixelFormat#RGBA_8888. Gets the pixel format of the display.
android.view.Display.getPixelFormat,Get pixel format.
android.view.Display.getPixelFormat,This method was deprecated in API level 17.
android.view.Display.getPixelFormat,This method is no longer supported.
android.view.Display.getPixelFormat,The result is always PixelFormat#RGBA_8888.
android.view.Display.getPixelFormat,Gets the pixel format of the display.
android.view.Display.getRealMetrics,Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell wm size).
android.view.Display.getRealMetrics,Get real metrics.
android.view.Display.getRealMetrics,Gets display metrics based on the real size of this display.
android.view.Display.getRealMetrics,The size is adjusted based on the current rotation of the display.
android.view.Display.getRealMetrics,The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell wm size).
android.view.Display.getRealSize,Gets the real size of the display without subtracting any window decor or applying any compatibility scale factors. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell wm size).
android.view.Display.getRealSize,Get real size.
android.view.Display.getRealSize,Gets the real size of the display without subtracting any window decor or applying any compatibility scale factors.
android.view.Display.getRealSize,The size is adjusted based on the current rotation of the display.
android.view.Display.getRealSize,The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell wm size).
android.view.Display.getRefreshRate,Gets the refresh rate of this display in frames per second.
android.view.Display.getRefreshRate,Get refresh rate.
android.view.Display.getRotation,"Returns the rotation of the screen from its ""natural"" orientation. The returned value may be Surface#ROTATION_0 (no rotation) Surface#ROTATION_90 Surface#ROTATION_180 or Surface#ROTATION_270. For example if a device has a naturally tall screen and the user has turned it on its side to go into a landscape orientation the value returned here may be either Surface#ROTATION_90 or Surface#ROTATION_270 depending on the direction it was turned. The angle is the rotation of the drawn graphics on the screen which is the opposite direction of the physical rotation of the device. For example if the device is rotated 90 degrees counter-clockwise to compensate rendering will be rotated by 90 degrees clockwise and thus the returned value here will be Surface#ROTATION_90."
android.view.Display.getRotation,Get rotation.
android.view.Display.getRotation,"Returns the rotation of the screen from its ""natural"" orientation."
android.view.Display.getRotation,The returned value may be Surface#ROTATION_0 (no rotation) Surface#ROTATION_90 Surface#ROTATION_180 or Surface#ROTATION_270.
android.view.Display.getRotation,For example if a device has a naturally tall screen and the user has turned it on its side to go into a landscape orientation the value returned here may be either Surface#ROTATION_90 or Surface#ROTATION_270 depending on the direction it was turned.
android.view.Display.getRotation,The angle is the rotation of the drawn graphics on the screen which is the opposite direction of the physical rotation of the device.
android.view.Display.getRotation,For example if the device is rotated 90 degrees counter-clockwise to compensate rendering will be rotated by 90 degrees clockwise and thus the returned value here will be Surface#ROTATION_90.
android.view.Display.getSize,Gets the size of the display in pixels. Value returned by this method does not necessarily represent the actual raw size (native resolution) of the display. 1. The returned size may be adjusted to exclude certain system decor elements that are always visible. 2. It may be scaled to provide compatibility with older applications that were originally designed for smaller displays. 3. It can be different depending on the WindowManager to which the display belongs. - If requested from non-Activity context (e.g. Application context via (WindowManager) getApplicationContext().getSystemService(Context.WINDOW_SERVICE) ) it will report the size of the entire display based on current rotation and with subtracted system decoration areas. - If requested from activity (either using getWindowManager() or (WindowManager) getSystemService(Context.WINDOW_SERVICE) ) resulting size will correspond to current app window size. In this case it can be smaller than physical size in multi-window mode. Typically for the purposes of layout apps should make a request from activity context to obtain size available for the app content.
android.view.Display.getSize,Get size.
android.view.Display.getSize,Gets the size of the display in pixels.
android.view.Display.getSize,Value returned by this method does not necessarily represent the actual raw size (native resolution) of the display.
android.view.Display.getSize,1.
android.view.Display.getSize,The returned size may be adjusted to exclude certain system decor elements that are always visible.
android.view.Display.getSize,2.
android.view.Display.getSize,It may be scaled to provide compatibility with older applications that were originally designed for smaller displays.
android.view.Display.getSize,3.
android.view.Display.getSize,It can be different depending on the WindowManager to which the display belongs.
android.view.Display.getSize,- If requested from non-Activity context (e.g.
android.view.Display.getSize,Application context via (WindowManager) getApplicationContext().getSystemService(Context.WINDOW_SERVICE) ) it will report the size of the entire display based on current rotation and with subtracted system decoration areas.
android.view.Display.getSize,- If requested from activity (either using getWindowManager() or (WindowManager) getSystemService(Context.WINDOW_SERVICE) ) resulting size will correspond to current app window size.
android.view.Display.getSize,In this case it can be smaller than physical size in multi-window mode.
android.view.Display.getSize,Typically for the purposes of layout apps should make a request from activity context to obtain size available for the app content.
android.view.Display.getWidth,This method was deprecated in API level 15. Use getSize(android.graphics.Point) instead.
android.view.Display.getWidth,Get width.
android.view.Display.getWidth,This method was deprecated in API level 15.
android.view.Display.getWidth,Use getSize(android.graphics.Point) instead.
android.view.DragEvent.getAction,Inspect the action value of this event.
android.view.DragEvent.getAction,Get action.
android.view.DragEvent.getClipData,Returns the ClipData object sent to the system as part of the call to startDragAndDrop(). This method only returns valid data if the event action is ACTION_DROP.
android.view.DragEvent.getClipData,Get clip data.
android.view.DragEvent.getClipData,Returns the ClipData object sent to the system as part of the call to startDragAndDrop().
android.view.DragEvent.getClipData,This method only returns valid data if the event action is ACTION_DROP.
android.view.DragEvent.getClipDescription,Returns the ClipDescription object contained in the ClipData object sent to the system as part of the call to startDragAndDrop(). The drag handler or listener for a View can use the metadata in this object to decide if the View can accept the dragged View object's data. This method returns valid data for all event actions except for ACTION_DRAG_ENDED.
android.view.DragEvent.getClipDescription,Get clip description.
android.view.DragEvent.getClipDescription,Returns the ClipDescription object contained in the ClipData object sent to the system as part of the call to startDragAndDrop().
android.view.DragEvent.getClipDescription,The drag handler or listener for a View can use the metadata in this object to decide if the View can accept the dragged View object's data.
android.view.DragEvent.getClipDescription,This method returns valid data for all event actions except for ACTION_DRAG_ENDED.
android.view.FocusFinder.findNextFocus,Find the next view to take focus in root's descendants starting from the view that currently is focused.
android.view.FocusFinder.findNextFocus,Find next focus.
android.view.FocusFinder.findNextFocusFromRect,Find the next view to take focus in root's descendants searching from a particular rectangle in root's coordinates.
android.view.FocusFinder.findNextFocusFromRect,Find next focus from rect.
android.view.FocusFinder.getInstance,Get the focus finder for this thread.
android.view.FocusFinder.getInstance,Get instance.
android.view.GestureDetector.setIsLongpressEnabled,Set whether longpress is enabled if this is enabled when a user presses and holds down you get a longpress event and nothing further. If it's disabled the user can press and hold down and then later moved their finger and you will get scroll events. By default longpress is enabled.
android.view.GestureDetector.setIsLongpressEnabled,Set is longpress enabled.
android.view.GestureDetector.setIsLongpressEnabled,Set whether longpress is enabled if this is enabled when a user presses and holds down you get a longpress event and nothing further.
android.view.GestureDetector.setIsLongpressEnabled,If it's disabled the user can press and hold down and then later moved their finger and you will get scroll events.
android.view.GestureDetector.setIsLongpressEnabled,By default longpress is enabled.
android.view.Gravity.applyDisplay,"Apply additional gravity behavior based on the overall ""display"" that an object exists in. This can be used after apply(int int int android.graphics.Rect int int android.graphics.Rect) to place the object within a visible display. By default this moves or clips the object to be visible in the display; the gravity flags DISPLAY_CLIP_HORIZONTAL and DISPLAY_CLIP_VERTICAL can be used to change this behavior."
android.view.Gravity.applyDisplay,Apply display.
android.view.Gravity.applyDisplay,"Apply additional gravity behavior based on the overall ""display"" that an object exists in."
android.view.Gravity.applyDisplay,This can be used after apply(int int int android.graphics.Rect int int android.graphics.Rect) to place the object within a visible display.
android.view.Gravity.applyDisplay,By default this moves or clips the object to be visible in the display; the gravity flags DISPLAY_CLIP_HORIZONTAL and DISPLAY_CLIP_VERTICAL can be used to change this behavior.
android.view.Gravity.applyDisplay,"Apply additional gravity behavior based on the overall ""display"" that an object exists in. This can be used after apply(int int int android.graphics.Rect int int android.graphics.Rect) to place the object within a visible display. By default this moves or clips the object to be visible in the display; the gravity flags DISPLAY_CLIP_HORIZONTAL and DISPLAY_CLIP_VERTICAL can be used to change this behavior."
android.view.Gravity.applyDisplay,Apply display.
android.view.Gravity.applyDisplay,"Apply additional gravity behavior based on the overall ""display"" that an object exists in."
android.view.Gravity.applyDisplay,This can be used after apply(int int int android.graphics.Rect int int android.graphics.Rect) to place the object within a visible display.
android.view.Gravity.applyDisplay,By default this moves or clips the object to be visible in the display; the gravity flags DISPLAY_CLIP_HORIZONTAL and DISPLAY_CLIP_VERTICAL can be used to change this behavior.
android.view.InputDevice.getDescriptor,Gets the input device descriptor which is a stable identifier for an input device. An input device descriptor uniquely identifies an input device. Its value is intended to be persistent across system restarts and should not change even if the input device is disconnected reconnected or reconfigured at any time. It is possible for there to be multiple InputDevice instances that have the same input device descriptor. This might happen in situations where a single human input device registers multiple InputDevice instances (HID collections) that describe separate features of the device such as a keyboard that also has a trackpad. Alternately it may be that the input devices are simply indistinguishable such as two keyboards made by the same manufacturer. The input device descriptor returned by getDescriptor() should only be used when an application needs to remember settings associated with a particular input device. For all other purposes when referring to a logical InputDevice instance at runtime use the id returned by getId().
android.view.InputDevice.getDescriptor,Get descriptor.
android.view.InputDevice.getDescriptor,Gets the input device descriptor which is a stable identifier for an input device.
android.view.InputDevice.getDescriptor,An input device descriptor uniquely identifies an input device.
android.view.InputDevice.getDescriptor,Its value is intended to be persistent across system restarts and should not change even if the input device is disconnected reconnected or reconfigured at any time.
android.view.InputDevice.getDescriptor,It is possible for there to be multiple InputDevice instances that have the same input device descriptor.
android.view.InputDevice.getDescriptor,This might happen in situations where a single human input device registers multiple InputDevice instances (HID collections) that describe separate features of the device such as a keyboard that also has a trackpad.
android.view.InputDevice.getDescriptor,Alternately it may be that the input devices are simply indistinguishable such as two keyboards made by the same manufacturer.
android.view.InputDevice.getDescriptor,The input device descriptor returned by getDescriptor() should only be used when an application needs to remember settings associated with a particular input device.
android.view.InputDevice.getDescriptor,For all other purposes when referring to a logical InputDevice instance at runtime use the id returned by getId().
android.view.InputDevice.getMotionRanges,Gets the ranges for all axes supported by the device.
android.view.InputDevice.getMotionRanges,Get motion ranges.
android.view.InputDevice.getName,Gets the name of this input device.
android.view.InputDevice.getName,Get name.
android.view.InputDevice.getSources,Gets the input sources supported by this input device as a combined bitfield.
android.view.InputDevice.getSources,Get sources.
android.view.InputDevice.isVirtual,Returns true if the device is a virtual input device rather than a real one such as the virtual keyboard (see KeyCharacterMap#VIRTUAL_KEYBOARD ). Virtual input devices are provided to implement system-level functionality and should not be seen or configured by users.
android.view.InputDevice.isVirtual,Is virtual.
android.view.InputDevice.isVirtual,Returns true if the device is a virtual input device rather than a real one such as the virtual keyboard (see KeyCharacterMap#VIRTUAL_KEYBOARD ).
android.view.InputDevice.isVirtual,Virtual input devices are provided to implement system-level functionality and should not be seen or configured by users.
android.view.KeyCharacterMap.deviceHasKey,Queries the framework about whether any physical keys exist on the any keyboard attached to the device that are capable of producing the given key code.
android.view.KeyCharacterMap.deviceHasKey,Device has key.
android.view.KeyCharacterMap.getKeyboardType,Gets the keyboard type. Returns NUMERIC PREDICTIVE ALPHA FULL or SPECIAL_FUNCTION. Different keyboard types have different semantics. Refer to the documentation associated with the keyboard type constants for details.
android.view.KeyCharacterMap.getKeyboardType,Get keyboard type.
android.view.KeyCharacterMap.getKeyboardType,Gets the keyboard type.
android.view.KeyCharacterMap.getKeyboardType,Returns NUMERIC PREDICTIVE ALPHA FULL or SPECIAL_FUNCTION.
android.view.KeyCharacterMap.getKeyboardType,Different keyboard types have different semantics.
android.view.KeyCharacterMap.getKeyboardType,Refer to the documentation associated with the keyboard type constants for details.
android.view.KeyCharacterMap.load,Loads the key character maps for the keyboard with the specified device id.
android.view.KeyCharacterMap.load,Load.
android.view.KeyEvent.getAction,Retrieve the action of this key event. May be either ACTION_DOWN ACTION_UP or ACTION_MULTIPLE.
android.view.KeyEvent.getAction,Get action.
android.view.KeyEvent.getAction,Retrieve the action of this key event.
android.view.KeyEvent.getAction,May be either ACTION_DOWN ACTION_UP or ACTION_MULTIPLE.
android.view.KeyEvent.getDeviceId,Gets the id for the device that this event came from. An id of zero indicates that the event didn't come from a physical device and maps to the default keymap. The other numbers are arbitrary and you shouldn't depend on the values.
android.view.KeyEvent.getDeviceId,Get device id.
android.view.KeyEvent.getDeviceId,Gets the id for the device that this event came from.
android.view.KeyEvent.getDeviceId,An id of zero indicates that the event didn't come from a physical device and maps to the default keymap.
android.view.KeyEvent.getDeviceId,The other numbers are arbitrary and you shouldn't depend on the values.
android.view.KeyEvent.getDownTime,Retrieve the time of the most recent key down event in the SystemClock.uptimeMillis() time base. If this is a down event this will be the same as getEventTime(). Note that when chording keys this value is the down time of the most recently pressed key which may not be the same physical key of this event.
android.view.KeyEvent.getDownTime,Get down time.
android.view.KeyEvent.getDownTime,Retrieve the time of the most recent key down event in the SystemClock.uptimeMillis() time base.
android.view.KeyEvent.getDownTime,If this is a down event this will be the same as getEventTime().
android.view.KeyEvent.getDownTime,Note that when chording keys this value is the down time of the most recently pressed key which may not be the same physical key of this event.
android.view.KeyEvent.getEventTime,Retrieve the time this event occurred in the SystemClock.uptimeMillis() time base.
android.view.KeyEvent.getEventTime,Get event time.
android.view.KeyEvent.getFlags,Returns the flags for this key event.
android.view.KeyEvent.getFlags,Get flags.
android.view.KeyEvent.getKeyCode,Retrieve the key code of the key event. This is the physical key that was pressed not the Unicode character.
android.view.KeyEvent.getKeyCode,Get key code.
android.view.KeyEvent.getKeyCode,Retrieve the key code of the key event.
android.view.KeyEvent.getKeyCode,This is the physical key that was pressed not the Unicode character.
android.view.KeyEvent.getMaxKeyCode,Returns the maximum keycode.
android.view.KeyEvent.getMaxKeyCode,Get max key code.
android.view.KeyEvent.getMetaState,Returns the state of the meta keys.
android.view.KeyEvent.getMetaState,Get meta state.
android.view.KeyEvent.getNumber,Gets the number or symbol associated with the key. The character value is returned not the numeric value. If the key is not a number but is a symbol the symbol is retuned. This method is intended to to support dial pads and other numeric or symbolic entry on keyboards where certain keys serve dual function as alphabetic and symbolic keys. This method returns the number or symbol associated with the key independent of whether the user has pressed the required modifier. For example on one particular keyboard the keys on the top QWERTY row generate numbers when ALT is pressed such that ALT-Q maps to '1'. So for that keyboard when getNumber() is called with KeyEvent#KEYCODE_Q it returns '1' so that the user can type numbers without pressing ALT when it makes sense.
android.view.KeyEvent.getNumber,Get number.
android.view.KeyEvent.getNumber,Gets the number or symbol associated with the key.
android.view.KeyEvent.getNumber,The character value is returned not the numeric value.
android.view.KeyEvent.getNumber,If the key is not a number but is a symbol the symbol is retuned.
android.view.KeyEvent.getNumber,This method is intended to to support dial pads and other numeric or symbolic entry on keyboards where certain keys serve dual function as alphabetic and symbolic keys.
android.view.KeyEvent.getNumber,This method returns the number or symbol associated with the key independent of whether the user has pressed the required modifier.
android.view.KeyEvent.getNumber,For example on one particular keyboard the keys on the top QWERTY row generate numbers when ALT is pressed such that ALT-Q maps to '1'.
android.view.KeyEvent.getNumber,So for that keyboard when getNumber() is called with KeyEvent#KEYCODE_Q it returns '1' so that the user can type numbers without pressing ALT when it makes sense.
android.view.KeyEvent.getRepeatCount,Retrieve the repeat count of the event. For key down events this is the number of times the key has repeated with the first down starting at 0 and counting up from there. For key up events this is always equal to zero. For multiple key events this is the number of down/up pairs that have occurred.
android.view.KeyEvent.getRepeatCount,Get repeat count.
android.view.KeyEvent.getRepeatCount,Retrieve the repeat count of the event.
android.view.KeyEvent.getRepeatCount,For key down events this is the number of times the key has repeated with the first down starting at 0 and counting up from there.
android.view.KeyEvent.getRepeatCount,For key up events this is always equal to zero.
android.view.KeyEvent.getRepeatCount,For multiple key events this is the number of down/up pairs that have occurred.
android.view.KeyEvent.getUnicodeChar,"Gets the Unicode character generated by the specified key and meta key state combination. Returns the Unicode character that the specified key would produce when the specified meta bits (see MetaKeyKeyListener ) were active. Returns 0 if the key is not one that is used to type Unicode characters. If the return value has bit KeyCharacterMap#COMBINING_ACCENT set the key is a ""dead key"" that should be combined with another to actually produce a character -- see KeyCharacterMap#getDeadChar -- after masking with KeyCharacterMap#COMBINING_ACCENT_MASK."
android.view.KeyEvent.getUnicodeChar,Get unicode char.
android.view.KeyEvent.getUnicodeChar,Gets the Unicode character generated by the specified key and meta key state combination.
android.view.KeyEvent.getUnicodeChar,Returns the Unicode character that the specified key would produce when the specified meta bits (see MetaKeyKeyListener ) were active.
android.view.KeyEvent.getUnicodeChar,Returns 0 if the key is not one that is used to type Unicode characters.
android.view.KeyEvent.getUnicodeChar,"If the return value has bit KeyCharacterMap#COMBINING_ACCENT set the key is a ""dead key"" that should be combined with another to actually produce a character -- see KeyCharacterMap#getDeadChar -- after masking with KeyCharacterMap#COMBINING_ACCENT_MASK."
android.view.KeyEvent.getUnicodeChar,"Gets the Unicode character generated by the specified key and meta key state combination. Returns the Unicode character that the specified key would produce when the specified meta bits (see MetaKeyKeyListener ) were active. Returns 0 if the key is not one that is used to type Unicode characters. If the return value has bit KeyCharacterMap#COMBINING_ACCENT set the key is a ""dead key"" that should be combined with another to actually produce a character -- see KeyCharacterMap#getDeadChar -- after masking with KeyCharacterMap#COMBINING_ACCENT_MASK."
android.view.KeyEvent.getUnicodeChar,Get unicode char.
android.view.KeyEvent.getUnicodeChar,Gets the Unicode character generated by the specified key and meta key state combination.
android.view.KeyEvent.getUnicodeChar,Returns the Unicode character that the specified key would produce when the specified meta bits (see MetaKeyKeyListener ) were active.
android.view.KeyEvent.getUnicodeChar,Returns 0 if the key is not one that is used to type Unicode characters.
android.view.KeyEvent.getUnicodeChar,"If the return value has bit KeyCharacterMap#COMBINING_ACCENT set the key is a ""dead key"" that should be combined with another to actually produce a character -- see KeyCharacterMap#getDeadChar -- after masking with KeyCharacterMap#COMBINING_ACCENT_MASK."
android.view.KeyEvent.hasNoModifiers,Returns true if no modifier keys are pressed. For the purposes of this function KEYCODE_CAPS_LOCK KEYCODE_SCROLL_LOCK and KEYCODE_NUM_LOCK are not considered modifier keys. Consequently this function ignores META_CAPS_LOCK_ON META_SCROLL_LOCK_ON and META_NUM_LOCK_ON. The meta state is normalized prior to comparison using normalizeMetaState(int).
android.view.KeyEvent.hasNoModifiers,Has no modifiers.
android.view.KeyEvent.hasNoModifiers,Returns true if no modifier keys are pressed.
android.view.KeyEvent.hasNoModifiers,For the purposes of this function KEYCODE_CAPS_LOCK KEYCODE_SCROLL_LOCK and KEYCODE_NUM_LOCK are not considered modifier keys.
android.view.KeyEvent.hasNoModifiers,Consequently this function ignores META_CAPS_LOCK_ON META_SCROLL_LOCK_ON and META_NUM_LOCK_ON.
android.view.KeyEvent.hasNoModifiers,The meta state is normalized prior to comparison using normalizeMetaState(int).
android.view.KeyEvent.isAltPressed,Returns the pressed state of the ALT meta key.
android.view.KeyEvent.isAltPressed,Is alt pressed.
android.view.KeyEvent.isCanceled,For ACTION_UP events indicates that the event has been canceled as per FLAG_CANCELED.
android.view.KeyEvent.isCanceled,Is canceled.
android.view.KeyEvent.isGamepadButton,Returns true if the specified keycode is a gamepad button.
android.view.KeyEvent.isGamepadButton,Is gamepad button.
android.view.KeyEvent.isLongPress,For ACTION_DOWN events indicates that the event has been canceled as per FLAG_LONG_PRESS.
android.view.KeyEvent.isLongPress,Is long press.
android.view.KeyEvent.isModifierKey,Returns true if this key code is a modifier key. For the purposes of this function KEYCODE_CAPS_LOCK KEYCODE_SCROLL_LOCK and KEYCODE_NUM_LOCK are not considered modifier keys. Consequently this function return false for those keys.
android.view.KeyEvent.isModifierKey,Is modifier key.
android.view.KeyEvent.isModifierKey,Returns true if this key code is a modifier key.
android.view.KeyEvent.isModifierKey,For the purposes of this function KEYCODE_CAPS_LOCK KEYCODE_SCROLL_LOCK and KEYCODE_NUM_LOCK are not considered modifier keys.
android.view.KeyEvent.isModifierKey,Consequently this function return false for those keys.
android.view.KeyEvent.isShiftPressed,Returns the pressed state of the SHIFT meta key.
android.view.KeyEvent.isShiftPressed,Is shift pressed.
android.view.KeyEvent.isSymPressed,Returns the pressed state of the SYM meta key.
android.view.KeyEvent.isSymPressed,Is sym pressed.
android.view.KeyEvent.isSystem,Is this a system key? System keys can not be used for menu shortcuts.
android.view.KeyEvent.isSystem,Is system.
android.view.KeyEvent.isTracking,For ACTION_UP events indicates that the event is still being tracked from its initial down event as per FLAG_TRACKING.
android.view.KeyEvent.isTracking,Is tracking.
android.view.KeyEvent.metaStateHasModifiers,Returns true if only the specified modifier keys are pressed according to the specified meta state. Returns false if a different combination of modifier keys are pressed. For the purposes of this function KEYCODE_CAPS_LOCK KEYCODE_SCROLL_LOCK and KEYCODE_NUM_LOCK are not considered modifier keys. Consequently this function ignores META_CAPS_LOCK_ON META_SCROLL_LOCK_ON and META_NUM_LOCK_ON. If the specified modifier mask includes directional modifiers such as META_SHIFT_LEFT_ON then this method ensures that the modifier is pressed on that side. If the specified modifier mask includes non-directional modifiers such as META_SHIFT_ON then this method ensures that the modifier is pressed on either side. If the specified modifier mask includes both directional and non-directional modifiers for the same type of key such as META_SHIFT_ON and META_SHIFT_LEFT_ON then this method throws an illegal argument exception.
android.view.KeyEvent.metaStateHasModifiers,Meta state has modifiers.
android.view.KeyEvent.metaStateHasModifiers,Returns true if only the specified modifier keys are pressed according to the specified meta state.
android.view.KeyEvent.metaStateHasModifiers,Returns false if a different combination of modifier keys are pressed.
android.view.KeyEvent.metaStateHasModifiers,For the purposes of this function KEYCODE_CAPS_LOCK KEYCODE_SCROLL_LOCK and KEYCODE_NUM_LOCK are not considered modifier keys.
android.view.KeyEvent.metaStateHasModifiers,Consequently this function ignores META_CAPS_LOCK_ON META_SCROLL_LOCK_ON and META_NUM_LOCK_ON.
android.view.KeyEvent.metaStateHasModifiers,If the specified modifier mask includes directional modifiers such as META_SHIFT_LEFT_ON then this method ensures that the modifier is pressed on that side.
android.view.KeyEvent.metaStateHasModifiers,If the specified modifier mask includes non-directional modifiers such as META_SHIFT_ON then this method ensures that the modifier is pressed on either side.
android.view.KeyEvent.metaStateHasModifiers,If the specified modifier mask includes both directional and non-directional modifiers for the same type of key such as META_SHIFT_ON and META_SHIFT_LEFT_ON then this method throws an illegal argument exception.
android.view.KeyEvent.metaStateHasNoModifiers,Returns true if no modifiers keys are pressed according to the specified meta state. For the purposes of this function KEYCODE_CAPS_LOCK KEYCODE_SCROLL_LOCK and KEYCODE_NUM_LOCK are not considered modifier keys. Consequently this function ignores META_CAPS_LOCK_ON META_SCROLL_LOCK_ON and META_NUM_LOCK_ON. The meta state is normalized prior to comparison using normalizeMetaState(int).
android.view.KeyEvent.metaStateHasNoModifiers,Meta state has no modifiers.
android.view.KeyEvent.metaStateHasNoModifiers,Returns true if no modifiers keys are pressed according to the specified meta state.
android.view.KeyEvent.metaStateHasNoModifiers,For the purposes of this function KEYCODE_CAPS_LOCK KEYCODE_SCROLL_LOCK and KEYCODE_NUM_LOCK are not considered modifier keys.
android.view.KeyEvent.metaStateHasNoModifiers,Consequently this function ignores META_CAPS_LOCK_ON META_SCROLL_LOCK_ON and META_NUM_LOCK_ON.
android.view.KeyEvent.metaStateHasNoModifiers,The meta state is normalized prior to comparison using normalizeMetaState(int).
android.view.KeyEvent.normalizeMetaState,Normalizes the specified meta state. The meta state is normalized such that if either the left or right modifier meta state bits are set then the result will also include the universal bit for that modifier. If the specified meta state contains META_ALT_LEFT_ON then the result will also contain META_ALT_ON in addition to META_ALT_LEFT_ON and the other bits that were specified in the input. The same is process is performed for shift control and meta. If the specified meta state contains synthetic meta states defined by MetaKeyKeyListener then those states are translated here and the original synthetic meta states are removed from the result. MetaKeyKeyListener#META_CAP_LOCKED is translated to META_CAPS_LOCK_ON. MetaKeyKeyListener#META_ALT_LOCKED is translated to META_ALT_ON. MetaKeyKeyListener#META_SYM_LOCKED is translated to META_SYM_ON. Undefined meta state bits are removed.
android.view.KeyEvent.normalizeMetaState,Normalize meta state.
android.view.KeyEvent.normalizeMetaState,Normalizes the specified meta state.
android.view.KeyEvent.normalizeMetaState,The meta state is normalized such that if either the left or right modifier meta state bits are set then the result will also include the universal bit for that modifier.
android.view.KeyEvent.normalizeMetaState,If the specified meta state contains META_ALT_LEFT_ON then the result will also contain META_ALT_ON in addition to META_ALT_LEFT_ON and the other bits that were specified in the input.
android.view.KeyEvent.normalizeMetaState,The same is process is performed for shift control and meta.
android.view.KeyEvent.normalizeMetaState,If the specified meta state contains synthetic meta states defined by MetaKeyKeyListener then those states are translated here and the original synthetic meta states are removed from the result.
android.view.KeyEvent.normalizeMetaState,MetaKeyKeyListener#META_CAP_LOCKED is translated to META_CAPS_LOCK_ON.
android.view.KeyEvent.normalizeMetaState,MetaKeyKeyListener#META_ALT_LOCKED is translated to META_ALT_ON.
android.view.KeyEvent.normalizeMetaState,MetaKeyKeyListener#META_SYM_LOCKED is translated to META_SYM_ON.
android.view.KeyEvent.normalizeMetaState,Undefined meta state bits are removed.
android.view.KeyEvent.startTracking,Call this during Callback#onKeyDown to have the system track the key through its final up (possibly including a long press). Note that only one key can be tracked at a time -- if another key down event is received while a previous one is being tracked tracking is stopped on the previous event.
android.view.KeyEvent.startTracking,Start tracking.
android.view.KeyEvent.startTracking,Call this during Callback#onKeyDown to have the system track the key through its final up (possibly including a long press).
android.view.KeyEvent.startTracking,Note that only one key can be tracked at a time -- if another key down event is received while a previous one is being tracked tracking is stopped on the previous event.
android.view.LayoutInflater.cloneInContext,Create a copy of the existing LayoutInflater object with the copy pointing to a different Context than the original. This is used by ContextThemeWrapper to create a new LayoutInflater to go along with the new Context theme.
android.view.LayoutInflater.cloneInContext,Clone in context.
android.view.LayoutInflater.cloneInContext,Create a copy of the existing LayoutInflater object with the copy pointing to a different Context than the original.
android.view.LayoutInflater.cloneInContext,This is used by ContextThemeWrapper to create a new LayoutInflater to go along with the new Context theme.
android.view.LayoutInflater.createView,Low-level function for instantiating a view by name. This attempts to instantiate a view class of the given name found in this LayoutInflater's ClassLoader. There are two things that can happen in an error case: either the exception describing the error will be thrown or a null will be returned. You must deal with both possibilities -- the former will happen the first time createView() is called for a class of a particular name the latter every time there-after for that class name.
android.view.LayoutInflater.createView,Create view.
android.view.LayoutInflater.createView,Low-level function for instantiating a view by name.
android.view.LayoutInflater.createView,This attempts to instantiate a view class of the given name found in this LayoutInflater's ClassLoader.
android.view.LayoutInflater.createView,There are two things that can happen in an error case: either the exception describing the error will be thrown or a null will be returned.
android.view.LayoutInflater.createView,You must deal with both possibilities -- the former will happen the first time createView() is called for a class of a particular name the latter every time there-after for that class name.
android.view.LayoutInflater.createView,Low-level function for instantiating a view by name. This attempts to instantiate a view class of the given name found in this LayoutInflater's ClassLoader. To use an explicit Context in the View constructor use createView(android.content.Context java.lang.String java.lang.String android.util.AttributeSet) instead. There are two things that can happen in an error case: either the exception describing the error will be thrown or a null will be returned. You must deal with both possibilities -- the former will happen the first time createView() is called for a class of a particular name the latter every time there-after for that class name.
android.view.LayoutInflater.createView,Create view.
android.view.LayoutInflater.createView,Low-level function for instantiating a view by name.
android.view.LayoutInflater.createView,This attempts to instantiate a view class of the given name found in this LayoutInflater's ClassLoader.
android.view.LayoutInflater.createView,To use an explicit Context in the View constructor use createView(android.content.Context java.lang.String java.lang.String android.util.AttributeSet) instead.
android.view.LayoutInflater.createView,There are two things that can happen in an error case: either the exception describing the error will be thrown or a null will be returned.
android.view.LayoutInflater.createView,You must deal with both possibilities -- the former will happen the first time createView() is called for a class of a particular name the latter every time there-after for that class name.
android.view.LayoutInflater.from,Obtains the LayoutInflater from the given context.
android.view.LayoutInflater.from,From.
android.view.LayoutInflater.getContext,Return the context we are running in for access to resources class loader etc.
android.view.LayoutInflater.getContext,Get context.
android.view.LayoutInflater.getFactory,Return the current Factory (or null). This is called on each element name. If the factory returns a View add that to the hierarchy. If it returns null proceed to call onCreateView(name).
android.view.LayoutInflater.getFactory,Get factory.
android.view.LayoutInflater.getFactory,Return the current Factory (or null).
android.view.LayoutInflater.getFactory,This is called on each element name.
android.view.LayoutInflater.getFactory,If the factory returns a View add that to the hierarchy.
android.view.LayoutInflater.getFactory,If it returns null proceed to call onCreateView(name).
android.view.LayoutInflater.inflate,Inflate a new view hierarchy from the specified xml resource. Throws InflateException if there is an error.
android.view.LayoutInflater.inflate,Inflate.
android.view.LayoutInflater.inflate,Inflate a new view hierarchy from the specified xml resource.
android.view.LayoutInflater.inflate,Throws InflateException if there is an error.
android.view.LayoutInflater.inflate,Inflate a new view hierarchy from the specified xml node. Throws InflateException if there is an error. * Important For performance reasons view inflation relies heavily on pre-processing of XML files that is done at build time. Therefore it is not currently possible to use LayoutInflater with an XmlPullParser over a plain XML file at runtime.
android.view.LayoutInflater.inflate,Inflate.
android.view.LayoutInflater.inflate,Inflate a new view hierarchy from the specified xml node.
android.view.LayoutInflater.inflate,Throws InflateException if there is an error.
android.view.LayoutInflater.inflate,* Important For performance reasons view inflation relies heavily on pre-processing of XML files that is done at build time.
android.view.LayoutInflater.inflate,Therefore it is not currently possible to use LayoutInflater with an XmlPullParser over a plain XML file at runtime.
android.view.LayoutInflater.inflate,Inflate a new view hierarchy from the specified XML node. Throws InflateException if there is an error. Important For performance reasons view inflation relies heavily on pre-processing of XML files that is done at build time. Therefore it is not currently possible to use LayoutInflater with an XmlPullParser over a plain XML file at runtime.
android.view.LayoutInflater.inflate,Inflate.
android.view.LayoutInflater.inflate,Inflate a new view hierarchy from the specified XML node.
android.view.LayoutInflater.inflate,Throws InflateException if there is an error.
android.view.LayoutInflater.inflate,Important For performance reasons view inflation relies heavily on pre-processing of XML files that is done at build time.
android.view.LayoutInflater.inflate,Therefore it is not currently possible to use LayoutInflater with an XmlPullParser over a plain XML file at runtime.
android.view.LayoutInflater.inflate,Inflate a new view hierarchy from the specified xml resource. Throws InflateException if there is an error.
android.view.LayoutInflater.inflate,Inflate.
android.view.LayoutInflater.inflate,Inflate a new view hierarchy from the specified xml resource.
android.view.LayoutInflater.inflate,Throws InflateException if there is an error.
android.view.MenuInflater.inflate,Inflate a menu hierarchy from the specified XML resource. Throws InflateException if there is an error.
android.view.MenuInflater.inflate,Inflate.
android.view.MenuInflater.inflate,Inflate a menu hierarchy from the specified XML resource.
android.view.MenuInflater.inflate,Throws InflateException if there is an error.
android.view.MotionEvent.findPointerIndex,Given a pointer identifier find the index of its data in the event.
android.view.MotionEvent.findPointerIndex,Find pointer index.
android.view.MotionEvent.getAction,Return the kind of action being performed. Consider using getActionMasked() and getActionIndex() to retrieve the separate masked action and pointer index.
android.view.MotionEvent.getAction,Get action.
android.view.MotionEvent.getAction,Return the kind of action being performed.
android.view.MotionEvent.getAction,Consider using getActionMasked() and getActionIndex() to retrieve the separate masked action and pointer index.
android.view.MotionEvent.getActionIndex,For ACTION_POINTER_DOWN or ACTION_POINTER_UP as returned by getActionMasked() this returns the associated pointer index. The index may be used with getPointerId(int) getX(int) getY(int) getPressure(int) and getSize(int) to get information about the pointer that has gone down or up.
android.view.MotionEvent.getActionIndex,Get action index.
android.view.MotionEvent.getActionIndex,For ACTION_POINTER_DOWN or ACTION_POINTER_UP as returned by getActionMasked() this returns the associated pointer index.
android.view.MotionEvent.getActionIndex,The index may be used with getPointerId(int) getX(int) getY(int) getPressure(int) and getSize(int) to get information about the pointer that has gone down or up.
android.view.MotionEvent.getActionMasked,Return the masked action being performed without pointer index information. Use getActionIndex() to return the index associated with pointer actions.
android.view.MotionEvent.getActionMasked,Get action masked.
android.view.MotionEvent.getActionMasked,Return the masked action being performed without pointer index information.
android.view.MotionEvent.getActionMasked,Use getActionIndex() to return the index associated with pointer actions.
android.view.MotionEvent.getAxisValue,Returns the value of the requested axis for the given pointer index (use getPointerId(int) to find the pointer identifier for this index).
android.view.MotionEvent.getAxisValue,Get axis value.
android.view.MotionEvent.getAxisValue,getAxisValue(int) for the first pointer index (may be an arbitrary pointer identifier).
android.view.MotionEvent.getAxisValue,Get axis value.
android.view.MotionEvent.getButtonState,Gets the state of all buttons that are pressed such as a mouse or stylus button.
android.view.MotionEvent.getButtonState,Get button state.
android.view.MotionEvent.getDownTime,Returns the time (in ms) when the user originally pressed down to start a stream of position events.
android.view.MotionEvent.getDownTime,Get down time.
android.view.MotionEvent.getEdgeFlags,Returns a bitfield indicating which edges if any were touched by this MotionEvent. For touch events clients can use this to determine if the user's finger was touching the edge of the display. This property is only set for ACTION_DOWN events.
android.view.MotionEvent.getEdgeFlags,Get edge flags.
android.view.MotionEvent.getEdgeFlags,Returns a bitfield indicating which edges if any were touched by this MotionEvent.
android.view.MotionEvent.getEdgeFlags,For touch events clients can use this to determine if the user's finger was touching the edge of the display.
android.view.MotionEvent.getEdgeFlags,This property is only set for ACTION_DOWN events.
android.view.MotionEvent.getFlags,Gets the motion event flags.
android.view.MotionEvent.getFlags,Get flags.
android.view.MotionEvent.getHistoricalEventTime,Returns the time that a historical movement occurred between this event and the previous event in the SystemClock.uptimeMillis() time base. This only applies to ACTION_MOVE events.
android.view.MotionEvent.getHistoricalEventTime,Get historical event time.
android.view.MotionEvent.getHistoricalEventTime,Returns the time that a historical movement occurred between this event and the previous event in the SystemClock.uptimeMillis() time base.
android.view.MotionEvent.getHistoricalEventTime,This only applies to ACTION_MOVE events.
android.view.MotionEvent.getHistoricalPressure,Returns a historical pressure coordinate as per getPressure(int) that occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events.
android.view.MotionEvent.getHistoricalPressure,Get historical pressure.
android.view.MotionEvent.getHistoricalPressure,Returns a historical pressure coordinate as per getPressure(int) that occurred between this event and the previous event for the given pointer.
android.view.MotionEvent.getHistoricalPressure,Only applies to ACTION_MOVE events.
android.view.MotionEvent.getHistoricalPressure,getHistoricalPressure(int int) for the first pointer index (may be an arbitrary pointer identifier).
android.view.MotionEvent.getHistoricalPressure,Get historical pressure.
android.view.MotionEvent.getHistoricalTouchMajor,getHistoricalTouchMajor(int int) for the first pointer index (may be an arbitrary pointer identifier).
android.view.MotionEvent.getHistoricalTouchMajor,Get historical touch major.
android.view.MotionEvent.getHistoricalTouchMajor,Returns a historical touch major axis coordinate as per getTouchMajor(int) that occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events.
android.view.MotionEvent.getHistoricalTouchMajor,Get historical touch major.
android.view.MotionEvent.getHistoricalTouchMajor,Returns a historical touch major axis coordinate as per getTouchMajor(int) that occurred between this event and the previous event for the given pointer.
android.view.MotionEvent.getHistoricalTouchMajor,Only applies to ACTION_MOVE events.
android.view.MotionEvent.getHistoricalX,getHistoricalX(int int) for the first pointer index (may be an arbitrary pointer identifier).
android.view.MotionEvent.getHistoricalX,Get historical x.
android.view.MotionEvent.getHistoricalX,Returns a historical X coordinate as per getX(int) that occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events.
android.view.MotionEvent.getHistoricalX,Get historical x.
android.view.MotionEvent.getHistoricalX,Returns a historical X coordinate as per getX(int) that occurred between this event and the previous event for the given pointer.
android.view.MotionEvent.getHistoricalX,Only applies to ACTION_MOVE events.
android.view.MotionEvent.getHistoricalY,getHistoricalY(int int) for the first pointer index (may be an arbitrary pointer identifier).
android.view.MotionEvent.getHistoricalY,Get historical y.
android.view.MotionEvent.getHistoricalY,Returns a historical Y coordinate as per getY(int) that occurred between this event and the previous event for the given pointer. Only applies to ACTION_MOVE events.
android.view.MotionEvent.getHistoricalY,Get historical y.
android.view.MotionEvent.getHistoricalY,Returns a historical Y coordinate as per getY(int) that occurred between this event and the previous event for the given pointer.
android.view.MotionEvent.getHistoricalY,Only applies to ACTION_MOVE events.
android.view.MotionEvent.getHistorySize,Returns the number of historical points in this event. These are movements that have occurred between this event and the previous event. This only applies to ACTION_MOVE events -- all other actions will have a size of 0.
android.view.MotionEvent.getHistorySize,Get history size.
android.view.MotionEvent.getHistorySize,Returns the number of historical points in this event.
android.view.MotionEvent.getHistorySize,These are movements that have occurred between this event and the previous event.
android.view.MotionEvent.getHistorySize,This only applies to ACTION_MOVE events -- all other actions will have a size of 0.
android.view.MotionEvent.getMetaState,Returns the state of any meta / modifier keys that were in effect when the event was generated. This is the same values as those returned by KeyEvent#getMetaState().
android.view.MotionEvent.getMetaState,Get meta state.
android.view.MotionEvent.getMetaState,Returns the state of any meta / modifier keys that were in effect when the event was generated.
android.view.MotionEvent.getMetaState,This is the same values as those returned by KeyEvent#getMetaState().
android.view.MotionEvent.getPointerId,Return the pointer identifier associated with a particular pointer data index in this event. The identifier tells you the actual pointer number associated with the data accounting for individual pointers going up and down since the start of the current gesture.
android.view.MotionEvent.getPointerId,Get pointer id.
android.view.MotionEvent.getPointerId,Return the pointer identifier associated with a particular pointer data index in this event.
android.view.MotionEvent.getPointerId,The identifier tells you the actual pointer number associated with the data accounting for individual pointers going up and down since the start of the current gesture.
android.view.MotionEvent.getPressure,Returns the current pressure of this event for the given pointer index (use getPointerId(int) to find the pointer identifier for this index). The pressure generally ranges from 0 (no pressure at all) to 1 (normal pressure) however values higher than 1 may be generated depending on the calibration of the input device.
android.view.MotionEvent.getPressure,Get pressure.
android.view.MotionEvent.getPressure,Returns the current pressure of this event for the given pointer index (use getPointerId(int) to find the pointer identifier for this index).
android.view.MotionEvent.getPressure,The pressure generally ranges from 0 (no pressure at all) to 1 (normal pressure) however values higher than 1 may be generated depending on the calibration of the input device.
android.view.MotionEvent.getPressure,getPressure(int) for the first pointer index (may be an arbitrary pointer identifier).
android.view.MotionEvent.getPressure,Get pressure.
android.view.MotionEvent.getRawX,Returns the original raw X coordinate of this event. For touch events on the screen this is the original location of the event on the screen before it had been adjusted for the containing window and views.
android.view.MotionEvent.getRawX,Get raw x.
android.view.MotionEvent.getRawX,Returns the original raw X coordinate of this event.
android.view.MotionEvent.getRawX,For touch events on the screen this is the original location of the event on the screen before it had been adjusted for the containing window and views.
android.view.MotionEvent.getRawX,Returns the original raw X coordinate of this event. For touch events on the screen this is the original location of the event on the screen before it had been adjusted for the containing window and views.
android.view.MotionEvent.getRawX,Get raw x.
android.view.MotionEvent.getRawX,Returns the original raw X coordinate of this event.
android.view.MotionEvent.getRawX,For touch events on the screen this is the original location of the event on the screen before it had been adjusted for the containing window and views.
android.view.MotionEvent.getRawY,Returns the original raw Y coordinate of this event. For touch events on the screen this is the original location of the event on the screen before it had been adjusted for the containing window and views.
android.view.MotionEvent.getRawY,Get raw y.
android.view.MotionEvent.getRawY,Returns the original raw Y coordinate of this event.
android.view.MotionEvent.getRawY,For touch events on the screen this is the original location of the event on the screen before it had been adjusted for the containing window and views.
android.view.MotionEvent.getRawY,Returns the original raw Y coordinate of this event. For touch events on the screen this is the original location of the event on the screen before it had been adjusted for the containing window and views.
android.view.MotionEvent.getRawY,Get raw y.
android.view.MotionEvent.getRawY,Returns the original raw Y coordinate of this event.
android.view.MotionEvent.getRawY,For touch events on the screen this is the original location of the event on the screen before it had been adjusted for the containing window and views.
android.view.MotionEvent.getSize,Returns a scaled value of the approximate size for the given pointer index (use getPointerId(int) to find the pointer identifier for this index). This represents some approximation of the area of the screen being pressed; the actual value in pixels corresponding to the touch is normalized with the device specific range of values and scaled to a value between 0 and 1. The value of size can be used to determine fat touch events.
android.view.MotionEvent.getSize,Get size.
android.view.MotionEvent.getSize,Returns a scaled value of the approximate size for the given pointer index (use getPointerId(int) to find the pointer identifier for this index).
android.view.MotionEvent.getSize,This represents some approximation of the area of the screen being pressed; the actual value in pixels corresponding to the touch is normalized with the device specific range of values and scaled to a value between 0 and 1.
android.view.MotionEvent.getSize,The value of size can be used to determine fat touch events.
android.view.MotionEvent.getSize,getSize(int) for the first pointer index (may be an arbitrary pointer identifier).
android.view.MotionEvent.getSize,Get size.
android.view.MotionEvent.getSource,Gets the source of the event.
android.view.MotionEvent.getSource,Get source.
android.view.MotionEvent.getToolType,Gets the tool type of a pointer for the given pointer index. The tool type indicates the type of tool used to make contact such as a finger or stylus if known.
android.view.MotionEvent.getToolType,Get tool type.
android.view.MotionEvent.getToolType,Gets the tool type of a pointer for the given pointer index.
android.view.MotionEvent.getToolType,The tool type indicates the type of tool used to make contact such as a finger or stylus if known.
android.view.MotionEvent.getTouchMajor,getTouchMajor(int) for the first pointer index (may be an arbitrary pointer identifier).
android.view.MotionEvent.getTouchMajor,Get touch major.
android.view.MotionEvent.getTouchMajor,Returns the length of the major axis of an ellipse that describes the touch area at the point of contact for the given pointer index (use getPointerId(int) to find the pointer identifier for this index).
android.view.MotionEvent.getTouchMajor,Get touch major.
android.view.MotionEvent.getX,Returns the X coordinate of this event for the given pointer index (use getPointerId(int) to find the pointer identifier for this index). Whole numbers are pixels; the value may have a fraction for input devices that are sub-pixel precise.
android.view.MotionEvent.getX,Get x.
android.view.MotionEvent.getX,Returns the X coordinate of this event for the given pointer index (use getPointerId(int) to find the pointer identifier for this index).
android.view.MotionEvent.getX,Whole numbers are pixels; the value may have a fraction for input devices that are sub-pixel precise.
android.view.MotionEvent.getX,getX(int) for the first pointer index (may be an arbitrary pointer identifier).
android.view.MotionEvent.getX,Get x.
android.view.MotionEvent.getXPrecision,Return the precision of the X coordinates being reported. You can multiply this number with getX() to find the actual hardware value of the X coordinate.
android.view.MotionEvent.getXPrecision,Get x precision.
android.view.MotionEvent.getXPrecision,Return the precision of the X coordinates being reported.
android.view.MotionEvent.getXPrecision,You can multiply this number with getX() to find the actual hardware value of the X coordinate.
android.view.MotionEvent.getY,getY(int) for the first pointer index (may be an arbitrary pointer identifier).
android.view.MotionEvent.getY,Get y.
android.view.MotionEvent.getY,Returns the Y coordinate of this event for the given pointer index (use getPointerId(int) to find the pointer identifier for this index). Whole numbers are pixels; the value may have a fraction for input devices that are sub-pixel precise.
android.view.MotionEvent.getY,Get y.
android.view.MotionEvent.getY,Returns the Y coordinate of this event for the given pointer index (use getPointerId(int) to find the pointer identifier for this index).
android.view.MotionEvent.getY,Whole numbers are pixels; the value may have a fraction for input devices that are sub-pixel precise.
android.view.MotionEvent.getYPrecision,Return the precision of the Y coordinates being reported. You can multiply this number with getY() to find the actual hardware value of the Y coordinate.
android.view.MotionEvent.getYPrecision,Get y precision.
android.view.MotionEvent.getYPrecision,Return the precision of the Y coordinates being reported.
android.view.MotionEvent.getYPrecision,You can multiply this number with getY() to find the actual hardware value of the Y coordinate.
android.view.MotionEvent.obtain,Create a new MotionEvent filling in a subset of the basic motion values. Those not specified here are: device id (always 0) pressure and size (always 1) x and y precision (always 1) and edgeFlags (always 0).
android.view.MotionEvent.obtain,Obtain.
android.view.MotionEvent.obtain,Create a new MotionEvent filling in a subset of the basic motion values.
android.view.MotionEvent.obtain,Those not specified here are: device id (always 0) pressure and size (always 1) x and y precision (always 1) and edgeFlags (always 0).
android.view.MotionEvent.obtain,This method was deprecated in API level 15. Use obtain(long long int float float float float int float float int int) instead. Create a new MotionEvent filling in all of the basic values that define the motion.
android.view.MotionEvent.obtain,Obtain.
android.view.MotionEvent.obtain,This method was deprecated in API level 15.
android.view.MotionEvent.obtain,Use obtain(long long int float float float float int float float int int) instead.
android.view.MotionEvent.obtain,Create a new MotionEvent filling in all of the basic values that define the motion.
android.view.MotionEvent.obtain,This method was deprecated in API level 15. Use obtain(long long int int android.view.MotionEvent.PointerProperties[] android.view.MotionEvent.PointerCoords[] int int float float int int int int) instead. Create a new MotionEvent filling in all of the basic values that define the motion.
android.view.MotionEvent.obtain,Obtain.
android.view.MotionEvent.obtain,This method was deprecated in API level 15.
android.view.MotionEvent.obtain,Use obtain(long long int int android.view.MotionEvent.PointerProperties[] android.view.MotionEvent.PointerCoords[] int int float float int int int int) instead.
android.view.MotionEvent.obtain,Create a new MotionEvent filling in all of the basic values that define the motion.
android.view.MotionEvent.obtain,Create a new MotionEvent filling in all of the basic values that define the motion.
android.view.MotionEvent.obtain,Obtain.
android.view.MotionEvent.obtain,Create a new MotionEvent copying from an existing one.
android.view.MotionEvent.obtain,Obtain.
android.view.MotionEvent.obtain,Create a new MotionEvent filling in all of the basic values that define the motion.
android.view.MotionEvent.obtain,Obtain.
android.view.MotionEvent.obtainNoHistory,Create a new MotionEvent copying from an existing one but not including any historical point information.
android.view.MotionEvent.obtainNoHistory,Obtain no history.
android.view.MotionEvent.offsetLocation,Adjust this event's location.
android.view.MotionEvent.offsetLocation,Offset location.
android.view.MotionEvent.recycle,Recycle the MotionEvent to be re-used by a later caller. After calling this function you must not ever touch the event again.
android.view.MotionEvent.recycle,Recycle.
android.view.MotionEvent.recycle,Recycle the MotionEvent to be re-used by a later caller.
android.view.MotionEvent.recycle,After calling this function you must not ever touch the event again.
android.view.MotionEvent.setAction,Sets this event's action.
android.view.MotionEvent.setAction,Set action.
android.view.MotionEvent.setLocation,Set this event's location. Applies offsetLocation(float float) with a delta from the current location to the given new location.
android.view.MotionEvent.setLocation,Set location.
android.view.MotionEvent.setLocation,Set this event's location.
android.view.MotionEvent.setLocation,Applies offsetLocation(float float) with a delta from the current location to the given new location.
android.view.MotionEvent.transform,Applies a transformation matrix to all of the points in the event.
android.view.MotionEvent.transform,Transform.
android.view.OrientationEventListener.disable,Disables the OrientationEventListener.
android.view.OrientationEventListener.disable,Disable.
android.view.OrientationEventListener.enable,Enables the OrientationEventListener so it will monitor the sensor and call onOrientationChanged(int) when the device orientation changes.
android.view.OrientationEventListener.enable,Enable.
android.view.ScaleGestureDetector.getCurrentSpan,Return the average distance between each of the pointers forming the gesture in progress through the focal point.
android.view.ScaleGestureDetector.getCurrentSpan,Get current span.
android.view.ScaleGestureDetector.getCurrentSpanX,Return the average X distance between each of the pointers forming the gesture in progress through the focal point.
android.view.ScaleGestureDetector.getCurrentSpanX,Get current span x.
android.view.ScaleGestureDetector.getCurrentSpanY,Return the average Y distance between each of the pointers forming the gesture in progress through the focal point.
android.view.ScaleGestureDetector.getCurrentSpanY,Get current span y.
android.view.ScaleGestureDetector.getFocusX,Get the X coordinate of the current gesture's focal point. If a gesture is in progress the focal point is between each of the pointers forming the gesture. If isInProgress() would return false the result of this function is undefined.
android.view.ScaleGestureDetector.getFocusX,Get focus x.
android.view.ScaleGestureDetector.getFocusX,Get the X coordinate of the current gesture's focal point.
android.view.ScaleGestureDetector.getFocusX,If a gesture is in progress the focal point is between each of the pointers forming the gesture.
android.view.ScaleGestureDetector.getFocusX,If isInProgress() would return false the result of this function is undefined.
android.view.ScaleGestureDetector.getFocusY,Get the Y coordinate of the current gesture's focal point. If a gesture is in progress the focal point is between each of the pointers forming the gesture. If isInProgress() would return false the result of this function is undefined.
android.view.ScaleGestureDetector.getFocusY,Get focus y.
android.view.ScaleGestureDetector.getFocusY,Get the Y coordinate of the current gesture's focal point.
android.view.ScaleGestureDetector.getFocusY,If a gesture is in progress the focal point is between each of the pointers forming the gesture.
android.view.ScaleGestureDetector.getFocusY,If isInProgress() would return false the result of this function is undefined.
android.view.ScaleGestureDetector.getPreviousSpan,Return the previous average distance between each of the pointers forming the gesture in progress through the focal point.
android.view.ScaleGestureDetector.getPreviousSpan,Get previous span.
android.view.ScaleGestureDetector.getPreviousSpanX,Return the previous average X distance between each of the pointers forming the gesture in progress through the focal point.
android.view.ScaleGestureDetector.getPreviousSpanX,Get previous span x.
android.view.ScaleGestureDetector.getPreviousSpanY,Return the previous average Y distance between each of the pointers forming the gesture in progress through the focal point.
android.view.ScaleGestureDetector.getPreviousSpanY,Get previous span y.
android.view.ScaleGestureDetector.getScaleFactor,Return the scaling factor from the previous scale event to the current event. This value is defined as ( getCurrentSpan() / getPreviousSpan() ).
android.view.ScaleGestureDetector.getScaleFactor,Get scale factor.
android.view.ScaleGestureDetector.getScaleFactor,Return the scaling factor from the previous scale event to the current event.
android.view.ScaleGestureDetector.getScaleFactor,This value is defined as ( getCurrentSpan() / getPreviousSpan() ).
android.view.ScaleGestureDetector.isInProgress,Returns true if a scale gesture is in progress.
android.view.ScaleGestureDetector.isInProgress,Is in progress.
android.view.ScaleGestureDetector.isQuickScaleEnabled,Return whether the quick scale gesture in which the user performs a double tap followed by a swipe should perform scaling..
android.view.ScaleGestureDetector.isQuickScaleEnabled,Is quick scale enabled.
android.view.ScaleGestureDetector.onTouchEvent,Accepts MotionEvents and dispatches events to a OnScaleGestureListener when appropriate. Applications should pass a complete and consistent event stream to this method. A complete and consistent event stream involves all MotionEvents from the initial ACTION_DOWN to the final ACTION_UP or ACTION_CANCEL.
android.view.ScaleGestureDetector.onTouchEvent,On touch event.
android.view.ScaleGestureDetector.onTouchEvent,Accepts MotionEvents and dispatches events to a OnScaleGestureListener when appropriate.
android.view.ScaleGestureDetector.onTouchEvent,Applications should pass a complete and consistent event stream to this method.
android.view.ScaleGestureDetector.onTouchEvent,A complete and consistent event stream involves all MotionEvents from the initial ACTION_DOWN to the final ACTION_UP or ACTION_CANCEL.
android.view.ScaleGestureDetector.setQuickScaleEnabled,Set whether the associated OnScaleGestureListener should receive onScale callbacks when the user performs a doubleTap followed by a swipe. Note that this is enabled by default if the app targets API 19 and newer.
android.view.ScaleGestureDetector.setQuickScaleEnabled,Set quick scale enabled.
android.view.ScaleGestureDetector.setQuickScaleEnabled,Set whether the associated OnScaleGestureListener should receive onScale callbacks when the user performs a doubleTap followed by a swipe.
android.view.ScaleGestureDetector.setQuickScaleEnabled,Note that this is enabled by default if the app targets API 19 and newer.
android.view.SoundEffectConstants.getContantForFocusDirection,Get the sonification constant for the focus directions.
android.view.SoundEffectConstants.getContantForFocusDirection,Get contant for focus direction.
android.view.Surface.isValid,Returns true if this object holds a valid surface.
android.view.Surface.isValid,Is valid.
android.view.Surface.release,Release the local reference to the server-side surface. Always call release() when you're done with a Surface. This will make the surface invalid.
android.view.Surface.release,Release.
android.view.Surface.release,Release the local reference to the server-side surface.
android.view.Surface.release,Always call release() when you're done with a Surface.
android.view.Surface.release,This will make the surface invalid.
android.view.SurfaceView.getHolder,Return the SurfaceHolder providing access and control over this SurfaceView's underlying surface.
android.view.SurfaceView.getHolder,Get holder.
android.view.SurfaceView.setVisibility,Set the visibility state of this view.
android.view.SurfaceView.setVisibility,Set visibility.
android.view.SurfaceView.setZOrderMediaOverlay,Control whether the surface view's surface is placed on top of another regular surface view in the window (but still behind the window itself). This is typically used to place overlays on top of an underlying media surface view. Note that this must be set before the surface view's containing window is attached to the window manager. Calling this overrides any previous call to setZOrderOnTop(boolean).
android.view.SurfaceView.setZOrderMediaOverlay,Set z order media overlay.
android.view.SurfaceView.setZOrderMediaOverlay,Control whether the surface view's surface is placed on top of another regular surface view in the window (but still behind the window itself).
android.view.SurfaceView.setZOrderMediaOverlay,This is typically used to place overlays on top of an underlying media surface view.
android.view.SurfaceView.setZOrderMediaOverlay,Note that this must be set before the surface view's containing window is attached to the window manager.
android.view.SurfaceView.setZOrderMediaOverlay,Calling this overrides any previous call to setZOrderOnTop(boolean).
android.view.SurfaceView.setZOrderOnTop,Control whether the surface view's surface is placed on top of its window. Normally it is placed behind the window to allow it to (for the most part) appear to composite with the views in the hierarchy. By setting this you cause it to be placed above the window. This means that none of the contents of the window this SurfaceView is in will be visible on top of its surface. Note that this must be set before the surface view's containing window is attached to the window manager. Calling this overrides any previous call to setZOrderMediaOverlay(boolean).
android.view.SurfaceView.setZOrderOnTop,Set z order on top.
android.view.SurfaceView.setZOrderOnTop,Control whether the surface view's surface is placed on top of its window.
android.view.SurfaceView.setZOrderOnTop,Normally it is placed behind the window to allow it to (for the most part) appear to composite with the views in the hierarchy.
android.view.SurfaceView.setZOrderOnTop,By setting this you cause it to be placed above the window.
android.view.SurfaceView.setZOrderOnTop,This means that none of the contents of the window this SurfaceView is in will be visible on top of its surface.
android.view.SurfaceView.setZOrderOnTop,Note that this must be set before the surface view's containing window is attached to the window manager.
android.view.SurfaceView.setZOrderOnTop,Calling this overrides any previous call to setZOrderMediaOverlay(boolean).
android.view.TouchDelegate.onTouchEvent,Forward touch events to the delegate view if the event is within the bounds specified in the constructor.
android.view.TouchDelegate.onTouchEvent,On touch event.
android.view.VelocityTracker.addMovement,Add a user's movement to the tracker. You should call this for the initial MotionEvent#ACTION_DOWN the following MotionEvent#ACTION_MOVE events that you receive and the final MotionEvent#ACTION_UP. You can however call this for whichever events you desire.
android.view.VelocityTracker.addMovement,Add movement.
android.view.VelocityTracker.addMovement,Add a user's movement to the tracker.
android.view.VelocityTracker.addMovement,You should call this for the initial MotionEvent#ACTION_DOWN the following MotionEvent#ACTION_MOVE events that you receive and the final MotionEvent#ACTION_UP.
android.view.VelocityTracker.addMovement,You can however call this for whichever events you desire.
android.view.VelocityTracker.clear,Reset the velocity tracker back to its initial state.
android.view.VelocityTracker.clear,Clear.
android.view.VelocityTracker.computeCurrentVelocity,Equivalent to invoking computeCurrentVelocity(int float) with a maximum velocity of Float.MAX_VALUE.
android.view.VelocityTracker.computeCurrentVelocity,Compute current velocity.
android.view.VelocityTracker.computeCurrentVelocity,Compute the current velocity based on the points that have been collected. Only call this when you actually want to retrieve velocity information as it is relatively expensive. You can then retrieve the velocity with getXVelocity() and getYVelocity().
android.view.VelocityTracker.computeCurrentVelocity,Compute current velocity.
android.view.VelocityTracker.computeCurrentVelocity,Compute the current velocity based on the points that have been collected.
android.view.VelocityTracker.computeCurrentVelocity,Only call this when you actually want to retrieve velocity information as it is relatively expensive.
android.view.VelocityTracker.computeCurrentVelocity,You can then retrieve the velocity with getXVelocity() and getYVelocity().
android.view.VelocityTracker.getXVelocity,Retrieve the last computed X velocity. You must first call computeCurrentVelocity(int) before calling this function.
android.view.VelocityTracker.getXVelocity,Get x velocity.
android.view.VelocityTracker.getXVelocity,Retrieve the last computed X velocity.
android.view.VelocityTracker.getXVelocity,You must first call computeCurrentVelocity(int) before calling this function.
android.view.VelocityTracker.getXVelocity,Retrieve the last computed X velocity. You must first call computeCurrentVelocity(int) before calling this function.
android.view.VelocityTracker.getXVelocity,Get x velocity.
android.view.VelocityTracker.getXVelocity,Retrieve the last computed X velocity.
android.view.VelocityTracker.getXVelocity,You must first call computeCurrentVelocity(int) before calling this function.
android.view.VelocityTracker.getYVelocity,Retrieve the last computed Y velocity. You must first call computeCurrentVelocity(int) before calling this function.
android.view.VelocityTracker.getYVelocity,Get y velocity.
android.view.VelocityTracker.getYVelocity,Retrieve the last computed Y velocity.
android.view.VelocityTracker.getYVelocity,You must first call computeCurrentVelocity(int) before calling this function.
android.view.VelocityTracker.getYVelocity,Retrieve the last computed Y velocity. You must first call computeCurrentVelocity(int) before calling this function.
android.view.VelocityTracker.getYVelocity,Get y velocity.
android.view.VelocityTracker.getYVelocity,Retrieve the last computed Y velocity.
android.view.VelocityTracker.getYVelocity,You must first call computeCurrentVelocity(int) before calling this function.
android.view.VelocityTracker.obtain,Retrieve a new VelocityTracker object to watch the velocity of a motion. Be sure to call recycle() when done. You should generally only maintain an active object while tracking a movement so that the VelocityTracker can be re-used elsewhere.
android.view.VelocityTracker.obtain,Obtain.
android.view.VelocityTracker.obtain,Retrieve a new VelocityTracker object to watch the velocity of a motion.
android.view.VelocityTracker.obtain,Be sure to call recycle() when done.
android.view.VelocityTracker.obtain,You should generally only maintain an active object while tracking a movement so that the VelocityTracker can be re-used elsewhere.
android.view.VelocityTracker.recycle,Return a VelocityTracker object back to be re-used by others. You must not touch the object after calling this function.
android.view.VelocityTracker.recycle,Recycle.
android.view.VelocityTracker.recycle,Return a VelocityTracker object back to be re-used by others.
android.view.VelocityTracker.recycle,You must not touch the object after calling this function.
android.view.View.addFocusables,Add any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views. If we are in touch mode only add views that are also focusable in touch mode.
android.view.View.addFocusables,Add focusables.
android.view.View.addFocusables,Add any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views.
android.view.View.addFocusables,If we are in touch mode only add views that are also focusable in touch mode.
android.view.View.addFocusables,Adds any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views. This method adds all focusable views regardless if we are in touch mode or only views focusable in touch mode if we are in touch mode or only views that can take accessibility focus if accessibility is enabled depending on the focusable mode parameter.
android.view.View.addFocusables,Add focusables.
android.view.View.addFocusables,Adds any focusable views that are descendants of this view (possibly including this view if it is focusable itself) to views.
android.view.View.addFocusables,This method adds all focusable views regardless if we are in touch mode or only views focusable in touch mode if we are in touch mode or only views that can take accessibility focus if accessibility is enabled depending on the focusable mode parameter.
android.view.View.addTouchables,Add any touchable views that are descendants of this view (possibly including this view if it is touchable itself) to views.
android.view.View.addTouchables,Add touchables.
android.view.View.animate,This method returns a ViewPropertyAnimator object which can be used to animate specific properties on this View.
android.view.View.animate,Animate.
android.view.View.bringToFront,Change the view's z order in the tree so it's on top of other sibling views. This ordering change may affect layout if the parent container uses an order-dependent layout scheme (e.g. LinearLayout). Prior to Build.VERSION_CODES.KITKAT this method should be followed by calls to requestLayout() and View#invalidate() on the view's parent to force the parent to redraw with the new child ordering.
android.view.View.bringToFront,Bring to front.
android.view.View.bringToFront,Change the view's z order in the tree so it's on top of other sibling views.
android.view.View.bringToFront,This ordering change may affect layout if the parent container uses an order-dependent layout scheme (e.g.
android.view.View.bringToFront,LinearLayout).
android.view.View.bringToFront,Prior to Build.VERSION_CODES.KITKAT this method should be followed by calls to requestLayout() and View#invalidate() on the view's parent to force the parent to redraw with the new child ordering.
android.view.View.buildDrawingCache,This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful such as for alpha animations setLayerType(int android.graphics.Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(android.graphics.Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps real-time shadows and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. Forces the drawing cache to be built if the drawing cache is invalid. If you call buildDrawingCache() manually without calling setDrawingCacheEnabled(true) you should cleanup the cache by calling destroyDrawingCache() afterwards. Note about auto scaling in compatibility mode: When auto scaling is not enabled this method will create a bitmap of the same size as this view. Because this bitmap will be drawn scaled by the parent ViewGroup the result on screen might show scaling artifacts. To avoid such artifacts you should call this method by setting the auto scaling to true. Doing so however will generate a bitmap of a different size than the view. This implies that your application must be able to handle this size. You should avoid calling this method when hardware acceleration is enabled. If you do not need the drawing cache bitmap calling this method will increase memory usage and cause the view to be rendered in software once thus negatively impacting performance.
android.view.View.buildDrawingCache,Build drawing cache.
android.view.View.buildDrawingCache,This method was deprecated in API level 28.
android.view.View.buildDrawingCache,The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11.
android.view.View.buildDrawingCache,With hardware-acceleration intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer.
android.view.View.buildDrawingCache,In the rare cases where caching layers are useful such as for alpha animations setLayerType(int android.graphics.Paint) handles this with hardware rendering.
android.view.View.buildDrawingCache,For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(android.graphics.Canvas) on the View.
android.view.View.buildDrawingCache,However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps real-time shadows and outline clipping.
android.view.View.buildDrawingCache,For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
android.view.View.buildDrawingCache,Forces the drawing cache to be built if the drawing cache is invalid.
android.view.View.buildDrawingCache,If you call buildDrawingCache() manually without calling setDrawingCacheEnabled(true) you should cleanup the cache by calling destroyDrawingCache() afterwards.
android.view.View.buildDrawingCache,Note about auto scaling in compatibility mode: When auto scaling is not enabled this method will create a bitmap of the same size as this view.
android.view.View.buildDrawingCache,Because this bitmap will be drawn scaled by the parent ViewGroup the result on screen might show scaling artifacts.
android.view.View.buildDrawingCache,To avoid such artifacts you should call this method by setting the auto scaling to true.
android.view.View.buildDrawingCache,Doing so however will generate a bitmap of a different size than the view.
android.view.View.buildDrawingCache,This implies that your application must be able to handle this size.
android.view.View.buildDrawingCache,You should avoid calling this method when hardware acceleration is enabled.
android.view.View.buildDrawingCache,If you do not need the drawing cache bitmap calling this method will increase memory usage and cause the view to be rendered in software once thus negatively impacting performance.
android.view.View.buildDrawingCache,This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful such as for alpha animations setLayerType(int android.graphics.Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(android.graphics.Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps real-time shadows and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. Calling this method is equivalent to calling buildDrawingCache(false).
android.view.View.buildDrawingCache,Build drawing cache.
android.view.View.buildDrawingCache,This method was deprecated in API level 28.
android.view.View.buildDrawingCache,The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11.
android.view.View.buildDrawingCache,With hardware-acceleration intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer.
android.view.View.buildDrawingCache,In the rare cases where caching layers are useful such as for alpha animations setLayerType(int android.graphics.Paint) handles this with hardware rendering.
android.view.View.buildDrawingCache,For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(android.graphics.Canvas) on the View.
android.view.View.buildDrawingCache,However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps real-time shadows and outline clipping.
android.view.View.buildDrawingCache,For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
android.view.View.buildDrawingCache,Calling this method is equivalent to calling buildDrawingCache(false).
android.view.View.cancelLongPress,Cancels a pending long press. Your subclass can use this if you want the context menu to come up if the user presses and holds at the same place but you don't want it to come up if they press and then move around enough to cause scrolling.
android.view.View.cancelLongPress,Cancel long press.
android.view.View.cancelLongPress,Cancels a pending long press.
android.view.View.cancelLongPress,Your subclass can use this if you want the context menu to come up if the user presses and holds at the same place but you don't want it to come up if they press and then move around enough to cause scrolling.
android.view.View.cancelPendingInputEvents,Cancel any deferred high-level input events that were previously posted to the event queue. Many views post high-level events such as click handlers to the event queue to run deferred in order to preserve a desired user experience - clearing visible pressed states before executing etc. This method will abort any events of this nature that are currently in flight. Custom views that generate their own high-level deferred input events should override onCancelPendingInputEvents() and remove those pending events from the queue. This will also cancel pending input events for any child views. Note that this may not be sufficient as a debouncing strategy for clicks in all cases. This will not impact newer events posted after this call that may occur as a result of lower-level input events still waiting in the queue. If you are trying to prevent double-submitted events for the duration of some sort of asynchronous transaction you should also take other steps to protect against unexpected double inputs e.g. calling setEnabled(false) and re-enabling the view when the transaction completes tracking already submitted transaction IDs etc.
android.view.View.cancelPendingInputEvents,Cancel pending input events.
android.view.View.cancelPendingInputEvents,Cancel any deferred high-level input events that were previously posted to the event queue.
android.view.View.cancelPendingInputEvents,Many views post high-level events such as click handlers to the event queue to run deferred in order to preserve a desired user experience - clearing visible pressed states before executing etc.
android.view.View.cancelPendingInputEvents,This method will abort any events of this nature that are currently in flight.
android.view.View.cancelPendingInputEvents,Custom views that generate their own high-level deferred input events should override onCancelPendingInputEvents() and remove those pending events from the queue.
android.view.View.cancelPendingInputEvents,This will also cancel pending input events for any child views.
android.view.View.cancelPendingInputEvents,Note that this may not be sufficient as a debouncing strategy for clicks in all cases.
android.view.View.cancelPendingInputEvents,This will not impact newer events posted after this call that may occur as a result of lower-level input events still waiting in the queue.
android.view.View.cancelPendingInputEvents,If you are trying to prevent double-submitted events for the duration of some sort of asynchronous transaction you should also take other steps to protect against unexpected double inputs e.g.
android.view.View.cancelPendingInputEvents,calling setEnabled(false) and re-enabling the view when the transaction completes tracking already submitted transaction IDs etc.
android.view.View.clearAnimation,Cancels any animations for this view.
android.view.View.clearAnimation,Clear animation.
android.view.View.clearFocus,Called when this view wants to give up focus. If focus is cleared onFocusChanged(boolean int android.graphics.Rect) is called. Note: When not in touch-mode the framework will try to give focus to the first focusable View from the top after focus is cleared. Hence if this View is the first from the top that can take focus then all callbacks related to clearing focus will be invoked after which the framework will give focus to this view.
android.view.View.clearFocus,Clear focus.
android.view.View.clearFocus,Called when this view wants to give up focus.
android.view.View.clearFocus,If focus is cleared onFocusChanged(boolean int android.graphics.Rect) is called.
android.view.View.clearFocus,Note: When not in touch-mode the framework will try to give focus to the first focusable View from the top after focus is cleared.
android.view.View.clearFocus,Hence if this View is the first from the top that can take focus then all callbacks related to clearing focus will be invoked after which the framework will give focus to this view.
android.view.View.destroyDrawingCache,This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful such as for alpha animations setLayerType(int android.graphics.Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(android.graphics.Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps real-time shadows and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. Frees the resources used by the drawing cache. If you call buildDrawingCache() manually without calling setDrawingCacheEnabled(true) you should cleanup the cache with this method afterwards.
android.view.View.destroyDrawingCache,Destroy drawing cache.
android.view.View.destroyDrawingCache,This method was deprecated in API level 28.
android.view.View.destroyDrawingCache,The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11.
android.view.View.destroyDrawingCache,With hardware-acceleration intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer.
android.view.View.destroyDrawingCache,In the rare cases where caching layers are useful such as for alpha animations setLayerType(int android.graphics.Paint) handles this with hardware rendering.
android.view.View.destroyDrawingCache,For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(android.graphics.Canvas) on the View.
android.view.View.destroyDrawingCache,However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps real-time shadows and outline clipping.
android.view.View.destroyDrawingCache,For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
android.view.View.destroyDrawingCache,Frees the resources used by the drawing cache.
android.view.View.destroyDrawingCache,If you call buildDrawingCache() manually without calling setDrawingCacheEnabled(true) you should cleanup the cache with this method afterwards.
android.view.View.dispatchApplyWindowInsets,Request to apply the given window insets to this view or another view in its subtree. This method should be called by clients wishing to apply insets corresponding to areas obscured by window decorations or overlays. This can include the status and navigation bars action bars input methods and more. New inset categories may be added in the future. The method returns the insets provided minus any that were applied by this view or its children. Clients wishing to provide custom behavior should override the onApplyWindowInsets(android.view.WindowInsets) method or alternatively provide a OnApplyWindowInsetsListener via the setOnApplyWindowInsetsListener method. This method replaces the older fitSystemWindows method.
android.view.View.dispatchApplyWindowInsets,Dispatch apply window insets.
android.view.View.dispatchApplyWindowInsets,Request to apply the given window insets to this view or another view in its subtree.
android.view.View.dispatchApplyWindowInsets,This method should be called by clients wishing to apply insets corresponding to areas obscured by window decorations or overlays.
android.view.View.dispatchApplyWindowInsets,This can include the status and navigation bars action bars input methods and more.
android.view.View.dispatchApplyWindowInsets,New inset categories may be added in the future.
android.view.View.dispatchApplyWindowInsets,The method returns the insets provided minus any that were applied by this view or its children.
android.view.View.dispatchApplyWindowInsets,Clients wishing to provide custom behavior should override the onApplyWindowInsets(android.view.WindowInsets) method or alternatively provide a OnApplyWindowInsetsListener via the setOnApplyWindowInsetsListener method.
android.view.View.dispatchApplyWindowInsets,This method replaces the older fitSystemWindows method.
android.view.View.dispatchGenericMotionEvent,Dispatch a generic motion event. Generic motion events with source class InputDevice#SOURCE_CLASS_POINTER are delivered to the view under the pointer. All other generic motion events are delivered to the focused view. Hover events are handled specially and are delivered to onHoverEvent(android.view.MotionEvent).
android.view.View.dispatchGenericMotionEvent,Dispatch generic motion event.
android.view.View.dispatchGenericMotionEvent,Dispatch a generic motion event.
android.view.View.dispatchGenericMotionEvent,Generic motion events with source class InputDevice#SOURCE_CLASS_POINTER are delivered to the view under the pointer.
android.view.View.dispatchGenericMotionEvent,All other generic motion events are delivered to the focused view.
android.view.View.dispatchGenericMotionEvent,Hover events are handled specially and are delivered to onHoverEvent(android.view.MotionEvent).
android.view.View.dispatchPopulateAccessibilityEvent,Dispatches an AccessibilityEvent to the View first and then to its children for adding their text content to the event. Note that the event text is populated in a separate dispatch path since we add to the event not only the text of the source but also the text of all its descendants. A typical implementation will call onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) on the this view and then call the dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) on each child. Override this method if custom population of the event text content is required. If an AccessibilityDelegate has been specified via calling setAccessibilityDelegate(android.view.View.AccessibilityDelegate) its AccessibilityDelegate#dispatchPopulateAccessibilityEvent(View AccessibilityEvent) is responsible for handling this call. Note: Accessibility events of certain types are not dispatched for populating the event text via this method. For details refer to AccessibilityEvent.
android.view.View.dispatchPopulateAccessibilityEvent,Dispatch populate accessibility event.
android.view.View.dispatchPopulateAccessibilityEvent,Dispatches an AccessibilityEvent to the View first and then to its children for adding their text content to the event.
android.view.View.dispatchPopulateAccessibilityEvent,Note that the event text is populated in a separate dispatch path since we add to the event not only the text of the source but also the text of all its descendants.
android.view.View.dispatchPopulateAccessibilityEvent,A typical implementation will call onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) on the this view and then call the dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) on each child.
android.view.View.dispatchPopulateAccessibilityEvent,Override this method if custom population of the event text content is required.
android.view.View.dispatchPopulateAccessibilityEvent,If an AccessibilityDelegate has been specified via calling setAccessibilityDelegate(android.view.View.AccessibilityDelegate) its AccessibilityDelegate#dispatchPopulateAccessibilityEvent(View AccessibilityEvent) is responsible for handling this call.
android.view.View.dispatchPopulateAccessibilityEvent,Note: Accessibility events of certain types are not dispatched for populating the event text via this method.
android.view.View.dispatchPopulateAccessibilityEvent,For details refer to AccessibilityEvent.
android.view.View.dispatchTouchEvent,Pass the touch screen motion event down to the target view or this view if it is the target.
android.view.View.dispatchTouchEvent,Dispatch touch event.
android.view.View.dispatchUnhandledMove,This method is the last chance for the focused view and its ancestors to respond to an arrow key. This is called when the focused view did not consume the key internally nor could the view system find a new view in the requested direction to give focus to.
android.view.View.dispatchUnhandledMove,Dispatch unhandled move.
android.view.View.dispatchUnhandledMove,This method is the last chance for the focused view and its ancestors to respond to an arrow key.
android.view.View.dispatchUnhandledMove,This is called when the focused view did not consume the key internally nor could the view system find a new view in the requested direction to give focus to.
android.view.View.dispatchWindowFocusChanged,Called when the window containing this view gains or loses window focus. ViewGroups should override to route to their children.
android.view.View.dispatchWindowFocusChanged,Dispatch window focus changed.
android.view.View.dispatchWindowFocusChanged,Called when the window containing this view gains or loses window focus.
android.view.View.dispatchWindowFocusChanged,ViewGroups should override to route to their children.
android.view.View.draw,Manually render this view (and all of its children) to the given Canvas. The view must have already done a full layout before this function is called. When implementing a view implement onDraw(android.graphics.Canvas) instead of overriding this method. If you do need to override this method call the superclass version. If you override this method you must call through to the superclass implementation.
android.view.View.draw,Draw.
android.view.View.draw,Manually render this view (and all of its children) to the given Canvas.
android.view.View.draw,The view must have already done a full layout before this function is called.
android.view.View.draw,When implementing a view implement onDraw(android.graphics.Canvas) instead of overriding this method.
android.view.View.draw,If you do need to override this method call the superclass version.
android.view.View.draw,If you override this method you must call through to the superclass implementation.
android.view.View.findFocus,Find the view in the hierarchy rooted at this view that currently has focus.
android.view.View.findFocus,Find focus.
android.view.View.findViewById,Finds the first descendant view with the given ID the view itself if the ID matches getId() or null if the ID is invalid (< 0) or there is no matching view in the hierarchy. Note: In most cases -- depending on compiler support -- the resulting view is automatically cast to the target class type. If the target class type is unconstrained an explicit cast may be necessary.
android.view.View.findViewById,Find view by id.
android.view.View.findViewById,Finds the first descendant view with the given ID the view itself if the ID matches getId() or null if the ID is invalid (< 0) or there is no matching view in the hierarchy.
android.view.View.findViewById,Note: In most cases -- depending on compiler support -- the resulting view is automatically cast to the target class type.
android.view.View.findViewById,If the target class type is unconstrained an explicit cast may be necessary.
android.view.View.findViewWithTag,Look for a child view with the given tag. If this view has the given tag return this view.
android.view.View.findViewWithTag,Find view with tag.
android.view.View.findViewWithTag,Look for a child view with the given tag.
android.view.View.findViewWithTag,If this view has the given tag return this view.
android.view.View.focusSearch,Find the nearest view in the specified direction that can take focus. This does not actually give focus to that view.
android.view.View.focusSearch,Focus search.
android.view.View.focusSearch,Find the nearest view in the specified direction that can take focus.
android.view.View.focusSearch,This does not actually give focus to that view.
android.view.View.getAccessibilityLiveRegion,Gets the live region mode for this View. Related XML Attributes: android:accessibilityLiveRegion.
android.view.View.getAccessibilityLiveRegion,Get accessibility live region.
android.view.View.getAccessibilityLiveRegion,Gets the live region mode for this View.
android.view.View.getAccessibilityLiveRegion,Related XML Attributes: android:accessibilityLiveRegion.
android.view.View.getAnimation,Get the animation currently associated with this view.
android.view.View.getAnimation,Get animation.
android.view.View.getApplicationWindowToken,"Retrieve a unique token identifying the top-level ""real"" window of the window that this view is attached to. That is this is like getWindowToken() except if the window this view in is a panel window (attached to another containing window) then the token of the containing window is returned instead."
android.view.View.getApplicationWindowToken,Get application window token.
android.view.View.getApplicationWindowToken,"Retrieve a unique token identifying the top-level ""real"" window of the window that this view is attached to."
android.view.View.getApplicationWindowToken,That is this is like getWindowToken() except if the window this view in is a panel window (attached to another containing window) then the token of the containing window is returned instead.
android.view.View.getBackground,Gets the background drawable Related XML Attributes: android:background.
android.view.View.getBackground,Get background.
android.view.View.getBaseline,Return the offset of the widget's text baseline from the widget's top boundary. If this widget does not support baseline alignment this method returns -1.
android.view.View.getBaseline,Get baseline.
android.view.View.getBaseline,Return the offset of the widget's text baseline from the widget's top boundary.
android.view.View.getBaseline,If this widget does not support baseline alignment this method returns -1.
android.view.View.getBottom,Bottom position of this view relative to its parent.
android.view.View.getBottom,Get bottom.
android.view.View.getCameraDistance,Gets the distance along the Z axis from the camera to this view.
android.view.View.getCameraDistance,Get camera distance.
android.view.View.getContext,Returns the context the view is running in through which it can access the current theme resources etc.
android.view.View.getContext,Get context.
android.view.View.getDisplay,Gets the logical display to which the view's window has been attached.
android.view.View.getDisplay,Get display.
android.view.View.getDrawingCache,This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful such as for alpha animations setLayerType(int android.graphics.Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(android.graphics.Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps real-time shadows and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. Calling this method is equivalent to calling getDrawingCache(false).
android.view.View.getDrawingCache,Get drawing cache.
android.view.View.getDrawingCache,This method was deprecated in API level 28.
android.view.View.getDrawingCache,The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11.
android.view.View.getDrawingCache,With hardware-acceleration intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer.
android.view.View.getDrawingCache,In the rare cases where caching layers are useful such as for alpha animations setLayerType(int android.graphics.Paint) handles this with hardware rendering.
android.view.View.getDrawingCache,For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(android.graphics.Canvas) on the View.
android.view.View.getDrawingCache,However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps real-time shadows and outline clipping.
android.view.View.getDrawingCache,For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
android.view.View.getDrawingCache,Calling this method is equivalent to calling getDrawingCache(false).
android.view.View.getDrawingCache,This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful such as for alpha animations setLayerType(int android.graphics.Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(android.graphics.Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps real-time shadows and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. Returns the bitmap in which this view drawing is cached. The returned bitmap is null when caching is disabled. If caching is enabled and the cache is not ready this method will create it. Calling draw(android.graphics.Canvas) will not draw from the cache when the cache is enabled. To benefit from the cache you must request the drawing cache by calling this method and draw it on screen if the returned bitmap is not null. Note about auto scaling in compatibility mode: When auto scaling is not enabled this method will create a bitmap of the same size as this view. Because this bitmap will be drawn scaled by the parent ViewGroup the result on screen might show scaling artifacts. To avoid such artifacts you should call this method by setting the auto scaling to true. Doing so however will generate a bitmap of a different size than the view. This implies that your application must be able to handle this size.
android.view.View.getDrawingCache,Get drawing cache.
android.view.View.getDrawingCache,This method was deprecated in API level 28.
android.view.View.getDrawingCache,The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11.
android.view.View.getDrawingCache,With hardware-acceleration intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer.
android.view.View.getDrawingCache,In the rare cases where caching layers are useful such as for alpha animations setLayerType(int android.graphics.Paint) handles this with hardware rendering.
android.view.View.getDrawingCache,For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(android.graphics.Canvas) on the View.
android.view.View.getDrawingCache,However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps real-time shadows and outline clipping.
android.view.View.getDrawingCache,For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
android.view.View.getDrawingCache,Returns the bitmap in which this view drawing is cached.
android.view.View.getDrawingCache,The returned bitmap is null when caching is disabled.
android.view.View.getDrawingCache,If caching is enabled and the cache is not ready this method will create it.
android.view.View.getDrawingCache,Calling draw(android.graphics.Canvas) will not draw from the cache when the cache is enabled.
android.view.View.getDrawingCache,To benefit from the cache you must request the drawing cache by calling this method and draw it on screen if the returned bitmap is not null.
android.view.View.getDrawingCache,Note about auto scaling in compatibility mode: When auto scaling is not enabled this method will create a bitmap of the same size as this view.
android.view.View.getDrawingCache,Because this bitmap will be drawn scaled by the parent ViewGroup the result on screen might show scaling artifacts.
android.view.View.getDrawingCache,To avoid such artifacts you should call this method by setting the auto scaling to true.
android.view.View.getDrawingCache,Doing so however will generate a bitmap of a different size than the view.
android.view.View.getDrawingCache,This implies that your application must be able to handle this size.
android.view.View.getDrawingRect,Return the visible drawing bounds of your view. Fills in the output rectangle with the values from getScrollX() getScrollY() getWidth() and getHeight(). These bounds do not account for any transformation properties currently set on the view such as setScaleX(float) or setRotation(float).
android.view.View.getDrawingRect,Get drawing rect.
android.view.View.getDrawingRect,Return the visible drawing bounds of your view.
android.view.View.getDrawingRect,Fills in the output rectangle with the values from getScrollX() getScrollY() getWidth() and getHeight().
android.view.View.getDrawingRect,These bounds do not account for any transformation properties currently set on the view such as setScaleX(float) or setRotation(float).
android.view.View.getElevation,The base elevation of this view relative to its parent in pixels.
android.view.View.getElevation,Get elevation.
android.view.View.getFitsSystemWindows,Check for state of setFitsSystemWindows(boolean). If this method returns true the default implementation of fitSystemWindows(android.graphics.Rect) will be executed. Related XML Attributes: android:fitsSystemWindows.
android.view.View.getFitsSystemWindows,Get fits system windows.
android.view.View.getFitsSystemWindows,Check for state of setFitsSystemWindows(boolean).
android.view.View.getFitsSystemWindows,If this method returns true the default implementation of fitSystemWindows(android.graphics.Rect) will be executed.
android.view.View.getFitsSystemWindows,Related XML Attributes: android:fitsSystemWindows.
android.view.View.getGlobalVisibleRect,.
android.view.View.getGlobalVisibleRect,Get global visible rect.
android.view.View.getGlobalVisibleRect,If some part of this view is not clipped by any of its parents then return that area in r in global (root) coordinates. To convert r to local coordinates (without taking possible View rotations into account) offset it by -globalOffset (e.g. r.offset(-globalOffset.x -globalOffset.y)). If the view is completely clipped or translated out return false.
android.view.View.getGlobalVisibleRect,Get global visible rect.
android.view.View.getGlobalVisibleRect,If some part of this view is not clipped by any of its parents then return that area in r in global (root) coordinates.
android.view.View.getGlobalVisibleRect,To convert r to local coordinates (without taking possible View rotations into account) offset it by -globalOffset (e.g.
android.view.View.getGlobalVisibleRect,r.offset(-globalOffset.x -globalOffset.y)).
android.view.View.getGlobalVisibleRect,If the view is completely clipped or translated out return false.
android.view.View.getHeight,Return the height of your view.
android.view.View.getHeight,Get height.
android.view.View.getHitRect,Hit rectangle in parent's coordinates.
android.view.View.getHitRect,Get hit rect.
android.view.View.getKeyDispatcherState,Return the global KeyEvent.DispatcherState for this view's window. Returns null if the view is not currently attached to the window. Normally you will not need to use this directly but just use the standard high-level event callbacks like onKeyDown(int android.view.KeyEvent).
android.view.View.getKeyDispatcherState,Get key dispatcher state.
android.view.View.getKeyDispatcherState,Return the global KeyEvent.DispatcherState for this view's window.
android.view.View.getKeyDispatcherState,Returns null if the view is not currently attached to the window.
android.view.View.getKeyDispatcherState,Normally you will not need to use this directly but just use the standard high-level event callbacks like onKeyDown(int android.view.KeyEvent).
android.view.View.getLabelFor,Gets the id of a view for which this view serves as a label for accessibility purposes.
android.view.View.getLabelFor,Get label for.
android.view.View.getLayoutParams,Get the LayoutParams associated with this view. All views should have layout parameters. These supply parameters to the parent of this view specifying how it should be arranged. There are many subclasses of ViewGroup.LayoutParams and these correspond to the different subclasses of ViewGroup that are responsible for arranging their children. This method may return null if this View is not attached to a parent ViewGroup or setLayoutParams(android.view.ViewGroup.LayoutParams) was not invoked successfully. When a View is attached to a parent ViewGroup this method must not return null.
android.view.View.getLayoutParams,Get layout params.
android.view.View.getLayoutParams,Get the LayoutParams associated with this view.
android.view.View.getLayoutParams,All views should have layout parameters.
android.view.View.getLayoutParams,These supply parameters to the parent of this view specifying how it should be arranged.
android.view.View.getLayoutParams,There are many subclasses of ViewGroup.LayoutParams and these correspond to the different subclasses of ViewGroup that are responsible for arranging their children.
android.view.View.getLayoutParams,This method may return null if this View is not attached to a parent ViewGroup or setLayoutParams(android.view.ViewGroup.LayoutParams) was not invoked successfully.
android.view.View.getLayoutParams,When a View is attached to a parent ViewGroup this method must not return null.
android.view.View.getLeft,Left position of this view relative to its parent.
android.view.View.getLeft,Get left.
android.view.View.getLocationInWindow,Computes the coordinates of this view in its window. The argument must be an array of two integers. After the method returns the array contains the x and y location in that order.
android.view.View.getLocationInWindow,Get location in window.
android.view.View.getLocationInWindow,Computes the coordinates of this view in its window.
android.view.View.getLocationInWindow,The argument must be an array of two integers.
android.view.View.getLocationInWindow,After the method returns the array contains the x and y location in that order.
android.view.View.getLocationOnScreen,Computes the coordinates of this view on the screen. The argument must be an array of two integers. After the method returns the array contains the x and y location in that order.
android.view.View.getLocationOnScreen,Get location on screen.
android.view.View.getLocationOnScreen,Computes the coordinates of this view on the screen.
android.view.View.getLocationOnScreen,The argument must be an array of two integers.
android.view.View.getLocationOnScreen,After the method returns the array contains the x and y location in that order.
android.view.View.getMatrix,The transform matrix of this view which is calculated based on the current rotation scale and pivot properties.
android.view.View.getMatrix,Get matrix.
android.view.View.getMeasuredHeight,Like getMeasuredHeightAndState() but only returns the raw height component (that is the result is masked by MEASURED_SIZE_MASK ).
android.view.View.getMeasuredHeight,Get measured height.
android.view.View.getMeasuredHeightAndState,Return the full height measurement information for this view as computed by the most recent call to measure(int int). This result is a bit mask as defined by MEASURED_SIZE_MASK and MEASURED_STATE_TOO_SMALL. This should be used during measurement and layout calculations only. Use getHeight() to see how wide a view is after layout.
android.view.View.getMeasuredHeightAndState,Get measured height and state.
android.view.View.getMeasuredHeightAndState,Return the full height measurement information for this view as computed by the most recent call to measure(int int).
android.view.View.getMeasuredHeightAndState,This result is a bit mask as defined by MEASURED_SIZE_MASK and MEASURED_STATE_TOO_SMALL.
android.view.View.getMeasuredHeightAndState,This should be used during measurement and layout calculations only.
android.view.View.getMeasuredHeightAndState,Use getHeight() to see how wide a view is after layout.
android.view.View.getMeasuredState,Return only the state bits of getMeasuredWidthAndState() and getMeasuredHeightAndState() combined into one integer. The width component is in the regular bits MEASURED_STATE_MASK and the height component is at the shifted bits MEASURED_HEIGHT_STATE_SHIFT >> MEASURED_STATE_MASK.
android.view.View.getMeasuredState,Get measured state.
android.view.View.getMeasuredState,Return only the state bits of getMeasuredWidthAndState() and getMeasuredHeightAndState() combined into one integer.
android.view.View.getMeasuredState,The width component is in the regular bits MEASURED_STATE_MASK and the height component is at the shifted bits MEASURED_HEIGHT_STATE_SHIFT >> MEASURED_STATE_MASK.
android.view.View.getMeasuredWidth,Like getMeasuredWidthAndState() but only returns the raw width component (that is the result is masked by MEASURED_SIZE_MASK ).
android.view.View.getMeasuredWidth,Get measured width.
android.view.View.getMeasuredWidthAndState,Return the full width measurement information for this view as computed by the most recent call to measure(int int). This result is a bit mask as defined by MEASURED_SIZE_MASK and MEASURED_STATE_TOO_SMALL. This should be used during measurement and layout calculations only. Use getWidth() to see how wide a view is after layout.
android.view.View.getMeasuredWidthAndState,Get measured width and state.
android.view.View.getMeasuredWidthAndState,Return the full width measurement information for this view as computed by the most recent call to measure(int int).
android.view.View.getMeasuredWidthAndState,This result is a bit mask as defined by MEASURED_SIZE_MASK and MEASURED_STATE_TOO_SMALL.
android.view.View.getMeasuredWidthAndState,This should be used during measurement and layout calculations only.
android.view.View.getMeasuredWidthAndState,Use getWidth() to see how wide a view is after layout.
android.view.View.getMinimumWidth,Returns the minimum width of the view. Related XML Attributes: android:minWidth.
android.view.View.getMinimumWidth,Get minimum width.
android.view.View.getMinimumWidth,Returns the minimum width of the view.
android.view.View.getMinimumWidth,Related XML Attributes: android:minWidth.
android.view.View.getPaddingBottom,Returns the bottom padding of this view. If there are inset and enabled scrollbars this value may include the space required to display the scrollbars as well.
android.view.View.getPaddingBottom,Get padding bottom.
android.view.View.getPaddingBottom,Returns the bottom padding of this view.
android.view.View.getPaddingBottom,If there are inset and enabled scrollbars this value may include the space required to display the scrollbars as well.
android.view.View.getPaddingEnd,Returns the end padding of this view depending on its resolved layout direction. If there are inset and enabled scrollbars this value may include the space required to display the scrollbars as well.
android.view.View.getPaddingEnd,Get padding end.
android.view.View.getPaddingEnd,Returns the end padding of this view depending on its resolved layout direction.
android.view.View.getPaddingEnd,If there are inset and enabled scrollbars this value may include the space required to display the scrollbars as well.
android.view.View.getPaddingLeft,Returns the left padding of this view. If there are inset and enabled scrollbars this value may include the space required to display the scrollbars as well.
android.view.View.getPaddingLeft,Get padding left.
android.view.View.getPaddingLeft,Returns the left padding of this view.
android.view.View.getPaddingLeft,If there are inset and enabled scrollbars this value may include the space required to display the scrollbars as well.
android.view.View.getPaddingRight,Returns the right padding of this view. If there are inset and enabled scrollbars this value may include the space required to display the scrollbars as well.
android.view.View.getPaddingRight,Get padding right.
android.view.View.getPaddingRight,Returns the right padding of this view.
android.view.View.getPaddingRight,If there are inset and enabled scrollbars this value may include the space required to display the scrollbars as well.
android.view.View.getPaddingStart,Returns the start padding of this view depending on its resolved layout direction. If there are inset and enabled scrollbars this value may include the space required to display the scrollbars as well.
android.view.View.getPaddingStart,Get padding start.
android.view.View.getPaddingStart,Returns the start padding of this view depending on its resolved layout direction.
android.view.View.getPaddingStart,If there are inset and enabled scrollbars this value may include the space required to display the scrollbars as well.
android.view.View.getPaddingTop,Returns the top padding of this view.
android.view.View.getPaddingTop,Get padding top.
android.view.View.getParent,Gets the parent of this view. Note that the parent is a ViewParent and not necessarily a View.
android.view.View.getParent,Get parent.
android.view.View.getParent,Gets the parent of this view.
android.view.View.getParent,Note that the parent is a ViewParent and not necessarily a View.
android.view.View.getPivotX,The x location of the point around which the view is rotated and scaled. Related XML Attributes: android:transformPivotX.
android.view.View.getPivotX,Get pivot x.
android.view.View.getPivotX,The x location of the point around which the view is rotated and scaled.
android.view.View.getPivotX,Related XML Attributes: android:transformPivotX.
android.view.View.getPivotY,The y location of the point around which the view is rotated and scaled. Related XML Attributes: android:transformPivotY.
android.view.View.getPivotY,Get pivot y.
android.view.View.getPivotY,The y location of the point around which the view is rotated and scaled.
android.view.View.getPivotY,Related XML Attributes: android:transformPivotY.
android.view.View.getResources,Returns the resources associated with this view.
android.view.View.getResources,Get resources.
android.view.View.getRight,Right position of this view relative to its parent.
android.view.View.getRight,Get right.
android.view.View.getRootView,Finds the topmost view in the current view hierarchy.
android.view.View.getRootView,Get root view.
android.view.View.getRotationX,The degrees that the view is rotated around the horizontal axis through the pivot point.
android.view.View.getRotationX,Get rotation x.
android.view.View.getRotationY,The degrees that the view is rotated around the vertical axis through the pivot point.
android.view.View.getRotationY,Get rotation y.
android.view.View.getScaleX,The amount that the view is scaled in x around the pivot point as a proportion of the view's unscaled width. A value of 1 the default means that no scaling is applied. By default this is 1.0f.
android.view.View.getScaleX,Get scale x.
android.view.View.getScaleX,The amount that the view is scaled in x around the pivot point as a proportion of the view's unscaled width.
android.view.View.getScaleX,A value of 1 the default means that no scaling is applied.
android.view.View.getScaleX,By default this is 1.0f.
android.view.View.getScaleY,The amount that the view is scaled in y around the pivot point as a proportion of the view's unscaled height. A value of 1 the default means that no scaling is applied. By default this is 1.0f.
android.view.View.getScaleY,Get scale y.
android.view.View.getScaleY,The amount that the view is scaled in y around the pivot point as a proportion of the view's unscaled height.
android.view.View.getScaleY,A value of 1 the default means that no scaling is applied.
android.view.View.getScaleY,By default this is 1.0f.
android.view.View.getScrollX,Return the scrolled left position of this view. This is the left edge of the displayed part of your view. You do not need to draw any pixels farther left since those are outside of the frame of your view on screen.
android.view.View.getScrollX,Get scroll x.
android.view.View.getScrollX,Return the scrolled left position of this view.
android.view.View.getScrollX,This is the left edge of the displayed part of your view.
android.view.View.getScrollX,You do not need to draw any pixels farther left since those are outside of the frame of your view on screen.
android.view.View.getScrollY,Return the scrolled top position of this view. This is the top edge of the displayed part of your view. You do not need to draw any pixels above it since those are outside of the frame of your view on screen.
android.view.View.getScrollY,Get scroll y.
android.view.View.getScrollY,Return the scrolled top position of this view.
android.view.View.getScrollY,This is the top edge of the displayed part of your view.
android.view.View.getScrollY,You do not need to draw any pixels above it since those are outside of the frame of your view on screen.
android.view.View.getSystemUiVisibility,Returns the last setSystemUiVisibility(int) that this view has requested.
android.view.View.getSystemUiVisibility,Get system ui visibility.
android.view.View.getTag,Returns this view's tag.
android.view.View.getTag,Get tag.
android.view.View.getTag,Returns the tag associated with this view and the specified key.
android.view.View.getTag,Get tag.
android.view.View.getTop,Top position of this view relative to its parent.
android.view.View.getTop,Get top.
android.view.View.getTransitionName,Returns the name of the View to be used to identify Views in Transitions. Names should be unique in the View hierarchy. This returns null if the View has not been given a name.
android.view.View.getTransitionName,Get transition name.
android.view.View.getTransitionName,Returns the name of the View to be used to identify Views in Transitions.
android.view.View.getTransitionName,Names should be unique in the View hierarchy.
android.view.View.getTransitionName,This returns null if the View has not been given a name.
android.view.View.getTranslationX,The horizontal location of this view relative to its left position. This position is post-layout in addition to wherever the object's layout placed it.
android.view.View.getTranslationX,Get translation x.
android.view.View.getTranslationX,The horizontal location of this view relative to its left position.
android.view.View.getTranslationX,This position is post-layout in addition to wherever the object's layout placed it.
android.view.View.getTranslationY,The vertical location of this view relative to its top position. This position is post-layout in addition to wherever the object's layout placed it.
android.view.View.getTranslationY,Get translation y.
android.view.View.getTranslationY,The vertical location of this view relative to its top position.
android.view.View.getTranslationY,This position is post-layout in addition to wherever the object's layout placed it.
android.view.View.getTranslationZ,The depth location of this view relative to its elevation.
android.view.View.getTranslationZ,Get translation z.
android.view.View.getViewTreeObserver,Returns the ViewTreeObserver for this view's hierarchy. The view tree observer can be used to get notifications when global events like layout happen. The returned ViewTreeObserver observer is not guaranteed to remain valid for the lifetime of this View. If the caller of this method keeps a long-lived reference to ViewTreeObserver it should always check for the return value of ViewTreeObserver#isAlive().
android.view.View.getViewTreeObserver,Get view tree observer.
android.view.View.getViewTreeObserver,Returns the ViewTreeObserver for this view's hierarchy.
android.view.View.getViewTreeObserver,The view tree observer can be used to get notifications when global events like layout happen.
android.view.View.getViewTreeObserver,The returned ViewTreeObserver observer is not guaranteed to remain valid for the lifetime of this View.
android.view.View.getViewTreeObserver,If the caller of this method keeps a long-lived reference to ViewTreeObserver it should always check for the return value of ViewTreeObserver#isAlive().
android.view.View.getVisibility,Returns the visibility status for this view. Related XML Attributes: android:visibility.
android.view.View.getVisibility,Get visibility.
android.view.View.getVisibility,Returns the visibility status for this view.
android.view.View.getVisibility,Related XML Attributes: android:visibility.
android.view.View.getWidth,Return the width of your view.
android.view.View.getWidth,Get width.
android.view.View.getWindowId,Retrieve the WindowId for the window this view is currently attached to.
android.view.View.getWindowId,Get window id.
android.view.View.getWindowSystemUiVisibility,Returns the current system UI visibility that is currently set for the entire window. This is the combination of the setSystemUiVisibility(int) values supplied by all of the views in the window.
android.view.View.getWindowSystemUiVisibility,Get window system ui visibility.
android.view.View.getWindowSystemUiVisibility,Returns the current system UI visibility that is currently set for the entire window.
android.view.View.getWindowSystemUiVisibility,This is the combination of the setSystemUiVisibility(int) values supplied by all of the views in the window.
android.view.View.getWindowVisibility,Returns the current visibility of the window this view is attached to (either GONE INVISIBLE or VISIBLE ).
android.view.View.getWindowVisibility,Get window visibility.
android.view.View.getWindowVisibleDisplayFrame,Retrieve the overall visible display size in which the window this view is attached to has been positioned in. This takes into account screen decorations above the window for both cases where the window itself is being position inside of them or the window is being placed under then and covered insets are used for the window to position its content inside. In effect this tells you the available area where content can be placed and remain visible to users. This function requires an IPC back to the window manager to retrieve the requested information so should not be used in performance critical code like drawing.
android.view.View.getWindowVisibleDisplayFrame,Get window visible display frame.
android.view.View.getWindowVisibleDisplayFrame,Retrieve the overall visible display size in which the window this view is attached to has been positioned in.
android.view.View.getWindowVisibleDisplayFrame,This takes into account screen decorations above the window for both cases where the window itself is being position inside of them or the window is being placed under then and covered insets are used for the window to position its content inside.
android.view.View.getWindowVisibleDisplayFrame,In effect this tells you the available area where content can be placed and remain visible to users.
android.view.View.getWindowVisibleDisplayFrame,This function requires an IPC back to the window manager to retrieve the requested information so should not be used in performance critical code like drawing.
android.view.View.getX,The visual x position of this view in pixels. This is equivalent to the translationX property plus the current left property.
android.view.View.getX,Get x.
android.view.View.getX,The visual x position of this view in pixels.
android.view.View.getX,This is equivalent to the translationX property plus the current left property.
android.view.View.getY,The visual y position of this view in pixels. This is equivalent to the translationY property plus the current top property.
android.view.View.getY,Get y.
android.view.View.getY,The visual y position of this view in pixels.
android.view.View.getY,This is equivalent to the translationY property plus the current top property.
android.view.View.hasFocus,Returns true if this view has focus itself or is the ancestor of the view that has focus.
android.view.View.hasFocus,Has focus.
android.view.View.hasTransientState,Indicates whether the view is currently tracking transient state that the app should not need to concern itself with saving and restoring but that the framework should take special note to preserve when possible. A view with transient state cannot be trivially rebound from an external data source such as an adapter binding item views in a list. This may be because the view is performing an animation tracking user selection of content or similar.
android.view.View.hasTransientState,Has transient state.
android.view.View.hasTransientState,Indicates whether the view is currently tracking transient state that the app should not need to concern itself with saving and restoring but that the framework should take special note to preserve when possible.
android.view.View.hasTransientState,A view with transient state cannot be trivially rebound from an external data source such as an adapter binding item views in a list.
android.view.View.hasTransientState,This may be because the view is performing an animation tracking user selection of content or similar.
android.view.View.hasWindowFocus,Returns true if this view is in a window that currently has window focus. Note that this is not the same as the view itself having focus.
android.view.View.hasWindowFocus,Has window focus.
android.view.View.hasWindowFocus,Returns true if this view is in a window that currently has window focus.
android.view.View.hasWindowFocus,Note that this is not the same as the view itself having focus.
android.view.View.inflate,Inflate a view from an XML resource. This convenience method wraps the LayoutInflater class which provides a full range of options for view inflation.
android.view.View.inflate,Inflate.
android.view.View.inflate,Inflate a view from an XML resource.
android.view.View.inflate,This convenience method wraps the LayoutInflater class which provides a full range of options for view inflation.
android.view.View.invalidate,Invalidate the whole view. If the view is visible onDraw(android.graphics.Canvas) will be called at some point in the future. This must be called from a UI thread. To call from a non-UI thread call postInvalidate().
android.view.View.invalidate,Invalidate.
android.view.View.invalidate,Invalidate the whole view.
android.view.View.invalidate,If the view is visible onDraw(android.graphics.Canvas) will be called at some point in the future.
android.view.View.invalidate,This must be called from a UI thread.
android.view.View.invalidate,To call from a non-UI thread call postInvalidate().
android.view.View.invalidate,This method was deprecated in API level 28. The switch to hardware accelerated rendering in API 14 reduced the importance of the dirty rectangle. In API 21 the given rectangle is ignored entirely in favor of an internally-calculated area instead. Because of this clients are encouraged to just call invalidate(). Mark the area defined by dirty as needing to be drawn. If the view is visible onDraw(android.graphics.Canvas) will be called at some point in the future. This must be called from a UI thread. To call from a non-UI thread call postInvalidate(). WARNING: In API 19 and below this method may be destructive to dirty.
android.view.View.invalidate,Invalidate.
android.view.View.invalidate,This method was deprecated in API level 28.
android.view.View.invalidate,The switch to hardware accelerated rendering in API 14 reduced the importance of the dirty rectangle.
android.view.View.invalidate,In API 21 the given rectangle is ignored entirely in favor of an internally-calculated area instead.
android.view.View.invalidate,Because of this clients are encouraged to just call invalidate().
android.view.View.invalidate,Mark the area defined by dirty as needing to be drawn.
android.view.View.invalidate,If the view is visible onDraw(android.graphics.Canvas) will be called at some point in the future.
android.view.View.invalidate,This must be called from a UI thread.
android.view.View.invalidate,To call from a non-UI thread call postInvalidate().
android.view.View.invalidate,WARNING: In API 19 and below this method may be destructive to dirty.
android.view.View.invalidate,This method was deprecated in API level 28. The switch to hardware accelerated rendering in API 14 reduced the importance of the dirty rectangle. In API 21 the given rectangle is ignored entirely in favor of an internally-calculated area instead. Because of this clients are encouraged to just call invalidate(). Mark the area defined by the rect (ltrb) as needing to be drawn. The coordinates of the dirty rect are relative to the view. If the view is visible onDraw(android.graphics.Canvas) will be called at some point in the future. This must be called from a UI thread. To call from a non-UI thread call postInvalidate().
android.view.View.invalidate,Invalidate.
android.view.View.invalidate,This method was deprecated in API level 28.
android.view.View.invalidate,The switch to hardware accelerated rendering in API 14 reduced the importance of the dirty rectangle.
android.view.View.invalidate,In API 21 the given rectangle is ignored entirely in favor of an internally-calculated area instead.
android.view.View.invalidate,Because of this clients are encouraged to just call invalidate().
android.view.View.invalidate,Mark the area defined by the rect (ltrb) as needing to be drawn.
android.view.View.invalidate,The coordinates of the dirty rect are relative to the view.
android.view.View.invalidate,If the view is visible onDraw(android.graphics.Canvas) will be called at some point in the future.
android.view.View.invalidate,This must be called from a UI thread.
android.view.View.invalidate,To call from a non-UI thread call postInvalidate().
android.view.View.invalidateDrawable,Invalidates the specified Drawable.
android.view.View.invalidateDrawable,Invalidate drawable.
android.view.View.isAttachedToWindow,Returns true if this view is currently attached to a window.
android.view.View.isAttachedToWindow,Is attached to window.
android.view.View.isClickable,Indicates whether this view reacts to click events or not. Related XML Attributes: android:clickable.
android.view.View.isClickable,Is clickable.
android.view.View.isClickable,Indicates whether this view reacts to click events or not.
android.view.View.isClickable,Related XML Attributes: android:clickable.
android.view.View.isDrawingCacheEnabled,This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful such as for alpha animations setLayerType(int android.graphics.Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(android.graphics.Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps real-time shadows and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. Indicates whether the drawing cache is enabled for this view.
android.view.View.isDrawingCacheEnabled,Is drawing cache enabled.
android.view.View.isDrawingCacheEnabled,This method was deprecated in API level 28.
android.view.View.isDrawingCacheEnabled,The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11.
android.view.View.isDrawingCacheEnabled,With hardware-acceleration intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer.
android.view.View.isDrawingCacheEnabled,In the rare cases where caching layers are useful such as for alpha animations setLayerType(int android.graphics.Paint) handles this with hardware rendering.
android.view.View.isDrawingCacheEnabled,For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(android.graphics.Canvas) on the View.
android.view.View.isDrawingCacheEnabled,However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps real-time shadows and outline clipping.
android.view.View.isDrawingCacheEnabled,For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
android.view.View.isDrawingCacheEnabled,Indicates whether the drawing cache is enabled for this view.
android.view.View.isDuplicateParentStateEnabled,Indicates whether this duplicates its drawable state from its parent.
android.view.View.isDuplicateParentStateEnabled,Is duplicate parent state enabled.
android.view.View.isEnabled,Returns the enabled status for this view. The interpretation of the enabled state varies by subclass.
android.view.View.isEnabled,Is enabled.
android.view.View.isEnabled,Returns the enabled status for this view.
android.view.View.isEnabled,The interpretation of the enabled state varies by subclass.
android.view.View.isFocusable,Returns whether this View is currently able to take focus.
android.view.View.isFocusable,Is focusable.
android.view.View.isFocused,Returns true if this view has focus.
android.view.View.isFocused,Is focused.
android.view.View.isHardwareAccelerated,Indicates whether this view is attached to a hardware accelerated window or not. Even if this method returns true it does not mean that every call to draw(android.graphics.Canvas) will be made with an hardware accelerated Canvas. For instance if this view is drawn onto an offscreen Bitmap and its window is hardware accelerated Canvas.isHardwareAccelerated() will likely return false and this method will return true.
android.view.View.isHardwareAccelerated,Is hardware accelerated.
android.view.View.isHardwareAccelerated,Indicates whether this view is attached to a hardware accelerated window or not.
android.view.View.isHardwareAccelerated,Even if this method returns true it does not mean that every call to draw(android.graphics.Canvas) will be made with an hardware accelerated Canvas.
android.view.View.isHardwareAccelerated,For instance if this view is drawn onto an offscreen Bitmap and its window is hardware accelerated Canvas.isHardwareAccelerated() will likely return false and this method will return true.
android.view.View.isHorizontalScrollBarEnabled,Indicate whether the horizontal scrollbar should be drawn or not. The scrollbar is not drawn by default.
android.view.View.isHorizontalScrollBarEnabled,Is horizontal scroll bar enabled.
android.view.View.isHorizontalScrollBarEnabled,Indicate whether the horizontal scrollbar should be drawn or not.
android.view.View.isHorizontalScrollBarEnabled,The scrollbar is not drawn by default.
android.view.View.isInEditMode,Indicates whether this View is currently in edit mode. A View is usually in edit mode when displayed within a developer tool. For instance if this View is being drawn by a visual user interface builder this method should return true. Subclasses should check the return value of this method to provide different behaviors if their normal behavior might interfere with the host environment. For instance: the class spawns a thread in its constructor the drawing code relies on device-specific features etc. This method is usually checked in the drawing code of custom widgets.
android.view.View.isInEditMode,Is in edit mode.
android.view.View.isInEditMode,Indicates whether this View is currently in edit mode.
android.view.View.isInEditMode,A View is usually in edit mode when displayed within a developer tool.
android.view.View.isInEditMode,For instance if this View is being drawn by a visual user interface builder this method should return true.
android.view.View.isInEditMode,Subclasses should check the return value of this method to provide different behaviors if their normal behavior might interfere with the host environment.
android.view.View.isInEditMode,For instance: the class spawns a thread in its constructor the drawing code relies on device-specific features etc.
android.view.View.isInEditMode,This method is usually checked in the drawing code of custom widgets.
android.view.View.isInTouchMode,Returns whether the device is currently in touch mode. Touch mode is entered once the user begins interacting with the device by touch and affects various things like whether focus is always visible to the user.
android.view.View.isInTouchMode,Is in touch mode.
android.view.View.isInTouchMode,Returns whether the device is currently in touch mode.
android.view.View.isInTouchMode,Touch mode is entered once the user begins interacting with the device by touch and affects various things like whether focus is always visible to the user.
android.view.View.isLayoutRequested,Indicates whether or not this view's layout will be requested during the next hierarchy layout pass.
android.view.View.isLayoutRequested,Is layout requested.
android.view.View.isLongClickable,Indicates whether this view reacts to long click events or not. Related XML Attributes: android:longClickable.
android.view.View.isLongClickable,Is long clickable.
android.view.View.isLongClickable,Indicates whether this view reacts to long click events or not.
android.view.View.isLongClickable,Related XML Attributes: android:longClickable.
android.view.View.isPressed,Indicates whether the view is currently in pressed state. Unless setPressed(boolean) is explicitly called only clickable views can enter the pressed state.
android.view.View.isPressed,Is pressed.
android.view.View.isPressed,Indicates whether the view is currently in pressed state.
android.view.View.isPressed,Unless setPressed(boolean) is explicitly called only clickable views can enter the pressed state.
android.view.View.isSelected,Indicates the selection state of this view.
android.view.View.isSelected,Is selected.
android.view.View.isShown,Returns the visibility of this view and all of its ancestors.
android.view.View.isShown,Is shown.
android.view.View.isVerticalScrollBarEnabled,Indicate whether the vertical scrollbar should be drawn or not. The scrollbar is not drawn by default.
android.view.View.isVerticalScrollBarEnabled,Is vertical scroll bar enabled.
android.view.View.isVerticalScrollBarEnabled,Indicate whether the vertical scrollbar should be drawn or not.
android.view.View.isVerticalScrollBarEnabled,The scrollbar is not drawn by default.
android.view.View.jumpDrawablesToCurrentState,Call Drawable#jumpToCurrentState() on all Drawable objects associated with this view. Also calls StateListAnimator#jumpToCurrentState() if there is a StateListAnimator attached to this view. If you override this method you must call through to the superclass implementation.
android.view.View.jumpDrawablesToCurrentState,Jump drawables to current state.
android.view.View.jumpDrawablesToCurrentState,Call Drawable#jumpToCurrentState() on all Drawable objects associated with this view.
android.view.View.jumpDrawablesToCurrentState,Also calls StateListAnimator#jumpToCurrentState() if there is a StateListAnimator attached to this view.
android.view.View.jumpDrawablesToCurrentState,If you override this method you must call through to the superclass implementation.
android.view.View.layout,Assign a size and position to a view and all of its descendants This is the second phase of the layout mechanism. (The first is measuring). In this phase each parent calls layout on all of its children to position them. This is typically done using the child measurements that were stored in the measure pass(). Derived classes should not override this method. Derived classes with children should override onLayout. In that method they should call layout on each of their children.
android.view.View.layout,Layout.
android.view.View.layout,Assign a size and position to a view and all of its descendants This is the second phase of the layout mechanism.
android.view.View.layout,(The first is measuring).
android.view.View.layout,In this phase each parent calls layout on all of its children to position them.
android.view.View.layout,This is typically done using the child measurements that were stored in the measure pass().
android.view.View.layout,Derived classes should not override this method.
android.view.View.layout,Derived classes with children should override onLayout.
android.view.View.layout,In that method they should call layout on each of their children.
android.view.View.measure,This is called to find out how big a view should be. The parent supplies constraint information in the width and height parameters. The actual measurement work of a view is performed in onMeasure(int int) called by this method. Therefore only onMeasure(int int) can and must be overridden by subclasses.
android.view.View.measure,Measure.
android.view.View.measure,This is called to find out how big a view should be.
android.view.View.measure,The parent supplies constraint information in the width and height parameters.
android.view.View.measure,The actual measurement work of a view is performed in onMeasure(int int) called by this method.
android.view.View.measure,Therefore only onMeasure(int int) can and must be overridden by subclasses.
android.view.View.offsetLeftAndRight,Offset this view's horizontal location by the specified amount of pixels.
android.view.View.offsetLeftAndRight,Offset left and right.
android.view.View.onCheckIsTextEditor,Check whether the called view is a text editor in which case it would make sense to automatically display a soft input window for it. Subclasses should override this if they implement onCreateInputConnection(android.view.inputmethod.EditorInfo) to return true if a call on that method would return a non-null InputConnection and they are really a first-class editor that the user would normally start typing on when the go into a window containing your view. The default implementation always returns false. This does not mean that its onCreateInputConnection(android.view.inputmethod.EditorInfo) will not be called or the user can not otherwise perform edits on your view; it is just a hint to the system that this is not the primary purpose of this view.
android.view.View.onCheckIsTextEditor,On check is text editor.
android.view.View.onCheckIsTextEditor,Check whether the called view is a text editor in which case it would make sense to automatically display a soft input window for it.
android.view.View.onCheckIsTextEditor,Subclasses should override this if they implement onCreateInputConnection(android.view.inputmethod.EditorInfo) to return true if a call on that method would return a non-null InputConnection and they are really a first-class editor that the user would normally start typing on when the go into a window containing your view.
android.view.View.onCheckIsTextEditor,The default implementation always returns false.
android.view.View.onCheckIsTextEditor,This does not mean that its onCreateInputConnection(android.view.inputmethod.EditorInfo) will not be called or the user can not otherwise perform edits on your view; it is just a hint to the system that this is not the primary purpose of this view.
android.view.View.onFinishTemporaryDetach,Called after onStartTemporaryDetach() when the container is done changing the view.
android.view.View.onFinishTemporaryDetach,On finish temporary detach.
android.view.View.onHoverEvent,Implement this method to handle hover events. This method is called whenever a pointer is hovering into over or out of the bounds of a view and the view is not currently being touched. Hover events are represented as pointer events with action MotionEvent#ACTION_HOVER_ENTER MotionEvent#ACTION_HOVER_MOVE or MotionEvent#ACTION_HOVER_EXIT. The view receives a hover event with action MotionEvent#ACTION_HOVER_ENTER when the pointer enters the bounds of the view. The view receives a hover event with action MotionEvent#ACTION_HOVER_MOVE when the pointer has already entered the bounds of the view and has moved. The view receives a hover event with action MotionEvent#ACTION_HOVER_EXIT when the pointer has exited the bounds of the view or when the pointer is about to go down due to a button click tap or similar user action that causes the view to be touched. The view should implement this method to return true to indicate that it is handling the hover event such as by changing its drawable state. The default implementation calls setHovered(boolean) to update the hovered state of the view when a hover enter or hover exit event is received if the view is enabled and is clickable. The default implementation also sends hover accessibility events.
android.view.View.onHoverEvent,On hover event.
android.view.View.onHoverEvent,Implement this method to handle hover events.
android.view.View.onHoverEvent,This method is called whenever a pointer is hovering into over or out of the bounds of a view and the view is not currently being touched.
android.view.View.onHoverEvent,Hover events are represented as pointer events with action MotionEvent#ACTION_HOVER_ENTER MotionEvent#ACTION_HOVER_MOVE or MotionEvent#ACTION_HOVER_EXIT.
android.view.View.onHoverEvent,The view receives a hover event with action MotionEvent#ACTION_HOVER_ENTER when the pointer enters the bounds of the view.
android.view.View.onHoverEvent,The view receives a hover event with action MotionEvent#ACTION_HOVER_MOVE when the pointer has already entered the bounds of the view and has moved.
android.view.View.onHoverEvent,The view receives a hover event with action MotionEvent#ACTION_HOVER_EXIT when the pointer has exited the bounds of the view or when the pointer is about to go down due to a button click tap or similar user action that causes the view to be touched.
android.view.View.onHoverEvent,The view should implement this method to return true to indicate that it is handling the hover event such as by changing its drawable state.
android.view.View.onHoverEvent,The default implementation calls setHovered(boolean) to update the hovered state of the view when a hover enter or hover exit event is received if the view is enabled and is clickable.
android.view.View.onHoverEvent,The default implementation also sends hover accessibility events.
android.view.View.onKeyDown,Default implementation of KeyEvent.Callback#onKeyDown(int KeyEvent) : perform press of the view when KeyEvent#KEYCODE_DPAD_CENTER or KeyEvent#KEYCODE_ENTER is released if the view is enabled and clickable. Key presses in software keyboards will generally NOT trigger this listener although some may elect to do so in some situations. Do not rely on this to catch software key presses.
android.view.View.onKeyDown,On key down.
android.view.View.onKeyDown,Default implementation of KeyEvent.Callback#onKeyDown(int KeyEvent) : perform press of the view when KeyEvent#KEYCODE_DPAD_CENTER or KeyEvent#KEYCODE_ENTER is released if the view is enabled and clickable.
android.view.View.onKeyDown,Key presses in software keyboards will generally NOT trigger this listener although some may elect to do so in some situations.
android.view.View.onKeyDown,Do not rely on this to catch software key presses.
android.view.View.onKeyUp,Default implementation of KeyEvent.Callback#onKeyUp(int KeyEvent) : perform clicking of the view when KeyEvent#KEYCODE_DPAD_CENTER KeyEvent#KEYCODE_ENTER or KeyEvent#KEYCODE_SPACE is released. Key presses in software keyboards will generally NOT trigger this listener although some may elect to do so in some situations. Do not rely on this to catch software key presses.
android.view.View.onKeyUp,On key up.
android.view.View.onKeyUp,Default implementation of KeyEvent.Callback#onKeyUp(int KeyEvent) : perform clicking of the view when KeyEvent#KEYCODE_DPAD_CENTER KeyEvent#KEYCODE_ENTER or KeyEvent#KEYCODE_SPACE is released.
android.view.View.onKeyUp,Key presses in software keyboards will generally NOT trigger this listener although some may elect to do so in some situations.
android.view.View.onKeyUp,Do not rely on this to catch software key presses.
android.view.View.onPopulateAccessibilityEvent,Called from dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) giving a chance to this View to populate the accessibility event with its text content. While this method is free to modify event attributes other than text content doing so should normally be performed in onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent). Example: Adding formatted date string to an accessibility event in addition to the text added by the super implementation: If an AccessibilityDelegate has been specified via calling setAccessibilityDelegate(android.view.View.AccessibilityDelegate) its AccessibilityDelegate#onPopulateAccessibilityEvent(View AccessibilityEvent) is responsible for handling this call. Note: Always call the super implementation before adding information to the event in case the default implementation has basic information to add.
android.view.View.onPopulateAccessibilityEvent,On populate accessibility event.
android.view.View.onPopulateAccessibilityEvent,Called from dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) giving a chance to this View to populate the accessibility event with its text content.
android.view.View.onPopulateAccessibilityEvent,While this method is free to modify event attributes other than text content doing so should normally be performed in onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent).
android.view.View.onPopulateAccessibilityEvent,Example: Adding formatted date string to an accessibility event in addition to the text added by the super implementation: If an AccessibilityDelegate has been specified via calling setAccessibilityDelegate(android.view.View.AccessibilityDelegate) its AccessibilityDelegate#onPopulateAccessibilityEvent(View AccessibilityEvent) is responsible for handling this call.
android.view.View.onPopulateAccessibilityEvent,Note: Always call the super implementation before adding information to the event in case the default implementation has basic information to add.
android.view.View.onStartTemporaryDetach,This is called when a container is going to temporarily detach a child with ViewGroup#detachViewFromParent(View). It will either be followed by onFinishTemporaryDetach() or onDetachedFromWindow() when the container is done.
android.view.View.onStartTemporaryDetach,On start temporary detach.
android.view.View.onStartTemporaryDetach,This is called when a container is going to temporarily detach a child with ViewGroup#detachViewFromParent(View).
android.view.View.onStartTemporaryDetach,It will either be followed by onFinishTemporaryDetach() or onDetachedFromWindow() when the container is done.
android.view.View.onTrackballEvent,Implement this method to handle trackball motion events. The relative movement of the trackball since the last event can be retrieve with MotionEvent#getX and MotionEvent#getY. These are normalized so that a movement of 1 corresponds to the user pressing one DPAD key (so they will often be fractional values representing the more fine-grained movement information available from a trackball).
android.view.View.onTrackballEvent,On trackball event.
android.view.View.onTrackballEvent,Implement this method to handle trackball motion events.
android.view.View.onTrackballEvent,The relative movement of the trackball since the last event can be retrieve with MotionEvent#getX and MotionEvent#getY.
android.view.View.onTrackballEvent,These are normalized so that a movement of 1 corresponds to the user pressing one DPAD key (so they will often be fractional values representing the more fine-grained movement information available from a trackball).
android.view.View.performClick,Call this view's OnClickListener if it is defined. Performs all normal actions associated with clicking: reporting accessibility event playing a sound etc.
android.view.View.performClick,Perform click.
android.view.View.performClick,Call this view's OnClickListener if it is defined.
android.view.View.performClick,Performs all normal actions associated with clicking: reporting accessibility event playing a sound etc.
android.view.View.performHapticFeedback,BZZZTT!!1! Provide haptic feedback to the user for this view. The framework will provide haptic feedback for some built in actions such as long presses but you may wish to provide feedback for your own widget. The feedback will only be performed if isHapticFeedbackEnabled() is true.
android.view.View.performHapticFeedback,Perform haptic feedback.
android.view.View.performHapticFeedback,BZZZTT!!1! Provide haptic feedback to the user for this view.
android.view.View.performHapticFeedback,The framework will provide haptic feedback for some built in actions such as long presses but you may wish to provide feedback for your own widget.
android.view.View.performHapticFeedback,The feedback will only be performed if isHapticFeedbackEnabled() is true.
android.view.View.performHapticFeedback,BZZZTT!!1! Like performHapticFeedback(int) with additional options.
android.view.View.performHapticFeedback,Perform haptic feedback.
android.view.View.performLongClick,Calls this view's OnLongClickListener if it is defined. Invokes the context menu if the OnLongClickListener did not consume the event anchoring it to an (xy) coordinate.
android.view.View.performLongClick,Perform long click.
android.view.View.performLongClick,Calls this view's OnLongClickListener if it is defined.
android.view.View.performLongClick,Invokes the context menu if the OnLongClickListener did not consume the event anchoring it to an (xy) coordinate.
android.view.View.performLongClick,Calls this view's OnLongClickListener if it is defined. Invokes the context menu if the OnLongClickListener did not consume the event.
android.view.View.performLongClick,Perform long click.
android.view.View.performLongClick,Calls this view's OnLongClickListener if it is defined.
android.view.View.performLongClick,Invokes the context menu if the OnLongClickListener did not consume the event.
android.view.View.playSoundEffect,Play a sound effect for this view. The framework will play sound effects for some built in actions such as clicking but you may wish to play these effects in your widget for instance for internal navigation. The sound effect will only be played if sound effects are enabled by the user and isSoundEffectsEnabled() is true.
android.view.View.playSoundEffect,Play sound effect.
android.view.View.playSoundEffect,Play a sound effect for this view.
android.view.View.playSoundEffect,The framework will play sound effects for some built in actions such as clicking but you may wish to play these effects in your widget for instance for internal navigation.
android.view.View.playSoundEffect,The sound effect will only be played if sound effects are enabled by the user and isSoundEffectsEnabled() is true.
android.view.View.post,Causes the Runnable to be added to the message queue. The runnable will be run on the user interface thread.
android.view.View.post,Post.
android.view.View.post,Causes the Runnable to be added to the message queue.
android.view.View.post,The runnable will be run on the user interface thread.
android.view.View.postDelayed,Causes the Runnable to be added to the message queue to be run after the specified amount of time elapses. The runnable will be run on the user interface thread.
android.view.View.postDelayed,Post delayed.
android.view.View.postDelayed,Causes the Runnable to be added to the message queue to be run after the specified amount of time elapses.
android.view.View.postDelayed,The runnable will be run on the user interface thread.
android.view.View.postInvalidateDelayed,Cause an invalidate of the specified area to happen on a subsequent cycle through the event loop. Waits for the specified amount of time. This method can be invoked from outside of the UI thread only when this View is attached to a window.
android.view.View.postInvalidateDelayed,Post invalidate delayed.
android.view.View.postInvalidateDelayed,Cause an invalidate of the specified area to happen on a subsequent cycle through the event loop.
android.view.View.postInvalidateDelayed,Waits for the specified amount of time.
android.view.View.postInvalidateDelayed,This method can be invoked from outside of the UI thread only when this View is attached to a window.
android.view.View.postInvalidateDelayed,Cause an invalidate to happen on a subsequent cycle through the event loop. Waits for the specified amount of time. This method can be invoked from outside of the UI thread only when this View is attached to a window.
android.view.View.postInvalidateDelayed,Post invalidate delayed.
android.view.View.postInvalidateDelayed,Cause an invalidate to happen on a subsequent cycle through the event loop.
android.view.View.postInvalidateDelayed,Waits for the specified amount of time.
android.view.View.postInvalidateDelayed,This method can be invoked from outside of the UI thread only when this View is attached to a window.
android.view.View.refreshDrawableState,Call this to force a view to update its drawable state. This will cause drawableStateChanged to be called on this view. Views that are interested in the new state should call getDrawableState.
android.view.View.refreshDrawableState,Refresh drawable state.
android.view.View.refreshDrawableState,Call this to force a view to update its drawable state.
android.view.View.refreshDrawableState,This will cause drawableStateChanged to be called on this view.
android.view.View.refreshDrawableState,Views that are interested in the new state should call getDrawableState.
android.view.View.removeCallbacks,Removes the specified Runnable from the message queue.
android.view.View.removeCallbacks,Remove callbacks.
android.view.View.requestApplyInsets,Ask that a new dispatch of onApplyWindowInsets(android.view.WindowInsets) be performed.
android.view.View.requestApplyInsets,Request apply insets.
android.view.View.requestFitSystemWindows,This method was deprecated in API level 20. Use requestApplyInsets() for newer platform versions. Ask that a new dispatch of fitSystemWindows(android.graphics.Rect) be performed.
android.view.View.requestFitSystemWindows,Request fit system windows.
android.view.View.requestFitSystemWindows,This method was deprecated in API level 20.
android.view.View.requestFitSystemWindows,Use requestApplyInsets() for newer platform versions.
android.view.View.requestFitSystemWindows,Ask that a new dispatch of fitSystemWindows(android.graphics.Rect) be performed.
android.view.View.requestFocus,Call this to try to give focus to a specific view or to one of its descendants and give it a hint about what direction focus is heading. A view will not actually take focus if it is not focusable ( isFocusable() returns false) or if it is focusable and it is not focusable in touch mode ( isFocusableInTouchMode() ) while the device is in touch mode. See also focusSearch(int) which is what you call to say that you have focus and you want your parent to look for the next one. This is equivalent to calling requestFocus(int android.graphics.Rect) with null set for the previously focused rectangle.
android.view.View.requestFocus,Request focus.
android.view.View.requestFocus,Call this to try to give focus to a specific view or to one of its descendants and give it a hint about what direction focus is heading.
android.view.View.requestFocus,A view will not actually take focus if it is not focusable ( isFocusable() returns false) or if it is focusable and it is not focusable in touch mode ( isFocusableInTouchMode() ) while the device is in touch mode.
android.view.View.requestFocus,See also focusSearch(int) which is what you call to say that you have focus and you want your parent to look for the next one.
android.view.View.requestFocus,This is equivalent to calling requestFocus(int android.graphics.Rect) with null set for the previously focused rectangle.
android.view.View.requestFocus,Call this to try to give focus to a specific view or to one of its descendants. A view will not actually take focus if it is not focusable ( isFocusable() returns false) or if it can't be focused due to other conditions (not focusable in touch mode ( isFocusableInTouchMode() ) while the device is in touch mode not visible not enabled or has no size). See also focusSearch(int) which is what you call to say that you have focus and you want your parent to look for the next one. This is equivalent to calling requestFocus(int android.graphics.Rect) with arguments FOCUS_DOWN and null.
android.view.View.requestFocus,Request focus.
android.view.View.requestFocus,Call this to try to give focus to a specific view or to one of its descendants.
android.view.View.requestFocus,A view will not actually take focus if it is not focusable ( isFocusable() returns false) or if it can't be focused due to other conditions (not focusable in touch mode ( isFocusableInTouchMode() ) while the device is in touch mode not visible not enabled or has no size).
android.view.View.requestFocus,See also focusSearch(int) which is what you call to say that you have focus and you want your parent to look for the next one.
android.view.View.requestFocus,This is equivalent to calling requestFocus(int android.graphics.Rect) with arguments FOCUS_DOWN and null.
android.view.View.requestFocus,Call this to try to give focus to a specific view or to one of its descendants and give it hints about the direction and a specific rectangle that the focus is coming from. The rectangle can help give larger views a finer grained hint about where focus is coming from and therefore where to show selection or forward focus change internally. A view will not actually take focus if it is not focusable ( isFocusable() returns false) or if it is focusable and it is not focusable in touch mode ( isFocusableInTouchMode() ) while the device is in touch mode. A View will not take focus if it is not visible. A View will not take focus if one of its parents has ViewGroup.getDescendantFocusability() equal to ViewGroup#FOCUS_BLOCK_DESCENDANTS. See also focusSearch(int) which is what you call to say that you have focus and you want your parent to look for the next one. You may wish to override this method if your custom View has an internal View that it wishes to forward the request to.
android.view.View.requestFocus,Request focus.
android.view.View.requestFocus,Call this to try to give focus to a specific view or to one of its descendants and give it hints about the direction and a specific rectangle that the focus is coming from.
android.view.View.requestFocus,The rectangle can help give larger views a finer grained hint about where focus is coming from and therefore where to show selection or forward focus change internally.
android.view.View.requestFocus,A view will not actually take focus if it is not focusable ( isFocusable() returns false) or if it is focusable and it is not focusable in touch mode ( isFocusableInTouchMode() ) while the device is in touch mode.
android.view.View.requestFocus,A View will not take focus if it is not visible.
android.view.View.requestFocus,A View will not take focus if one of its parents has ViewGroup.getDescendantFocusability() equal to ViewGroup#FOCUS_BLOCK_DESCENDANTS.
android.view.View.requestFocus,See also focusSearch(int) which is what you call to say that you have focus and you want your parent to look for the next one.
android.view.View.requestFocus,You may wish to override this method if your custom View has an internal View that it wishes to forward the request to.
android.view.View.requestRectangleOnScreen,Request that a rectangle of this view be visible on the screen scrolling if necessary just enough. A View should call this if it maintains some notion of which part of its content is interesting. For example a text editing view should call this when its cursor moves. The Rectangle passed into this method should be in the View's content coordinate space. It should not be affected by which part of the View is currently visible or its scroll position.
android.view.View.requestRectangleOnScreen,Request rectangle on screen.
android.view.View.requestRectangleOnScreen,Request that a rectangle of this view be visible on the screen scrolling if necessary just enough.
android.view.View.requestRectangleOnScreen,A View should call this if it maintains some notion of which part of its content is interesting.
android.view.View.requestRectangleOnScreen,For example a text editing view should call this when its cursor moves.
android.view.View.requestRectangleOnScreen,The Rectangle passed into this method should be in the View's content coordinate space.
android.view.View.requestRectangleOnScreen,It should not be affected by which part of the View is currently visible or its scroll position.
android.view.View.requestRectangleOnScreen,Request that a rectangle of this view be visible on the screen scrolling if necessary just enough. A View should call this if it maintains some notion of which part of its content is interesting. For example a text editing view should call this when its cursor moves. The Rectangle passed into this method should be in the View's content coordinate space. It should not be affected by which part of the View is currently visible or its scroll position. When immediate is set to true scrolling will not be animated.
android.view.View.requestRectangleOnScreen,Request rectangle on screen.
android.view.View.requestRectangleOnScreen,Request that a rectangle of this view be visible on the screen scrolling if necessary just enough.
android.view.View.requestRectangleOnScreen,A View should call this if it maintains some notion of which part of its content is interesting.
android.view.View.requestRectangleOnScreen,For example a text editing view should call this when its cursor moves.
android.view.View.requestRectangleOnScreen,The Rectangle passed into this method should be in the View's content coordinate space.
android.view.View.requestRectangleOnScreen,It should not be affected by which part of the View is currently visible or its scroll position.
android.view.View.requestRectangleOnScreen,When immediate is set to true scrolling will not be animated.
android.view.View.resolveSize,Version of resolveSizeAndState(int int int) returning only the MEASURED_SIZE_MASK bits of the result.
android.view.View.resolveSize,Resolve size.
android.view.View.resolveSizeAndState,Utility to reconcile a desired size and state with constraints imposed by a MeasureSpec. Will take the desired size unless a different size is imposed by the constraints. The returned value is a compound integer with the resolved size in the MEASURED_SIZE_MASK bits and optionally the bit MEASURED_STATE_TOO_SMALL set if the resulting size is smaller than the size the view wants to be.
android.view.View.resolveSizeAndState,Resolve size and state.
android.view.View.resolveSizeAndState,Utility to reconcile a desired size and state with constraints imposed by a MeasureSpec.
android.view.View.resolveSizeAndState,Will take the desired size unless a different size is imposed by the constraints.
android.view.View.resolveSizeAndState,The returned value is a compound integer with the resolved size in the MEASURED_SIZE_MASK bits and optionally the bit MEASURED_STATE_TOO_SMALL set if the resulting size is smaller than the size the view wants to be.
android.view.View.restoreHierarchyState,Restore this view hierarchy's frozen state from the given container.
android.view.View.restoreHierarchyState,Restore hierarchy state.
android.view.View.saveHierarchyState,Store this view hierarchy's frozen state into the given container.
android.view.View.saveHierarchyState,Save hierarchy state.
android.view.View.scrollTo,Set the scrolled position of your view. This will cause a call to onScrollChanged(int int int int) and the view will be invalidated.
android.view.View.scrollTo,Scroll to.
android.view.View.scrollTo,Set the scrolled position of your view.
android.view.View.scrollTo,This will cause a call to onScrollChanged(int int int int) and the view will be invalidated.
android.view.View.setActivated,Changes the activated state of this view. A view can be activated or not. Note that activation is not the same as selection. Selection is a transient property representing the view (hierarchy) the user is currently interacting with. Activation is a longer-term state that the user can move views in and out of. For example in a list view with single or multiple selection enabled the views in the current selection set are activated. (Um yeah we are deeply sorry about the terminology here.) The activated state is propagated down to children of the view it is set on.
android.view.View.setActivated,Set activated.
android.view.View.setActivated,Changes the activated state of this view.
android.view.View.setActivated,A view can be activated or not.
android.view.View.setActivated,Note that activation is not the same as selection.
android.view.View.setActivated,Selection is a transient property representing the view (hierarchy) the user is currently interacting with.
android.view.View.setActivated,Activation is a longer-term state that the user can move views in and out of.
android.view.View.setActivated,For example in a list view with single or multiple selection enabled the views in the current selection set are activated.
android.view.View.setActivated,(Um yeah we are deeply sorry about the terminology here.) The activated state is propagated down to children of the view it is set on.
android.view.View.setAlpha,Sets the opacity of the view to a value from 0 to 1 where 0 means the view is completely transparent and 1 means the view is completely opaque. Note: setting alpha to a translucent value (0 < alpha < 1) can have significant performance implications especially for large views. It is best to use the alpha property sparingly and transiently as in the case of fading animations. For a view with a frequently changing alpha such as during a fading animation it is strongly recommended for performance reasons to either override hasOverlappingRendering() to return false if appropriate or setting a layer type on the view for the duration of the animation. On versions Build.VERSION_CODES.M and below the default path for rendering an unlayered View with alpha could add multiple milliseconds of rendering cost even for simple or small views. Starting with Build.VERSION_CODES.M LAYER_TYPE_HARDWARE is automatically applied to the view at the rendering level. If this view overrides onSetAlpha(int) to return true then this view is responsible for applying the opacity itself. On versions Build.VERSION_CODES.LOLLIPOP_MR1 and below note that if the view is backed by a layer and is associated with a layer paint setting an alpha value less than 1.0 will supersede the alpha of the layer paint. Starting with Build.VERSION_CODES.M setting a translucent alpha value will clip a View to its bounds unless the View returns false from hasOverlappingRendering(). Related XML Attributes: android:alpha.
android.view.View.setAlpha,Set alpha.
android.view.View.setAlpha,Sets the opacity of the view to a value from 0 to 1 where 0 means the view is completely transparent and 1 means the view is completely opaque.
android.view.View.setAlpha,Note: setting alpha to a translucent value (0 < alpha < 1) can have significant performance implications especially for large views.
android.view.View.setAlpha,It is best to use the alpha property sparingly and transiently as in the case of fading animations.
android.view.View.setAlpha,For a view with a frequently changing alpha such as during a fading animation it is strongly recommended for performance reasons to either override hasOverlappingRendering() to return false if appropriate or setting a layer type on the view for the duration of the animation.
android.view.View.setAlpha,On versions Build.VERSION_CODES.M and below the default path for rendering an unlayered View with alpha could add multiple milliseconds of rendering cost even for simple or small views.
android.view.View.setAlpha,Starting with Build.VERSION_CODES.M LAYER_TYPE_HARDWARE is automatically applied to the view at the rendering level.
android.view.View.setAlpha,If this view overrides onSetAlpha(int) to return true then this view is responsible for applying the opacity itself.
android.view.View.setAlpha,On versions Build.VERSION_CODES.LOLLIPOP_MR1 and below note that if the view is backed by a layer and is associated with a layer paint setting an alpha value less than 1.0 will supersede the alpha of the layer paint.
android.view.View.setAlpha,Starting with Build.VERSION_CODES.M setting a translucent alpha value will clip a View to its bounds unless the View returns false from hasOverlappingRendering().
android.view.View.setAlpha,Related XML Attributes: android:alpha.
android.view.View.setAnimation,Sets the next animation to play for this view. If you want the animation to play immediately use startAnimation(android.view.animation.Animation) instead. This method provides allows fine-grained control over the start time and invalidation but you must make sure that 1) the animation has a start time set and 2) the view's parent (which controls animations on its children) will be invalidated when the animation is supposed to start.
android.view.View.setAnimation,Set animation.
android.view.View.setAnimation,Sets the next animation to play for this view.
android.view.View.setAnimation,If you want the animation to play immediately use startAnimation(android.view.animation.Animation) instead.
android.view.View.setAnimation,This method provides allows fine-grained control over the start time and invalidation but you must make sure that 1) the animation has a start time set and 2) the view's parent (which controls animations on its children) will be invalidated when the animation is supposed to start.
android.view.View.setBackground,Set the background to a given Drawable or remove the background. If the background has padding this View's padding is set to the background's padding. However when a background is removed this View's padding isn't touched. If setting the padding is desired please use setPadding(int int int int).
android.view.View.setBackground,Set background.
android.view.View.setBackground,Set the background to a given Drawable or remove the background.
android.view.View.setBackground,If the background has padding this View's padding is set to the background's padding.
android.view.View.setBackground,However when a background is removed this View's padding isn't touched.
android.view.View.setBackground,If setting the padding is desired please use setPadding(int int int int).
android.view.View.setBackgroundDrawable,This method was deprecated in API level 16. use setBackground(android.graphics.drawable.Drawable) instead.
android.view.View.setBackgroundDrawable,Set background drawable.
android.view.View.setBackgroundDrawable,This method was deprecated in API level 16.
android.view.View.setBackgroundDrawable,use setBackground(android.graphics.drawable.Drawable) instead.
android.view.View.setBackgroundResource,Set the background to a given resource. The resource should refer to a Drawable object or 0 to remove the background. Related XML Attributes: android:background.
android.view.View.setBackgroundResource,Set background resource.
android.view.View.setBackgroundResource,Set the background to a given resource.
android.view.View.setBackgroundResource,The resource should refer to a Drawable object or 0 to remove the background.
android.view.View.setBackgroundResource,Related XML Attributes: android:background.
android.view.View.setCameraDistance,"Sets the distance along the Z axis (orthogonal to the X/Y plane on which views are drawn) from the camera to this view. The camera's distance affects 3D transformations for instance rotations around the X and Y axis. If the rotationX or rotationY properties are changed and this view is large (more than half the size of the screen) it is recommended to always use a camera distance that's greater than the height (X axis rotation) or the width (Y axis rotation) of this view. The distance of the camera from the view plane can have an affect on the perspective distortion of the view when it is rotated around the x or y axis. For example a large distance will result in a large viewing angle and there will not be much perspective distortion of the view as it rotates. A short distance may cause much more perspective distortion upon rotation and can also result in some drawing artifacts if the rotated view ends up partially behind the camera (which is why the recommendation is to use a distance at least as far as the size of the view if the view is to be rotated.) The distance is expressed in ""depth pixels."" The default distance depends on the screen density. For instance on a medium density display the default distance is 1280. On a high density display the default distance is 1920. If you want to specify a distance that leads to visually consistent results across various densities use the following formula: The density scale factor of a high density display is 1.5 and 1920 = 1280 * 1.5."
android.view.View.setCameraDistance,Set camera distance.
android.view.View.setCameraDistance,Sets the distance along the Z axis (orthogonal to the X/Y plane on which views are drawn) from the camera to this view.
android.view.View.setCameraDistance,The camera's distance affects 3D transformations for instance rotations around the X and Y axis.
android.view.View.setCameraDistance,If the rotationX or rotationY properties are changed and this view is large (more than half the size of the screen) it is recommended to always use a camera distance that's greater than the height (X axis rotation) or the width (Y axis rotation) of this view.
android.view.View.setCameraDistance,The distance of the camera from the view plane can have an affect on the perspective distortion of the view when it is rotated around the x or y axis.
android.view.View.setCameraDistance,For example a large distance will result in a large viewing angle and there will not be much perspective distortion of the view as it rotates.
android.view.View.setCameraDistance,"A short distance may cause much more perspective distortion upon rotation and can also result in some drawing artifacts if the rotated view ends up partially behind the camera (which is why the recommendation is to use a distance at least as far as the size of the view if the view is to be rotated.) The distance is expressed in ""depth pixels."" The default distance depends on the screen density."
android.view.View.setCameraDistance,For instance on a medium density display the default distance is 1280.
android.view.View.setCameraDistance,On a high density display the default distance is 1920.
android.view.View.setCameraDistance,If you want to specify a distance that leads to visually consistent results across various densities use the following formula: The density scale factor of a high density display is 1.5 and 1920 = 1280 * 1.5.
android.view.View.setClickable,"Enables or disables click events for this view. When a view is clickable it will change its state to ""pressed"" on every click. Subclasses should set the view clickable to visually react to user's clicks. Related XML Attributes: android:clickable."
android.view.View.setClickable,Set clickable.
android.view.View.setClickable,Enables or disables click events for this view.
android.view.View.setClickable,"When a view is clickable it will change its state to ""pressed"" on every click."
android.view.View.setClickable,Subclasses should set the view clickable to visually react to user's clicks.
android.view.View.setClickable,Related XML Attributes: android:clickable.
android.view.View.setClipToOutline,Sets whether the View's Outline should be used to clip the contents of the View. Only a single non-rectangular clip can be applied on a View at any time. Circular clips from a ViewAnimationUtils#createCircularReveal(View int int float float) animation take priority over Outline clipping and child Outline clipping takes priority over Outline clipping done by a parent. Note that this flag will only be respected if the View's Outline returns true from Outline#canClip().
android.view.View.setClipToOutline,Set clip to outline.
android.view.View.setClipToOutline,Sets whether the View's Outline should be used to clip the contents of the View.
android.view.View.setClipToOutline,Only a single non-rectangular clip can be applied on a View at any time.
android.view.View.setClipToOutline,Circular clips from a ViewAnimationUtils#createCircularReveal(View int int float float) animation take priority over Outline clipping and child Outline clipping takes priority over Outline clipping done by a parent.
android.view.View.setClipToOutline,Note that this flag will only be respected if the View's Outline returns true from Outline#canClip().
android.view.View.setContentDescription,"Sets the View 's content description. A content description briefly describes the view and is primarily used for accessibility support to determine how a view should be presented to the user. In the case of a view with no textual representation such as ImageButton a useful content description explains what the view does. For example an image button with a phone icon that is used to place a call may use ""Call"" as its content description. An image of a floppy disk that is used to save a file may use ""Save"". Related XML Attributes: android:contentDescription."
android.view.View.setContentDescription,Set content description.
android.view.View.setContentDescription,Sets the View 's content description.
android.view.View.setContentDescription,A content description briefly describes the view and is primarily used for accessibility support to determine how a view should be presented to the user.
android.view.View.setContentDescription,In the case of a view with no textual representation such as ImageButton a useful content description explains what the view does.
android.view.View.setContentDescription,"For example an image button with a phone icon that is used to place a call may use ""Call"" as its content description."
android.view.View.setContentDescription,"An image of a floppy disk that is used to save a file may use ""Save""."
android.view.View.setContentDescription,Related XML Attributes: android:contentDescription.
android.view.View.setDrawingCacheBackgroundColor,This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful such as for alpha animations setLayerType(int android.graphics.Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(android.graphics.Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps real-time shadows and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. Setting a solid background color for the drawing cache's bitmaps will improve performance and memory usage. Note though that this should only be used if this view will always be drawn on top of a solid color.
android.view.View.setDrawingCacheBackgroundColor,Set drawing cache background color.
android.view.View.setDrawingCacheBackgroundColor,This method was deprecated in API level 28.
android.view.View.setDrawingCacheBackgroundColor,The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11.
android.view.View.setDrawingCacheBackgroundColor,With hardware-acceleration intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer.
android.view.View.setDrawingCacheBackgroundColor,In the rare cases where caching layers are useful such as for alpha animations setLayerType(int android.graphics.Paint) handles this with hardware rendering.
android.view.View.setDrawingCacheBackgroundColor,For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(android.graphics.Canvas) on the View.
android.view.View.setDrawingCacheBackgroundColor,However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps real-time shadows and outline clipping.
android.view.View.setDrawingCacheBackgroundColor,For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
android.view.View.setDrawingCacheBackgroundColor,Setting a solid background color for the drawing cache's bitmaps will improve performance and memory usage.
android.view.View.setDrawingCacheBackgroundColor,Note though that this should only be used if this view will always be drawn on top of a solid color.
android.view.View.setDrawingCacheEnabled,This method was deprecated in API level 28. The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11. With hardware-acceleration intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer. In the rare cases where caching layers are useful such as for alpha animations setLayerType(int android.graphics.Paint) handles this with hardware rendering. For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(android.graphics.Canvas) on the View. However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps real-time shadows and outline clipping. For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended. Enables or disables the drawing cache. When the drawing cache is enabled the next call to getDrawingCache() or buildDrawingCache() will draw the view in a bitmap. Calling draw(android.graphics.Canvas) will not draw from the cache when the cache is enabled. To benefit from the cache you must request the drawing cache by calling getDrawingCache() and draw it on screen if the returned bitmap is not null. Enabling the drawing cache is similar to setting a layer when hardware acceleration is turned off. When hardware acceleration is turned on enabling the drawing cache has no effect on rendering because the system uses a different mechanism for acceleration which ignores the flag. If you want to use a Bitmap for the view even when hardware acceleration is enabled see setLayerType(int android.graphics.Paint) for information on how to enable software and hardware layers. This API can be used to manually generate a bitmap copy of this view by setting the flag to true and calling getDrawingCache().
android.view.View.setDrawingCacheEnabled,Set drawing cache enabled.
android.view.View.setDrawingCacheEnabled,This method was deprecated in API level 28.
android.view.View.setDrawingCacheEnabled,The view drawing cache was largely made obsolete with the introduction of hardware-accelerated rendering in API 11.
android.view.View.setDrawingCacheEnabled,With hardware-acceleration intermediate cache layers are largely unnecessary and can easily result in a net loss in performance due to the cost of creating and updating the layer.
android.view.View.setDrawingCacheEnabled,In the rare cases where caching layers are useful such as for alpha animations setLayerType(int android.graphics.Paint) handles this with hardware rendering.
android.view.View.setDrawingCacheEnabled,For software-rendered snapshots of a small part of the View hierarchy or individual Views it is recommended to create a Canvas from either a Bitmap or Picture and call draw(android.graphics.Canvas) on the View.
android.view.View.setDrawingCacheEnabled,However these software-rendered usages are discouraged and have compatibility issues with hardware-only rendering features such as Config.HARDWARE bitmaps real-time shadows and outline clipping.
android.view.View.setDrawingCacheEnabled,For screenshots of the UI for feedback reports or unit testing the PixelCopy API is recommended.
android.view.View.setDrawingCacheEnabled,Enables or disables the drawing cache.
android.view.View.setDrawingCacheEnabled,When the drawing cache is enabled the next call to getDrawingCache() or buildDrawingCache() will draw the view in a bitmap.
android.view.View.setDrawingCacheEnabled,Calling draw(android.graphics.Canvas) will not draw from the cache when the cache is enabled.
android.view.View.setDrawingCacheEnabled,To benefit from the cache you must request the drawing cache by calling getDrawingCache() and draw it on screen if the returned bitmap is not null.
android.view.View.setDrawingCacheEnabled,Enabling the drawing cache is similar to setting a layer when hardware acceleration is turned off.
android.view.View.setDrawingCacheEnabled,When hardware acceleration is turned on enabling the drawing cache has no effect on rendering because the system uses a different mechanism for acceleration which ignores the flag.
android.view.View.setDrawingCacheEnabled,If you want to use a Bitmap for the view even when hardware acceleration is enabled see setLayerType(int android.graphics.Paint) for information on how to enable software and hardware layers.
android.view.View.setDrawingCacheEnabled,This API can be used to manually generate a bitmap copy of this view by setting the flag to true and calling getDrawingCache().
android.view.View.setDuplicateParentStateEnabled,Enables or disables the duplication of the parent's state into this view. When duplication is enabled this view gets its drawable state from its parent rather than from its own internal properties. Note: in the current implementation setting this property to true after the view was added to a ViewGroup might have no effect at all. This property should always be used from XML or set to true before adding this view to a ViewGroup. Note: if this view's parent addStateFromChildren property is enabled and this property is enabled an exception will be thrown. Note: if the child view uses and updates additional states which are unknown to the parent these states should not be affected by this method.
android.view.View.setDuplicateParentStateEnabled,Set duplicate parent state enabled.
android.view.View.setDuplicateParentStateEnabled,Enables or disables the duplication of the parent's state into this view.
android.view.View.setDuplicateParentStateEnabled,When duplication is enabled this view gets its drawable state from its parent rather than from its own internal properties.
android.view.View.setDuplicateParentStateEnabled,Note: in the current implementation setting this property to true after the view was added to a ViewGroup might have no effect at all.
android.view.View.setDuplicateParentStateEnabled,This property should always be used from XML or set to true before adding this view to a ViewGroup.
android.view.View.setDuplicateParentStateEnabled,Note: if this view's parent addStateFromChildren property is enabled and this property is enabled an exception will be thrown.
android.view.View.setDuplicateParentStateEnabled,Note: if the child view uses and updates additional states which are unknown to the parent these states should not be affected by this method.
android.view.View.setFocusable,Set whether this view can receive the focus. Setting this to false will also ensure that this view is not focusable in touch mode. Related XML Attributes: android:focusable.
android.view.View.setFocusable,Set focusable.
android.view.View.setFocusable,Set whether this view can receive the focus.
android.view.View.setFocusable,Setting this to false will also ensure that this view is not focusable in touch mode.
android.view.View.setFocusable,Related XML Attributes: android:focusable.
android.view.View.setFocusable,Sets whether this view can receive focus. Setting this to FOCUSABLE_AUTO tells the framework to determine focusability automatically based on the view's interactivity. This is the default. Setting this to NOT_FOCUSABLE will ensure that this view is also not focusable in touch mode. Related XML Attributes: android:focusable.
android.view.View.setFocusable,Set focusable.
android.view.View.setFocusable,Sets whether this view can receive focus.
android.view.View.setFocusable,Setting this to FOCUSABLE_AUTO tells the framework to determine focusability automatically based on the view's interactivity.
android.view.View.setFocusable,This is the default.
android.view.View.setFocusable,Setting this to NOT_FOCUSABLE will ensure that this view is also not focusable in touch mode.
android.view.View.setFocusable,Related XML Attributes: android:focusable.
android.view.View.setFocusableInTouchMode,Set whether this view can receive focus while in touch mode. Setting this to true will also ensure that this view is focusable. Related XML Attributes: android:focusableInTouchMode.
android.view.View.setFocusableInTouchMode,Set focusable in touch mode.
android.view.View.setFocusableInTouchMode,Set whether this view can receive focus while in touch mode.
android.view.View.setFocusableInTouchMode,Setting this to true will also ensure that this view is focusable.
android.view.View.setFocusableInTouchMode,Related XML Attributes: android:focusableInTouchMode.
android.view.View.setHapticFeedbackEnabled,Set whether this view should have haptic feedback for events such as long presses. You may wish to disable haptic feedback if your view already controls its own haptic feedback. Related XML Attributes: android:hapticFeedbackEnabled.
android.view.View.setHapticFeedbackEnabled,Set haptic feedback enabled.
android.view.View.setHapticFeedbackEnabled,Set whether this view should have haptic feedback for events such as long presses.
android.view.View.setHapticFeedbackEnabled,You may wish to disable haptic feedback if your view already controls its own haptic feedback.
android.view.View.setHapticFeedbackEnabled,Related XML Attributes: android:hapticFeedbackEnabled.
android.view.View.setHasTransientState,Set whether this view is currently tracking transient state that the framework should attempt to preserve when possible. This flag is reference counted so every call to setHasTransientState(true) should be paired with a later call to setHasTransientState(false). A view with transient state cannot be trivially rebound from an external data source such as an adapter binding item views in a list. This may be because the view is performing an animation tracking user selection of content or similar.
android.view.View.setHasTransientState,Set has transient state.
android.view.View.setHasTransientState,Set whether this view is currently tracking transient state that the framework should attempt to preserve when possible.
android.view.View.setHasTransientState,This flag is reference counted so every call to setHasTransientState(true) should be paired with a later call to setHasTransientState(false).
android.view.View.setHasTransientState,A view with transient state cannot be trivially rebound from an external data source such as an adapter binding item views in a list.
android.view.View.setHasTransientState,This may be because the view is performing an animation tracking user selection of content or similar.
android.view.View.setHorizontalScrollBarEnabled,Define whether the horizontal scrollbar should be drawn or not. The scrollbar is not drawn by default.
android.view.View.setHorizontalScrollBarEnabled,Set horizontal scroll bar enabled.
android.view.View.setHorizontalScrollBarEnabled,Define whether the horizontal scrollbar should be drawn or not.
android.view.View.setHorizontalScrollBarEnabled,The scrollbar is not drawn by default.
android.view.View.setId,Sets the identifier for this view. The identifier does not have to be unique in this view's hierarchy. The identifier should be a positive number. Related XML Attributes: android:id.
android.view.View.setId,Set id.
android.view.View.setId,Sets the identifier for this view.
android.view.View.setId,The identifier does not have to be unique in this view's hierarchy.
android.view.View.setId,The identifier should be a positive number.
android.view.View.setId,Related XML Attributes: android:id.
android.view.View.setKeepScreenOn,Controls whether the screen should remain on modifying the value of KEEP_SCREEN_ON. Related XML Attributes: android:keepScreenOn.
android.view.View.setKeepScreenOn,Set keep screen on.
android.view.View.setKeepScreenOn,Controls whether the screen should remain on modifying the value of KEEP_SCREEN_ON.
android.view.View.setKeepScreenOn,Related XML Attributes: android:keepScreenOn.
android.view.View.setLabelFor,Sets the id of a view for which this view serves as a label for accessibility purposes.
android.view.View.setLabelFor,Set label for.
android.view.View.setLayoutDirection,Set the layout direction for this view. This will propagate a reset of layout direction resolution to the view's children and resolve layout direction for this view. Related XML Attributes: android:layoutDirection.
android.view.View.setLayoutDirection,Set layout direction.
android.view.View.setLayoutDirection,Set the layout direction for this view.
android.view.View.setLayoutDirection,This will propagate a reset of layout direction resolution to the view's children and resolve layout direction for this view.
android.view.View.setLayoutDirection,Related XML Attributes: android:layoutDirection.
android.view.View.setLongClickable,Enables or disables long click events for this view. When a view is long clickable it reacts to the user holding down the button for a longer duration than a tap. This event can either launch the listener or a context menu. Related XML Attributes: android:longClickable.
android.view.View.setLongClickable,Set long clickable.
android.view.View.setLongClickable,Enables or disables long click events for this view.
android.view.View.setLongClickable,When a view is long clickable it reacts to the user holding down the button for a longer duration than a tap.
android.view.View.setLongClickable,This event can either launch the listener or a context menu.
android.view.View.setLongClickable,Related XML Attributes: android:longClickable.
android.view.View.setMinimumHeight,Sets the minimum height of the view. It is not guaranteed the view will be able to achieve this minimum height (for example if its parent layout constrains it with less available height). Related XML Attributes: android:minHeight.
android.view.View.setMinimumHeight,Set minimum height.
android.view.View.setMinimumHeight,Sets the minimum height of the view.
android.view.View.setMinimumHeight,It is not guaranteed the view will be able to achieve this minimum height (for example if its parent layout constrains it with less available height).
android.view.View.setMinimumHeight,Related XML Attributes: android:minHeight.
android.view.View.setMinimumWidth,Sets the minimum width of the view. It is not guaranteed the view will be able to achieve this minimum width (for example if its parent layout constrains it with less available width). Related XML Attributes: android:minWidth.
android.view.View.setMinimumWidth,Set minimum width.
android.view.View.setMinimumWidth,Sets the minimum width of the view.
android.view.View.setMinimumWidth,It is not guaranteed the view will be able to achieve this minimum width (for example if its parent layout constrains it with less available width).
android.view.View.setMinimumWidth,Related XML Attributes: android:minWidth.
android.view.View.setOutlineProvider,Sets the ViewOutlineProvider of the view which generates the Outline that defines the shape of the shadow it casts and enables outline clipping. The default ViewOutlineProvider ViewOutlineProvider#BACKGROUND queries the Outline from the View's background drawable via Drawable#getOutline(Outline). Changing the outline provider with this method allows this behavior to be overridden. If the ViewOutlineProvider is null if querying it for an outline returns false or if the produced Outline is Outline#isEmpty() shadows will not be cast. Only outlines that return true from Outline#canClip() may be used for clipping.
android.view.View.setOutlineProvider,Set outline provider.
android.view.View.setOutlineProvider,Sets the ViewOutlineProvider of the view which generates the Outline that defines the shape of the shadow it casts and enables outline clipping.
android.view.View.setOutlineProvider,The default ViewOutlineProvider ViewOutlineProvider#BACKGROUND queries the Outline from the View's background drawable via Drawable#getOutline(Outline).
android.view.View.setOutlineProvider,Changing the outline provider with this method allows this behavior to be overridden.
android.view.View.setOutlineProvider,If the ViewOutlineProvider is null if querying it for an outline returns false or if the produced Outline is Outline#isEmpty() shadows will not be cast.
android.view.View.setOutlineProvider,Only outlines that return true from Outline#canClip() may be used for clipping.
android.view.View.setOverScrollMode,Set the over-scroll mode for this view. Valid over-scroll modes are OVER_SCROLL_ALWAYS (default) OVER_SCROLL_IF_CONTENT_SCROLLS (allow over-scrolling only if the view content is larger than the container) or OVER_SCROLL_NEVER. Setting the over-scroll mode of a view will have an effect only if the view is capable of scrolling.
android.view.View.setOverScrollMode,Set over scroll mode.
android.view.View.setOverScrollMode,Set the over-scroll mode for this view.
android.view.View.setOverScrollMode,Valid over-scroll modes are OVER_SCROLL_ALWAYS (default) OVER_SCROLL_IF_CONTENT_SCROLLS (allow over-scrolling only if the view content is larger than the container) or OVER_SCROLL_NEVER.
android.view.View.setOverScrollMode,Setting the over-scroll mode of a view will have an effect only if the view is capable of scrolling.
android.view.View.setPaddingRelative,Sets the relative padding. The view may add on the space required to display the scrollbars depending on the style and visibility of the scrollbars. So the values returned from getPaddingStart() getPaddingTop() getPaddingEnd() and getPaddingBottom() may be different from the values set in this call. Related XML Attributes: android:padding android:paddingBottom android:paddingStart android:paddingEnd android:paddingTop.
android.view.View.setPaddingRelative,Set padding relative.
android.view.View.setPaddingRelative,Sets the relative padding.
android.view.View.setPaddingRelative,The view may add on the space required to display the scrollbars depending on the style and visibility of the scrollbars.
android.view.View.setPaddingRelative,So the values returned from getPaddingStart() getPaddingTop() getPaddingEnd() and getPaddingBottom() may be different from the values set in this call.
android.view.View.setPaddingRelative,Related XML Attributes: android:padding android:paddingBottom android:paddingStart android:paddingEnd android:paddingTop.
android.view.View.setPivotX,Sets the x location of the point around which the view is rotated and scaled. By default the pivot point is centered on the object. Setting this property disables this behavior and causes the view to use only the explicitly set pivotX and pivotY values. Related XML Attributes: android:transformPivotX.
android.view.View.setPivotX,Set pivot x.
android.view.View.setPivotX,Sets the x location of the point around which the view is rotated and scaled.
android.view.View.setPivotX,By default the pivot point is centered on the object.
android.view.View.setPivotX,Setting this property disables this behavior and causes the view to use only the explicitly set pivotX and pivotY values.
android.view.View.setPivotX,Related XML Attributes: android:transformPivotX.
android.view.View.setPivotY,Sets the y location of the point around which the view is rotated and scaled. By default the pivot point is centered on the object. Setting this property disables this behavior and causes the view to use only the explicitly set pivotX and pivotY values. Related XML Attributes: android:transformPivotY.
android.view.View.setPivotY,Set pivot y.
android.view.View.setPivotY,Sets the y location of the point around which the view is rotated and scaled.
android.view.View.setPivotY,By default the pivot point is centered on the object.
android.view.View.setPivotY,Setting this property disables this behavior and causes the view to use only the explicitly set pivotX and pivotY values.
android.view.View.setPivotY,Related XML Attributes: android:transformPivotY.
android.view.View.setRotation,Sets the degrees that the view is rotated around the pivot point. Increasing values result in clockwise rotation. Related XML Attributes: android:rotation.
android.view.View.setRotation,Set rotation.
android.view.View.setRotation,Sets the degrees that the view is rotated around the pivot point.
android.view.View.setRotation,Increasing values result in clockwise rotation.
android.view.View.setRotation,Related XML Attributes: android:rotation.
android.view.View.setRotationX,Sets the degrees that the view is rotated around the horizontal axis through the pivot point. Increasing values result in clockwise rotation from the viewpoint of looking down the x axis. When rotating large views it is recommended to adjust the camera distance accordingly. Refer to setCameraDistance(float) for more information. Related XML Attributes: android:rotationX.
android.view.View.setRotationX,Set rotation x.
android.view.View.setRotationX,Sets the degrees that the view is rotated around the horizontal axis through the pivot point.
android.view.View.setRotationX,Increasing values result in clockwise rotation from the viewpoint of looking down the x axis.
android.view.View.setRotationX,When rotating large views it is recommended to adjust the camera distance accordingly.
android.view.View.setRotationX,Refer to setCameraDistance(float) for more information.
android.view.View.setRotationX,Related XML Attributes: android:rotationX.
android.view.View.setRotationY,Sets the degrees that the view is rotated around the vertical axis through the pivot point. Increasing values result in counter-clockwise rotation from the viewpoint of looking down the y axis. When rotating large views it is recommended to adjust the camera distance accordingly. Refer to setCameraDistance(float) for more information. Related XML Attributes: android:rotationY.
android.view.View.setRotationY,Set rotation y.
android.view.View.setRotationY,Sets the degrees that the view is rotated around the vertical axis through the pivot point.
android.view.View.setRotationY,Increasing values result in counter-clockwise rotation from the viewpoint of looking down the y axis.
android.view.View.setRotationY,When rotating large views it is recommended to adjust the camera distance accordingly.
android.view.View.setRotationY,Refer to setCameraDistance(float) for more information.
android.view.View.setRotationY,Related XML Attributes: android:rotationY.
android.view.View.setSaveEnabled,Controls whether the saving of this view's state is enabled (that is whether its onSaveInstanceState() method will be called). Note that even if freezing is enabled the view still must have an id assigned to it (via setId(int) ) for its state to be saved. This flag can only disable the saving of this view; any child views may still have their state saved. Related XML Attributes: android:saveEnabled.
android.view.View.setSaveEnabled,Set save enabled.
android.view.View.setSaveEnabled,Controls whether the saving of this view's state is enabled (that is whether its onSaveInstanceState() method will be called).
android.view.View.setSaveEnabled,Note that even if freezing is enabled the view still must have an id assigned to it (via setId(int) ) for its state to be saved.
android.view.View.setSaveEnabled,This flag can only disable the saving of this view; any child views may still have their state saved.
android.view.View.setSaveEnabled,Related XML Attributes: android:saveEnabled.
android.view.View.setSaveFromParentEnabled,Controls whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent. The default is true; if false these views will not be saved unless saveHierarchyState(android.util.SparseArray) is called directly on this view.
android.view.View.setSaveFromParentEnabled,Set save from parent enabled.
android.view.View.setSaveFromParentEnabled,Controls whether the entire hierarchy under this view will save its state when a state saving traversal occurs from its parent.
android.view.View.setSaveFromParentEnabled,The default is true; if false these views will not be saved unless saveHierarchyState(android.util.SparseArray) is called directly on this view.
android.view.View.setScrollX,Set the horizontal scrolled position of your view. This will cause a call to onScrollChanged(int int int int) and the view will be invalidated.
android.view.View.setScrollX,Set scroll x.
android.view.View.setScrollX,Set the horizontal scrolled position of your view.
android.view.View.setScrollX,This will cause a call to onScrollChanged(int int int int) and the view will be invalidated.
android.view.View.setScrollY,Set the vertical scrolled position of your view. This will cause a call to onScrollChanged(int int int int) and the view will be invalidated.
android.view.View.setScrollY,Set scroll y.
android.view.View.setScrollY,Set the vertical scrolled position of your view.
android.view.View.setScrollY,This will cause a call to onScrollChanged(int int int int) and the view will be invalidated.
android.view.View.setSelected,Changes the selection state of this view. A view can be selected or not. Note that selection is not the same as focus. Views are typically selected in the context of an AdapterView like ListView or GridView; the selected view is the view that is highlighted.
android.view.View.setSelected,Set selected.
android.view.View.setSelected,Changes the selection state of this view.
android.view.View.setSelected,A view can be selected or not.
android.view.View.setSelected,Note that selection is not the same as focus.
android.view.View.setSelected,Views are typically selected in the context of an AdapterView like ListView or GridView; the selected view is the view that is highlighted.
android.view.View.setSystemUiVisibility,Request that the visibility of the status bar or other screen/window decorations be changed. This method is used to put the over device UI into temporary modes where the user's attention is focused more on the application content by dimming or hiding surrounding system affordances. This is typically used in conjunction with Window#FEATURE_ACTION_BAR_OVERLAY allowing the applications content to be placed behind the action bar (and with these flags other system affordances) so that smooth transitions between hiding and showing them can be done. Two representative examples of the use of system UI visibility is implementing a content browsing application (like a magazine reader) and a video playing application. The first code shows a typical implementation of a View in a content browsing application. In this implementation the application goes into a content-oriented mode by hiding the status bar and action bar and putting the navigation elements into lights out mode. The user can then interact with content while in this mode. Such an application should provide an easy way for the user to toggle out of the mode (such as to check information in the status bar or access notifications). In the implementation here this is done simply by tapping on the content. This second code sample shows a typical implementation of a View in a video playing application. In this situation while the video is playing the application would like to go into a complete full-screen mode to use as much of the display as possible for the video. When in this state the user can not interact with the application; the system intercepts touching on the screen to pop the UI out of full screen mode. See fitSystemWindows(android.graphics.Rect) for a sample layout that goes with this code.
android.view.View.setSystemUiVisibility,Set system ui visibility.
android.view.View.setSystemUiVisibility,Request that the visibility of the status bar or other screen/window decorations be changed.
android.view.View.setSystemUiVisibility,This method is used to put the over device UI into temporary modes where the user's attention is focused more on the application content by dimming or hiding surrounding system affordances.
android.view.View.setSystemUiVisibility,This is typically used in conjunction with Window#FEATURE_ACTION_BAR_OVERLAY allowing the applications content to be placed behind the action bar (and with these flags other system affordances) so that smooth transitions between hiding and showing them can be done.
android.view.View.setSystemUiVisibility,Two representative examples of the use of system UI visibility is implementing a content browsing application (like a magazine reader) and a video playing application.
android.view.View.setSystemUiVisibility,The first code shows a typical implementation of a View in a content browsing application.
android.view.View.setSystemUiVisibility,In this implementation the application goes into a content-oriented mode by hiding the status bar and action bar and putting the navigation elements into lights out mode.
android.view.View.setSystemUiVisibility,The user can then interact with content while in this mode.
android.view.View.setSystemUiVisibility,Such an application should provide an easy way for the user to toggle out of the mode (such as to check information in the status bar or access notifications).
android.view.View.setSystemUiVisibility,In the implementation here this is done simply by tapping on the content.
android.view.View.setSystemUiVisibility,This second code sample shows a typical implementation of a View in a video playing application.
android.view.View.setSystemUiVisibility,In this situation while the video is playing the application would like to go into a complete full-screen mode to use as much of the display as possible for the video.
android.view.View.setSystemUiVisibility,When in this state the user can not interact with the application; the system intercepts touching on the screen to pop the UI out of full screen mode.
android.view.View.setSystemUiVisibility,See fitSystemWindows(android.graphics.Rect) for a sample layout that goes with this code.
android.view.View.setTag,Sets a tag associated with this view and a key. A tag can be used to mark a view in its hierarchy and does not have to be unique within the hierarchy. Tags can also be used to store data within a view without resorting to another data structure. The specified key should be an id declared in the resources of the application to ensure it is unique (see the ID resource type ). Keys identified as belonging to the Android framework or not associated with any package will cause an IllegalArgumentException to be thrown.
android.view.View.setTag,Set tag.
android.view.View.setTag,Sets a tag associated with this view and a key.
android.view.View.setTag,A tag can be used to mark a view in its hierarchy and does not have to be unique within the hierarchy.
android.view.View.setTag,Tags can also be used to store data within a view without resorting to another data structure.
android.view.View.setTag,The specified key should be an id declared in the resources of the application to ensure it is unique (see the ID resource type ).
android.view.View.setTag,Keys identified as belonging to the Android framework or not associated with any package will cause an IllegalArgumentException to be thrown.
android.view.View.setTag,Sets the tag associated with this view. A tag can be used to mark a view in its hierarchy and does not have to be unique within the hierarchy. Tags can also be used to store data within a view without resorting to another data structure.
android.view.View.setTag,Set tag.
android.view.View.setTag,Sets the tag associated with this view.
android.view.View.setTag,A tag can be used to mark a view in its hierarchy and does not have to be unique within the hierarchy.
android.view.View.setTag,Tags can also be used to store data within a view without resorting to another data structure.
android.view.View.setTouchDelegate,Sets the TouchDelegate for this View.
android.view.View.setTouchDelegate,Set touch delegate.
android.view.View.setTransitionName,Sets the name of the View to be used to identify Views in Transitions. Names should be unique in the View hierarchy.
android.view.View.setTransitionName,Set transition name.
android.view.View.setTransitionName,Sets the name of the View to be used to identify Views in Transitions.
android.view.View.setTransitionName,Names should be unique in the View hierarchy.
android.view.View.setTranslationX,Sets the horizontal location of this view relative to its left position. This effectively positions the object post-layout in addition to wherever the object's layout placed it. Related XML Attributes: android:translationX.
android.view.View.setTranslationX,Set translation x.
android.view.View.setTranslationX,Sets the horizontal location of this view relative to its left position.
android.view.View.setTranslationX,This effectively positions the object post-layout in addition to wherever the object's layout placed it.
android.view.View.setTranslationX,Related XML Attributes: android:translationX.
android.view.View.setTranslationY,Sets the vertical location of this view relative to its top position. This effectively positions the object post-layout in addition to wherever the object's layout placed it. Related XML Attributes: android:translationY.
android.view.View.setTranslationY,Set translation y.
android.view.View.setTranslationY,Sets the vertical location of this view relative to its top position.
android.view.View.setTranslationY,This effectively positions the object post-layout in addition to wherever the object's layout placed it.
android.view.View.setTranslationY,Related XML Attributes: android:translationY.
android.view.View.setTranslationZ,Sets the depth location of this view relative to its elevation. Related XML Attributes: android:translationZ.
android.view.View.setTranslationZ,Set translation z.
android.view.View.setTranslationZ,Sets the depth location of this view relative to its elevation.
android.view.View.setTranslationZ,Related XML Attributes: android:translationZ.
android.view.View.setVerticalScrollBarEnabled,Define whether the vertical scrollbar should be drawn or not. The scrollbar is not drawn by default.
android.view.View.setVerticalScrollBarEnabled,Set vertical scroll bar enabled.
android.view.View.setVerticalScrollBarEnabled,Define whether the vertical scrollbar should be drawn or not.
android.view.View.setVerticalScrollBarEnabled,The scrollbar is not drawn by default.
android.view.View.setWillNotDraw,If this view doesn't do any drawing on its own set this flag to allow further optimizations. By default this flag is not set on View but could be set on some View subclasses such as ViewGroup. Typically if you override onDraw(android.graphics.Canvas) you should clear this flag.
android.view.View.setWillNotDraw,Set will not draw.
android.view.View.setWillNotDraw,If this view doesn't do any drawing on its own set this flag to allow further optimizations.
android.view.View.setWillNotDraw,By default this flag is not set on View but could be set on some View subclasses such as ViewGroup.
android.view.View.setWillNotDraw,Typically if you override onDraw(android.graphics.Canvas) you should clear this flag.
android.view.View.setX,Sets the visual x position of this view in pixels. This is equivalent to setting the translationX property to be the difference between the x value passed in and the current left property.
android.view.View.setX,Set x.
android.view.View.setX,Sets the visual x position of this view in pixels.
android.view.View.setX,This is equivalent to setting the translationX property to be the difference between the x value passed in and the current left property.
android.view.View.setY,Sets the visual y position of this view in pixels. This is equivalent to setting the translationY property to be the difference between the y value passed in and the current top property.
android.view.View.setY,Set y.
android.view.View.setY,Sets the visual y position of this view in pixels.
android.view.View.setY,This is equivalent to setting the translationY property to be the difference between the y value passed in and the current top property.
android.view.View.showContextMenu,Shows the context menu for this view.
android.view.View.showContextMenu,Show context menu.
android.view.View.showContextMenu,Shows the context menu for this view anchored to the specified view-relative coordinate.
android.view.View.showContextMenu,Show context menu.
android.view.View.startAnimation,Start the specified animation now.
android.view.View.startAnimation,Start animation.
android.view.View.willNotDraw,Returns whether or not this View draws on its own.
android.view.View.willNotDraw,Will not draw.
android.view.ViewConfiguration.get,Returns a configuration for the specified context. The configuration depends on various parameters of the context like the dimension of the display or the density of the display.
android.view.ViewConfiguration.get,Get.
android.view.ViewConfiguration.get,Returns a configuration for the specified context.
android.view.ViewConfiguration.get,The configuration depends on various parameters of the context like the dimension of the display or the density of the display.
android.view.ViewConfiguration.getScrollFriction,The amount of friction applied to scrolls and flings.
android.view.ViewConfiguration.getScrollFriction,Get scroll friction.
android.view.ViewConfiguration.getTouchSlop,This method was deprecated in API level 15. Use getScaledTouchSlop() instead.
android.view.ViewConfiguration.getTouchSlop,Get touch slop.
android.view.ViewConfiguration.getTouchSlop,This method was deprecated in API level 15.
android.view.ViewConfiguration.getTouchSlop,Use getScaledTouchSlop() instead.
android.view.ViewConfiguration.getZoomControlsTimeout,The amount of time that the zoom controls should be displayed on the screen expressed in milliseconds.
android.view.ViewConfiguration.getZoomControlsTimeout,Get zoom controls timeout.
android.view.ViewConfiguration.hasPermanentMenuKey,Report if the device has a permanent menu key available to the user. As of Android 3.0 devices may not have a permanent menu key available. Apps should use the action bar to present menu options to users. However there are some apps where the action bar is inappropriate or undesirable. This method may be used to detect if a menu key is present. If not applications should provide another on-screen affordance to access functionality.
android.view.ViewConfiguration.hasPermanentMenuKey,Has permanent menu key.
android.view.ViewConfiguration.hasPermanentMenuKey,Report if the device has a permanent menu key available to the user.
android.view.ViewConfiguration.hasPermanentMenuKey,As of Android 3.0 devices may not have a permanent menu key available.
android.view.ViewConfiguration.hasPermanentMenuKey,Apps should use the action bar to present menu options to users.
android.view.ViewConfiguration.hasPermanentMenuKey,However there are some apps where the action bar is inappropriate or undesirable.
android.view.ViewConfiguration.hasPermanentMenuKey,This method may be used to detect if a menu key is present.
android.view.ViewConfiguration.hasPermanentMenuKey,If not applications should provide another on-screen affordance to access functionality.
android.view.ViewGroup.addView,Adds a child view with the specified layout parameters. Note: do not invoke this method from View.draw(android.graphics.Canvas) View.onDraw(android.graphics.Canvas) dispatchDraw(android.graphics.Canvas) or any related method.
android.view.ViewGroup.addView,Add view.
android.view.ViewGroup.addView,Adds a child view with the specified layout parameters.
android.view.ViewGroup.addView,Note: do not invoke this method from View.draw(android.graphics.Canvas) View.onDraw(android.graphics.Canvas) dispatchDraw(android.graphics.Canvas) or any related method.
android.view.ViewGroup.addView,Adds a child view. If no layout parameters are already set on the child the default parameters for this ViewGroup are set on the child. Note: do not invoke this method from View.draw(android.graphics.Canvas) View.onDraw(android.graphics.Canvas) dispatchDraw(android.graphics.Canvas) or any related method.
android.view.ViewGroup.addView,Add view.
android.view.ViewGroup.addView,Adds a child view.
android.view.ViewGroup.addView,If no layout parameters are already set on the child the default parameters for this ViewGroup are set on the child.
android.view.ViewGroup.addView,Note: do not invoke this method from View.draw(android.graphics.Canvas) View.onDraw(android.graphics.Canvas) dispatchDraw(android.graphics.Canvas) or any related method.
android.view.ViewGroup.addView,Adds a child view with the specified layout parameters. Note: do not invoke this method from View.draw(android.graphics.Canvas) View.onDraw(android.graphics.Canvas) dispatchDraw(android.graphics.Canvas) or any related method.
android.view.ViewGroup.addView,Add view.
android.view.ViewGroup.addView,Adds a child view with the specified layout parameters.
android.view.ViewGroup.addView,Note: do not invoke this method from View.draw(android.graphics.Canvas) View.onDraw(android.graphics.Canvas) dispatchDraw(android.graphics.Canvas) or any related method.
android.view.ViewGroup.addView,Adds a child view. If no layout parameters are already set on the child the default parameters for this ViewGroup are set on the child. Note: do not invoke this method from View.draw(android.graphics.Canvas) View.onDraw(android.graphics.Canvas) dispatchDraw(android.graphics.Canvas) or any related method.
android.view.ViewGroup.addView,Add view.
android.view.ViewGroup.addView,Adds a child view.
android.view.ViewGroup.addView,If no layout parameters are already set on the child the default parameters for this ViewGroup are set on the child.
android.view.ViewGroup.addView,Note: do not invoke this method from View.draw(android.graphics.Canvas) View.onDraw(android.graphics.Canvas) dispatchDraw(android.graphics.Canvas) or any related method.
android.view.ViewGroup.addView,Adds a child view with this ViewGroup's default layout parameters and the specified width and height. Note: do not invoke this method from View.draw(android.graphics.Canvas) View.onDraw(android.graphics.Canvas) dispatchDraw(android.graphics.Canvas) or any related method.
android.view.ViewGroup.addView,Add view.
android.view.ViewGroup.addView,Adds a child view with this ViewGroup's default layout parameters and the specified width and height.
android.view.ViewGroup.addView,Note: do not invoke this method from View.draw(android.graphics.Canvas) View.onDraw(android.graphics.Canvas) dispatchDraw(android.graphics.Canvas) or any related method.
android.view.ViewGroup.bringChildToFront,Change the z order of the child so it's on top of all other children. This ordering change may affect layout if this container uses an order-dependent layout scheme (e.g. LinearLayout). Prior to Build.VERSION_CODES.KITKAT this method should be followed by calls to requestLayout() and View#invalidate() on this parent to force the parent to redraw with the new child ordering.
android.view.ViewGroup.bringChildToFront,Bring child to front.
android.view.ViewGroup.bringChildToFront,Change the z order of the child so it's on top of all other children.
android.view.ViewGroup.bringChildToFront,This ordering change may affect layout if this container uses an order-dependent layout scheme (e.g.
android.view.ViewGroup.bringChildToFront,LinearLayout).
android.view.ViewGroup.bringChildToFront,Prior to Build.VERSION_CODES.KITKAT this method should be followed by calls to requestLayout() and View#invalidate() on this parent to force the parent to redraw with the new child ordering.
android.view.ViewGroup.clearChildFocus,Called when a child of this parent is giving up focus.
android.view.ViewGroup.clearChildFocus,Clear child focus.
android.view.ViewGroup.dispatchKeyEvent,Dispatch a key event to the next view on the focus path. This path runs from the top of the view tree down to the currently focused view. If this view has focus it will dispatch to itself. Otherwise it will dispatch the next node down the focus path. This method also fires any key listeners.
android.view.ViewGroup.dispatchKeyEvent,Dispatch key event.
android.view.ViewGroup.dispatchKeyEvent,Dispatch a key event to the next view on the focus path.
android.view.ViewGroup.dispatchKeyEvent,This path runs from the top of the view tree down to the currently focused view.
android.view.ViewGroup.dispatchKeyEvent,If this view has focus it will dispatch to itself.
android.view.ViewGroup.dispatchKeyEvent,Otherwise it will dispatch the next node down the focus path.
android.view.ViewGroup.dispatchKeyEvent,This method also fires any key listeners.
android.view.ViewGroup.focusSearch,Find the nearest view in the specified direction that wants to take focus.
android.view.ViewGroup.focusSearch,Focus search.
android.view.ViewGroup.focusableViewAvailable,Tells the parent that a new focusable view has become available. This is to handle transitions from the case where there are no focusable views to the case where the first focusable view appears.
android.view.ViewGroup.focusableViewAvailable,Focusable view available.
android.view.ViewGroup.focusableViewAvailable,Tells the parent that a new focusable view has become available.
android.view.ViewGroup.focusableViewAvailable,This is to handle transitions from the case where there are no focusable views to the case where the first focusable view appears.
android.view.ViewGroup.generateLayoutParams,Returns a new set of layout parameters based on the supplied attributes set.
android.view.ViewGroup.generateLayoutParams,Generate layout params.
android.view.ViewGroup.getChildAt,Returns the view at the specified position in the group.
android.view.ViewGroup.getChildAt,Get child at.
android.view.ViewGroup.getChildCount,Returns the number of children in the group.
android.view.ViewGroup.getChildCount,Get child count.
android.view.ViewGroup.getChildMeasureSpec,Does the hard part of measureChildren: figuring out the MeasureSpec to pass to a particular child. This method figures out the right MeasureSpec for one dimension (height or width) of one child view. The goal is to combine information from our MeasureSpec with the LayoutParams of the child to get the best possible results. For example if the this view knows its size (because its MeasureSpec has a mode of EXACTLY) and the child has indicated in its LayoutParams that it wants to be the same size as the parent the parent should ask the child to layout given an exact size.
android.view.ViewGroup.getChildMeasureSpec,Get child measure spec.
android.view.ViewGroup.getChildMeasureSpec,Does the hard part of measureChildren: figuring out the MeasureSpec to pass to a particular child.
android.view.ViewGroup.getChildMeasureSpec,This method figures out the right MeasureSpec for one dimension (height or width) of one child view.
android.view.ViewGroup.getChildMeasureSpec,The goal is to combine information from our MeasureSpec with the LayoutParams of the child to get the best possible results.
android.view.ViewGroup.getChildMeasureSpec,For example if the this view knows its size (because its MeasureSpec has a mode of EXACTLY) and the child has indicated in its LayoutParams that it wants to be the same size as the parent the parent should ask the child to layout given an exact size.
android.view.ViewGroup.getLayoutAnimation,Returns the layout animation controller used to animate the group's children.
android.view.ViewGroup.getLayoutAnimation,Get layout animation.
android.view.ViewGroup.getLayoutMode,Returns the basis of alignment during layout operations on this ViewGroup: either LAYOUT_MODE_CLIP_BOUNDS or LAYOUT_MODE_OPTICAL_BOUNDS. If no layoutMode was explicitly set either programmatically or in an XML resource the method returns the layoutMode of the view's parent ViewGroup if such a parent exists otherwise the method returns a default value of LAYOUT_MODE_CLIP_BOUNDS.
android.view.ViewGroup.getLayoutMode,Get layout mode.
android.view.ViewGroup.getLayoutMode,Returns the basis of alignment during layout operations on this ViewGroup: either LAYOUT_MODE_CLIP_BOUNDS or LAYOUT_MODE_OPTICAL_BOUNDS.
android.view.ViewGroup.getLayoutMode,If no layoutMode was explicitly set either programmatically or in an XML resource the method returns the layoutMode of the view's parent ViewGroup if such a parent exists otherwise the method returns a default value of LAYOUT_MODE_CLIP_BOUNDS.
android.view.ViewGroup.getLayoutTransition,Gets the LayoutTransition object for this ViewGroup. If the LayoutTransition object is not null changes in layout which occur because of children being added to or removed from the ViewGroup will be animated according to the animations defined in that LayoutTransition object. By default the transition object is null (so layout changes are not animated).
android.view.ViewGroup.getLayoutTransition,Get layout transition.
android.view.ViewGroup.getLayoutTransition,Gets the LayoutTransition object for this ViewGroup.
android.view.ViewGroup.getLayoutTransition,If the LayoutTransition object is not null changes in layout which occur because of children being added to or removed from the ViewGroup will be animated according to the animations defined in that LayoutTransition object.
android.view.ViewGroup.getLayoutTransition,By default the transition object is null (so layout changes are not animated).
android.view.ViewGroup.hasFocus,Returns true if this view has or contains focus.
android.view.ViewGroup.hasFocus,Has focus.
android.view.ViewGroup.indexOfChild,Returns the position in the group of the specified child view.
android.view.ViewGroup.indexOfChild,Index of child.
android.view.ViewGroup.isTransitionGroup,Returns true if this ViewGroup should be considered as a single entity for removal when executing an Activity transition. If this is false child elements will move individually during the transition.
android.view.ViewGroup.isTransitionGroup,Is transition group.
android.view.ViewGroup.isTransitionGroup,Returns true if this ViewGroup should be considered as a single entity for removal when executing an Activity transition.
android.view.ViewGroup.isTransitionGroup,If this is false child elements will move individually during the transition.
android.view.ViewGroup.onRequestSendAccessibilityEvent,Called when a child has requested sending an AccessibilityEvent and gives an opportunity to its parent to augment the event. If an View.AccessibilityDelegate has been specified via calling View.setAccessibilityDelegate(android.view.View.AccessibilityDelegate) its View.AccessibilityDelegate.onRequestSendAccessibilityEvent(ViewGroup View AccessibilityEvent) is responsible for handling this call.
android.view.ViewGroup.onRequestSendAccessibilityEvent,On request send accessibility event.
android.view.ViewGroup.onRequestSendAccessibilityEvent,Called when a child has requested sending an AccessibilityEvent and gives an opportunity to its parent to augment the event.
android.view.ViewGroup.onRequestSendAccessibilityEvent,If an View.AccessibilityDelegate has been specified via calling View.setAccessibilityDelegate(android.view.View.AccessibilityDelegate) its View.AccessibilityDelegate.onRequestSendAccessibilityEvent(ViewGroup View AccessibilityEvent) is responsible for handling this call.
android.view.ViewGroup.removeAllViews,Call this method to remove all child views from the ViewGroup. Note: do not invoke this method from View.draw(android.graphics.Canvas) View.onDraw(android.graphics.Canvas) dispatchDraw(android.graphics.Canvas) or any related method.
android.view.ViewGroup.removeAllViews,Remove all views.
android.view.ViewGroup.removeAllViews,Call this method to remove all child views from the ViewGroup.
android.view.ViewGroup.removeAllViews,Note: do not invoke this method from View.draw(android.graphics.Canvas) View.onDraw(android.graphics.Canvas) dispatchDraw(android.graphics.Canvas) or any related method.
android.view.ViewGroup.removeAllViewsInLayout,"Called by a ViewGroup subclass to remove child views from itself when it must first know its size on screen before it can calculate how many child views it will render. An example is a Gallery or a ListView which may ""have"" 50 children but actually only render the number of children that can currently fit inside the object on screen. Do not call this method unless you are extending ViewGroup and understand the view measuring and layout pipeline. Note: do not invoke this method from View.draw(android.graphics.Canvas) View.onDraw(android.graphics.Canvas) dispatchDraw(android.graphics.Canvas) or any related method."
android.view.ViewGroup.removeAllViewsInLayout,Remove all views in layout.
android.view.ViewGroup.removeAllViewsInLayout,Called by a ViewGroup subclass to remove child views from itself when it must first know its size on screen before it can calculate how many child views it will render.
android.view.ViewGroup.removeAllViewsInLayout,"An example is a Gallery or a ListView which may ""have"" 50 children but actually only render the number of children that can currently fit inside the object on screen."
android.view.ViewGroup.removeAllViewsInLayout,Do not call this method unless you are extending ViewGroup and understand the view measuring and layout pipeline.
android.view.ViewGroup.removeAllViewsInLayout,Note: do not invoke this method from View.draw(android.graphics.Canvas) View.onDraw(android.graphics.Canvas) dispatchDraw(android.graphics.Canvas) or any related method.
android.view.ViewGroup.removeViewAt,Removes the view at the specified position in the group. Note: do not invoke this method from View.draw(android.graphics.Canvas) View.onDraw(android.graphics.Canvas) dispatchDraw(android.graphics.Canvas) or any related method.
android.view.ViewGroup.removeViewAt,Remove view at.
android.view.ViewGroup.removeViewAt,Removes the view at the specified position in the group.
android.view.ViewGroup.removeViewAt,Note: do not invoke this method from View.draw(android.graphics.Canvas) View.onDraw(android.graphics.Canvas) dispatchDraw(android.graphics.Canvas) or any related method.
android.view.ViewGroup.removeViewInLayout,Removes a view during layout. This is useful if in your onLayout() method you need to remove more views. Note: do not invoke this method from View.draw(android.graphics.Canvas) View.onDraw(android.graphics.Canvas) dispatchDraw(android.graphics.Canvas) or any related method.
android.view.ViewGroup.removeViewInLayout,Remove view in layout.
android.view.ViewGroup.removeViewInLayout,Removes a view during layout.
android.view.ViewGroup.removeViewInLayout,This is useful if in your onLayout() method you need to remove more views.
android.view.ViewGroup.removeViewInLayout,Note: do not invoke this method from View.draw(android.graphics.Canvas) View.onDraw(android.graphics.Canvas) dispatchDraw(android.graphics.Canvas) or any related method.
android.view.ViewGroup.removeViews,Removes the specified range of views from the group. Note: do not invoke this method from View.draw(android.graphics.Canvas) View.onDraw(android.graphics.Canvas) dispatchDraw(android.graphics.Canvas) or any related method.
android.view.ViewGroup.removeViews,Remove views.
android.view.ViewGroup.removeViews,Removes the specified range of views from the group.
android.view.ViewGroup.removeViews,Note: do not invoke this method from View.draw(android.graphics.Canvas) View.onDraw(android.graphics.Canvas) dispatchDraw(android.graphics.Canvas) or any related method.
android.view.ViewGroup.requestChildFocus,Called when a child of this parent wants focus.
android.view.ViewGroup.requestChildFocus,Request child focus.
android.view.ViewGroup.requestDisallowInterceptTouchEvent,Called when a child does not want this parent and its ancestors to intercept touch events with ViewGroup#onInterceptTouchEvent(MotionEvent). This parent should pass this call onto its parents. This parent must obey this request for the duration of the touch (that is only clear the flag after this parent has received an up or a cancel.
android.view.ViewGroup.requestDisallowInterceptTouchEvent,Request disallow intercept touch event.
android.view.ViewGroup.requestDisallowInterceptTouchEvent,Called when a child does not want this parent and its ancestors to intercept touch events with ViewGroup#onInterceptTouchEvent(MotionEvent).
android.view.ViewGroup.requestDisallowInterceptTouchEvent,This parent should pass this call onto its parents.
android.view.ViewGroup.requestDisallowInterceptTouchEvent,This parent must obey this request for the duration of the touch (that is only clear the flag after this parent has received an up or a cancel.
android.view.ViewGroup.setClipToPadding,Sets whether this ViewGroup will clip its children to its padding and resize (but not clip) any EdgeEffect to the padded region if padding is present. By default children are clipped to the padding of their parent ViewGroup. This clipping behavior is only enabled if padding is non-zero. Related XML Attributes: android:clipToPadding.
android.view.ViewGroup.setClipToPadding,Set clip to padding.
android.view.ViewGroup.setClipToPadding,Sets whether this ViewGroup will clip its children to its padding and resize (but not clip) any EdgeEffect to the padded region if padding is present.
android.view.ViewGroup.setClipToPadding,By default children are clipped to the padding of their parent ViewGroup.
android.view.ViewGroup.setClipToPadding,This clipping behavior is only enabled if padding is non-zero.
android.view.ViewGroup.setClipToPadding,Related XML Attributes: android:clipToPadding.
android.view.ViewGroup.setDescendantFocusability,Set the descendant focusability of this view group. This defines the relationship between this view group and its descendants when looking for a view to take focus in requestFocus(int android.graphics.Rect).
android.view.ViewGroup.setDescendantFocusability,Set descendant focusability.
android.view.ViewGroup.setDescendantFocusability,Set the descendant focusability of this view group.
android.view.ViewGroup.setDescendantFocusability,This defines the relationship between this view group and its descendants when looking for a view to take focus in requestFocus(int android.graphics.Rect).
android.view.ViewGroup.setLayoutAnimation,Sets the layout animation controller used to animate the group's children after the first layout.
android.view.ViewGroup.setLayoutAnimation,Set layout animation.
android.view.ViewGroup.setLayoutMode,Sets the basis of alignment during the layout of this ViewGroup. Valid values are either LAYOUT_MODE_CLIP_BOUNDS or LAYOUT_MODE_OPTICAL_BOUNDS. Related XML Attributes: android:layoutMode.
android.view.ViewGroup.setLayoutMode,Set layout mode.
android.view.ViewGroup.setLayoutMode,Sets the basis of alignment during the layout of this ViewGroup.
android.view.ViewGroup.setLayoutMode,Valid values are either LAYOUT_MODE_CLIP_BOUNDS or LAYOUT_MODE_OPTICAL_BOUNDS.
android.view.ViewGroup.setLayoutMode,Related XML Attributes: android:layoutMode.
android.view.ViewGroup.setLayoutTransition,Sets the LayoutTransition object for this ViewGroup. If the LayoutTransition object is not null changes in layout which occur because of children being added to or removed from the ViewGroup will be animated according to the animations defined in that LayoutTransition object. By default the transition object is null (so layout changes are not animated). Replacing a non-null transition will cause that previous transition to be canceled if it is currently running to restore this container to its correct post-transition state. Related XML Attributes: android:animateLayoutChanges.
android.view.ViewGroup.setLayoutTransition,Set layout transition.
android.view.ViewGroup.setLayoutTransition,Sets the LayoutTransition object for this ViewGroup.
android.view.ViewGroup.setLayoutTransition,If the LayoutTransition object is not null changes in layout which occur because of children being added to or removed from the ViewGroup will be animated according to the animations defined in that LayoutTransition object.
android.view.ViewGroup.setLayoutTransition,By default the transition object is null (so layout changes are not animated).
android.view.ViewGroup.setLayoutTransition,Replacing a non-null transition will cause that previous transition to be canceled if it is currently running to restore this container to its correct post-transition state.
android.view.ViewGroup.setLayoutTransition,Related XML Attributes: android:animateLayoutChanges.
android.view.ViewGroup.setTransitionGroup,Changes whether or not this ViewGroup should be treated as a single entity during Activity Transitions.
android.view.ViewGroup.setTransitionGroup,Set transition group.
android.view.ViewGroup.generateLayoutParams,Returns a safe set of layout parameters based on the supplied layout params. When a ViewGroup is passed a View whose layout params do not pass the test of checkLayoutParams(android.view.ViewGroup.LayoutParams) this method is invoked. This method should return a new set of layout params suitable for this ViewGroup possibly by copying the appropriate attributes from the specified set of layout params.
android.view.ViewGroup.generateLayoutParams,Generate layout params.
android.view.ViewGroup.generateLayoutParams,Returns a safe set of layout parameters based on the supplied layout params.
android.view.ViewGroup.generateLayoutParams,When a ViewGroup is passed a View whose layout params do not pass the test of checkLayoutParams(android.view.ViewGroup.LayoutParams) this method is invoked.
android.view.ViewGroup.generateLayoutParams,This method should return a new set of layout params suitable for this ViewGroup possibly by copying the appropriate attributes from the specified set of layout params.
android.view.ViewPropertyAnimator.alpha,This method will cause the View's alpha property to be animated to the specified value. Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.alpha,Alpha.
android.view.ViewPropertyAnimator.alpha,This method will cause the View's alpha property to be animated to the specified value.
android.view.ViewPropertyAnimator.alpha,Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.alphaBy,This method will cause the View's alpha property to be animated by the specified value. Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.alphaBy,Alpha by.
android.view.ViewPropertyAnimator.alphaBy,This method will cause the View's alpha property to be animated by the specified value.
android.view.ViewPropertyAnimator.alphaBy,Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.cancel,Cancels all property animations that are currently running or pending.
android.view.ViewPropertyAnimator.cancel,Cancel.
android.view.ViewPropertyAnimator.getDuration,Returns the current duration of property animations. If the duration was set on this object that value is returned. Otherwise the default value of the underlying Animator is returned.
android.view.ViewPropertyAnimator.getDuration,Get duration.
android.view.ViewPropertyAnimator.getDuration,Returns the current duration of property animations.
android.view.ViewPropertyAnimator.getDuration,If the duration was set on this object that value is returned.
android.view.ViewPropertyAnimator.getDuration,Otherwise the default value of the underlying Animator is returned.
android.view.ViewPropertyAnimator.getInterpolator,Returns the timing interpolator that this animation uses.
android.view.ViewPropertyAnimator.getInterpolator,Get interpolator.
android.view.ViewPropertyAnimator.getStartDelay,Returns the current startDelay of property animations. If the startDelay was set on this object that value is returned. Otherwise the default value of the underlying Animator is returned.
android.view.ViewPropertyAnimator.getStartDelay,Get start delay.
android.view.ViewPropertyAnimator.getStartDelay,Returns the current startDelay of property animations.
android.view.ViewPropertyAnimator.getStartDelay,If the startDelay was set on this object that value is returned.
android.view.ViewPropertyAnimator.getStartDelay,Otherwise the default value of the underlying Animator is returned.
android.view.ViewPropertyAnimator.rotation,This method will cause the View's rotation property to be animated to the specified value. Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.rotation,Rotation.
android.view.ViewPropertyAnimator.rotation,This method will cause the View's rotation property to be animated to the specified value.
android.view.ViewPropertyAnimator.rotation,Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.rotationBy,This method will cause the View's rotation property to be animated by the specified value. Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.rotationBy,Rotation by.
android.view.ViewPropertyAnimator.rotationBy,This method will cause the View's rotation property to be animated by the specified value.
android.view.ViewPropertyAnimator.rotationBy,Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.rotationX,This method will cause the View's rotationX property to be animated to the specified value. Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.rotationX,Rotation x.
android.view.ViewPropertyAnimator.rotationX,This method will cause the View's rotationX property to be animated to the specified value.
android.view.ViewPropertyAnimator.rotationX,Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.rotationXBy,This method will cause the View's rotationX property to be animated by the specified value. Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.rotationXBy,Rotation x by.
android.view.ViewPropertyAnimator.rotationXBy,This method will cause the View's rotationX property to be animated by the specified value.
android.view.ViewPropertyAnimator.rotationXBy,Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.rotationY,This method will cause the View's rotationY property to be animated to the specified value. Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.rotationY,Rotation y.
android.view.ViewPropertyAnimator.rotationY,This method will cause the View's rotationY property to be animated to the specified value.
android.view.ViewPropertyAnimator.rotationY,Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.rotationYBy,This method will cause the View's rotationY property to be animated by the specified value. Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.rotationYBy,Rotation y by.
android.view.ViewPropertyAnimator.rotationYBy,This method will cause the View's rotationY property to be animated by the specified value.
android.view.ViewPropertyAnimator.rotationYBy,Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.scaleX,This method will cause the View's scaleX property to be animated to the specified value. Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.scaleX,Scale x.
android.view.ViewPropertyAnimator.scaleX,This method will cause the View's scaleX property to be animated to the specified value.
android.view.ViewPropertyAnimator.scaleX,Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.scaleXBy,This method will cause the View's scaleX property to be animated by the specified value. Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.scaleXBy,Scale x by.
android.view.ViewPropertyAnimator.scaleXBy,This method will cause the View's scaleX property to be animated by the specified value.
android.view.ViewPropertyAnimator.scaleXBy,Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.scaleYBy,This method will cause the View's scaleY property to be animated by the specified value. Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.scaleYBy,Scale y by.
android.view.ViewPropertyAnimator.scaleYBy,This method will cause the View's scaleY property to be animated by the specified value.
android.view.ViewPropertyAnimator.scaleYBy,Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.setDuration,Sets the duration for the underlying animator that animates the requested properties. By default the animator uses the default value for ValueAnimator. Calling this method will cause the declared value to be used instead.
android.view.ViewPropertyAnimator.setDuration,Set duration.
android.view.ViewPropertyAnimator.setDuration,Sets the duration for the underlying animator that animates the requested properties.
android.view.ViewPropertyAnimator.setDuration,By default the animator uses the default value for ValueAnimator.
android.view.ViewPropertyAnimator.setDuration,Calling this method will cause the declared value to be used instead.
android.view.ViewPropertyAnimator.setInterpolator,Sets the interpolator for the underlying animator that animates the requested properties. By default the animator uses the default interpolator for ValueAnimator. Calling this method will cause the declared object to be used instead.
android.view.ViewPropertyAnimator.setInterpolator,Set interpolator.
android.view.ViewPropertyAnimator.setInterpolator,Sets the interpolator for the underlying animator that animates the requested properties.
android.view.ViewPropertyAnimator.setInterpolator,By default the animator uses the default interpolator for ValueAnimator.
android.view.ViewPropertyAnimator.setInterpolator,Calling this method will cause the declared object to be used instead.
android.view.ViewPropertyAnimator.setStartDelay,Sets the startDelay for the underlying animator that animates the requested properties. By default the animator uses the default value for ValueAnimator. Calling this method will cause the declared value to be used instead.
android.view.ViewPropertyAnimator.setStartDelay,Set start delay.
android.view.ViewPropertyAnimator.setStartDelay,Sets the startDelay for the underlying animator that animates the requested properties.
android.view.ViewPropertyAnimator.setStartDelay,By default the animator uses the default value for ValueAnimator.
android.view.ViewPropertyAnimator.setStartDelay,Calling this method will cause the declared value to be used instead.
android.view.ViewPropertyAnimator.start,Starts the currently pending property animations immediately. Calling start() is optional because all animations start automatically at the next opportunity. However if the animations are needed to start immediately and synchronously (not at the time when the next event is processed by the hierarchy which is when the animations would begin otherwise) then this method can be used.
android.view.ViewPropertyAnimator.start,Start.
android.view.ViewPropertyAnimator.start,Starts the currently pending property animations immediately.
android.view.ViewPropertyAnimator.start,Calling start() is optional because all animations start automatically at the next opportunity.
android.view.ViewPropertyAnimator.start,However if the animations are needed to start immediately and synchronously (not at the time when the next event is processed by the hierarchy which is when the animations would begin otherwise) then this method can be used.
android.view.ViewPropertyAnimator.translationX,This method will cause the View's translationX property to be animated to the specified value. Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.translationX,Translation x.
android.view.ViewPropertyAnimator.translationX,This method will cause the View's translationX property to be animated to the specified value.
android.view.ViewPropertyAnimator.translationX,Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.translationXBy,This method will cause the View's translationX property to be animated by the specified value. Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.translationXBy,Translation x by.
android.view.ViewPropertyAnimator.translationXBy,This method will cause the View's translationX property to be animated by the specified value.
android.view.ViewPropertyAnimator.translationXBy,Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.translationY,This method will cause the View's translationY property to be animated to the specified value. Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.translationY,Translation y.
android.view.ViewPropertyAnimator.translationY,This method will cause the View's translationY property to be animated to the specified value.
android.view.ViewPropertyAnimator.translationY,Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.translationYBy,This method will cause the View's translationY property to be animated by the specified value. Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.translationYBy,Translation y by.
android.view.ViewPropertyAnimator.translationYBy,This method will cause the View's translationY property to be animated by the specified value.
android.view.ViewPropertyAnimator.translationYBy,Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.withEndAction,Specifies an action to take place when the next animation ends. The action is only run if the animation ends normally; if the ViewPropertyAnimator is canceled during that animation the runnable will not run. This method along with withStartAction(java.lang.Runnable) is intended to help facilitate choreographing ViewPropertyAnimator animations with other animations or actions in the application. For example the following code animates a view to x=200 and then back to 0:.
android.view.ViewPropertyAnimator.withEndAction,With end action.
android.view.ViewPropertyAnimator.withEndAction,Specifies an action to take place when the next animation ends.
android.view.ViewPropertyAnimator.withEndAction,The action is only run if the animation ends normally; if the ViewPropertyAnimator is canceled during that animation the runnable will not run.
android.view.ViewPropertyAnimator.withEndAction,This method along with withStartAction(java.lang.Runnable) is intended to help facilitate choreographing ViewPropertyAnimator animations with other animations or actions in the application.
android.view.ViewPropertyAnimator.withEndAction,For example the following code animates a view to x=200 and then back to 0:.
android.view.ViewPropertyAnimator.withLayer,The View associated with this ViewPropertyAnimator will have its View#setLayerType(int android.graphics.Paint) set to View#LAYER_TYPE_HARDWARE for the duration of the next animation. As stated in the documentation for View#LAYER_TYPE_HARDWARE the actual type of layer used internally depends on the runtime situation of the view. If the activity and this view are hardware-accelerated then the layer will be accelerated as well. If the activity or the view is not accelerated then the layer will effectively be the same as View#LAYER_TYPE_SOFTWARE. This state is not persistent either on the View or on this ViewPropertyAnimator: the layer type of the View will be restored when the animation ends to what it was when this method was called and this setting on ViewPropertyAnimator is only valid for the next animation. Note that calling this method and then independently setting the layer type of the View (by a direct call to View#setLayerType(int android.graphics.Paint) ) will result in some inconsistency including having the layer type restored to its pre-withLayer() value when the animation ends.
android.view.ViewPropertyAnimator.withLayer,With layer.
android.view.ViewPropertyAnimator.withLayer,The View associated with this ViewPropertyAnimator will have its View#setLayerType(int android.graphics.Paint) set to View#LAYER_TYPE_HARDWARE for the duration of the next animation.
android.view.ViewPropertyAnimator.withLayer,As stated in the documentation for View#LAYER_TYPE_HARDWARE the actual type of layer used internally depends on the runtime situation of the view.
android.view.ViewPropertyAnimator.withLayer,If the activity and this view are hardware-accelerated then the layer will be accelerated as well.
android.view.ViewPropertyAnimator.withLayer,If the activity or the view is not accelerated then the layer will effectively be the same as View#LAYER_TYPE_SOFTWARE.
android.view.ViewPropertyAnimator.withLayer,This state is not persistent either on the View or on this ViewPropertyAnimator: the layer type of the View will be restored when the animation ends to what it was when this method was called and this setting on ViewPropertyAnimator is only valid for the next animation.
android.view.ViewPropertyAnimator.withLayer,Note that calling this method and then independently setting the layer type of the View (by a direct call to View#setLayerType(int android.graphics.Paint) ) will result in some inconsistency including having the layer type restored to its pre-withLayer() value when the animation ends.
android.view.ViewPropertyAnimator.withStartAction,Specifies an action to take place when the next animation runs. If there is a startDelay set on this ViewPropertyAnimator then the action will run after that startDelay expires when the actual animation begins. This method along with withEndAction(java.lang.Runnable) is intended to help facilitate choreographing ViewPropertyAnimator animations with other animations or actions in the application.
android.view.ViewPropertyAnimator.withStartAction,With start action.
android.view.ViewPropertyAnimator.withStartAction,Specifies an action to take place when the next animation runs.
android.view.ViewPropertyAnimator.withStartAction,If there is a startDelay set on this ViewPropertyAnimator then the action will run after that startDelay expires when the actual animation begins.
android.view.ViewPropertyAnimator.withStartAction,This method along with withEndAction(java.lang.Runnable) is intended to help facilitate choreographing ViewPropertyAnimator animations with other animations or actions in the application.
android.view.ViewPropertyAnimator.x,This method will cause the View's x property to be animated to the specified value. Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.x,X.
android.view.ViewPropertyAnimator.x,This method will cause the View's x property to be animated to the specified value.
android.view.ViewPropertyAnimator.x,Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.xBy,This method will cause the View's x property to be animated by the specified value. Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.xBy,X by.
android.view.ViewPropertyAnimator.xBy,This method will cause the View's x property to be animated by the specified value.
android.view.ViewPropertyAnimator.xBy,Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.y,This method will cause the View's y property to be animated to the specified value. Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.y,Y.
android.view.ViewPropertyAnimator.y,This method will cause the View's y property to be animated to the specified value.
android.view.ViewPropertyAnimator.y,Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.yBy,This method will cause the View's y property to be animated by the specified value. Animations already running on the property will be canceled.
android.view.ViewPropertyAnimator.yBy,Y by.
android.view.ViewPropertyAnimator.yBy,This method will cause the View's y property to be animated by the specified value.
android.view.ViewPropertyAnimator.yBy,Animations already running on the property will be canceled.
android.view.ViewStub.inflate,Inflates the layout resource identified by getLayoutResource() and replaces this StubbedView in its parent by the inflated layout resource.
android.view.ViewStub.inflate,Inflate.
android.view.ViewStub.setLayoutResource,Specifies the layout resource to inflate when this StubbedView becomes visible or invisible or when inflate() is invoked. The View created by inflating the layout resource is used to replace this StubbedView in its parent. Related XML Attributes: android:layout.
android.view.ViewStub.setLayoutResource,Set layout resource.
android.view.ViewStub.setLayoutResource,Specifies the layout resource to inflate when this StubbedView becomes visible or invisible or when inflate() is invoked.
android.view.ViewStub.setLayoutResource,The View created by inflating the layout resource is used to replace this StubbedView in its parent.
android.view.ViewStub.setLayoutResource,Related XML Attributes: android:layout.
android.view.ViewStub.setVisibility,When visibility is set to View.VISIBLE or View.INVISIBLE inflate() is invoked and this StubbedView is replaced in its parent by the inflated layout resource. After that calls to this function are passed through to the inflated view.
android.view.ViewStub.setVisibility,Set visibility.
android.view.ViewStub.setVisibility,When visibility is set to View.VISIBLE or View.INVISIBLE inflate() is invoked and this StubbedView is replaced in its parent by the inflated layout resource.
android.view.ViewStub.setVisibility,After that calls to this function are passed through to the inflated view.
android.view.Window.addFlags,Convenience function to set the flag bits as specified in flags as per setFlags(int int).
android.view.Window.addFlags,Add flags.
android.view.Window.clearFlags,Convenience function to clear the flag bits as specified in flags as per setFlags(int int).
android.view.Window.clearFlags,Clear flags.
android.view.Window.getAttributes,Retrieve the current window attributes associated with this panel.
android.view.Window.getAttributes,Get attributes.
android.view.Window.getCallback,Return the current Callback interface for this window.
android.view.Window.getCallback,Get callback.
android.view.Window.getContext,Return the Context this window policy is running in for retrieving resources and other information.
android.view.Window.getContext,Get context.
android.view.Window.getCurrentFocus,Return the view in this Window that currently has focus or null if there are none. Note that this does not look in any containing Window.
android.view.Window.getCurrentFocus,Get current focus.
android.view.Window.getCurrentFocus,Return the view in this Window that currently has focus or null if there are none.
android.view.Window.getCurrentFocus,Note that this does not look in any containing Window.
android.view.Window.getDecorView,"Retrieve the top-level window decor view (containing the standard window frame/decorations and the client's content inside of that) which can be added as a window to the window manager. Note that calling this function for the first time ""locks in"" various window characteristics as described in setContentView(android.view.View android.view.ViewGroup.LayoutParams)."
android.view.Window.getDecorView,Get decor view.
android.view.Window.getDecorView,Retrieve the top-level window decor view (containing the standard window frame/decorations and the client's content inside of that) which can be added as a window to the window manager.
android.view.Window.getDecorView,"Note that calling this function for the first time ""locks in"" various window characteristics as described in setContentView(android.view.View android.view.ViewGroup.LayoutParams)."
android.view.Window.getWindowManager,Return the window manager allowing this Window to display its own windows.
android.view.Window.getWindowManager,Get window manager.
android.view.Window.hasFeature,Query for the availability of a certain feature.
android.view.Window.hasFeature,Has feature.
android.view.Window.isFloating,Return whether this window is being displayed with a floating style (based on the R.attr.windowIsFloating attribute in the style/theme).
android.view.Window.isFloating,Is floating.
android.view.Window.peekDecorView,Retrieve the current decor view but only if it has already been created; otherwise returns null.
android.view.Window.peekDecorView,Peek decor view.
android.view.Window.requestFeature,Enable extended screen features. This must be called before setContentView(). May be called as many times as desired as long as it is before setContentView(). If not called no extended features will be available. You can not turn off a feature once it is requested. You canot use other title features with FEATURE_CUSTOM_TITLE.
android.view.Window.requestFeature,Request feature.
android.view.Window.requestFeature,Enable extended screen features.
android.view.Window.requestFeature,This must be called before setContentView().
android.view.Window.requestFeature,May be called as many times as desired as long as it is before setContentView().
android.view.Window.requestFeature,If not called no extended features will be available.
android.view.Window.requestFeature,You can not turn off a feature once it is requested.
android.view.Window.requestFeature,You canot use other title features with FEATURE_CUSTOM_TITLE.
android.view.Window.setBackgroundDrawable,Change the background of this window to a custom Drawable. Setting the background to null will make the window be opaque. To make the window transparent you can use an empty drawable (for instance a ColorDrawable with the color 0 or the system drawable android:drawable/empty.).
android.view.Window.setBackgroundDrawable,Set background drawable.
android.view.Window.setBackgroundDrawable,Change the background of this window to a custom Drawable.
android.view.Window.setBackgroundDrawable,Setting the background to null will make the window be opaque.
android.view.Window.setBackgroundDrawable,To make the window transparent you can use an empty drawable (for instance a ColorDrawable with the color 0 or the system drawable android:drawable/empty.).
android.view.Window.setBackgroundDrawableResource,Change the background of this window to a Drawable resource. Setting the background to null will make the window be opaque. To make the window transparent you can use an empty drawable (for instance a ColorDrawable with the color 0 or the system drawable android:drawable/empty.).
android.view.Window.setBackgroundDrawableResource,Set background drawable resource.
android.view.Window.setBackgroundDrawableResource,Change the background of this window to a Drawable resource.
android.view.Window.setBackgroundDrawableResource,Setting the background to null will make the window be opaque.
android.view.Window.setBackgroundDrawableResource,To make the window transparent you can use an empty drawable (for instance a ColorDrawable with the color 0 or the system drawable android:drawable/empty.).
android.view.Window.setContentView,"Set the screen content to an explicit view. This view is placed directly into the screen's view hierarchy. It can itself be a complex view hierarchy. Note that calling this function ""locks in"" various characteristics of the window that can not from this point forward be changed: the features that have been requested with requestFeature(int) and certain window flags as described in setFlags(int int). If FEATURE_CONTENT_TRANSITIONS is set the window's TransitionManager will be used to animate content from the current content View to view."
android.view.Window.setContentView,Set content view.
android.view.Window.setContentView,Set the screen content to an explicit view.
android.view.Window.setContentView,This view is placed directly into the screen's view hierarchy.
android.view.Window.setContentView,It can itself be a complex view hierarchy.
android.view.Window.setContentView,"Note that calling this function ""locks in"" various characteristics of the window that can not from this point forward be changed: the features that have been requested with requestFeature(int) and certain window flags as described in setFlags(int int)."
android.view.Window.setContentView,If FEATURE_CONTENT_TRANSITIONS is set the window's TransitionManager will be used to animate content from the current content View to view.
android.view.Window.setContentView,Convenience for setContentView(android.view.View android.view.ViewGroup.LayoutParams) set the screen content to an explicit view. This view is placed directly into the screen's view hierarchy. It can itself be a complex view hierarhcy.
android.view.Window.setContentView,Set content view.
android.view.Window.setContentView,Convenience for setContentView(android.view.View android.view.ViewGroup.LayoutParams) set the screen content to an explicit view.
android.view.Window.setContentView,This view is placed directly into the screen's view hierarchy.
android.view.Window.setContentView,It can itself be a complex view hierarhcy.
android.view.Window.setContentView,Convenience for setContentView(android.view.View android.view.ViewGroup.LayoutParams) to set the screen content from a layout resource. The resource will be inflated adding all top-level views to the screen.
android.view.Window.setContentView,Set content view.
android.view.Window.setContentView,Convenience for setContentView(android.view.View android.view.ViewGroup.LayoutParams) to set the screen content from a layout resource.
android.view.Window.setContentView,The resource will be inflated adding all top-level views to the screen.
android.view.Window.setFeatureDrawableAlpha,Set a custom alpha value for the given drawable feature controlling how much the background is visible through it.
android.view.Window.setFeatureDrawableAlpha,Set feature drawable alpha.
android.view.Window.setFeatureInt,Set the integer value for a feature. The range of the value depends on the feature being set. For FEATURE_PROGRESS it should go from 0 to 10000. At 10000 the progress is complete and the indicator hidden.
android.view.Window.setFeatureInt,Set feature int.
android.view.Window.setFeatureInt,Set the integer value for a feature.
android.view.Window.setFeatureInt,The range of the value depends on the feature being set.
android.view.Window.setFeatureInt,For FEATURE_PROGRESS it should go from 0 to 10000.
android.view.Window.setFeatureInt,At 10000 the progress is complete and the indicator hidden.
android.view.Window.setFlags,Set the flags of the window as per the WindowManager.LayoutParams flags. Note that some flags must be set before the window decoration is created (by the first call to setContentView(android.view.View android.view.ViewGroup.LayoutParams) or getDecorView() : WindowManager.LayoutParams#FLAG_LAYOUT_IN_SCREEN and WindowManager.LayoutParams#FLAG_LAYOUT_INSET_DECOR. These will be set for you based on the R.attr.windowIsFloating attribute.
android.view.Window.setFlags,Set flags.
android.view.Window.setFlags,Set the flags of the window as per the WindowManager.LayoutParams flags.
android.view.Window.setFlags,Note that some flags must be set before the window decoration is created (by the first call to setContentView(android.view.View android.view.ViewGroup.LayoutParams) or getDecorView() : WindowManager.LayoutParams#FLAG_LAYOUT_IN_SCREEN and WindowManager.LayoutParams#FLAG_LAYOUT_INSET_DECOR.
android.view.Window.setFlags,These will be set for you based on the R.attr.windowIsFloating attribute.
android.view.Window.setFormat,Set the format of window as per the PixelFormat types. This overrides the default format that is selected by the Window based on its window decorations.
android.view.Window.setFormat,Set format.
android.view.Window.setFormat,Set the format of window as per the PixelFormat types.
android.view.Window.setFormat,This overrides the default format that is selected by the Window based on its window decorations.
android.view.Window.setGravity,Set the gravity of the window as per the Gravity constants. This controls how the window manager is positioned in the overall window; it is only useful when using WRAP_CONTENT for the layout width or height.
android.view.Window.setGravity,Set gravity.
android.view.Window.setGravity,Set the gravity of the window as per the Gravity constants.
android.view.Window.setGravity,This controls how the window manager is positioned in the overall window; it is only useful when using WRAP_CONTENT for the layout width or height.
android.view.Window.setLayout,Set the width and height layout parameters of the window. The default for both of these is MATCH_PARENT; you can change them to WRAP_CONTENT or an absolute value to make a window that is not full-screen.
android.view.Window.setLayout,Set layout.
android.view.Window.setLayout,Set the width and height layout parameters of the window.
android.view.Window.setLayout,The default for both of these is MATCH_PARENT; you can change them to WRAP_CONTENT or an absolute value to make a window that is not full-screen.
android.view.Window.setSoftInputMode,"Specify an explicit soft input mode to use for the window as per WindowManager.LayoutParams#softInputMode. Providing anything besides ""unspecified"" here will override the input mode the window would normally retrieve from its theme."
android.view.Window.setSoftInputMode,Set soft input mode.
android.view.Window.setSoftInputMode,Specify an explicit soft input mode to use for the window as per WindowManager.LayoutParams#softInputMode.
android.view.Window.setSoftInputMode,"Providing anything besides ""unspecified"" here will override the input mode the window would normally retrieve from its theme."
android.view.Window.setStatusBarColor,"Sets the color of the status bar to color. For this to take effect the window must be drawing the system bar backgrounds with WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS and WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS must not be set. If color is not opaque consider setting View.SYSTEM_UI_FLAG_LAYOUT_STABLE and View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN. The transitionName for the view background will be ""android:status:background""."
android.view.Window.setStatusBarColor,Set status bar color.
android.view.Window.setStatusBarColor,Sets the color of the status bar to color.
android.view.Window.setStatusBarColor,For this to take effect the window must be drawing the system bar backgrounds with WindowManager.LayoutParams.FLAG_DRAWS_SYSTEM_BAR_BACKGROUNDS and WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS must not be set.
android.view.Window.setStatusBarColor,If color is not opaque consider setting View.SYSTEM_UI_FLAG_LAYOUT_STABLE and View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN.
android.view.Window.setStatusBarColor,"The transitionName for the view background will be ""android:status:background""."
android.view.Window.setType,Set the type of the window as per the WindowManager.LayoutParams types.
android.view.Window.setType,Set type.
android.view.Window.setUiOptions,Set extra options that will influence the UI for this window.
android.view.Window.setUiOptions,Set ui options.
android.view.Window.setUiOptions,Set extra options that will influence the UI for this window. Only the bits filtered by mask will be modified.
android.view.Window.setUiOptions,Set ui options.
android.view.Window.setUiOptions,Set extra options that will influence the UI for this window.
android.view.Window.setUiOptions,Only the bits filtered by mask will be modified.
android.view.Window.setWindowAnimations,Specify custom animations to use for the window as per WindowManager.LayoutParams#windowAnimations. Providing anything besides 0 here will override the animations the window would normally retrieve from its theme.
android.view.Window.setWindowAnimations,Set window animations.
android.view.Window.setWindowAnimations,Specify custom animations to use for the window as per WindowManager.LayoutParams#windowAnimations.
android.view.Window.setWindowAnimations,Providing anything besides 0 here will override the animations the window would normally retrieve from its theme.
android.view.Window.setWindowManager,Set the window manager for use by this Window to for example display panels. This is not used for displaying the Window itself -- that must be done by the client.
android.view.Window.setWindowManager,Set window manager.
android.view.Window.setWindowManager,Set the window manager for use by this Window to for example display panels.
android.view.Window.setWindowManager,This is not used for displaying the Window itself -- that must be done by the client.
android.view.Window.setWindowManager,Set the window manager for use by this Window to for example display panels. This is not used for displaying the Window itself -- that must be done by the client.
android.view.Window.setWindowManager,Set window manager.
android.view.Window.setWindowManager,Set the window manager for use by this Window to for example display panels.
android.view.Window.setWindowManager,This is not used for displaying the Window itself -- that must be done by the client.
android.view.WindowInsets.consumeStableInsets,Returns a copy of this WindowInsets with the stable insets fully consumed.
android.view.WindowInsets.consumeStableInsets,Consume stable insets.
android.view.WindowInsets.consumeSystemWindowInsets,Returns a copy of this WindowInsets with the system window insets fully consumed.
android.view.WindowInsets.consumeSystemWindowInsets,Consume system window insets.
android.view.WindowInsets.getStableInsetBottom,Returns the bottom stable inset in pixels. The stable inset represents the area of a full-screen window that may be partially or fully obscured by the system UI elements. This value does not change based on the visibility state of those elements; for example if the status bar is normally shown but temporarily hidden the stable inset will still provide the inset associated with the status bar being shown.
android.view.WindowInsets.getStableInsetBottom,Get stable inset bottom.
android.view.WindowInsets.getStableInsetBottom,Returns the bottom stable inset in pixels.
android.view.WindowInsets.getStableInsetBottom,The stable inset represents the area of a full-screen window that may be partially or fully obscured by the system UI elements.
android.view.WindowInsets.getStableInsetBottom,This value does not change based on the visibility state of those elements; for example if the status bar is normally shown but temporarily hidden the stable inset will still provide the inset associated with the status bar being shown.
android.view.WindowInsets.getStableInsetLeft,Returns the left stable inset in pixels. The stable inset represents the area of a full-screen window that may be partially or fully obscured by the system UI elements. This value does not change based on the visibility state of those elements; for example if the status bar is normally shown but temporarily hidden the stable inset will still provide the inset associated with the status bar being shown.
android.view.WindowInsets.getStableInsetLeft,Get stable inset left.
android.view.WindowInsets.getStableInsetLeft,Returns the left stable inset in pixels.
android.view.WindowInsets.getStableInsetLeft,The stable inset represents the area of a full-screen window that may be partially or fully obscured by the system UI elements.
android.view.WindowInsets.getStableInsetLeft,This value does not change based on the visibility state of those elements; for example if the status bar is normally shown but temporarily hidden the stable inset will still provide the inset associated with the status bar being shown.
android.view.WindowInsets.getStableInsetRight,Returns the right stable inset in pixels. The stable inset represents the area of a full-screen window that may be partially or fully obscured by the system UI elements. This value does not change based on the visibility state of those elements; for example if the status bar is normally shown but temporarily hidden the stable inset will still provide the inset associated with the status bar being shown.
android.view.WindowInsets.getStableInsetRight,Get stable inset right.
android.view.WindowInsets.getStableInsetRight,Returns the right stable inset in pixels.
android.view.WindowInsets.getStableInsetRight,The stable inset represents the area of a full-screen window that may be partially or fully obscured by the system UI elements.
android.view.WindowInsets.getStableInsetRight,This value does not change based on the visibility state of those elements; for example if the status bar is normally shown but temporarily hidden the stable inset will still provide the inset associated with the status bar being shown.
android.view.WindowInsets.getStableInsetTop,Returns the top stable inset in pixels. The stable inset represents the area of a full-screen window that may be partially or fully obscured by the system UI elements. This value does not change based on the visibility state of those elements; for example if the status bar is normally shown but temporarily hidden the stable inset will still provide the inset associated with the status bar being shown.
android.view.WindowInsets.getStableInsetTop,Get stable inset top.
android.view.WindowInsets.getStableInsetTop,Returns the top stable inset in pixels.
android.view.WindowInsets.getStableInsetTop,The stable inset represents the area of a full-screen window that may be partially or fully obscured by the system UI elements.
android.view.WindowInsets.getStableInsetTop,This value does not change based on the visibility state of those elements; for example if the status bar is normally shown but temporarily hidden the stable inset will still provide the inset associated with the status bar being shown.
android.view.WindowInsets.getSystemWindowInsetBottom,Returns the bottom system window inset in pixels. The system window inset represents the area of a full-screen window that is partially or fully obscured by the status bar navigation bar IME or other system windows.
android.view.WindowInsets.getSystemWindowInsetBottom,Get system window inset bottom.
android.view.WindowInsets.getSystemWindowInsetBottom,Returns the bottom system window inset in pixels.
android.view.WindowInsets.getSystemWindowInsetBottom,The system window inset represents the area of a full-screen window that is partially or fully obscured by the status bar navigation bar IME or other system windows.
android.view.WindowInsets.getSystemWindowInsetLeft,Returns the left system window inset in pixels. The system window inset represents the area of a full-screen window that is partially or fully obscured by the status bar navigation bar IME or other system windows.
android.view.WindowInsets.getSystemWindowInsetLeft,Get system window inset left.
android.view.WindowInsets.getSystemWindowInsetLeft,Returns the left system window inset in pixels.
android.view.WindowInsets.getSystemWindowInsetLeft,The system window inset represents the area of a full-screen window that is partially or fully obscured by the status bar navigation bar IME or other system windows.
android.view.WindowInsets.getSystemWindowInsetRight,Returns the right system window inset in pixels. The system window inset represents the area of a full-screen window that is partially or fully obscured by the status bar navigation bar IME or other system windows.
android.view.WindowInsets.getSystemWindowInsetRight,Get system window inset right.
android.view.WindowInsets.getSystemWindowInsetRight,Returns the right system window inset in pixels.
android.view.WindowInsets.getSystemWindowInsetRight,The system window inset represents the area of a full-screen window that is partially or fully obscured by the status bar navigation bar IME or other system windows.
android.view.WindowInsets.getSystemWindowInsetTop,Returns the top system window inset in pixels. The system window inset represents the area of a full-screen window that is partially or fully obscured by the status bar navigation bar IME or other system windows.
android.view.WindowInsets.getSystemWindowInsetTop,Get system window inset top.
android.view.WindowInsets.getSystemWindowInsetTop,Returns the top system window inset in pixels.
android.view.WindowInsets.getSystemWindowInsetTop,The system window inset represents the area of a full-screen window that is partially or fully obscured by the status bar navigation bar IME or other system windows.
android.view.WindowInsets.hasInsets,Returns true if this WindowInsets has any nonzero insets.
android.view.WindowInsets.hasInsets,Has insets.
android.view.WindowInsets.hasStableInsets,Returns true if this WindowInsets has nonzero stable insets. The stable inset represents the area of a full-screen window that may be partially or fully obscured by the system UI elements. This value does not change based on the visibility state of those elements; for example if the status bar is normally shown but temporarily hidden the stable inset will still provide the inset associated with the status bar being shown.
android.view.WindowInsets.hasStableInsets,Has stable insets.
android.view.WindowInsets.hasStableInsets,Returns true if this WindowInsets has nonzero stable insets.
android.view.WindowInsets.hasStableInsets,The stable inset represents the area of a full-screen window that may be partially or fully obscured by the system UI elements.
android.view.WindowInsets.hasStableInsets,This value does not change based on the visibility state of those elements; for example if the status bar is normally shown but temporarily hidden the stable inset will still provide the inset associated with the status bar being shown.
android.view.WindowInsets.hasSystemWindowInsets,Returns true if this WindowInsets has nonzero system window insets. The system window inset represents the area of a full-screen window that is partially or fully obscured by the status bar navigation bar IME or other system windows.
android.view.WindowInsets.hasSystemWindowInsets,Has system window insets.
android.view.WindowInsets.hasSystemWindowInsets,Returns true if this WindowInsets has nonzero system window insets.
android.view.WindowInsets.hasSystemWindowInsets,The system window inset represents the area of a full-screen window that is partially or fully obscured by the status bar navigation bar IME or other system windows.
android.view.WindowInsets.isConsumed,"Check if these insets have been fully consumed. Insets are considered ""consumed"" if the applicable consume* methods have been called such that all insets have been set to zero. This affects propagation of insets through the view hierarchy; insets that have not been fully consumed will continue to propagate down to child views. The result of this method is equivalent to the return value of View#fitSystemWindows(android.graphics.Rect)."
android.view.WindowInsets.isConsumed,Is consumed.
android.view.WindowInsets.isConsumed,Check if these insets have been fully consumed.
android.view.WindowInsets.isConsumed,"Insets are considered ""consumed"" if the applicable consume* methods have been called such that all insets have been set to zero."
android.view.WindowInsets.isConsumed,This affects propagation of insets through the view hierarchy; insets that have not been fully consumed will continue to propagate down to child views.
android.view.WindowInsets.isConsumed,The result of this method is equivalent to the return value of View#fitSystemWindows(android.graphics.Rect).
android.view.WindowInsets.isRound,Returns true if the associated window has a round shape. A round window's left top right and bottom edges reach all the way to the associated edges of the window but the corners may not be visible. Views responding to round insets should take care to not lay out critical elements within the corners where they may not be accessible.
android.view.WindowInsets.isRound,Is round.
android.view.WindowInsets.isRound,Returns true if the associated window has a round shape.
android.view.WindowInsets.isRound,A round window's left top right and bottom edges reach all the way to the associated edges of the window but the corners may not be visible.
android.view.WindowInsets.isRound,Views responding to round insets should take care to not lay out critical elements within the corners where they may not be accessible.
android.view.WindowInsets.replaceSystemWindowInsets,This method was deprecated in API level 29. use Builder#Builder(WindowInsets) with Builder#setSystemWindowInsets(Insets) instead. Returns a copy of this WindowInsets with selected system window insets replaced with new values. Note: If the system window insets are already consumed this method will return them unchanged on Q and later. Prior to Q the new values were applied regardless of whether they were consumed and this method returns invalid non-zero consumed insets.
android.view.WindowInsets.replaceSystemWindowInsets,Replace system window insets.
android.view.WindowInsets.replaceSystemWindowInsets,This method was deprecated in API level 29.
android.view.WindowInsets.replaceSystemWindowInsets,use Builder#Builder(WindowInsets) with Builder#setSystemWindowInsets(Insets) instead.
android.view.WindowInsets.replaceSystemWindowInsets,Returns a copy of this WindowInsets with selected system window insets replaced with new values.
android.view.WindowInsets.replaceSystemWindowInsets,Note: If the system window insets are already consumed this method will return them unchanged on Q and later.
android.view.WindowInsets.replaceSystemWindowInsets,Prior to Q the new values were applied regardless of whether they were consumed and this method returns invalid non-zero consumed insets.
android.view.WindowInsets.replaceSystemWindowInsets,This method was deprecated in API level 29. use Builder#Builder(WindowInsets) with Builder#setSystemWindowInsets(Insets) instead. Returns a copy of this WindowInsets with selected system window insets replaced with new values. Note: If the system window insets are already consumed this method will return them unchanged on Q and later. Prior to Q the new values were applied regardless of whether they were consumed and this method returns invalid non-zero consumed insets.
android.view.WindowInsets.replaceSystemWindowInsets,Replace system window insets.
android.view.WindowInsets.replaceSystemWindowInsets,This method was deprecated in API level 29.
android.view.WindowInsets.replaceSystemWindowInsets,use Builder#Builder(WindowInsets) with Builder#setSystemWindowInsets(Insets) instead.
android.view.WindowInsets.replaceSystemWindowInsets,Returns a copy of this WindowInsets with selected system window insets replaced with new values.
android.view.WindowInsets.replaceSystemWindowInsets,Note: If the system window insets are already consumed this method will return them unchanged on Q and later.
android.view.WindowInsets.replaceSystemWindowInsets,Prior to Q the new values were applied regardless of whether they were consumed and this method returns invalid non-zero consumed insets.
android.webkit.CookieManager.getCookie,Gets the cookies for the given URL.
android.webkit.CookieManager.getCookie,Get cookie.
android.webkit.CookieManager.getInstance,Gets the singleton CookieManager instance.
android.webkit.CookieManager.getInstance,Get instance.
android.webkit.CookieManager.hasCookies,Gets whether there are stored cookies.
android.webkit.CookieManager.hasCookies,Has cookies.
android.webkit.CookieManager.removeAllCookie,This method was deprecated in API level 21. Use removeAllCookies(android.webkit.ValueCallback) instead. Removes all cookies.
android.webkit.CookieManager.removeAllCookie,Remove all cookie.
android.webkit.CookieManager.removeAllCookie,This method was deprecated in API level 21.
android.webkit.CookieManager.removeAllCookie,Use removeAllCookies(android.webkit.ValueCallback) instead.
android.webkit.CookieManager.removeAllCookie,Removes all cookies.
android.webkit.CookieManager.removeExpiredCookie,This method was deprecated in API level 21. The WebView handles removing expired cookies automatically. Removes all expired cookies.
android.webkit.CookieManager.removeExpiredCookie,Remove expired cookie.
android.webkit.CookieManager.removeExpiredCookie,This method was deprecated in API level 21.
android.webkit.CookieManager.removeExpiredCookie,The WebView handles removing expired cookies automatically.
android.webkit.CookieManager.removeExpiredCookie,Removes all expired cookies.
android.webkit.CookieManager.removeSessionCookie,This method was deprecated in API level 21. use removeSessionCookies(android.webkit.ValueCallback) instead. Removes all session cookies which are cookies without an expiration date.
android.webkit.CookieManager.removeSessionCookie,Remove session cookie.
android.webkit.CookieManager.removeSessionCookie,This method was deprecated in API level 21.
android.webkit.CookieManager.removeSessionCookie,use removeSessionCookies(android.webkit.ValueCallback) instead.
android.webkit.CookieManager.removeSessionCookie,Removes all session cookies which are cookies without an expiration date.
android.webkit.CookieManager.setAcceptCookie,Sets whether the application's WebView instances should send and accept cookies. By default this is set to true and the WebView accepts cookies. When this is true CookieManager#setAcceptThirdPartyCookies and CookieManager#setAcceptFileSchemeCookies can be used to control the policy for those specific types of cookie.
android.webkit.CookieManager.setAcceptCookie,Set accept cookie.
android.webkit.CookieManager.setAcceptCookie,Sets whether the application's WebView instances should send and accept cookies.
android.webkit.CookieManager.setAcceptCookie,By default this is set to true and the WebView accepts cookies.
android.webkit.CookieManager.setAcceptCookie,When this is true CookieManager#setAcceptThirdPartyCookies and CookieManager#setAcceptFileSchemeCookies can be used to control the policy for those specific types of cookie.
android.webkit.CookieManager.setCookie,Sets a cookie for the given URL. Any existing cookie with the same host path and name will be replaced with the new cookie. The cookie being set will be ignored if it is expired. This method is asynchronous. If a ValueCallback is provided ValueCallback#onReceiveValue(T) will be called on the current thread's Looper once the operation is complete. The value provided to the callback indicates whether the cookie was set successfully. You can pass null as the callback if you don't need to know when the operation completes or whether it succeeded and in this case it is safe to call the method from a thread without a Looper.
android.webkit.CookieManager.setCookie,Set cookie.
android.webkit.CookieManager.setCookie,Sets a cookie for the given URL.
android.webkit.CookieManager.setCookie,Any existing cookie with the same host path and name will be replaced with the new cookie.
android.webkit.CookieManager.setCookie,The cookie being set will be ignored if it is expired.
android.webkit.CookieManager.setCookie,This method is asynchronous.
android.webkit.CookieManager.setCookie,If a ValueCallback is provided ValueCallback#onReceiveValue(T) will be called on the current thread's Looper once the operation is complete.
android.webkit.CookieManager.setCookie,The value provided to the callback indicates whether the cookie was set successfully.
android.webkit.CookieManager.setCookie,You can pass null as the callback if you don't need to know when the operation completes or whether it succeeded and in this case it is safe to call the method from a thread without a Looper.
android.webkit.CookieManager.setCookie,Sets a cookie for the given URL. Any existing cookie with the same host path and name will be replaced with the new cookie. The cookie being set will be ignored if it is expired.
android.webkit.CookieManager.setCookie,Set cookie.
android.webkit.CookieManager.setCookie,Sets a cookie for the given URL.
android.webkit.CookieManager.setCookie,Any existing cookie with the same host path and name will be replaced with the new cookie.
android.webkit.CookieManager.setCookie,The cookie being set will be ignored if it is expired.
android.webkit.CookieSyncManager.createInstance,Create a singleton CookieSyncManager within a context.
android.webkit.CookieSyncManager.createInstance,Create instance.
android.webkit.CookieSyncManager.getInstance,Singleton access to a CookieSyncManager. An IllegalStateException will be thrown if CookieSyncManager#createInstance(Context) is not called before.
android.webkit.CookieSyncManager.getInstance,Get instance.
android.webkit.CookieSyncManager.getInstance,Singleton access to a CookieSyncManager.
android.webkit.CookieSyncManager.getInstance,An IllegalStateException will be thrown if CookieSyncManager#createInstance(Context) is not called before.
android.webkit.CookieSyncManager.startSync,This method was deprecated in API level 21. Calling startSync is no longer necessary as the WebView automatically syncs cookies. startSync() requests sync manager to start sync.
android.webkit.CookieSyncManager.startSync,Start sync.
android.webkit.CookieSyncManager.startSync,This method was deprecated in API level 21.
android.webkit.CookieSyncManager.startSync,Calling startSync is no longer necessary as the WebView automatically syncs cookies.
android.webkit.CookieSyncManager.startSync,startSync() requests sync manager to start sync.
android.webkit.CookieSyncManager.stopSync,This method was deprecated in API level 21. Calling stopSync is no longer useful as the WebView automatically syncs cookies. stopSync() requests sync manager to stop sync. remove any SYNC_MESSAGE in the queue to break the sync loop.
android.webkit.CookieSyncManager.stopSync,Stop sync.
android.webkit.CookieSyncManager.stopSync,This method was deprecated in API level 21.
android.webkit.CookieSyncManager.stopSync,Calling stopSync is no longer useful as the WebView automatically syncs cookies.
android.webkit.CookieSyncManager.stopSync,stopSync() requests sync manager to stop sync.
android.webkit.CookieSyncManager.stopSync,remove any SYNC_MESSAGE in the queue to break the sync loop.
android.webkit.CookieSyncManager.sync,This method was deprecated in API level 21. Use CookieManager#flush instead. sync() forces sync manager to sync now.
android.webkit.CookieSyncManager.sync,Sync.
android.webkit.CookieSyncManager.sync,This method was deprecated in API level 21.
android.webkit.CookieSyncManager.sync,Use CookieManager#flush instead.
android.webkit.CookieSyncManager.sync,sync() forces sync manager to sync now.
android.webkit.HttpAuthHandler.cancel,Instructs the WebView to cancel the authentication request.
android.webkit.HttpAuthHandler.cancel,Cancel.
android.webkit.HttpAuthHandler.proceed,Instructs the WebView to proceed with the authentication with the given credentials. Credentials for use with this method can be retrieved from the WebView's store using WebView#getHttpAuthUsernamePassword.
android.webkit.HttpAuthHandler.proceed,Proceed.
android.webkit.HttpAuthHandler.proceed,Instructs the WebView to proceed with the authentication with the given credentials.
android.webkit.HttpAuthHandler.proceed,Credentials for use with this method can be retrieved from the WebView's store using WebView#getHttpAuthUsernamePassword.
android.webkit.JsPromptResult.confirm,Handle a confirmation response from the user.
android.webkit.JsPromptResult.confirm,Confirm.
android.webkit.JsResult.cancel,Handle the result if the user cancelled the dialog.
android.webkit.JsResult.cancel,Cancel.
android.webkit.MimeTypeMap.getExtensionFromMimeType,Return the registered extension for the given MIME type. Note that some MIME types map to multiple extensions. This call will return the most common extension for the given MIME type.
android.webkit.MimeTypeMap.getExtensionFromMimeType,Get extension from mime type.
android.webkit.MimeTypeMap.getExtensionFromMimeType,Return the registered extension for the given MIME type.
android.webkit.MimeTypeMap.getExtensionFromMimeType,Note that some MIME types map to multiple extensions.
android.webkit.MimeTypeMap.getExtensionFromMimeType,This call will return the most common extension for the given MIME type.
android.webkit.MimeTypeMap.getFileExtensionFromUrl,Returns the file extension or an empty string if there is no extension. This method is a convenience method for obtaining the extension of a url and has undefined results for other Strings.
android.webkit.MimeTypeMap.getFileExtensionFromUrl,Get file extension from url.
android.webkit.MimeTypeMap.getFileExtensionFromUrl,Returns the file extension or an empty string if there is no extension.
android.webkit.MimeTypeMap.getFileExtensionFromUrl,This method is a convenience method for obtaining the extension of a url and has undefined results for other Strings.
android.webkit.MimeTypeMap.getMimeTypeFromExtension,Return the MIME type for the given extension.
android.webkit.MimeTypeMap.getMimeTypeFromExtension,Get mime type from extension.
android.webkit.MimeTypeMap.getSingleton,Get the singleton instance of MimeTypeMap.
android.webkit.MimeTypeMap.getSingleton,Get singleton.
android.webkit.SslErrorHandler.cancel,Cancel this request and all pending requests for the WebView that had the error.
android.webkit.SslErrorHandler.cancel,Cancel.
android.webkit.SslErrorHandler.proceed,Proceed with the SSL certificate. It is not recommended to proceed past SSL errors and this method should generally not be used; see WebViewClient#onReceivedSslError for more information.
android.webkit.SslErrorHandler.proceed,Proceed.
android.webkit.SslErrorHandler.proceed,Proceed with the SSL certificate.
android.webkit.SslErrorHandler.proceed,It is not recommended to proceed past SSL errors and this method should generally not be used; see WebViewClient#onReceivedSslError for more information.
android.webkit.URLUtil.guessUrl,Cleans up (if possible) user-entered web addresses.
android.webkit.URLUtil.guessUrl,Guess url.
android.webkit.WebBackForwardList.getCurrentIndex,Get the index of the current history item. This index can be used to directly index into the array list.
android.webkit.WebBackForwardList.getCurrentIndex,Get current index.
android.webkit.WebBackForwardList.getCurrentIndex,Get the index of the current history item.
android.webkit.WebBackForwardList.getCurrentIndex,This index can be used to directly index into the array list.
android.webkit.WebBackForwardList.getCurrentItem,Return the current history item. This method returns null if the list is empty.
android.webkit.WebBackForwardList.getCurrentItem,Get current item.
android.webkit.WebBackForwardList.getCurrentItem,Return the current history item.
android.webkit.WebBackForwardList.getCurrentItem,This method returns null if the list is empty.
android.webkit.WebBackForwardList.getItemAtIndex,Get the history item at the given index. The index range is from 0...n where 0 is the first item and n is the last item.
android.webkit.WebBackForwardList.getItemAtIndex,Get item at index.
android.webkit.WebBackForwardList.getItemAtIndex,Get the history item at the given index.
android.webkit.WebBackForwardList.getItemAtIndex,The index range is from 0...n where 0 is the first item and n is the last item.
android.webkit.WebBackForwardList.getSize,Get the total size of the back/forward list.
android.webkit.WebBackForwardList.getSize,Get size.
android.webkit.WebChromeClient.getVideoLoadingProgressView,Obtains a View to be displayed while buffering of full screen video is taking place. The host application can override this method to provide a View containing a spinner or similar.
android.webkit.WebChromeClient.getVideoLoadingProgressView,Get video loading progress view.
android.webkit.WebChromeClient.getVideoLoadingProgressView,Obtains a View to be displayed while buffering of full screen video is taking place.
android.webkit.WebChromeClient.getVideoLoadingProgressView,The host application can override this method to provide a View containing a spinner or similar.
android.webkit.WebChromeClient.onCloseWindow,Notify the host application to close the given WebView and remove it from the view system if necessary. At this point WebCore has stopped any loading in this window and has removed any cross-scripting ability in javascript. As with onCreateWindow(WebView boolean boolean Message) the application should ensure that any URL or security indicator displayed is updated so that the user can tell that the page they were interacting with has been closed.
android.webkit.WebChromeClient.onCloseWindow,On close window.
android.webkit.WebChromeClient.onCloseWindow,Notify the host application to close the given WebView and remove it from the view system if necessary.
android.webkit.WebChromeClient.onCloseWindow,At this point WebCore has stopped any loading in this window and has removed any cross-scripting ability in javascript.
android.webkit.WebChromeClient.onCloseWindow,As with onCreateWindow(WebView boolean boolean Message) the application should ensure that any URL or security indicator displayed is updated so that the user can tell that the page they were interacting with has been closed.
android.webkit.WebChromeClient.onConsoleMessage,Report a JavaScript console message to the host application. The ChromeClient should override this to process the log message as they see fit.
android.webkit.WebChromeClient.onConsoleMessage,On console message.
android.webkit.WebChromeClient.onConsoleMessage,Report a JavaScript console message to the host application.
android.webkit.WebChromeClient.onConsoleMessage,The ChromeClient should override this to process the log message as they see fit.
android.webkit.WebChromeClient.onConsoleMessage,This method was deprecated in API level 15. Use onConsoleMessage(ConsoleMessage) instead. Report a JavaScript error message to the host application. The ChromeClient should override this to process the log message as they see fit.
android.webkit.WebChromeClient.onConsoleMessage,On console message.
android.webkit.WebChromeClient.onConsoleMessage,This method was deprecated in API level 15.
android.webkit.WebChromeClient.onConsoleMessage,Use onConsoleMessage(ConsoleMessage) instead.
android.webkit.WebChromeClient.onConsoleMessage,Report a JavaScript error message to the host application.
android.webkit.WebChromeClient.onConsoleMessage,The ChromeClient should override this to process the log message as they see fit.
android.webkit.WebChromeClient.onCreateWindow,Request the host application to create a new window. If the host application chooses to honor this request it should return true from this method create a new WebView to host the window insert it into the View system and send the supplied resultMsg message to its target with the new WebView as an argument. If the host application chooses not to honor the request it should return false from this method. The default implementation of this method does nothing and hence returns false. Applications should typically not allow windows to be created when the isUserGesture flag is false as this may be an unwanted popup. Applications should be careful how they display the new window: don't simply overlay it over the existing WebView as this may mislead the user about which site they are viewing. If your application displays the URL of the main page make sure to also display the URL of the new window in a similar fashion. If your application does not display URLs consider disallowing the creation of new windows entirely. Note: There is no trustworthy way to tell which page requested the new window: the request might originate from a third-party iframe inside the WebView.
android.webkit.WebChromeClient.onCreateWindow,On create window.
android.webkit.WebChromeClient.onCreateWindow,Request the host application to create a new window.
android.webkit.WebChromeClient.onCreateWindow,If the host application chooses to honor this request it should return true from this method create a new WebView to host the window insert it into the View system and send the supplied resultMsg message to its target with the new WebView as an argument.
android.webkit.WebChromeClient.onCreateWindow,If the host application chooses not to honor the request it should return false from this method.
android.webkit.WebChromeClient.onCreateWindow,The default implementation of this method does nothing and hence returns false.
android.webkit.WebChromeClient.onCreateWindow,Applications should typically not allow windows to be created when the isUserGesture flag is false as this may be an unwanted popup.
android.webkit.WebChromeClient.onCreateWindow,Applications should be careful how they display the new window: don't simply overlay it over the existing WebView as this may mislead the user about which site they are viewing.
android.webkit.WebChromeClient.onCreateWindow,If your application displays the URL of the main page make sure to also display the URL of the new window in a similar fashion.
android.webkit.WebChromeClient.onCreateWindow,If your application does not display URLs consider disallowing the creation of new windows entirely.
android.webkit.WebChromeClient.onCreateWindow,Note: There is no trustworthy way to tell which page requested the new window: the request might originate from a third-party iframe inside the WebView.
android.webkit.WebChromeClient.onHideCustomView,"Notify the host application that the current page has exited full screen mode. The host application must hide the custom View ie. the View passed to onShowCustomView(View WebChromeClient.CustomViewCallback) when the content entered fullscreen. Also see ""Full screen support"" documentation on WebView."
android.webkit.WebChromeClient.onHideCustomView,On hide custom view.
android.webkit.WebChromeClient.onHideCustomView,Notify the host application that the current page has exited full screen mode.
android.webkit.WebChromeClient.onHideCustomView,The host application must hide the custom View ie.
android.webkit.WebChromeClient.onHideCustomView,the View passed to onShowCustomView(View WebChromeClient.CustomViewCallback) when the content entered fullscreen.
android.webkit.WebChromeClient.onHideCustomView,"Also see ""Full screen support"" documentation on WebView."
android.webkit.WebChromeClient.onJsAlert,Tell the client to display a javascript alert dialog. If the client returns true WebView will assume that the client will handle the dialog. If the client returns false it will continue execution.
android.webkit.WebChromeClient.onJsAlert,On js alert.
android.webkit.WebChromeClient.onJsAlert,Tell the client to display a javascript alert dialog.
android.webkit.WebChromeClient.onJsAlert,If the client returns true WebView will assume that the client will handle the dialog.
android.webkit.WebChromeClient.onJsAlert,If the client returns false it will continue execution.
android.webkit.WebChromeClient.onJsBeforeUnload,Tell the client to display a dialog to confirm navigation away from the current page. This is the result of the onbeforeunload javascript event. If the client returns true WebView will assume that the client will handle the confirm dialog and call the appropriate JsResult method. If the client returns false a default value of true will be returned to javascript to accept navigation away from the current page. The default behavior is to return false. Setting the JsResult to true will navigate away from the current page false will cancel the navigation.
android.webkit.WebChromeClient.onJsBeforeUnload,On js before unload.
android.webkit.WebChromeClient.onJsBeforeUnload,Tell the client to display a dialog to confirm navigation away from the current page.
android.webkit.WebChromeClient.onJsBeforeUnload,This is the result of the onbeforeunload javascript event.
android.webkit.WebChromeClient.onJsBeforeUnload,If the client returns true WebView will assume that the client will handle the confirm dialog and call the appropriate JsResult method.
android.webkit.WebChromeClient.onJsBeforeUnload,If the client returns false a default value of true will be returned to javascript to accept navigation away from the current page.
android.webkit.WebChromeClient.onJsBeforeUnload,The default behavior is to return false.
android.webkit.WebChromeClient.onJsBeforeUnload,Setting the JsResult to true will navigate away from the current page false will cancel the navigation.
android.webkit.WebChromeClient.onJsConfirm,Tell the client to display a confirm dialog to the user. If the client returns true WebView will assume that the client will handle the confirm dialog and call the appropriate JsResult method. If the client returns false a default value of false will be returned to javascript. The default behavior is to return false.
android.webkit.WebChromeClient.onJsConfirm,On js confirm.
android.webkit.WebChromeClient.onJsConfirm,Tell the client to display a confirm dialog to the user.
android.webkit.WebChromeClient.onJsConfirm,If the client returns true WebView will assume that the client will handle the confirm dialog and call the appropriate JsResult method.
android.webkit.WebChromeClient.onJsConfirm,If the client returns false a default value of false will be returned to javascript.
android.webkit.WebChromeClient.onJsConfirm,The default behavior is to return false.
android.webkit.WebChromeClient.onJsPrompt,Tell the client to display a prompt dialog to the user. If the client returns true WebView will assume that the client will handle the prompt dialog and call the appropriate JsPromptResult method. If the client returns false a default value of false will be returned to to javascript. The default behavior is to return false.
android.webkit.WebChromeClient.onJsPrompt,On js prompt.
android.webkit.WebChromeClient.onJsPrompt,Tell the client to display a prompt dialog to the user.
android.webkit.WebChromeClient.onJsPrompt,If the client returns true WebView will assume that the client will handle the prompt dialog and call the appropriate JsPromptResult method.
android.webkit.WebChromeClient.onJsPrompt,If the client returns false a default value of false will be returned to to javascript.
android.webkit.WebChromeClient.onJsPrompt,The default behavior is to return false.
android.webkit.WebChromeClient.onProgressChanged,Tell the host application the current progress of loading a page.
android.webkit.WebChromeClient.onProgressChanged,On progress changed.
android.webkit.WebChromeClient.onReceivedIcon,Notify the host application of a new favicon for the current page.
android.webkit.WebChromeClient.onReceivedIcon,On received icon.
android.webkit.WebChromeClient.onReceivedTitle,Notify the host application of a change in the document title.
android.webkit.WebChromeClient.onReceivedTitle,On received title.
android.webkit.WebChromeClient.onRequestFocus,Request display and focus for this WebView. This may happen due to another WebView opening a link in this WebView and requesting that this WebView be displayed.
android.webkit.WebChromeClient.onRequestFocus,On request focus.
android.webkit.WebChromeClient.onRequestFocus,Request display and focus for this WebView.
android.webkit.WebChromeClient.onRequestFocus,This may happen due to another WebView opening a link in this WebView and requesting that this WebView be displayed.
android.webkit.WebHistoryItem.getFavicon,Return the favicon of this history item or null if no favicon was found.
android.webkit.WebHistoryItem.getFavicon,Get favicon.
android.webkit.WebHistoryItem.getOriginalUrl,Return the original url of this history item. This was the requested url the final url may be different as there might have been redirects while loading the site.
android.webkit.WebHistoryItem.getOriginalUrl,Get original url.
android.webkit.WebHistoryItem.getOriginalUrl,Return the original url of this history item.
android.webkit.WebHistoryItem.getOriginalUrl,This was the requested url the final url may be different as there might have been redirects while loading the site.
android.webkit.WebHistoryItem.getTitle,Return the document title of this history item.
android.webkit.WebHistoryItem.getTitle,Get title.
android.webkit.WebHistoryItem.getUrl,Return the url of this history item. The url is the base url of this history item. See getTargetUrl() for the url that is the actual target of this history item.
android.webkit.WebHistoryItem.getUrl,Get url.
android.webkit.WebHistoryItem.getUrl,Return the url of this history item.
android.webkit.WebHistoryItem.getUrl,The url is the base url of this history item.
android.webkit.WebHistoryItem.getUrl,See getTargetUrl() for the url that is the actual target of this history item.
android.webkit.WebIconDatabase.close,Close the shared instance of the icon database.
android.webkit.WebIconDatabase.close,Close.
android.webkit.WebIconDatabase.getInstance,Get the global instance of WebIconDatabase.
android.webkit.WebIconDatabase.getInstance,Get instance.
android.webkit.WebIconDatabase.open,Open a the icon database and store the icons in the given path.
android.webkit.WebIconDatabase.open,Open.
android.webkit.WebIconDatabase.releaseIconForPageUrl,Release the icon for the given page url.
android.webkit.WebIconDatabase.releaseIconForPageUrl,Release icon for page url.
android.webkit.WebIconDatabase.removeAllIcons,Removes all the icons in the database.
android.webkit.WebIconDatabase.removeAllIcons,Remove all icons.
android.webkit.WebIconDatabase.retainIconForPageUrl,Retain the icon for the given page url.
android.webkit.WebIconDatabase.retainIconForPageUrl,Retain icon for page url.
android.webkit.WebResourceResponse.setResponseHeaders,Sets the headers for the resource response.
android.webkit.WebResourceResponse.setResponseHeaders,Set response headers.
android.webkit.WebResourceResponse.setStatusCodeAndReasonPhrase,Sets the resource response's status code and reason phrase.
android.webkit.WebResourceResponse.setStatusCodeAndReasonPhrase,Set status code and reason phrase.
android.webkit.WebSettings.getBlockNetworkImage,Gets whether the WebView does not load image resources from the network.
android.webkit.WebSettings.getBlockNetworkImage,Get block network image.
android.webkit.WebSettings.getCacheMode,Gets the current setting for overriding the cache mode.
android.webkit.WebSettings.getCacheMode,Get cache mode.
android.webkit.WebSettings.getDefaultUserAgent,Returns the default User-Agent used by a WebView. An instance of WebView could use a different User-Agent if a call is made to WebSettings#setUserAgentString(String).
android.webkit.WebSettings.getDefaultUserAgent,Get default user agent.
android.webkit.WebSettings.getDefaultUserAgent,Returns the default User-Agent used by a WebView.
android.webkit.WebSettings.getDefaultUserAgent,An instance of WebView could use a different User-Agent if a call is made to WebSettings#setUserAgentString(String).
android.webkit.WebSettings.getJavaScriptEnabled,Gets whether JavaScript is enabled.
android.webkit.WebSettings.getJavaScriptEnabled,Get java script enabled.
android.webkit.WebSettings.getLoadsImagesAutomatically,Gets whether the WebView loads image resources. This includes images embedded using the data URI scheme.
android.webkit.WebSettings.getLoadsImagesAutomatically,Get loads images automatically.
android.webkit.WebSettings.getLoadsImagesAutomatically,Gets whether the WebView loads image resources.
android.webkit.WebSettings.getLoadsImagesAutomatically,This includes images embedded using the data URI scheme.
android.webkit.WebSettings.getUserAgentString,Gets the WebView's user-agent string.
android.webkit.WebSettings.getUserAgentString,Get user agent string.
android.webkit.WebSettings.setAllowContentAccess,Enables or disables content URL access within WebView. Content URL access allows WebView to load content from a content provider installed in the system. The default is enabled.
android.webkit.WebSettings.setAllowContentAccess,Set allow content access.
android.webkit.WebSettings.setAllowContentAccess,Enables or disables content URL access within WebView.
android.webkit.WebSettings.setAllowContentAccess,Content URL access allows WebView to load content from a content provider installed in the system.
android.webkit.WebSettings.setAllowContentAccess,The default is enabled.
android.webkit.WebSettings.setAllowFileAccess,Enables or disables file access within WebView. File access is enabled by default. Note that this enables or disables file system access only. Assets and resources are still accessible using file:///android_asset and file:///android_res.
android.webkit.WebSettings.setAllowFileAccess,Set allow file access.
android.webkit.WebSettings.setAllowFileAccess,Enables or disables file access within WebView.
android.webkit.WebSettings.setAllowFileAccess,File access is enabled by default.
android.webkit.WebSettings.setAllowFileAccess,Note that this enables or disables file system access only.
android.webkit.WebSettings.setAllowFileAccess,Assets and resources are still accessible using file:///android_asset and file:///android_res.
android.webkit.WebSettings.setAllowFileAccessFromFileURLs,Sets whether JavaScript running in the context of a file scheme URL should be allowed to access content from other file scheme URLs. To enable the most restrictive and therefore secure policy this setting should be disabled. Note that the value of this setting is ignored if the value of getAllowUniversalAccessFromFileURLs() is true. Note too that this setting affects only JavaScript access to file scheme resources. Other access to such resources for example from image HTML elements is unaffected. To prevent possible violation of same domain policy when targeting Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1 and earlier you should explicitly set this value to false. The default value is true for apps targeting Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1 and below and false when targeting Build.VERSION_CODES.JELLY_BEAN and above.
android.webkit.WebSettings.setAllowFileAccessFromFileURLs,Set allow file access from file u r ls.
android.webkit.WebSettings.setAllowFileAccessFromFileURLs,Sets whether JavaScript running in the context of a file scheme URL should be allowed to access content from other file scheme URLs.
android.webkit.WebSettings.setAllowFileAccessFromFileURLs,To enable the most restrictive and therefore secure policy this setting should be disabled.
android.webkit.WebSettings.setAllowFileAccessFromFileURLs,Note that the value of this setting is ignored if the value of getAllowUniversalAccessFromFileURLs() is true.
android.webkit.WebSettings.setAllowFileAccessFromFileURLs,Note too that this setting affects only JavaScript access to file scheme resources.
android.webkit.WebSettings.setAllowFileAccessFromFileURLs,Other access to such resources for example from image HTML elements is unaffected.
android.webkit.WebSettings.setAllowFileAccessFromFileURLs,To prevent possible violation of same domain policy when targeting Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1 and earlier you should explicitly set this value to false.
android.webkit.WebSettings.setAllowFileAccessFromFileURLs,The default value is true for apps targeting Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1 and below and false when targeting Build.VERSION_CODES.JELLY_BEAN and above.
android.webkit.WebSettings.setAllowUniversalAccessFromFileURLs,Sets whether JavaScript running in the context of a file scheme URL should be allowed to access content from any origin. This includes access to content from other file scheme URLs. See setAllowFileAccessFromFileURLs(boolean). To enable the most restrictive and therefore secure policy this setting should be disabled. Note that this setting affects only JavaScript access to file scheme resources. Other access to such resources for example from image HTML elements is unaffected. To prevent possible violation of same domain policy when targeting Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1 and earlier you should explicitly set this value to false. The default value is true for apps targeting Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1 and below and false when targeting Build.VERSION_CODES.JELLY_BEAN and above.
android.webkit.WebSettings.setAllowUniversalAccessFromFileURLs,Set allow universal access from file u r ls.
android.webkit.WebSettings.setAllowUniversalAccessFromFileURLs,Sets whether JavaScript running in the context of a file scheme URL should be allowed to access content from any origin.
android.webkit.WebSettings.setAllowUniversalAccessFromFileURLs,This includes access to content from other file scheme URLs.
android.webkit.WebSettings.setAllowUniversalAccessFromFileURLs,See setAllowFileAccessFromFileURLs(boolean).
android.webkit.WebSettings.setAllowUniversalAccessFromFileURLs,To enable the most restrictive and therefore secure policy this setting should be disabled.
android.webkit.WebSettings.setAllowUniversalAccessFromFileURLs,Note that this setting affects only JavaScript access to file scheme resources.
android.webkit.WebSettings.setAllowUniversalAccessFromFileURLs,Other access to such resources for example from image HTML elements is unaffected.
android.webkit.WebSettings.setAllowUniversalAccessFromFileURLs,To prevent possible violation of same domain policy when targeting Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1 and earlier you should explicitly set this value to false.
android.webkit.WebSettings.setAllowUniversalAccessFromFileURLs,The default value is true for apps targeting Build.VERSION_CODES.ICE_CREAM_SANDWICH_MR1 and below and false when targeting Build.VERSION_CODES.JELLY_BEAN and above.
android.webkit.WebSettings.setAppCacheEnabled,Sets whether the Application Caches API should be enabled. The default is false. Note that in order for the Application Caches API to be enabled a valid database path must also be supplied to setAppCachePath(String).
android.webkit.WebSettings.setAppCacheEnabled,Set app cache enabled.
android.webkit.WebSettings.setAppCacheEnabled,Sets whether the Application Caches API should be enabled.
android.webkit.WebSettings.setAppCacheEnabled,The default is false.
android.webkit.WebSettings.setAppCacheEnabled,Note that in order for the Application Caches API to be enabled a valid database path must also be supplied to setAppCachePath(String).
android.webkit.WebSettings.setAppCacheMaxSize,This method was deprecated in API level 18. In future quota will be managed automatically. Sets the maximum size for the Application Cache content. The passed size will be rounded to the nearest value that the database can support so this should be viewed as a guide not a hard limit. Setting the size to a value less than current database size does not cause the database to be trimmed. The default size is Long#MAX_VALUE. It is recommended to leave the maximum size set to the default value.
android.webkit.WebSettings.setAppCacheMaxSize,Set app cache max size.
android.webkit.WebSettings.setAppCacheMaxSize,This method was deprecated in API level 18.
android.webkit.WebSettings.setAppCacheMaxSize,In future quota will be managed automatically.
android.webkit.WebSettings.setAppCacheMaxSize,Sets the maximum size for the Application Cache content.
android.webkit.WebSettings.setAppCacheMaxSize,The passed size will be rounded to the nearest value that the database can support so this should be viewed as a guide not a hard limit.
android.webkit.WebSettings.setAppCacheMaxSize,Setting the size to a value less than current database size does not cause the database to be trimmed.
android.webkit.WebSettings.setAppCacheMaxSize,The default size is Long#MAX_VALUE.
android.webkit.WebSettings.setAppCacheMaxSize,It is recommended to leave the maximum size set to the default value.
android.webkit.WebSettings.setAppCachePath,Sets the path to the Application Caches files. In order for the Application Caches API to be enabled this method must be called with a path to which the application can write. This method should only be called once: repeated calls are ignored.
android.webkit.WebSettings.setAppCachePath,Set app cache path.
android.webkit.WebSettings.setAppCachePath,Sets the path to the Application Caches files.
android.webkit.WebSettings.setAppCachePath,In order for the Application Caches API to be enabled this method must be called with a path to which the application can write.
android.webkit.WebSettings.setAppCachePath,This method should only be called once: repeated calls are ignored.
android.webkit.WebSettings.setBlockNetworkImage,Sets whether the WebView should not load image resources from the network (resources accessed via http and https URI schemes). Note that this method has no effect unless getLoadsImagesAutomatically() returns true. Also note that disabling all network loads using setBlockNetworkLoads(boolean) will also prevent network images from loading even if this flag is set to false. When the value of this setting is changed from true to false network images resources referenced by content currently displayed by the WebView are fetched automatically. The default is false.
android.webkit.WebSettings.setBlockNetworkImage,Set block network image.
android.webkit.WebSettings.setBlockNetworkImage,Sets whether the WebView should not load image resources from the network (resources accessed via http and https URI schemes).
android.webkit.WebSettings.setBlockNetworkImage,Note that this method has no effect unless getLoadsImagesAutomatically() returns true.
android.webkit.WebSettings.setBlockNetworkImage,Also note that disabling all network loads using setBlockNetworkLoads(boolean) will also prevent network images from loading even if this flag is set to false.
android.webkit.WebSettings.setBlockNetworkImage,When the value of this setting is changed from true to false network images resources referenced by content currently displayed by the WebView are fetched automatically.
android.webkit.WebSettings.setBlockNetworkImage,The default is false.
android.webkit.WebSettings.setBlockNetworkLoads,Sets whether the WebView should not load resources from the network. Use setBlockNetworkImage(boolean) to only avoid loading image resources. Note that if the value of this setting is changed from true to false network resources referenced by content currently displayed by the WebView are not fetched until WebView.reload() is called. If the application does not have the Manifest.permission.INTERNET permission attempts to set a value of false will cause a SecurityException to be thrown. The default value is false if the application has the Manifest.permission.INTERNET permission otherwise it is true.
android.webkit.WebSettings.setBlockNetworkLoads,Set block network loads.
android.webkit.WebSettings.setBlockNetworkLoads,Sets whether the WebView should not load resources from the network.
android.webkit.WebSettings.setBlockNetworkLoads,Use setBlockNetworkImage(boolean) to only avoid loading image resources.
android.webkit.WebSettings.setBlockNetworkLoads,Note that if the value of this setting is changed from true to false network resources referenced by content currently displayed by the WebView are not fetched until WebView.reload() is called.
android.webkit.WebSettings.setBlockNetworkLoads,If the application does not have the Manifest.permission.INTERNET permission attempts to set a value of false will cause a SecurityException to be thrown.
android.webkit.WebSettings.setBlockNetworkLoads,The default value is false if the application has the Manifest.permission.INTERNET permission otherwise it is true.
android.webkit.WebSettings.setBuiltInZoomControls,Sets whether the WebView should use its built-in zoom mechanisms. The built-in zoom mechanisms comprise on-screen zoom controls which are displayed over the WebView's content and the use of a pinch gesture to control zooming. Whether or not these on-screen controls are displayed can be set with setDisplayZoomControls(boolean). The default is false. The built-in mechanisms are the only currently supported zoom mechanisms so it is recommended that this setting is always enabled.
android.webkit.WebSettings.setBuiltInZoomControls,Set built in zoom controls.
android.webkit.WebSettings.setBuiltInZoomControls,Sets whether the WebView should use its built-in zoom mechanisms.
android.webkit.WebSettings.setBuiltInZoomControls,The built-in zoom mechanisms comprise on-screen zoom controls which are displayed over the WebView's content and the use of a pinch gesture to control zooming.
android.webkit.WebSettings.setBuiltInZoomControls,Whether or not these on-screen controls are displayed can be set with setDisplayZoomControls(boolean).
android.webkit.WebSettings.setBuiltInZoomControls,The default is false.
android.webkit.WebSettings.setBuiltInZoomControls,The built-in mechanisms are the only currently supported zoom mechanisms so it is recommended that this setting is always enabled.
android.webkit.WebSettings.setCacheMode,Overrides the way the cache is used. The way the cache is used is based on the navigation type. For a normal page load the cache is checked and content is re-validated as needed. When navigating back content is not revalidated instead the content is just retrieved from the cache. This method allows the client to override this behavior by specifying one of LOAD_DEFAULT LOAD_CACHE_ELSE_NETWORK LOAD_NO_CACHE or LOAD_CACHE_ONLY. The default value is LOAD_DEFAULT.
android.webkit.WebSettings.setCacheMode,Set cache mode.
android.webkit.WebSettings.setCacheMode,Overrides the way the cache is used.
android.webkit.WebSettings.setCacheMode,The way the cache is used is based on the navigation type.
android.webkit.WebSettings.setCacheMode,For a normal page load the cache is checked and content is re-validated as needed.
android.webkit.WebSettings.setCacheMode,When navigating back content is not revalidated instead the content is just retrieved from the cache.
android.webkit.WebSettings.setCacheMode,This method allows the client to override this behavior by specifying one of LOAD_DEFAULT LOAD_CACHE_ELSE_NETWORK LOAD_NO_CACHE or LOAD_CACHE_ONLY.
android.webkit.WebSettings.setCacheMode,The default value is LOAD_DEFAULT.
android.webkit.WebSettings.setDatabaseEnabled,Sets whether the database storage API is enabled. The default value is false. See also setDatabasePath(String) for how to correctly set up the database storage API. This setting is global in effect across all WebView instances in a process. Note you should only modify this setting prior to making any WebView page load within a given process as the WebView implementation may ignore changes to this setting after that point.
android.webkit.WebSettings.setDatabaseEnabled,Set database enabled.
android.webkit.WebSettings.setDatabaseEnabled,Sets whether the database storage API is enabled.
android.webkit.WebSettings.setDatabaseEnabled,The default value is false.
android.webkit.WebSettings.setDatabaseEnabled,See also setDatabasePath(String) for how to correctly set up the database storage API.
android.webkit.WebSettings.setDatabaseEnabled,This setting is global in effect across all WebView instances in a process.
android.webkit.WebSettings.setDatabaseEnabled,Note you should only modify this setting prior to making any WebView page load within a given process as the WebView implementation may ignore changes to this setting after that point.
android.webkit.WebSettings.setDatabasePath,This method was deprecated in API level 19. Database paths are managed by the implementation and calling this method will have no effect. Sets the path to where database storage API databases should be saved. In order for the database storage API to function correctly this method must be called with a path to which the application can write. This method should only be called once: repeated calls are ignored.
android.webkit.WebSettings.setDatabasePath,Set database path.
android.webkit.WebSettings.setDatabasePath,This method was deprecated in API level 19.
android.webkit.WebSettings.setDatabasePath,Database paths are managed by the implementation and calling this method will have no effect.
android.webkit.WebSettings.setDatabasePath,Sets the path to where database storage API databases should be saved.
android.webkit.WebSettings.setDatabasePath,In order for the database storage API to function correctly this method must be called with a path to which the application can write.
android.webkit.WebSettings.setDatabasePath,This method should only be called once: repeated calls are ignored.
android.webkit.WebSettings.setDefaultFixedFontSize,Sets the default fixed font size. The default is 16.
android.webkit.WebSettings.setDefaultFixedFontSize,Set default fixed font size.
android.webkit.WebSettings.setDefaultFixedFontSize,Sets the default fixed font size.
android.webkit.WebSettings.setDefaultFixedFontSize,The default is 16.
android.webkit.WebSettings.setDefaultFontSize,Sets the default font size. The default is 16.
android.webkit.WebSettings.setDefaultFontSize,Set default font size.
android.webkit.WebSettings.setDefaultFontSize,Sets the default font size.
android.webkit.WebSettings.setDefaultFontSize,The default is 16.
android.webkit.WebSettings.setDefaultTextEncodingName,"Sets the default text encoding name to use when decoding html pages. The default is ""UTF-8""."
android.webkit.WebSettings.setDefaultTextEncodingName,Set default text encoding name.
android.webkit.WebSettings.setDefaultTextEncodingName,Sets the default text encoding name to use when decoding html pages.
android.webkit.WebSettings.setDefaultTextEncodingName,"The default is ""UTF-8""."
android.webkit.WebSettings.setDisplayZoomControls,Sets whether the WebView should display on-screen zoom controls when using the built-in zoom mechanisms. See setBuiltInZoomControls(boolean). The default is true.
android.webkit.WebSettings.setDisplayZoomControls,Set display zoom controls.
android.webkit.WebSettings.setDisplayZoomControls,Sets whether the WebView should display on-screen zoom controls when using the built-in zoom mechanisms.
android.webkit.WebSettings.setDisplayZoomControls,See setBuiltInZoomControls(boolean).
android.webkit.WebSettings.setDisplayZoomControls,The default is true.
android.webkit.WebSettings.setDomStorageEnabled,Sets whether the DOM storage API is enabled. The default value is false.
android.webkit.WebSettings.setDomStorageEnabled,Set dom storage enabled.
android.webkit.WebSettings.setDomStorageEnabled,Sets whether the DOM storage API is enabled.
android.webkit.WebSettings.setDomStorageEnabled,The default value is false.
android.webkit.WebSettings.setEnableSmoothTransition,This method was deprecated in API level 17. This method is now obsolete and will become a no-op in future. Sets whether the WebView will enable smooth transition while panning or zooming or while the window hosting the WebView does not have focus. If it is true WebView will choose a solution to maximize the performance. e.g. the WebView's content may not be updated during the transition. If it is false WebView will keep its fidelity. The default value is false.
android.webkit.WebSettings.setEnableSmoothTransition,Set enable smooth transition.
android.webkit.WebSettings.setEnableSmoothTransition,This method was deprecated in API level 17.
android.webkit.WebSettings.setEnableSmoothTransition,This method is now obsolete and will become a no-op in future.
android.webkit.WebSettings.setEnableSmoothTransition,Sets whether the WebView will enable smooth transition while panning or zooming or while the window hosting the WebView does not have focus.
android.webkit.WebSettings.setEnableSmoothTransition,If it is true WebView will choose a solution to maximize the performance.
android.webkit.WebSettings.setEnableSmoothTransition,e.g.
android.webkit.WebSettings.setEnableSmoothTransition,the WebView's content may not be updated during the transition.
android.webkit.WebSettings.setEnableSmoothTransition,If it is false WebView will keep its fidelity.
android.webkit.WebSettings.setEnableSmoothTransition,The default value is false.
android.webkit.WebSettings.setGeolocationDatabasePath,This method was deprecated in API level 24. Geolocation database are managed by the implementation and calling this method will have no effect. Sets the path where the Geolocation databases should be saved. In order for Geolocation permissions and cached positions to be persisted this method must be called with a path to which the application can write.
android.webkit.WebSettings.setGeolocationDatabasePath,Set geolocation database path.
android.webkit.WebSettings.setGeolocationDatabasePath,This method was deprecated in API level 24.
android.webkit.WebSettings.setGeolocationDatabasePath,Geolocation database are managed by the implementation and calling this method will have no effect.
android.webkit.WebSettings.setGeolocationDatabasePath,Sets the path where the Geolocation databases should be saved.
android.webkit.WebSettings.setGeolocationDatabasePath,In order for Geolocation permissions and cached positions to be persisted this method must be called with a path to which the application can write.
android.webkit.WebSettings.setGeolocationEnabled,Sets whether Geolocation is enabled. The default is true. Please note that in order for the Geolocation API to be usable by a page in the WebView the following requirements must be met: an application must have permission to access the device location see Manifest.permission.ACCESS_COARSE_LOCATION Manifest.permission.ACCESS_FINE_LOCATION ; an application must provide an implementation of the WebChromeClient#onGeolocationPermissionsShowPrompt callback to receive notifications that a page is requesting access to location via the JavaScript Geolocation API.
android.webkit.WebSettings.setGeolocationEnabled,Set geolocation enabled.
android.webkit.WebSettings.setGeolocationEnabled,Sets whether Geolocation is enabled.
android.webkit.WebSettings.setGeolocationEnabled,The default is true.
android.webkit.WebSettings.setGeolocationEnabled,Please note that in order for the Geolocation API to be usable by a page in the WebView the following requirements must be met: an application must have permission to access the device location see Manifest.permission.ACCESS_COARSE_LOCATION Manifest.permission.ACCESS_FINE_LOCATION ; an application must provide an implementation of the WebChromeClient#onGeolocationPermissionsShowPrompt callback to receive notifications that a page is requesting access to location via the JavaScript Geolocation API.
android.webkit.WebSettings.setJavaScriptCanOpenWindowsAutomatically,Tells JavaScript to open windows automatically. This applies to the JavaScript function window.open(). The default is false.
android.webkit.WebSettings.setJavaScriptCanOpenWindowsAutomatically,Set java script can open windows automatically.
android.webkit.WebSettings.setJavaScriptCanOpenWindowsAutomatically,Tells JavaScript to open windows automatically.
android.webkit.WebSettings.setJavaScriptCanOpenWindowsAutomatically,This applies to the JavaScript function window.open().
android.webkit.WebSettings.setJavaScriptCanOpenWindowsAutomatically,The default is false.
android.webkit.WebSettings.setJavaScriptEnabled,Tells the WebView to enable JavaScript execution. The default is false.
android.webkit.WebSettings.setJavaScriptEnabled,Set java script enabled.
android.webkit.WebSettings.setJavaScriptEnabled,Tells the WebView to enable JavaScript execution.
android.webkit.WebSettings.setJavaScriptEnabled,The default is false.
android.webkit.WebSettings.setLightTouchEnabled,This method was deprecated in API level 18. From Build.VERSION_CODES.JELLY_BEAN this setting is obsolete and has no effect. Enables using light touches to make a selection and activate mouseovers.
android.webkit.WebSettings.setLightTouchEnabled,Set light touch enabled.
android.webkit.WebSettings.setLightTouchEnabled,This method was deprecated in API level 18.
android.webkit.WebSettings.setLightTouchEnabled,From Build.VERSION_CODES.JELLY_BEAN this setting is obsolete and has no effect.
android.webkit.WebSettings.setLightTouchEnabled,Enables using light touches to make a selection and activate mouseovers.
android.webkit.WebSettings.setLoadWithOverviewMode,Sets whether the WebView loads pages in overview mode that is zooms out the content to fit on screen by width. This setting is taken into account when the content width is greater than the width of the WebView control for example when getUseWideViewPort() is enabled. The default is false.
android.webkit.WebSettings.setLoadWithOverviewMode,Set load with overview mode.
android.webkit.WebSettings.setLoadWithOverviewMode,Sets whether the WebView loads pages in overview mode that is zooms out the content to fit on screen by width.
android.webkit.WebSettings.setLoadWithOverviewMode,This setting is taken into account when the content width is greater than the width of the WebView control for example when getUseWideViewPort() is enabled.
android.webkit.WebSettings.setLoadWithOverviewMode,The default is false.
android.webkit.WebSettings.setLoadsImagesAutomatically,Sets whether the WebView should load image resources. Note that this method controls loading of all images including those embedded using the data URI scheme. Use setBlockNetworkImage(boolean) to control loading only of images specified using network URI schemes. Note that if the value of this setting is changed from false to true all images resources referenced by content currently displayed by the WebView are loaded automatically. The default is true.
android.webkit.WebSettings.setLoadsImagesAutomatically,Set loads images automatically.
android.webkit.WebSettings.setLoadsImagesAutomatically,Sets whether the WebView should load image resources.
android.webkit.WebSettings.setLoadsImagesAutomatically,Note that this method controls loading of all images including those embedded using the data URI scheme.
android.webkit.WebSettings.setLoadsImagesAutomatically,Use setBlockNetworkImage(boolean) to control loading only of images specified using network URI schemes.
android.webkit.WebSettings.setLoadsImagesAutomatically,Note that if the value of this setting is changed from false to true all images resources referenced by content currently displayed by the WebView are loaded automatically.
android.webkit.WebSettings.setLoadsImagesAutomatically,The default is true.
android.webkit.WebSettings.setMediaPlaybackRequiresUserGesture,Sets whether the WebView requires a user gesture to play media. The default is true.
android.webkit.WebSettings.setMediaPlaybackRequiresUserGesture,Set media playback requires user gesture.
android.webkit.WebSettings.setMediaPlaybackRequiresUserGesture,Sets whether the WebView requires a user gesture to play media.
android.webkit.WebSettings.setMediaPlaybackRequiresUserGesture,The default is true.
android.webkit.WebSettings.setMinimumFontSize,Sets the minimum font size. The default is 8.
android.webkit.WebSettings.setMinimumFontSize,Set minimum font size.
android.webkit.WebSettings.setMinimumFontSize,Sets the minimum font size.
android.webkit.WebSettings.setMinimumFontSize,The default is 8.
android.webkit.WebSettings.setMinimumLogicalFontSize,Sets the minimum logical font size. The default is 8.
android.webkit.WebSettings.setMinimumLogicalFontSize,Set minimum logical font size.
android.webkit.WebSettings.setMinimumLogicalFontSize,Sets the minimum logical font size.
android.webkit.WebSettings.setMinimumLogicalFontSize,The default is 8.
android.webkit.WebSettings.setMixedContentMode,Configures the WebView's behavior when a secure origin attempts to load a resource from an insecure origin. By default apps that target Build.VERSION_CODES.KITKAT or below default to MIXED_CONTENT_ALWAYS_ALLOW. Apps targeting Build.VERSION_CODES.LOLLIPOP default to MIXED_CONTENT_NEVER_ALLOW. The preferred and most secure mode of operation for the WebView is MIXED_CONTENT_NEVER_ALLOW and use of MIXED_CONTENT_ALWAYS_ALLOW is strongly discouraged.
android.webkit.WebSettings.setMixedContentMode,Set mixed content mode.
android.webkit.WebSettings.setMixedContentMode,Configures the WebView's behavior when a secure origin attempts to load a resource from an insecure origin.
android.webkit.WebSettings.setMixedContentMode,By default apps that target Build.VERSION_CODES.KITKAT or below default to MIXED_CONTENT_ALWAYS_ALLOW.
android.webkit.WebSettings.setMixedContentMode,Apps targeting Build.VERSION_CODES.LOLLIPOP default to MIXED_CONTENT_NEVER_ALLOW.
android.webkit.WebSettings.setMixedContentMode,The preferred and most secure mode of operation for the WebView is MIXED_CONTENT_NEVER_ALLOW and use of MIXED_CONTENT_ALWAYS_ALLOW is strongly discouraged.
android.webkit.WebSettings.setNeedInitialFocus,Tells the WebView whether it needs to set a node to have focus when WebView#requestFocus(int android.graphics.Rect) is called. The default value is true.
android.webkit.WebSettings.setNeedInitialFocus,Set need initial focus.
android.webkit.WebSettings.setNeedInitialFocus,Tells the WebView whether it needs to set a node to have focus when WebView#requestFocus(int android.graphics.Rect) is called.
android.webkit.WebSettings.setNeedInitialFocus,The default value is true.
android.webkit.WebSettings.setSaveFormData,Sets whether the WebView should save form data. In Android O the platform has implemented a fully functional Autofill feature to store form data. Therefore the Webview form data save feature is disabled. Note that the feature will continue to be supported on older versions of Android as before. This function does not have any effect.
android.webkit.WebSettings.setSaveFormData,Set save form data.
android.webkit.WebSettings.setSaveFormData,Sets whether the WebView should save form data.
android.webkit.WebSettings.setSaveFormData,In Android O the platform has implemented a fully functional Autofill feature to store form data.
android.webkit.WebSettings.setSaveFormData,Therefore the Webview form data save feature is disabled.
android.webkit.WebSettings.setSaveFormData,Note that the feature will continue to be supported on older versions of Android as before.
android.webkit.WebSettings.setSaveFormData,This function does not have any effect.
android.webkit.WebSettings.setSavePassword,This method was deprecated in API level 18. Saving passwords in WebView will not be supported in future versions. Sets whether the WebView should save passwords. The default is true.
android.webkit.WebSettings.setSavePassword,Set save password.
android.webkit.WebSettings.setSavePassword,This method was deprecated in API level 18.
android.webkit.WebSettings.setSavePassword,Saving passwords in WebView will not be supported in future versions.
android.webkit.WebSettings.setSavePassword,Sets whether the WebView should save passwords.
android.webkit.WebSettings.setSavePassword,The default is true.
android.webkit.WebSettings.setSupportMultipleWindows,Sets whether the WebView whether supports multiple windows. If set to true WebChromeClient#onCreateWindow must be implemented by the host application. The default is false.
android.webkit.WebSettings.setSupportMultipleWindows,Set support multiple windows.
android.webkit.WebSettings.setSupportMultipleWindows,Sets whether the WebView whether supports multiple windows.
android.webkit.WebSettings.setSupportMultipleWindows,If set to true WebChromeClient#onCreateWindow must be implemented by the host application.
android.webkit.WebSettings.setSupportMultipleWindows,The default is false.
android.webkit.WebSettings.setSupportZoom,Sets whether the WebView should support zooming using its on-screen zoom controls and gestures. The particular zoom mechanisms that should be used can be set with setBuiltInZoomControls(boolean). This setting does not affect zooming performed using the WebView#zoomIn() and WebView#zoomOut() methods. The default is true.
android.webkit.WebSettings.setSupportZoom,Set support zoom.
android.webkit.WebSettings.setSupportZoom,Sets whether the WebView should support zooming using its on-screen zoom controls and gestures.
android.webkit.WebSettings.setSupportZoom,The particular zoom mechanisms that should be used can be set with setBuiltInZoomControls(boolean).
android.webkit.WebSettings.setSupportZoom,This setting does not affect zooming performed using the WebView#zoomIn() and WebView#zoomOut() methods.
android.webkit.WebSettings.setSupportZoom,The default is true.
android.webkit.WebSettings.setTextZoom,Sets the text zoom of the page in percent. The default is 100.
android.webkit.WebSettings.setTextZoom,Set text zoom.
android.webkit.WebSettings.setTextZoom,Sets the text zoom of the page in percent.
android.webkit.WebSettings.setTextZoom,The default is 100.
android.webkit.WebSettings.setUseWideViewPort,"Sets whether the WebView should enable support for the ""viewport"" HTML meta tag or should use a wide viewport. When the value of the setting is false the layout width is always set to the width of the WebView control in device-independent (CSS) pixels. When the value is true and the page contains the viewport meta tag the value of the width specified in the tag is used. If the page does not contain the tag or does not provide a width then a wide viewport will be used."
android.webkit.WebSettings.setUseWideViewPort,Set use wide view port.
android.webkit.WebSettings.setUseWideViewPort,"Sets whether the WebView should enable support for the ""viewport"" HTML meta tag or should use a wide viewport."
android.webkit.WebSettings.setUseWideViewPort,When the value of the setting is false the layout width is always set to the width of the WebView control in device-independent (CSS) pixels.
android.webkit.WebSettings.setUseWideViewPort,When the value is true and the page contains the viewport meta tag the value of the width specified in the tag is used.
android.webkit.WebSettings.setUseWideViewPort,If the page does not contain the tag or does not provide a width then a wide viewport will be used.
android.webkit.WebSettings.setUserAgentString,Sets the WebView's user-agent string. If the string is null or empty the system default value will be used. Note that starting from Build.VERSION_CODES.KITKAT Android version changing the user-agent while loading a web page causes WebView to initiate loading once again.
android.webkit.WebSettings.setUserAgentString,Set user agent string.
android.webkit.WebSettings.setUserAgentString,Sets the WebView's user-agent string.
android.webkit.WebSettings.setUserAgentString,If the string is null or empty the system default value will be used.
android.webkit.WebSettings.setUserAgentString,Note that starting from Build.VERSION_CODES.KITKAT Android version changing the user-agent while loading a web page causes WebView to initiate loading once again.
android.webkit.WebView.addJavascriptInterface,Injects the supplied Java object into this WebView. The object is injected into the JavaScript context of the main frame using the supplied name. This allows the Java object's methods to be accessed from JavaScript. For applications targeted to API level Build.VERSION_CODES.JELLY_BEAN_MR1 and above only public methods that are annotated with JavascriptInterface can be accessed from JavaScript. For applications targeted to API level Build.VERSION_CODES.JELLY_BEAN or below all public methods (including the inherited ones) can be accessed see the important security note below for implications. Note that injected objects will not appear in JavaScript until the page is next (re)loaded. JavaScript should be enabled before injecting the object. For example: IMPORTANT: This method can be used to allow JavaScript to control the host application. This is a powerful feature but also presents a security risk for apps targeting Build.VERSION_CODES.JELLY_BEAN or earlier. Apps that target a version later than Build.VERSION_CODES.JELLY_BEAN are still vulnerable if the app runs on a device running Android earlier than 4.2. The most secure way to use this method is to target Build.VERSION_CODES.JELLY_BEAN_MR1 and to ensure the method is called only when running on Android 4.2 or later. With these older versions JavaScript could use reflection to access an injected object's public fields. Use of this method in a WebView containing untrusted content could allow an attacker to manipulate the host application in unintended ways executing Java code with the permissions of the host application. Use extreme care when using this method in a WebView which could contain untrusted content. JavaScript interacts with Java object on a private background thread of this WebView. Care is therefore required to maintain thread safety. The Java object's fields are not accessible. For applications targeted to API level Build.VERSION_CODES.LOLLIPOP and above methods of injected Java objects are enumerable from JavaScript.
android.webkit.WebView.addJavascriptInterface,Add javascript interface.
android.webkit.WebView.addJavascriptInterface,Injects the supplied Java object into this WebView.
android.webkit.WebView.addJavascriptInterface,The object is injected into the JavaScript context of the main frame using the supplied name.
android.webkit.WebView.addJavascriptInterface,This allows the Java object's methods to be accessed from JavaScript.
android.webkit.WebView.addJavascriptInterface,For applications targeted to API level Build.VERSION_CODES.JELLY_BEAN_MR1 and above only public methods that are annotated with JavascriptInterface can be accessed from JavaScript.
android.webkit.WebView.addJavascriptInterface,For applications targeted to API level Build.VERSION_CODES.JELLY_BEAN or below all public methods (including the inherited ones) can be accessed see the important security note below for implications.
android.webkit.WebView.addJavascriptInterface,Note that injected objects will not appear in JavaScript until the page is next (re)loaded.
android.webkit.WebView.addJavascriptInterface,JavaScript should be enabled before injecting the object.
android.webkit.WebView.addJavascriptInterface,For example: IMPORTANT: This method can be used to allow JavaScript to control the host application.
android.webkit.WebView.addJavascriptInterface,This is a powerful feature but also presents a security risk for apps targeting Build.VERSION_CODES.JELLY_BEAN or earlier.
android.webkit.WebView.addJavascriptInterface,Apps that target a version later than Build.VERSION_CODES.JELLY_BEAN are still vulnerable if the app runs on a device running Android earlier than 4.2.
android.webkit.WebView.addJavascriptInterface,The most secure way to use this method is to target Build.VERSION_CODES.JELLY_BEAN_MR1 and to ensure the method is called only when running on Android 4.2 or later.
android.webkit.WebView.addJavascriptInterface,With these older versions JavaScript could use reflection to access an injected object's public fields.
android.webkit.WebView.addJavascriptInterface,Use of this method in a WebView containing untrusted content could allow an attacker to manipulate the host application in unintended ways executing Java code with the permissions of the host application.
android.webkit.WebView.addJavascriptInterface,Use extreme care when using this method in a WebView which could contain untrusted content.
android.webkit.WebView.addJavascriptInterface,JavaScript interacts with Java object on a private background thread of this WebView.
android.webkit.WebView.addJavascriptInterface,Care is therefore required to maintain thread safety.
android.webkit.WebView.addJavascriptInterface,The Java object's fields are not accessible.
android.webkit.WebView.addJavascriptInterface,For applications targeted to API level Build.VERSION_CODES.LOLLIPOP and above methods of injected Java objects are enumerable from JavaScript.
android.webkit.WebView.canGoBack,Gets whether this WebView has a back history item.
android.webkit.WebView.canGoBack,Can go back.
android.webkit.WebView.canGoBackOrForward,Gets whether the page can go back or forward the given number of steps.
android.webkit.WebView.canGoBackOrForward,Can go back or forward.
android.webkit.WebView.canGoForward,Gets whether this WebView has a forward history item.
android.webkit.WebView.canGoForward,Can go forward.
android.webkit.WebView.clearCache,Clears the resource cache. Note that the cache is per-application so this will clear the cache for all WebViews used.
android.webkit.WebView.clearCache,Clear cache.
android.webkit.WebView.clearCache,Clears the resource cache.
android.webkit.WebView.clearCache,Note that the cache is per-application so this will clear the cache for all WebViews used.
android.webkit.WebView.clearFormData,Removes the autocomplete popup from the currently focused form field if present. Note this only affects the display of the autocomplete popup it does not remove any saved form data from this WebView's store. To do that use WebViewDatabase#clearFormData.
android.webkit.WebView.clearFormData,Clear form data.
android.webkit.WebView.clearFormData,Removes the autocomplete popup from the currently focused form field if present.
android.webkit.WebView.clearFormData,Note this only affects the display of the autocomplete popup it does not remove any saved form data from this WebView's store.
android.webkit.WebView.clearFormData,To do that use WebViewDatabase#clearFormData.
android.webkit.WebView.clearHistory,Tells this WebView to clear its internal back/forward list.
android.webkit.WebView.clearHistory,Clear history.
android.webkit.WebView.clearSslPreferences,Clears the SSL preferences table stored in response to proceeding with SSL certificate errors.
android.webkit.WebView.clearSslPreferences,Clear ssl preferences.
android.webkit.WebView.clearView,"This method was deprecated in API level 18. Use WebView.loadUrl(""about:blank"") to reliably reset the view state and release page resources (including any running JavaScript). Clears this WebView so that onDraw() will draw nothing but white background and onMeasure() will return 0 if MeasureSpec is not MeasureSpec.EXACTLY."
android.webkit.WebView.clearView,Clear view.
android.webkit.WebView.clearView,This method was deprecated in API level 18.
android.webkit.WebView.clearView,"Use WebView.loadUrl(""about:blank"") to reliably reset the view state and release page resources (including any running JavaScript)."
android.webkit.WebView.clearView,Clears this WebView so that onDraw() will draw nothing but white background and onMeasure() will return 0 if MeasureSpec is not MeasureSpec.EXACTLY.
android.webkit.WebView.copyBackForwardList,Gets the WebBackForwardList for this WebView. This contains the back/forward list for use in querying each item in the history stack. This is a copy of the private WebBackForwardList so it contains only a snapshot of the current state. Multiple calls to this method may return different objects. The object returned from this method will not be updated to reflect any new state.
android.webkit.WebView.copyBackForwardList,Copy back forward list.
android.webkit.WebView.copyBackForwardList,Gets the WebBackForwardList for this WebView.
android.webkit.WebView.copyBackForwardList,This contains the back/forward list for use in querying each item in the history stack.
android.webkit.WebView.copyBackForwardList,This is a copy of the private WebBackForwardList so it contains only a snapshot of the current state.
android.webkit.WebView.copyBackForwardList,Multiple calls to this method may return different objects.
android.webkit.WebView.copyBackForwardList,The object returned from this method will not be updated to reflect any new state.
android.webkit.WebView.destroy,Destroys the internal state of this WebView. This method should be called after this WebView has been removed from the view system. No other methods may be called on this WebView after destroy.
android.webkit.WebView.destroy,Destroy.
android.webkit.WebView.destroy,Destroys the internal state of this WebView.
android.webkit.WebView.destroy,This method should be called after this WebView has been removed from the view system.
android.webkit.WebView.destroy,No other methods may be called on this WebView after destroy.
android.webkit.WebView.evaluateJavascript,Asynchronously evaluates JavaScript in the context of the currently displayed page. If non-null resultCallback will be invoked with any result returned from that execution. This method must be called on the UI thread and the callback will be made on the UI thread. Compatibility note. Applications targeting Build.VERSION_CODES.N or later JavaScript state from an empty WebView is no longer persisted across navigations like loadUrl(java.lang.String). For example global variables and functions defined before calling loadUrl(java.lang.String) will not exist in the loaded page. Applications should use addJavascriptInterface(Object String) instead to persist JavaScript objects across navigations.
android.webkit.WebView.evaluateJavascript,Evaluate javascript.
android.webkit.WebView.evaluateJavascript,Asynchronously evaluates JavaScript in the context of the currently displayed page.
android.webkit.WebView.evaluateJavascript,If non-null resultCallback will be invoked with any result returned from that execution.
android.webkit.WebView.evaluateJavascript,This method must be called on the UI thread and the callback will be made on the UI thread.
android.webkit.WebView.evaluateJavascript,Compatibility note.
android.webkit.WebView.evaluateJavascript,Applications targeting Build.VERSION_CODES.N or later JavaScript state from an empty WebView is no longer persisted across navigations like loadUrl(java.lang.String).
android.webkit.WebView.evaluateJavascript,For example global variables and functions defined before calling loadUrl(java.lang.String) will not exist in the loaded page.
android.webkit.WebView.evaluateJavascript,Applications should use addJavascriptInterface(Object String) instead to persist JavaScript objects across navigations.
android.webkit.WebView.getContentHeight,Gets the height of the HTML content.
android.webkit.WebView.getContentHeight,Get content height.
android.webkit.WebView.getHitTestResult,"Gets a HitTestResult based on the current cursor node. If a HTML::a tag is found and the anchor has a non-JavaScript URL the HitTestResult type is set to SRC_ANCHOR_TYPE and the URL is set in the ""extra"" field. If the anchor does not have a URL or if it is a JavaScript URL the type will be UNKNOWN_TYPE and the URL has to be retrieved through requestFocusNodeHref(Message) asynchronously. If a HTML::img tag is found the HitTestResult type is set to IMAGE_TYPE and the URL is set in the ""extra"" field. A type of SRC_IMAGE_ANCHOR_TYPE indicates an anchor with a URL that has an image as a child node. If a phone number is found the HitTestResult type is set to PHONE_TYPE and the phone number is set in the ""extra"" field of HitTestResult. If a map address is found the HitTestResult type is set to GEO_TYPE and the address is set in the ""extra"" field of HitTestResult. If an email address is found the HitTestResult type is set to EMAIL_TYPE and the email is set in the ""extra"" field of HitTestResult. Otherwise HitTestResult type is set to UNKNOWN_TYPE."
android.webkit.WebView.getHitTestResult,Get hit test result.
android.webkit.WebView.getHitTestResult,Gets a HitTestResult based on the current cursor node.
android.webkit.WebView.getHitTestResult,"If a HTML::a tag is found and the anchor has a non-JavaScript URL the HitTestResult type is set to SRC_ANCHOR_TYPE and the URL is set in the ""extra"" field."
android.webkit.WebView.getHitTestResult,If the anchor does not have a URL or if it is a JavaScript URL the type will be UNKNOWN_TYPE and the URL has to be retrieved through requestFocusNodeHref(Message) asynchronously.
android.webkit.WebView.getHitTestResult,"If a HTML::img tag is found the HitTestResult type is set to IMAGE_TYPE and the URL is set in the ""extra"" field."
android.webkit.WebView.getHitTestResult,A type of SRC_IMAGE_ANCHOR_TYPE indicates an anchor with a URL that has an image as a child node.
android.webkit.WebView.getHitTestResult,"If a phone number is found the HitTestResult type is set to PHONE_TYPE and the phone number is set in the ""extra"" field of HitTestResult."
android.webkit.WebView.getHitTestResult,"If a map address is found the HitTestResult type is set to GEO_TYPE and the address is set in the ""extra"" field of HitTestResult."
android.webkit.WebView.getHitTestResult,"If an email address is found the HitTestResult type is set to EMAIL_TYPE and the email is set in the ""extra"" field of HitTestResult."
android.webkit.WebView.getHitTestResult,Otherwise HitTestResult type is set to UNKNOWN_TYPE.
android.webkit.WebView.getOriginalUrl,Gets the original URL for the current page. This is not always the same as the URL passed to WebViewClient.onPageStarted because although the load for that URL has begun the current page may not have changed. Also there may have been redirects resulting in a different URL to that originally requested.
android.webkit.WebView.getOriginalUrl,Get original url.
android.webkit.WebView.getOriginalUrl,Gets the original URL for the current page.
android.webkit.WebView.getOriginalUrl,This is not always the same as the URL passed to WebViewClient.onPageStarted because although the load for that URL has begun the current page may not have changed.
android.webkit.WebView.getOriginalUrl,Also there may have been redirects resulting in a different URL to that originally requested.
android.webkit.WebView.getProgress,Gets the progress for the current page.
android.webkit.WebView.getProgress,Get progress.
android.webkit.WebView.getSettings,Gets the WebSettings object used to control the settings for this WebView.
android.webkit.WebView.getSettings,Get settings.
android.webkit.WebView.getTitle,Gets the title for the current page. This is the title of the current page until WebViewClient.onReceivedTitle is called.
android.webkit.WebView.getTitle,Get title.
android.webkit.WebView.getTitle,Gets the title for the current page.
android.webkit.WebView.getTitle,This is the title of the current page until WebViewClient.onReceivedTitle is called.
android.webkit.WebView.getUrl,Gets the URL for the current page. This is not always the same as the URL passed to WebViewClient.onPageStarted because although the load for that URL has begun the current page may not have changed.
android.webkit.WebView.getUrl,Get url.
android.webkit.WebView.getUrl,Gets the URL for the current page.
android.webkit.WebView.getUrl,This is not always the same as the URL passed to WebViewClient.onPageStarted because although the load for that URL has begun the current page may not have changed.
android.webkit.WebView.goBack,Goes back in the history of this WebView.
android.webkit.WebView.goBack,Go back.
android.webkit.WebView.goBackOrForward,Goes to the history item that is the number of steps away from the current item. Steps is negative if backward and positive if forward.
android.webkit.WebView.goBackOrForward,Go back or forward.
android.webkit.WebView.goBackOrForward,Goes to the history item that is the number of steps away from the current item.
android.webkit.WebView.goBackOrForward,Steps is negative if backward and positive if forward.
android.webkit.WebView.goForward,Goes forward in the history of this WebView.
android.webkit.WebView.goForward,Go forward.
android.webkit.WebView.loadData,"Loads the given data into this WebView using a 'data' scheme URL. Note that JavaScript's same origin policy means that script running in a page loaded using this method will be unable to access content loaded using any scheme other than 'data' including 'http(s)'. To avoid this restriction use loadDataWithBaseURL() with an appropriate base URL. The encoding parameter specifies whether the data is base64 or URL encoded. If the data is base64 encoded the value of the encoding parameter must be ""base64"". HTML can be encoded with Base64.encodeToString(byte[] int) like so: For all other values of encoding (including null ) it is assumed that the data uses ASCII encoding for octets inside the range of safe URL characters and use the standard %xx hex encoding of URLs for octets outside that range. See RFC 3986 for more information. Applications targeting Build.VERSION_CODES.Q or later must either use base64 or encode any # characters in the content as %23 otherwise they will be treated as the end of the content and the remaining text used as a document fragment identifier. The mimeType parameter specifies the format of the data. If WebView can't handle the specified MIME type it will download the data. If null defaults to 'text/html'. The 'data' scheme URL formed by this method uses the default US-ASCII charset. If you need to set a different charset you should form a 'data' scheme URL which explicitly specifies a charset parameter in the mediatype portion of the URL and call loadUrl(java.lang.String) instead. Note that the charset obtained from the mediatype portion of a data URL always overrides that specified in the HTML or XML document itself. Content loaded using this method will have a window.origin value of ""null"". This must not be considered to be a trusted origin by the application or by any JavaScript code running inside the WebView (for example event sources in DOM event handlers or web messages) because malicious content can also create frames with a null origin. If you need to identify the main frame's origin in a trustworthy way you should use loadDataWithBaseURL() with a valid HTTP or HTTPS base URL to set the origin."
android.webkit.WebView.loadData,Load data.
android.webkit.WebView.loadData,Loads the given data into this WebView using a 'data' scheme URL.
android.webkit.WebView.loadData,Note that JavaScript's same origin policy means that script running in a page loaded using this method will be unable to access content loaded using any scheme other than 'data' including 'http(s)'.
android.webkit.WebView.loadData,To avoid this restriction use loadDataWithBaseURL() with an appropriate base URL.
android.webkit.WebView.loadData,The encoding parameter specifies whether the data is base64 or URL encoded.
android.webkit.WebView.loadData,"If the data is base64 encoded the value of the encoding parameter must be ""base64""."
android.webkit.WebView.loadData,HTML can be encoded with Base64.encodeToString(byte[] int) like so: For all other values of encoding (including null ) it is assumed that the data uses ASCII encoding for octets inside the range of safe URL characters and use the standard %xx hex encoding of URLs for octets outside that range.
android.webkit.WebView.loadData,See RFC 3986 for more information.
android.webkit.WebView.loadData,Applications targeting Build.VERSION_CODES.Q or later must either use base64 or encode any # characters in the content as %23 otherwise they will be treated as the end of the content and the remaining text used as a document fragment identifier.
android.webkit.WebView.loadData,The mimeType parameter specifies the format of the data.
android.webkit.WebView.loadData,If WebView can't handle the specified MIME type it will download the data.
android.webkit.WebView.loadData,If null defaults to 'text/html'.
android.webkit.WebView.loadData,The 'data' scheme URL formed by this method uses the default US-ASCII charset.
android.webkit.WebView.loadData,If you need to set a different charset you should form a 'data' scheme URL which explicitly specifies a charset parameter in the mediatype portion of the URL and call loadUrl(java.lang.String) instead.
android.webkit.WebView.loadData,Note that the charset obtained from the mediatype portion of a data URL always overrides that specified in the HTML or XML document itself.
android.webkit.WebView.loadData,"Content loaded using this method will have a window.origin value of ""null""."
android.webkit.WebView.loadData,This must not be considered to be a trusted origin by the application or by any JavaScript code running inside the WebView (for example event sources in DOM event handlers or web messages) because malicious content can also create frames with a null origin.
android.webkit.WebView.loadData,If you need to identify the main frame's origin in a trustworthy way you should use loadDataWithBaseURL() with a valid HTTP or HTTPS base URL to set the origin.
android.webkit.WebView.loadDataWithBaseURL,"Loads the given data into this WebView using baseUrl as the base URL for the content. The base URL is used both to resolve relative URLs and when applying JavaScript's same origin policy. The historyUrl is used for the history entry. The mimeType parameter specifies the format of the data. If WebView can't handle the specified MIME type it will download the data. If null defaults to 'text/html'. Note that content specified in this way can access local device files (via 'file' scheme URLs) only if baseUrl specifies a scheme other than 'http' 'https' 'ftp' 'ftps' 'about' or 'javascript'. If the base URL uses the data scheme this method is equivalent to calling loadData() and the historyUrl is ignored and the data will be treated as part of a data: URL including the requirement that the content be URL-encoded or base64 encoded. If the base URL uses any other scheme then the data will be loaded into the WebView as a plain string (i.e. not part of a data URL) and any URL-encoded entities in the string will not be decoded. Note that the baseUrl is sent in the 'Referer' HTTP header when requesting subresources (images etc.) of the page loaded using this method. If a valid HTTP or HTTPS base URL is not specified in baseUrl then content loaded using this method will have a window.origin value of ""null"". This must not be considered to be a trusted origin by the application or by any JavaScript code running inside the WebView (for example event sources in DOM event handlers or web messages) because malicious content can also create frames with a null origin. If you need to identify the main frame's origin in a trustworthy way you should use a valid HTTP or HTTPS base URL to set the origin."
android.webkit.WebView.loadDataWithBaseURL,Load data with base u r l.
android.webkit.WebView.loadDataWithBaseURL,Loads the given data into this WebView using baseUrl as the base URL for the content.
android.webkit.WebView.loadDataWithBaseURL,The base URL is used both to resolve relative URLs and when applying JavaScript's same origin policy.
android.webkit.WebView.loadDataWithBaseURL,The historyUrl is used for the history entry.
android.webkit.WebView.loadDataWithBaseURL,The mimeType parameter specifies the format of the data.
android.webkit.WebView.loadDataWithBaseURL,If WebView can't handle the specified MIME type it will download the data.
android.webkit.WebView.loadDataWithBaseURL,If null defaults to 'text/html'.
android.webkit.WebView.loadDataWithBaseURL,Note that content specified in this way can access local device files (via 'file' scheme URLs) only if baseUrl specifies a scheme other than 'http' 'https' 'ftp' 'ftps' 'about' or 'javascript'.
android.webkit.WebView.loadDataWithBaseURL,If the base URL uses the data scheme this method is equivalent to calling loadData() and the historyUrl is ignored and the data will be treated as part of a data: URL including the requirement that the content be URL-encoded or base64 encoded.
android.webkit.WebView.loadDataWithBaseURL,If the base URL uses any other scheme then the data will be loaded into the WebView as a plain string (i.e.
android.webkit.WebView.loadDataWithBaseURL,not part of a data URL) and any URL-encoded entities in the string will not be decoded.
android.webkit.WebView.loadDataWithBaseURL,Note that the baseUrl is sent in the 'Referer' HTTP header when requesting subresources (images etc.) of the page loaded using this method.
android.webkit.WebView.loadDataWithBaseURL,"If a valid HTTP or HTTPS base URL is not specified in baseUrl then content loaded using this method will have a window.origin value of ""null""."
android.webkit.WebView.loadDataWithBaseURL,This must not be considered to be a trusted origin by the application or by any JavaScript code running inside the WebView (for example event sources in DOM event handlers or web messages) because malicious content can also create frames with a null origin.
android.webkit.WebView.loadDataWithBaseURL,If you need to identify the main frame's origin in a trustworthy way you should use a valid HTTP or HTTPS base URL to set the origin.
android.webkit.WebView.loadUrl,Loads the given URL. Also see compatibility note on evaluateJavascript(String ValueCallback ).
android.webkit.WebView.loadUrl,Load url.
android.webkit.WebView.loadUrl,Loads the given URL.
android.webkit.WebView.loadUrl,Also see compatibility note on evaluateJavascript(String ValueCallback ).
android.webkit.WebView.loadUrl,Loads the given URL with the specified additional HTTP headers. Also see compatibility note on evaluateJavascript(String ValueCallback ).
android.webkit.WebView.loadUrl,Load url.
android.webkit.WebView.loadUrl,Loads the given URL with the specified additional HTTP headers.
android.webkit.WebView.loadUrl,Also see compatibility note on evaluateJavascript(String ValueCallback ).
android.webkit.WebView.onPause,Does a best-effort attempt to pause any processing that can be paused safely such as animations and geolocation. Note that this call does not pause JavaScript. To pause JavaScript globally use pauseTimers(). To resume WebView call onResume().
android.webkit.WebView.onPause,On pause.
android.webkit.WebView.onPause,Does a best-effort attempt to pause any processing that can be paused safely such as animations and geolocation.
android.webkit.WebView.onPause,Note that this call does not pause JavaScript.
android.webkit.WebView.onPause,To pause JavaScript globally use pauseTimers().
android.webkit.WebView.onPause,To resume WebView call onResume().
android.webkit.WebView.onResume,Resumes a WebView after a previous call to onPause().
android.webkit.WebView.onResume,On resume.
android.webkit.WebView.onWindowFocusChanged,Called when the window containing this view gains or loses focus. Note that this is separate from view focus: to receive key events both your view and its window must have focus. If a window is displayed on top of yours that takes input focus then your own window will lose focus but the view focus will remain unchanged.
android.webkit.WebView.onWindowFocusChanged,On window focus changed.
android.webkit.WebView.onWindowFocusChanged,Called when the window containing this view gains or loses focus.
android.webkit.WebView.onWindowFocusChanged,Note that this is separate from view focus: to receive key events both your view and its window must have focus.
android.webkit.WebView.onWindowFocusChanged,If a window is displayed on top of yours that takes input focus then your own window will lose focus but the view focus will remain unchanged.
android.webkit.WebView.pauseTimers,Pauses all layout parsing and JavaScript timers for all WebViews. This is a global requests not restricted to just this WebView. This can be useful if the application has been paused.
android.webkit.WebView.pauseTimers,Pause timers.
android.webkit.WebView.pauseTimers,Pauses all layout parsing and JavaScript timers for all WebViews.
android.webkit.WebView.pauseTimers,This is a global requests not restricted to just this WebView.
android.webkit.WebView.pauseTimers,This can be useful if the application has been paused.
android.webkit.WebView.postUrl,"Loads the URL with postData using ""POST"" method into this WebView. If url is not a network URL it will be loaded with loadUrl(java.lang.String) instead ignoring the postData param."
android.webkit.WebView.postUrl,Post url.
android.webkit.WebView.postUrl,"Loads the URL with postData using ""POST"" method into this WebView."
android.webkit.WebView.postUrl,If url is not a network URL it will be loaded with loadUrl(java.lang.String) instead ignoring the postData param.
android.webkit.WebView.reload,Reloads the current URL.
android.webkit.WebView.reload,Reload.
android.webkit.WebView.requestFocus,Call this to try to give focus to a specific view or to one of its descendants and give it hints about the direction and a specific rectangle that the focus is coming from. The rectangle can help give larger views a finer grained hint about where focus is coming from and therefore where to show selection or forward focus change internally. A view will not actually take focus if it is not focusable ( isFocusable() returns false) or if it is focusable and it is not focusable in touch mode ( isFocusableInTouchMode() ) while the device is in touch mode. A View will not take focus if it is not visible. A View will not take focus if one of its parents has ViewGroup.getDescendantFocusability() equal to ViewGroup#FOCUS_BLOCK_DESCENDANTS. See also focusSearch(int) which is what you call to say that you have focus and you want your parent to look for the next one. You may wish to override this method if your custom View has an internal View that it wishes to forward the request to. Looks for a view to give focus to respecting the setting specified by getDescendantFocusability(). Uses onRequestFocusInDescendants(int android.graphics.Rect) to find focus within the children of this group when appropriate.
android.webkit.WebView.requestFocus,Request focus.
android.webkit.WebView.requestFocus,Call this to try to give focus to a specific view or to one of its descendants and give it hints about the direction and a specific rectangle that the focus is coming from.
android.webkit.WebView.requestFocus,The rectangle can help give larger views a finer grained hint about where focus is coming from and therefore where to show selection or forward focus change internally.
android.webkit.WebView.requestFocus,A view will not actually take focus if it is not focusable ( isFocusable() returns false) or if it is focusable and it is not focusable in touch mode ( isFocusableInTouchMode() ) while the device is in touch mode.
android.webkit.WebView.requestFocus,A View will not take focus if it is not visible.
android.webkit.WebView.requestFocus,A View will not take focus if one of its parents has ViewGroup.getDescendantFocusability() equal to ViewGroup#FOCUS_BLOCK_DESCENDANTS.
android.webkit.WebView.requestFocus,See also focusSearch(int) which is what you call to say that you have focus and you want your parent to look for the next one.
android.webkit.WebView.requestFocus,You may wish to override this method if your custom View has an internal View that it wishes to forward the request to.
android.webkit.WebView.requestFocus,Looks for a view to give focus to respecting the setting specified by getDescendantFocusability().
android.webkit.WebView.requestFocus,Uses onRequestFocusInDescendants(int android.graphics.Rect) to find focus within the children of this group when appropriate.
android.webkit.WebView.restoreState,Restores the state of this WebView from the given Bundle. This method is intended for use in Activity.onRestoreInstanceState(Bundle) and should be called to restore the state of this WebView. If it is called after this WebView has had a chance to build state (load pages create a back/forward list etc.) there may be undesirable side-effects. Please note that this method no longer restores the display data for this WebView.
android.webkit.WebView.restoreState,Restore state.
android.webkit.WebView.restoreState,Restores the state of this WebView from the given Bundle.
android.webkit.WebView.restoreState,This method is intended for use in Activity.onRestoreInstanceState(Bundle) and should be called to restore the state of this WebView.
android.webkit.WebView.restoreState,If it is called after this WebView has had a chance to build state (load pages create a back/forward list etc.) there may be undesirable side-effects.
android.webkit.WebView.restoreState,Please note that this method no longer restores the display data for this WebView.
android.webkit.WebView.resumeTimers,Resumes all layout parsing and JavaScript timers for all WebViews. This will resume dispatching all timers.
android.webkit.WebView.resumeTimers,Resume timers.
android.webkit.WebView.resumeTimers,Resumes all layout parsing and JavaScript timers for all WebViews.
android.webkit.WebView.resumeTimers,This will resume dispatching all timers.
android.webkit.WebView.saveState,Saves the state of this WebView used in Activity.onSaveInstanceState(Bundle). Please note that this method no longer stores the display data for this WebView. The previous behavior could potentially leak files if restoreState(Bundle) was never called.
android.webkit.WebView.saveState,Save state.
android.webkit.WebView.saveState,Saves the state of this WebView used in Activity.onSaveInstanceState(Bundle).
android.webkit.WebView.saveState,Please note that this method no longer stores the display data for this WebView.
android.webkit.WebView.saveState,The previous behavior could potentially leak files if restoreState(Bundle) was never called.
android.webkit.WebView.setDownloadListener,Registers the interface to be used when content can not be handled by the rendering engine and should be downloaded instead. This will replace the current handler.
android.webkit.WebView.setDownloadListener,Set download listener.
android.webkit.WebView.setDownloadListener,Registers the interface to be used when content can not be handled by the rendering engine and should be downloaded instead.
android.webkit.WebView.setDownloadListener,This will replace the current handler.
android.webkit.WebView.setHorizontalScrollbarOverlay,This method was deprecated in API level 23. This method has no effect. Specifies whether the horizontal scrollbar has overlay style.
android.webkit.WebView.setHorizontalScrollbarOverlay,Set horizontal scrollbar overlay.
android.webkit.WebView.setHorizontalScrollbarOverlay,This method was deprecated in API level 23.
android.webkit.WebView.setHorizontalScrollbarOverlay,This method has no effect.
android.webkit.WebView.setHorizontalScrollbarOverlay,Specifies whether the horizontal scrollbar has overlay style.
android.webkit.WebView.setInitialScale,Sets the initial scale for this WebView. 0 means default. The behavior for the default scale depends on the state of WebSettings#getUseWideViewPort() and WebSettings#getLoadWithOverviewMode(). If the content fits into the WebView control by width then the zoom is set to 100%. For wide content the behavior depends on the state of WebSettings#getLoadWithOverviewMode(). If its value is true the content will be zoomed out to be fit by width into the WebView control otherwise not. If initial scale is greater than 0 WebView starts with this value as initial scale. Please note that unlike the scale properties in the viewport meta tag this method doesn't take the screen density into account.
android.webkit.WebView.setInitialScale,Set initial scale.
android.webkit.WebView.setInitialScale,Sets the initial scale for this WebView.
android.webkit.WebView.setInitialScale,0 means default.
android.webkit.WebView.setInitialScale,The behavior for the default scale depends on the state of WebSettings#getUseWideViewPort() and WebSettings#getLoadWithOverviewMode().
android.webkit.WebView.setInitialScale,If the content fits into the WebView control by width then the zoom is set to 100%.
android.webkit.WebView.setInitialScale,For wide content the behavior depends on the state of WebSettings#getLoadWithOverviewMode().
android.webkit.WebView.setInitialScale,If its value is true the content will be zoomed out to be fit by width into the WebView control otherwise not.
android.webkit.WebView.setInitialScale,If initial scale is greater than 0 WebView starts with this value as initial scale.
android.webkit.WebView.setInitialScale,Please note that unlike the scale properties in the viewport meta tag this method doesn't take the screen density into account.
android.webkit.WebView.setNetworkAvailable,Informs WebView of the network state. This is used to set the JavaScript property window.navigator.isOnline and generates the online/offline event as specified in HTML5 sec. 5.7.7.
android.webkit.WebView.setNetworkAvailable,Set network available.
android.webkit.WebView.setNetworkAvailable,Informs WebView of the network state.
android.webkit.WebView.setNetworkAvailable,This is used to set the JavaScript property window.navigator.isOnline and generates the online/offline event as specified in HTML5 sec.
android.webkit.WebView.setNetworkAvailable,5.7.7.
android.webkit.WebView.setScrollBarStyle,Specify the style of the scrollbars. The scrollbars can be overlaid or inset. When inset they add to the padding of the view. And the scrollbars can be drawn inside the padding area or on the edge of the view. For example if a view has a background drawable and you want to draw the scrollbars inside the padding specified by the drawable you can use SCROLLBARS_INSIDE_OVERLAY or SCROLLBARS_INSIDE_INSET. If you want them to appear at the edge of the view ignoring the padding then you can use SCROLLBARS_OUTSIDE_OVERLAY or SCROLLBARS_OUTSIDE_INSET.
android.webkit.WebView.setScrollBarStyle,Set scroll bar style.
android.webkit.WebView.setScrollBarStyle,Specify the style of the scrollbars.
android.webkit.WebView.setScrollBarStyle,The scrollbars can be overlaid or inset.
android.webkit.WebView.setScrollBarStyle,When inset they add to the padding of the view.
android.webkit.WebView.setScrollBarStyle,And the scrollbars can be drawn inside the padding area or on the edge of the view.
android.webkit.WebView.setScrollBarStyle,For example if a view has a background drawable and you want to draw the scrollbars inside the padding specified by the drawable you can use SCROLLBARS_INSIDE_OVERLAY or SCROLLBARS_INSIDE_INSET.
android.webkit.WebView.setScrollBarStyle,If you want them to appear at the edge of the view ignoring the padding then you can use SCROLLBARS_OUTSIDE_OVERLAY or SCROLLBARS_OUTSIDE_INSET.
android.webkit.WebView.setVerticalScrollbarOverlay,This method was deprecated in API level 23. This method has no effect. Specifies whether the vertical scrollbar has overlay style.
android.webkit.WebView.setVerticalScrollbarOverlay,Set vertical scrollbar overlay.
android.webkit.WebView.setVerticalScrollbarOverlay,This method was deprecated in API level 23.
android.webkit.WebView.setVerticalScrollbarOverlay,This method has no effect.
android.webkit.WebView.setVerticalScrollbarOverlay,Specifies whether the vertical scrollbar has overlay style.
android.webkit.WebView.setWebChromeClient,Sets the chrome handler. This is an implementation of WebChromeClient for use in handling JavaScript dialogs favicons titles and the progress. This will replace the current handler.
android.webkit.WebView.setWebChromeClient,Set web chrome client.
android.webkit.WebView.setWebChromeClient,Sets the chrome handler.
android.webkit.WebView.setWebChromeClient,This is an implementation of WebChromeClient for use in handling JavaScript dialogs favicons titles and the progress.
android.webkit.WebView.setWebChromeClient,This will replace the current handler.
android.webkit.WebView.setWebContentsDebuggingEnabled,Enables debugging of web contents (HTML / CSS / JavaScript) loaded into any WebViews of this application. This flag can be enabled in order to facilitate debugging of web layouts and JavaScript code running inside WebViews. Please refer to WebView documentation for the debugging guide. The default is false.
android.webkit.WebView.setWebContentsDebuggingEnabled,Set web contents debugging enabled.
android.webkit.WebView.setWebContentsDebuggingEnabled,Enables debugging of web contents (HTML / CSS / JavaScript) loaded into any WebViews of this application.
android.webkit.WebView.setWebContentsDebuggingEnabled,This flag can be enabled in order to facilitate debugging of web layouts and JavaScript code running inside WebViews.
android.webkit.WebView.setWebContentsDebuggingEnabled,Please refer to WebView documentation for the debugging guide.
android.webkit.WebView.setWebContentsDebuggingEnabled,The default is false.
android.webkit.WebView.setWebViewClient,Sets the WebViewClient that will receive various notifications and requests. This will replace the current handler.
android.webkit.WebView.setWebViewClient,Set web view client.
android.webkit.WebView.setWebViewClient,Sets the WebViewClient that will receive various notifications and requests.
android.webkit.WebView.setWebViewClient,This will replace the current handler.
android.webkit.WebView.stopLoading,Stops the current load.
android.webkit.WebView.stopLoading,Stop loading.
android.webkit.WebViewClient.onFormResubmission,As the host application if the browser should resend data as the requested page was a result of a POST. The default is to not resend the data.
android.webkit.WebViewClient.onFormResubmission,On form resubmission.
android.webkit.WebViewClient.onFormResubmission,As the host application if the browser should resend data as the requested page was a result of a POST.
android.webkit.WebViewClient.onFormResubmission,The default is to not resend the data.
android.webkit.WebViewClient.onLoadResource,Notify the host application that the WebView will load the resource specified by the given url.
android.webkit.WebViewClient.onLoadResource,On load resource.
android.webkit.WebViewClient.onPageFinished,Notify the host application that a page has finished loading. This method is called only for main frame. Receiving an onPageFinished() callback does not guarantee that the next frame drawn by WebView will reflect the state of the DOM at this point. In order to be notified that the current DOM state is ready to be rendered request a visual state callback with WebView#postVisualStateCallback and wait for the supplied callback to be triggered.
android.webkit.WebViewClient.onPageFinished,On page finished.
android.webkit.WebViewClient.onPageFinished,Notify the host application that a page has finished loading.
android.webkit.WebViewClient.onPageFinished,This method is called only for main frame.
android.webkit.WebViewClient.onPageFinished,Receiving an onPageFinished() callback does not guarantee that the next frame drawn by WebView will reflect the state of the DOM at this point.
android.webkit.WebViewClient.onPageFinished,In order to be notified that the current DOM state is ready to be rendered request a visual state callback with WebView#postVisualStateCallback and wait for the supplied callback to be triggered.
android.webkit.WebViewClient.onPageStarted,Notify the host application that a page has started loading. This method is called once for each main frame load so a page with iframes or framesets will call onPageStarted one time for the main frame. This also means that onPageStarted will not be called when the contents of an embedded frame changes i.e. clicking a link whose target is an iframe it will also not be called for fragment navigations (navigations to #fragment_id).
android.webkit.WebViewClient.onPageStarted,On page started.
android.webkit.WebViewClient.onPageStarted,Notify the host application that a page has started loading.
android.webkit.WebViewClient.onPageStarted,This method is called once for each main frame load so a page with iframes or framesets will call onPageStarted one time for the main frame.
android.webkit.WebViewClient.onPageStarted,This also means that onPageStarted will not be called when the contents of an embedded frame changes i.e.
android.webkit.WebViewClient.onPageStarted,clicking a link whose target is an iframe it will also not be called for fragment navigations (navigations to #fragment_id).
android.webkit.WebViewClient.onReceivedError,This method was deprecated in API level 23. Use onReceivedError(WebView WebResourceRequest WebResourceError) instead. Report an error to the host application. These errors are unrecoverable (i.e. the main resource is unavailable). The errorCode parameter corresponds to one of the ERROR_* constants.
android.webkit.WebViewClient.onReceivedError,On received error.
android.webkit.WebViewClient.onReceivedError,This method was deprecated in API level 23.
android.webkit.WebViewClient.onReceivedError,Use onReceivedError(WebView WebResourceRequest WebResourceError) instead.
android.webkit.WebViewClient.onReceivedError,Report an error to the host application.
android.webkit.WebViewClient.onReceivedError,These errors are unrecoverable (i.e.
android.webkit.WebViewClient.onReceivedError,the main resource is unavailable).
android.webkit.WebViewClient.onReceivedError,The errorCode parameter corresponds to one of the ERROR_* constants.
android.webkit.WebViewClient.onReceivedError,Report web resource loading error to the host application. These errors usually indicate inability to connect to the server. Note that unlike the deprecated version of the callback the new version will be called for any resource (iframe image etc.) not just for the main page. Thus it is recommended to perform minimum required work in this callback.
android.webkit.WebViewClient.onReceivedError,On received error.
android.webkit.WebViewClient.onReceivedError,Report web resource loading error to the host application.
android.webkit.WebViewClient.onReceivedError,These errors usually indicate inability to connect to the server.
android.webkit.WebViewClient.onReceivedError,Note that unlike the deprecated version of the callback the new version will be called for any resource (iframe image etc.) not just for the main page.
android.webkit.WebViewClient.onReceivedError,Thus it is recommended to perform minimum required work in this callback.
android.webkit.WebViewClient.onReceivedHttpAuthRequest,Notifies the host application that the WebView received an HTTP authentication request. The host application can use the supplied HttpAuthHandler to set the WebView's response to the request. The default behavior is to cancel the request.
android.webkit.WebViewClient.onReceivedHttpAuthRequest,On received http auth request.
android.webkit.WebViewClient.onReceivedHttpAuthRequest,Notifies the host application that the WebView received an HTTP authentication request.
android.webkit.WebViewClient.onReceivedHttpAuthRequest,The host application can use the supplied HttpAuthHandler to set the WebView's response to the request.
android.webkit.WebViewClient.onReceivedHttpAuthRequest,The default behavior is to cancel the request.
android.webkit.WebViewClient.onReceivedSslError,Notify the host application that an SSL error occurred while loading a resource. The host application must call either SslErrorHandler#cancel or SslErrorHandler#proceed. Note that the decision may be retained for use in response to future SSL errors. The default behavior is to cancel the load. This API is only called for recoverable SSL certificate errors. In the case of non-recoverable errors (such as when the server fails the client) WebView will call onReceivedError(android.webkit.WebView android.webkit.WebResourceRequest android.webkit.WebResourceError) with ERROR_FAILED_SSL_HANDSHAKE. Applications are advised not to prompt the user about SSL errors as the user is unlikely to be able to make an informed security decision and WebView does not provide any UI for showing the details of the error in a meaningful way. Application overrides of this method may display custom error pages or silently log issues but it is strongly recommended to always call SslErrorHandler#cancel and never allow proceeding past errors.
android.webkit.WebViewClient.onReceivedSslError,On received ssl error.
android.webkit.WebViewClient.onReceivedSslError,Notify the host application that an SSL error occurred while loading a resource.
android.webkit.WebViewClient.onReceivedSslError,The host application must call either SslErrorHandler#cancel or SslErrorHandler#proceed.
android.webkit.WebViewClient.onReceivedSslError,Note that the decision may be retained for use in response to future SSL errors.
android.webkit.WebViewClient.onReceivedSslError,The default behavior is to cancel the load.
android.webkit.WebViewClient.onReceivedSslError,This API is only called for recoverable SSL certificate errors.
android.webkit.WebViewClient.onReceivedSslError,In the case of non-recoverable errors (such as when the server fails the client) WebView will call onReceivedError(android.webkit.WebView android.webkit.WebResourceRequest android.webkit.WebResourceError) with ERROR_FAILED_SSL_HANDSHAKE.
android.webkit.WebViewClient.onReceivedSslError,Applications are advised not to prompt the user about SSL errors as the user is unlikely to be able to make an informed security decision and WebView does not provide any UI for showing the details of the error in a meaningful way.
android.webkit.WebViewClient.onReceivedSslError,Application overrides of this method may display custom error pages or silently log issues but it is strongly recommended to always call SslErrorHandler#cancel and never allow proceeding past errors.
android.webkit.WebViewClient.onScaleChanged,Notify the host application that the scale applied to the WebView has changed.
android.webkit.WebViewClient.onScaleChanged,On scale changed.
android.webkit.WebViewClient.onTooManyRedirects,This method was deprecated in API level 15. This method is no longer called. When the WebView encounters a redirect loop it will cancel the load. Notify the host application that there have been an excessive number of HTTP redirects. As the host application if it would like to continue trying to load the resource. The default behavior is to send the cancel message.
android.webkit.WebViewClient.onTooManyRedirects,On too many redirects.
android.webkit.WebViewClient.onTooManyRedirects,This method was deprecated in API level 15.
android.webkit.WebViewClient.onTooManyRedirects,This method is no longer called.
android.webkit.WebViewClient.onTooManyRedirects,When the WebView encounters a redirect loop it will cancel the load.
android.webkit.WebViewClient.onTooManyRedirects,Notify the host application that there have been an excessive number of HTTP redirects.
android.webkit.WebViewClient.onTooManyRedirects,As the host application if it would like to continue trying to load the resource.
android.webkit.WebViewClient.onTooManyRedirects,The default behavior is to send the cancel message.
android.webkit.WebViewClient.shouldInterceptRequest,Notify the host application of a resource request and allow the application to return the data. If the return value is null the WebView will continue to load the resource as usual. Otherwise the return response and data will be used. This callback is invoked for a variety of URL schemes (e.g. http(s): data: file: etc.) not only those schemes which send requests over the network. This is not called for javascript: URLs blob: URLs or for assets accessed via file:///android_asset/ or file:///android_res/ URLs. In the case of redirects this is only called for the initial resource URL not any subsequent redirect URLs. Note: This method is called on a thread other than the UI thread so clients should exercise caution when accessing private data or the view system. Note: When Safe Browsing is enabled these URLs still undergo Safe Browsing checks. If this is undesired whitelist the URL with WebView#setSafeBrowsingWhitelist or ignore the warning with onSafeBrowsingHit(WebView WebResourceRequest int SafeBrowsingResponse).
android.webkit.WebViewClient.shouldInterceptRequest,Should intercept request.
android.webkit.WebViewClient.shouldInterceptRequest,Notify the host application of a resource request and allow the application to return the data.
android.webkit.WebViewClient.shouldInterceptRequest,If the return value is null the WebView will continue to load the resource as usual.
android.webkit.WebViewClient.shouldInterceptRequest,Otherwise the return response and data will be used.
android.webkit.WebViewClient.shouldInterceptRequest,This callback is invoked for a variety of URL schemes (e.g.
android.webkit.WebViewClient.shouldInterceptRequest,http(s): data: file: etc.) not only those schemes which send requests over the network.
android.webkit.WebViewClient.shouldInterceptRequest,This is not called for javascript: URLs blob: URLs or for assets accessed via file:///android_asset/ or file:///android_res/ URLs.
android.webkit.WebViewClient.shouldInterceptRequest,In the case of redirects this is only called for the initial resource URL not any subsequent redirect URLs.
android.webkit.WebViewClient.shouldInterceptRequest,Note: This method is called on a thread other than the UI thread so clients should exercise caution when accessing private data or the view system.
android.webkit.WebViewClient.shouldInterceptRequest,Note: When Safe Browsing is enabled these URLs still undergo Safe Browsing checks.
android.webkit.WebViewClient.shouldInterceptRequest,If this is undesired whitelist the URL with WebView#setSafeBrowsingWhitelist or ignore the warning with onSafeBrowsingHit(WebView WebResourceRequest int SafeBrowsingResponse).
android.webkit.WebViewClient.shouldInterceptRequest,This method was deprecated in API level 21. Use shouldInterceptRequest(WebView WebResourceRequest) instead. Notify the host application of a resource request and allow the application to return the data. If the return value is null the WebView will continue to load the resource as usual. Otherwise the return response and data will be used. This callback is invoked for a variety of URL schemes (e.g. http(s): data: file: etc.) not only those schemes which send requests over the network. This is not called for javascript: URLs blob: URLs or for assets accessed via file:///android_asset/ or file:///android_res/ URLs. In the case of redirects this is only called for the initial resource URL not any subsequent redirect URLs. Note: This method is called on a thread other than the UI thread so clients should exercise caution when accessing private data or the view system. Note: When Safe Browsing is enabled these URLs still undergo Safe Browsing checks. If this is undesired whitelist the URL with WebView#setSafeBrowsingWhitelist or ignore the warning with onSafeBrowsingHit(WebView WebResourceRequest int SafeBrowsingResponse).
android.webkit.WebViewClient.shouldInterceptRequest,Should intercept request.
android.webkit.WebViewClient.shouldInterceptRequest,This method was deprecated in API level 21.
android.webkit.WebViewClient.shouldInterceptRequest,Use shouldInterceptRequest(WebView WebResourceRequest) instead.
android.webkit.WebViewClient.shouldInterceptRequest,Notify the host application of a resource request and allow the application to return the data.
android.webkit.WebViewClient.shouldInterceptRequest,If the return value is null the WebView will continue to load the resource as usual.
android.webkit.WebViewClient.shouldInterceptRequest,Otherwise the return response and data will be used.
android.webkit.WebViewClient.shouldInterceptRequest,This callback is invoked for a variety of URL schemes (e.g.
android.webkit.WebViewClient.shouldInterceptRequest,http(s): data: file: etc.) not only those schemes which send requests over the network.
android.webkit.WebViewClient.shouldInterceptRequest,This is not called for javascript: URLs blob: URLs or for assets accessed via file:///android_asset/ or file:///android_res/ URLs.
android.webkit.WebViewClient.shouldInterceptRequest,In the case of redirects this is only called for the initial resource URL not any subsequent redirect URLs.
android.webkit.WebViewClient.shouldInterceptRequest,Note: This method is called on a thread other than the UI thread so clients should exercise caution when accessing private data or the view system.
android.webkit.WebViewClient.shouldInterceptRequest,Note: When Safe Browsing is enabled these URLs still undergo Safe Browsing checks.
android.webkit.WebViewClient.shouldInterceptRequest,If this is undesired whitelist the URL with WebView#setSafeBrowsingWhitelist or ignore the warning with onSafeBrowsingHit(WebView WebResourceRequest int SafeBrowsingResponse).
android.webkit.WebViewClient.shouldOverrideKeyEvent,Give the host application a chance to handle the key event synchronously. e.g. menu shortcut key events need to be filtered this way. If return true WebView will not handle the key event. If return false WebView will always handle the key event so none of the super in the view chain will see the key event. The default behavior returns false.
android.webkit.WebViewClient.shouldOverrideKeyEvent,Should override key event.
android.webkit.WebViewClient.shouldOverrideKeyEvent,Give the host application a chance to handle the key event synchronously.
android.webkit.WebViewClient.shouldOverrideKeyEvent,e.g.
android.webkit.WebViewClient.shouldOverrideKeyEvent,menu shortcut key events need to be filtered this way.
android.webkit.WebViewClient.shouldOverrideKeyEvent,If return true WebView will not handle the key event.
android.webkit.WebViewClient.shouldOverrideKeyEvent,If return false WebView will always handle the key event so none of the super in the view chain will see the key event.
android.webkit.WebViewClient.shouldOverrideKeyEvent,The default behavior returns false.
android.webkit.WebViewClient.shouldOverrideUrlLoading,Give the host application a chance to take control when a URL is about to be loaded in the current WebView. If a WebViewClient is not provided by default WebView will ask Activity Manager to choose the proper handler for the URL. If a WebViewClient is provided returning true causes the current WebView to abort loading the URL while returning false causes the WebView to continue loading the URL as usual. Note: Do not call WebView#loadUrl(String) with the request's URL and then return true. This unnecessarily cancels the current load and starts a new load with the same URL. The correct way to continue loading a given URL is to simply return false without calling WebView#loadUrl(String). Note: This method is not called for POST requests. Note: This method may be called for subframes and with non-HTTP(S) schemes; calling WebView#loadUrl(String) with such a URL will fail.
android.webkit.WebViewClient.shouldOverrideUrlLoading,Should override url loading.
android.webkit.WebViewClient.shouldOverrideUrlLoading,Give the host application a chance to take control when a URL is about to be loaded in the current WebView.
android.webkit.WebViewClient.shouldOverrideUrlLoading,If a WebViewClient is not provided by default WebView will ask Activity Manager to choose the proper handler for the URL.
android.webkit.WebViewClient.shouldOverrideUrlLoading,If a WebViewClient is provided returning true causes the current WebView to abort loading the URL while returning false causes the WebView to continue loading the URL as usual.
android.webkit.WebViewClient.shouldOverrideUrlLoading,Note: Do not call WebView#loadUrl(String) with the request's URL and then return true.
android.webkit.WebViewClient.shouldOverrideUrlLoading,This unnecessarily cancels the current load and starts a new load with the same URL.
android.webkit.WebViewClient.shouldOverrideUrlLoading,The correct way to continue loading a given URL is to simply return false without calling WebView#loadUrl(String).
android.webkit.WebViewClient.shouldOverrideUrlLoading,Note: This method is not called for POST requests.
android.webkit.WebViewClient.shouldOverrideUrlLoading,Note: This method may be called for subframes and with non-HTTP(S) schemes; calling WebView#loadUrl(String) with such a URL will fail.
android.webkit.WebViewClient.shouldOverrideUrlLoading,This method was deprecated in API level 24. Use shouldOverrideUrlLoading(WebView WebResourceRequest) instead. Give the host application a chance to take control when a URL is about to be loaded in the current WebView. If a WebViewClient is not provided by default WebView will ask Activity Manager to choose the proper handler for the URL. If a WebViewClient is provided returning true causes the current WebView to abort loading the URL while returning false causes the WebView to continue loading the URL as usual. Note: Do not call WebView#loadUrl(String) with the same URL and then return true. This unnecessarily cancels the current load and starts a new load with the same URL. The correct way to continue loading a given URL is to simply return false without calling WebView#loadUrl(String). Note: This method is not called for POST requests. Note: This method may be called for subframes and with non-HTTP(S) schemes; calling WebView#loadUrl(String) with such a URL will fail.
android.webkit.WebViewClient.shouldOverrideUrlLoading,Should override url loading.
android.webkit.WebViewClient.shouldOverrideUrlLoading,This method was deprecated in API level 24.
android.webkit.WebViewClient.shouldOverrideUrlLoading,Use shouldOverrideUrlLoading(WebView WebResourceRequest) instead.
android.webkit.WebViewClient.shouldOverrideUrlLoading,Give the host application a chance to take control when a URL is about to be loaded in the current WebView.
android.webkit.WebViewClient.shouldOverrideUrlLoading,If a WebViewClient is not provided by default WebView will ask Activity Manager to choose the proper handler for the URL.
android.webkit.WebViewClient.shouldOverrideUrlLoading,If a WebViewClient is provided returning true causes the current WebView to abort loading the URL while returning false causes the WebView to continue loading the URL as usual.
android.webkit.WebViewClient.shouldOverrideUrlLoading,Note: Do not call WebView#loadUrl(String) with the same URL and then return true.
android.webkit.WebViewClient.shouldOverrideUrlLoading,This unnecessarily cancels the current load and starts a new load with the same URL.
android.webkit.WebViewClient.shouldOverrideUrlLoading,The correct way to continue loading a given URL is to simply return false without calling WebView#loadUrl(String).
android.webkit.WebViewClient.shouldOverrideUrlLoading,Note: This method is not called for POST requests.
android.webkit.WebViewClient.shouldOverrideUrlLoading,Note: This method may be called for subframes and with non-HTTP(S) schemes; calling WebView#loadUrl(String) with such a URL will fail.
android.webkit.WebViewDatabase.clearFormData,Clears any saved data for web forms.
android.webkit.WebViewDatabase.clearFormData,Clear form data.
android.webkit.WebViewDatabase.clearHttpAuthUsernamePassword,Clears any saved credentials for HTTP authentication. This method only clears the username and password stored in WebViewDatabase instance. The username and password are not read from the WebViewDatabase during WebViewClient#onReceivedHttpAuthRequest. It is up to the app to do this or not. The username and password used for http authentication might be cached in the network stack itself and are not cleared when this method is called. WebView does not provide a special mechanism to clear HTTP authentication for implementing client logout. The client logout mechanism should be implemented by the Web site designer (such as server sending a HTTP 401 for invalidating credentials).
android.webkit.WebViewDatabase.clearHttpAuthUsernamePassword,Clear http auth username password.
android.webkit.WebViewDatabase.clearHttpAuthUsernamePassword,Clears any saved credentials for HTTP authentication.
android.webkit.WebViewDatabase.clearHttpAuthUsernamePassword,This method only clears the username and password stored in WebViewDatabase instance.
android.webkit.WebViewDatabase.clearHttpAuthUsernamePassword,The username and password are not read from the WebViewDatabase during WebViewClient#onReceivedHttpAuthRequest.
android.webkit.WebViewDatabase.clearHttpAuthUsernamePassword,It is up to the app to do this or not.
android.webkit.WebViewDatabase.clearHttpAuthUsernamePassword,The username and password used for http authentication might be cached in the network stack itself and are not cleared when this method is called.
android.webkit.WebViewDatabase.clearHttpAuthUsernamePassword,WebView does not provide a special mechanism to clear HTTP authentication for implementing client logout.
android.webkit.WebViewDatabase.clearHttpAuthUsernamePassword,The client logout mechanism should be implemented by the Web site designer (such as server sending a HTTP 401 for invalidating credentials).
android.widget.AbsListView.setAdapter,Sets the adapter that provides the data and the views to represent the data in this widget.
android.widget.AbsListView.setAdapter,Set adapter.
android.widget.AbsListView.setChoiceMode,Defines the choice behavior for the List. By default Lists do not have any choice behavior ( CHOICE_MODE_NONE ). By setting the choiceMode to CHOICE_MODE_SINGLE the List allows up to one item to be in a chosen state. By setting the choiceMode to CHOICE_MODE_MULTIPLE the list allows any number of items to be chosen.
android.widget.AbsListView.setChoiceMode,Set choice mode.
android.widget.AbsListView.setChoiceMode,Defines the choice behavior for the List.
android.widget.AbsListView.setChoiceMode,By default Lists do not have any choice behavior ( CHOICE_MODE_NONE ).
android.widget.AbsListView.setChoiceMode,By setting the choiceMode to CHOICE_MODE_SINGLE the List allows up to one item to be in a chosen state.
android.widget.AbsListView.setChoiceMode,By setting the choiceMode to CHOICE_MODE_MULTIPLE the list allows any number of items to be chosen.
android.widget.AbsListView.smoothScrollBy,Smoothly scroll by distance pixels over duration milliseconds.
android.widget.AbsListView.smoothScrollBy,Smooth scroll by.
android.widget.AlphabetIndexer.getPositionForSection,Performs a binary search or cache lookup to find the first row that matches a given section's starting letter.
android.widget.AlphabetIndexer.getPositionForSection,Get position for section.
android.widget.AlphabetIndexer.getSectionForPosition,Returns the section index for a given position in the list by querying the item and comparing it with all items in the section array.
android.widget.AlphabetIndexer.getSectionForPosition,Get section for position.
android.widget.AlphabetIndexer.getSections,Returns the section array constructed from the alphabet provided in the constructor.
android.widget.AlphabetIndexer.getSections,Get sections.
android.widget.AutoCompleteTextView.dismissDropDown,Closes the drop down if present on screen.
android.widget.AutoCompleteTextView.dismissDropDown,Dismiss drop down.
android.widget.AutoCompleteTextView.enoughToFilter,Returns true if the amount of text in the field meets or exceeds the getThreshold() requirement. You can override this to impose a different standard for when filtering will be triggered.
android.widget.AutoCompleteTextView.enoughToFilter,Enough to filter.
android.widget.AutoCompleteTextView.enoughToFilter,Returns true if the amount of text in the field meets or exceeds the getThreshold() requirement.
android.widget.AutoCompleteTextView.enoughToFilter,You can override this to impose a different standard for when filtering will be triggered.
android.widget.AutoCompleteTextView.onFilterComplete,Notifies the end of a filtering operation.
android.widget.AutoCompleteTextView.onFilterComplete,On filter complete.
android.widget.AutoCompleteTextView.onKeyPreIme,Handle a key event before it is processed by any input method associated with the view hierarchy. This can be used to intercept key events in special situations before the IME consumes them; a typical example would be handling the BACK key to update the application's UI instead of allowing the IME to see it and close itself.
android.widget.AutoCompleteTextView.onKeyPreIme,On key pre ime.
android.widget.AutoCompleteTextView.onKeyPreIme,Handle a key event before it is processed by any input method associated with the view hierarchy.
android.widget.AutoCompleteTextView.onKeyPreIme,This can be used to intercept key events in special situations before the IME consumes them; a typical example would be handling the BACK key to update the application's UI instead of allowing the IME to see it and close itself.
android.widget.AutoCompleteTextView.setThreshold,Specifies the minimum number of characters the user has to type in the edit box before the drop down list is shown. When threshold is less than or equals 0 a threshold of 1 is applied. Related XML Attributes: android:completionThreshold.
android.widget.AutoCompleteTextView.setThreshold,Set threshold.
android.widget.AutoCompleteTextView.setThreshold,Specifies the minimum number of characters the user has to type in the edit box before the drop down list is shown.
android.widget.AutoCompleteTextView.setThreshold,When threshold is less than or equals 0 a threshold of 1 is applied.
android.widget.AutoCompleteTextView.setThreshold,Related XML Attributes: android:completionThreshold.
android.widget.AutoCompleteTextView.showDropDown,Displays the drop down on screen.
android.widget.AutoCompleteTextView.showDropDown,Show drop down.
android.widget.BaseAdapter.areAllItemsEnabled,Indicates whether all the items in this adapter are enabled. If the value returned by this method changes over time there is no guarantee it will take effect. If true it means all items are selectable and clickable (there is no separator.).
android.widget.BaseAdapter.areAllItemsEnabled,Are all items enabled.
android.widget.BaseAdapter.areAllItemsEnabled,Indicates whether all the items in this adapter are enabled.
android.widget.BaseAdapter.areAllItemsEnabled,If the value returned by this method changes over time there is no guarantee it will take effect.
android.widget.BaseAdapter.areAllItemsEnabled,If true it means all items are selectable and clickable (there is no separator.).
android.widget.BaseAdapter.getDropDownView,Gets a View that displays in the drop down popup the data at the specified position in the data set.
android.widget.BaseAdapter.getDropDownView,Get drop down view.
android.widget.BaseAdapter.isEnabled,Returns true if the item at the specified position is not a separator. (A separator is a non-selectable non-clickable item). The result is unspecified if position is invalid. An ArrayIndexOutOfBoundsException should be thrown in that case for fast failure.
android.widget.BaseAdapter.isEnabled,Is enabled.
android.widget.BaseAdapter.isEnabled,Returns true if the item at the specified position is not a separator.
android.widget.BaseAdapter.isEnabled,(A separator is a non-selectable non-clickable item).
android.widget.BaseAdapter.isEnabled,The result is unspecified if position is invalid.
android.widget.BaseAdapter.isEnabled,An ArrayIndexOutOfBoundsException should be thrown in that case for fast failure.
android.widget.BaseAdapter.notifyDataSetChanged,Notifies the attached observers that the underlying data has been changed and any View reflecting the data set should refresh itself.
android.widget.BaseAdapter.notifyDataSetChanged,Notify data set changed.
android.widget.BaseAdapter.notifyDataSetInvalidated,Notifies the attached observers that the underlying data is no longer valid or available. Once invoked this adapter is no longer valid and should not report further data set changes.
android.widget.BaseAdapter.notifyDataSetInvalidated,Notify data set invalidated.
android.widget.BaseAdapter.notifyDataSetInvalidated,Notifies the attached observers that the underlying data is no longer valid or available.
android.widget.BaseAdapter.notifyDataSetInvalidated,Once invoked this adapter is no longer valid and should not report further data set changes.
android.widget.BaseExpandableListAdapter.getCombinedChildId,Override this method if you foresee a clash in IDs based on this scheme: Base implementation returns a long:.
android.widget.BaseExpandableListAdapter.getCombinedChildId,Get combined child id.
android.widget.BaseExpandableListAdapter.onGroupCollapsed,Called when a group is collapsed.
android.widget.BaseExpandableListAdapter.onGroupCollapsed,On group collapsed.
android.widget.BaseExpandableListAdapter.onGroupExpanded,Called when a group is expanded.
android.widget.BaseExpandableListAdapter.onGroupExpanded,On group expanded.
android.widget.CheckedTextView.setCheckMarkDrawable,Set the check mark to the specified drawable. When this view is checked the drawable's state set will include R.attr.state_checked. Related XML Attributes: android:checkMark.
android.widget.CheckedTextView.setCheckMarkDrawable,Set check mark drawable.
android.widget.CheckedTextView.setCheckMarkDrawable,Set the check mark to the specified drawable.
android.widget.CheckedTextView.setCheckMarkDrawable,When this view is checked the drawable's state set will include R.attr.state_checked.
android.widget.CheckedTextView.setCheckMarkDrawable,Related XML Attributes: android:checkMark.
android.widget.CheckedTextView.setCheckMarkDrawable,Sets the check mark to the drawable with the specified resource ID. When this view is checked the drawable's state set will include R.attr.state_checked. Related XML Attributes: android:checkMark.
android.widget.CheckedTextView.setCheckMarkDrawable,Set check mark drawable.
android.widget.CheckedTextView.setCheckMarkDrawable,Sets the check mark to the drawable with the specified resource ID.
android.widget.CheckedTextView.setCheckMarkDrawable,When this view is checked the drawable's state set will include R.attr.state_checked.
android.widget.CheckedTextView.setCheckMarkDrawable,Related XML Attributes: android:checkMark.
android.widget.CheckedTextView.setChecked,Sets the checked state of this view.
android.widget.CheckedTextView.setChecked,Set checked.
android.widget.CompoundButton.getCompoundPaddingRight,Returns the right padding of the view plus space for the right Drawable if any.
android.widget.CompoundButton.getCompoundPaddingRight,Get compound padding right.
android.widget.CompoundButton.setChecked,Changes the checked state of this button.
android.widget.CompoundButton.setChecked,Set checked.
android.widget.CursorAdapter.getFilter,Returns a filter that can be used to constrain data with a filtering pattern. This method is usually implemented by Adapter classes.
android.widget.CursorAdapter.getFilter,Get filter.
android.widget.CursorAdapter.getFilter,Returns a filter that can be used to constrain data with a filtering pattern.
android.widget.CursorAdapter.getFilter,This method is usually implemented by Adapter classes.
android.widget.CursorAdapter.setFilterQueryProvider,Sets the query filter provider used to filter the current Cursor. The provider's FilterQueryProvider.runQuery(CharSequence) method is invoked when filtering is requested by a client of this adapter.
android.widget.CursorAdapter.setFilterQueryProvider,Set filter query provider.
android.widget.CursorAdapter.setFilterQueryProvider,Sets the query filter provider used to filter the current Cursor.
android.widget.CursorAdapter.setFilterQueryProvider,The provider's FilterQueryProvider.runQuery(CharSequence) method is invoked when filtering is requested by a client of this adapter.
android.widget.EdgeEffect.isFinished,Reports if this EdgeEffect's animation is finished. If this method returns false after a call to draw(android.graphics.Canvas) the host widget should schedule another drawing pass to continue the animation.
android.widget.EdgeEffect.isFinished,Is finished.
android.widget.EdgeEffect.isFinished,Reports if this EdgeEffect's animation is finished.
android.widget.EdgeEffect.isFinished,If this method returns false after a call to draw(android.graphics.Canvas) the host widget should schedule another drawing pass to continue the animation.
android.widget.EdgeEffect.onAbsorb,Call when the effect absorbs an impact at the given velocity. Used when a fling reaches the scroll boundary. When using a Scroller or OverScroller the method getCurrVelocity will provide a reasonable approximation to use here.
android.widget.EdgeEffect.onAbsorb,On absorb.
android.widget.EdgeEffect.onAbsorb,Call when the effect absorbs an impact at the given velocity.
android.widget.EdgeEffect.onAbsorb,Used when a fling reaches the scroll boundary.
android.widget.EdgeEffect.onAbsorb,When using a Scroller or OverScroller the method getCurrVelocity will provide a reasonable approximation to use here.
android.widget.EditText.getText,Return the text that TextView is displaying. If setText(java.lang.CharSequence) was called with an argument of BufferType.SPANNABLE or BufferType.EDITABLE you can cast the return value from this method to Spannable or Editable respectively. The content of the return value should not be modified. If you want a modifiable one you should make your own copy first.
android.widget.EditText.getText,Get text.
android.widget.EditText.getText,Return the text that TextView is displaying.
android.widget.EditText.getText,If setText(java.lang.CharSequence) was called with an argument of BufferType.SPANNABLE or BufferType.EDITABLE you can cast the return value from this method to Spannable or Editable respectively.
android.widget.EditText.getText,The content of the return value should not be modified.
android.widget.EditText.getText,If you want a modifiable one you should make your own copy first.
android.widget.EditText.selectAll,Convenience for Selection#selectAll.
android.widget.EditText.selectAll,Select all.
android.widget.EditText.setSelection,Convenience for Selection#setSelection(Spannable int int).
android.widget.EditText.setSelection,Set selection.
android.widget.EditText.setSelection,Convenience for Selection#setSelection(Spannable int).
android.widget.EditText.setSelection,Set selection.
android.widget.ExpandableListView.collapseGroup,Collapse a group in the grouped list view.
android.widget.ExpandableListView.collapseGroup,Collapse group.
android.widget.ExpandableListView.expandGroup,Expand a group in the grouped list view.
android.widget.ExpandableListView.expandGroup,Expand group.
android.widget.ExpandableListView.expandGroup,Expand a group in the grouped list view.
android.widget.ExpandableListView.expandGroup,Expand group.
android.widget.ExpandableListView.getPackedPositionChild,Gets the child position from a packed position that is of PACKED_POSITION_TYPE_CHILD type (use getPackedPositionType(long) ). To get the group that this child belongs to use getPackedPositionGroup(long). See getPackedPositionForChild(int int).
android.widget.ExpandableListView.getPackedPositionChild,Get packed position child.
android.widget.ExpandableListView.getPackedPositionChild,Gets the child position from a packed position that is of PACKED_POSITION_TYPE_CHILD type (use getPackedPositionType(long) ).
android.widget.ExpandableListView.getPackedPositionChild,To get the group that this child belongs to use getPackedPositionGroup(long).
android.widget.ExpandableListView.getPackedPositionChild,See getPackedPositionForChild(int int).
android.widget.ExpandableListView.getPackedPositionGroup,Gets the group position from a packed position. See getPackedPositionForChild(int int).
android.widget.ExpandableListView.getPackedPositionGroup,Get packed position group.
android.widget.ExpandableListView.getPackedPositionGroup,Gets the group position from a packed position.
android.widget.ExpandableListView.getPackedPositionGroup,See getPackedPositionForChild(int int).
android.widget.ExpandableListView.isGroupExpanded,Whether the given group is currently expanded.
android.widget.ExpandableListView.isGroupExpanded,Is group expanded.
android.widget.ExpandableListView.setAdapter,This overloaded method should not be used instead use setAdapter(android.widget.ExpandableListAdapter). Sets the data behind this ListView. The adapter passed to this method may be wrapped by a WrapperListAdapter depending on the ListView features currently in use. For instance adding headers and/or footers will cause the adapter to be wrapped.
android.widget.ExpandableListView.setAdapter,Set adapter.
android.widget.ExpandableListView.setAdapter,This overloaded method should not be used instead use setAdapter(android.widget.ExpandableListAdapter).
android.widget.ExpandableListView.setAdapter,Sets the data behind this ListView.
android.widget.ExpandableListView.setAdapter,The adapter passed to this method may be wrapped by a WrapperListAdapter depending on the ListView features currently in use.
android.widget.ExpandableListView.setAdapter,For instance adding headers and/or footers will cause the adapter to be wrapped.
android.widget.ExpandableListView.setAdapter,Sets the adapter that provides data to this view.
android.widget.ExpandableListView.setAdapter,Set adapter.
android.widget.Filter.filter,Starts an asynchronous filtering operation. Calling this method cancels all previous non-executed filtering requests and posts a new filtering request that will be executed later.
android.widget.Filter.filter,Filter.
android.widget.Filter.filter,Starts an asynchronous filtering operation.
android.widget.Filter.filter,Calling this method cancels all previous non-executed filtering requests and posts a new filtering request that will be executed later.
android.widget.Filter.filter,Starts an asynchronous filtering operation. Calling this method cancels all previous non-executed filtering requests and posts a new filtering request that will be executed later. Upon completion the listener is notified.
android.widget.Filter.filter,Filter.
android.widget.Filter.filter,Starts an asynchronous filtering operation.
android.widget.Filter.filter,Calling this method cancels all previous non-executed filtering requests and posts a new filtering request that will be executed later.
android.widget.Filter.filter,Upon completion the listener is notified.
android.widget.GridView.getAdapter,Returns the adapter currently associated with this widget.
android.widget.GridView.getAdapter,Get adapter.
android.widget.GridView.getNumColumns,Get the number of columns in the grid. Returns AUTO_FIT if the Grid has never been laid out. Related XML Attributes: android:numColumns.
android.widget.GridView.getNumColumns,Get num columns.
android.widget.GridView.getNumColumns,Get the number of columns in the grid.
android.widget.GridView.getNumColumns,Returns AUTO_FIT if the Grid has never been laid out.
android.widget.GridView.getNumColumns,Related XML Attributes: android:numColumns.
android.widget.GridView.setAdapter,Sets the data behind this GridView.
android.widget.GridView.setAdapter,Set adapter.
android.widget.GridView.setColumnWidth,Set the width of columns in the grid. Related XML Attributes: android:columnWidth.
android.widget.GridView.setColumnWidth,Set column width.
android.widget.GridView.setColumnWidth,Set the width of columns in the grid.
android.widget.GridView.setColumnWidth,Related XML Attributes: android:columnWidth.
android.widget.GridView.setNumColumns,Set the number of columns in the grid Related XML Attributes: android:numColumns.
android.widget.GridView.setNumColumns,Set num columns.
android.widget.GridView.setVerticalSpacing,Set the amount of vertical (y) spacing to place between each item in the grid. Related XML Attributes: android:verticalSpacing.
android.widget.GridView.setVerticalSpacing,Set vertical spacing.
android.widget.GridView.setVerticalSpacing,Set the amount of vertical (y) spacing to place between each item in the grid.
android.widget.GridView.setVerticalSpacing,Related XML Attributes: android:verticalSpacing.
android.widget.HeaderViewListAdapter.getWrappedAdapter,Returns the adapter wrapped by this list adapter.
android.widget.HeaderViewListAdapter.getWrappedAdapter,Get wrapped adapter.
android.widget.HorizontalScrollView.fullScroll,"Handles scrolling in response to a ""home/end"" shortcut press. This method will scroll the view to the left or right and give the focus to the leftmost/rightmost component in the new visible area. If no component is a good candidate for focus this scrollview reclaims the focus."
android.widget.HorizontalScrollView.fullScroll,Full scroll.
android.widget.HorizontalScrollView.fullScroll,"Handles scrolling in response to a ""home/end"" shortcut press."
android.widget.HorizontalScrollView.fullScroll,This method will scroll the view to the left or right and give the focus to the leftmost/rightmost component in the new visible area.
android.widget.HorizontalScrollView.fullScroll,If no component is a good candidate for focus this scrollview reclaims the focus.
android.widget.HorizontalScrollView.setFillViewport,Indicates this HorizontalScrollView whether it should stretch its content width to fill the viewport or not. Related XML Attributes: android:fillViewport.
android.widget.HorizontalScrollView.setFillViewport,Set fill viewport.
android.widget.HorizontalScrollView.setFillViewport,Indicates this HorizontalScrollView whether it should stretch its content width to fill the viewport or not.
android.widget.HorizontalScrollView.setFillViewport,Related XML Attributes: android:fillViewport.
android.widget.HorizontalScrollView.setSmoothScrollingEnabled,Set whether arrow scrolling will animate its transition.
android.widget.HorizontalScrollView.setSmoothScrollingEnabled,Set smooth scrolling enabled.
android.widget.HorizontalScrollView.smoothScrollTo,Like scrollTo(int int) but scroll smoothly instead of immediately.
android.widget.HorizontalScrollView.smoothScrollTo,Smooth scroll to.
android.widget.ImageView.getDrawable,Gets the current Drawable or null if no Drawable has been assigned.
android.widget.ImageView.getDrawable,Get drawable.
android.widget.ImageView.getImageMatrix,Returns the view's optional matrix. This is applied to the view's drawable when it is drawn. If there is no matrix this method will return an identity matrix. Do not change this matrix in place but make a copy. If you want a different matrix applied to the drawable be sure to call setImageMatrix().
android.widget.ImageView.getImageMatrix,Get image matrix.
android.widget.ImageView.getImageMatrix,Returns the view's optional matrix.
android.widget.ImageView.getImageMatrix,This is applied to the view's drawable when it is drawn.
android.widget.ImageView.getImageMatrix,If there is no matrix this method will return an identity matrix.
android.widget.ImageView.getImageMatrix,Do not change this matrix in place but make a copy.
android.widget.ImageView.getImageMatrix,If you want a different matrix applied to the drawable be sure to call setImageMatrix().
android.widget.ImageView.getScaleType,Returns the current ScaleType that is used to scale the bounds of an image to the bounds of the ImageView. Related XML Attributes: android:scaleType.
android.widget.ImageView.getScaleType,Get scale type.
android.widget.ImageView.getScaleType,Returns the current ScaleType that is used to scale the bounds of an image to the bounds of the ImageView.
android.widget.ImageView.getScaleType,Related XML Attributes: android:scaleType.
android.widget.ImageView.onCreateDrawableState,Generate the new Drawable state for this view. This is called by the view system when the cached Drawable state is determined to be invalid. To retrieve the current state you should use getDrawableState().
android.widget.ImageView.onCreateDrawableState,On create drawable state.
android.widget.ImageView.onCreateDrawableState,Generate the new Drawable state for this view.
android.widget.ImageView.onCreateDrawableState,This is called by the view system when the cached Drawable state is determined to be invalid.
android.widget.ImageView.onCreateDrawableState,To retrieve the current state you should use getDrawableState().
android.widget.ImageView.setAdjustViewBounds,Set this to true if you want the ImageView to adjust its bounds to preserve the aspect ratio of its drawable. Note: If the application targets API level 17 or lower adjustViewBounds will allow the drawable to shrink the view bounds but not grow to fill available measured space in all cases. This is for compatibility with legacy MeasureSpec and RelativeLayout behavior. Related XML Attributes: android:adjustViewBounds.
android.widget.ImageView.setAdjustViewBounds,Set adjust view bounds.
android.widget.ImageView.setAdjustViewBounds,Set this to true if you want the ImageView to adjust its bounds to preserve the aspect ratio of its drawable.
android.widget.ImageView.setAdjustViewBounds,Note: If the application targets API level 17 or lower adjustViewBounds will allow the drawable to shrink the view bounds but not grow to fill available measured space in all cases.
android.widget.ImageView.setAdjustViewBounds,This is for compatibility with legacy MeasureSpec and RelativeLayout behavior.
android.widget.ImageView.setAdjustViewBounds,Related XML Attributes: android:adjustViewBounds.
android.widget.ImageView.setAlpha,This method was deprecated in API level 16. use #setImageAlpha(int) instead Sets the alpha value that should be applied to the image.
android.widget.ImageView.setAlpha,Set alpha.
android.widget.ImageView.setAlpha,This method was deprecated in API level 16.
android.widget.ImageView.setAlpha,use #setImageAlpha(int) instead Sets the alpha value that should be applied to the image.
android.widget.ImageView.setColorFilter,Sets a tinting option for the image. Related XML Attributes: android:tint.
android.widget.ImageView.setColorFilter,Set color filter.
android.widget.ImageView.setColorFilter,Sets a tinting option for the image.
android.widget.ImageView.setColorFilter,Related XML Attributes: android:tint.
android.widget.ImageView.setColorFilter,Apply an arbitrary colorfilter to the image.
android.widget.ImageView.setColorFilter,Set color filter.
android.widget.ImageView.setColorFilter,Set a tinting option for the image. Assumes PorterDuff.Mode#SRC_ATOP blending mode. Related XML Attributes: android:tint.
android.widget.ImageView.setColorFilter,Set color filter.
android.widget.ImageView.setColorFilter,Set a tinting option for the image.
android.widget.ImageView.setColorFilter,Assumes PorterDuff.Mode#SRC_ATOP blending mode.
android.widget.ImageView.setColorFilter,Related XML Attributes: android:tint.
android.widget.ImageView.setImageAlpha,Sets the alpha value that should be applied to the image.
android.widget.ImageView.setImageAlpha,Set image alpha.
android.widget.ImageView.setImageBitmap,Sets a Bitmap as the content of this ImageView.
android.widget.ImageView.setImageBitmap,Set image bitmap.
android.widget.ImageView.setImageLevel,Sets the image level when it is constructed from a LevelListDrawable.
android.widget.ImageView.setImageLevel,Set image level.
android.widget.ImageView.setImageResource,Sets a drawable as the content of this ImageView. This does Bitmap reading and decoding on the UI thread which can cause a latency hiccup. If that's a concern consider using setImageDrawable(android.graphics.drawable.Drawable) or setImageBitmap(android.graphics.Bitmap) and BitmapFactory instead. Related XML Attributes: android:src.
android.widget.ImageView.setImageResource,Set image resource.
android.widget.ImageView.setImageResource,Sets a drawable as the content of this ImageView.
android.widget.ImageView.setImageResource,This does Bitmap reading and decoding on the UI thread which can cause a latency hiccup.
android.widget.ImageView.setImageResource,If that's a concern consider using setImageDrawable(android.graphics.drawable.Drawable) or setImageBitmap(android.graphics.Bitmap) and BitmapFactory instead.
android.widget.ImageView.setImageResource,Related XML Attributes: android:src.
android.widget.ImageView.setImageURI,Sets the content of this ImageView to the specified Uri. Note that you use this method to load images from a local Uri only. This does Bitmap reading and decoding on the UI thread which can cause a latency hiccup. If that's a concern consider using setImageDrawable(android.graphics.drawable.Drawable) or setImageBitmap(android.graphics.Bitmap) and BitmapFactory instead. On devices running SDK < 24 this method will fail to apply correct density scaling to images loaded from ContentResolver#SCHEME_CONTENT and ContentResolver#SCHEME_FILE schemes. Applications running on devices with SDK >= 24 MUST specify the targetSdkVersion in their manifest as 24 or above for density scaling to be applied to images loaded from these schemes.
android.widget.ImageView.setImageURI,Set image u r i.
android.widget.ImageView.setImageURI,Sets the content of this ImageView to the specified Uri.
android.widget.ImageView.setImageURI,Note that you use this method to load images from a local Uri only.
android.widget.ImageView.setImageURI,This does Bitmap reading and decoding on the UI thread which can cause a latency hiccup.
android.widget.ImageView.setImageURI,If that's a concern consider using setImageDrawable(android.graphics.drawable.Drawable) or setImageBitmap(android.graphics.Bitmap) and BitmapFactory instead.
android.widget.ImageView.setImageURI,On devices running SDK < 24 this method will fail to apply correct density scaling to images loaded from ContentResolver#SCHEME_CONTENT and ContentResolver#SCHEME_FILE schemes.
android.widget.ImageView.setImageURI,Applications running on devices with SDK >= 24 MUST specify the targetSdkVersion in their manifest as 24 or above for density scaling to be applied to images loaded from these schemes.
android.widget.ImageView.setMaxHeight,An optional argument to supply a maximum height for this view. Only valid if setAdjustViewBounds(boolean) has been set to true. To set an image to be a maximum of 100 x 100 while preserving the original aspect ratio do the following: 1) set adjustViewBounds to true 2) set maxWidth and maxHeight to 100 3) set the height and width layout params to WRAP_CONTENT. Note that this view could be still smaller than 100 x 100 using this approach if the original image is small. To set an image to a fixed size specify that size in the layout params and then use setScaleType(android.widget.ImageView.ScaleType) to determine how to fit the image within the bounds. Related XML Attributes: android:maxHeight.
android.widget.ImageView.setMaxHeight,Set max height.
android.widget.ImageView.setMaxHeight,An optional argument to supply a maximum height for this view.
android.widget.ImageView.setMaxHeight,Only valid if setAdjustViewBounds(boolean) has been set to true.
android.widget.ImageView.setMaxHeight,To set an image to be a maximum of 100 x 100 while preserving the original aspect ratio do the following: 1) set adjustViewBounds to true 2) set maxWidth and maxHeight to 100 3) set the height and width layout params to WRAP_CONTENT.
android.widget.ImageView.setMaxHeight,Note that this view could be still smaller than 100 x 100 using this approach if the original image is small.
android.widget.ImageView.setMaxHeight,To set an image to a fixed size specify that size in the layout params and then use setScaleType(android.widget.ImageView.ScaleType) to determine how to fit the image within the bounds.
android.widget.ImageView.setMaxHeight,Related XML Attributes: android:maxHeight.
android.widget.ImageView.setMaxWidth,An optional argument to supply a maximum width for this view. Only valid if setAdjustViewBounds(boolean) has been set to true. To set an image to be a maximum of 100 x 100 while preserving the original aspect ratio do the following: 1) set adjustViewBounds to true 2) set maxWidth and maxHeight to 100 3) set the height and width layout params to WRAP_CONTENT. Note that this view could be still smaller than 100 x 100 using this approach if the original image is small. To set an image to a fixed size specify that size in the layout params and then use setScaleType(android.widget.ImageView.ScaleType) to determine how to fit the image within the bounds. Related XML Attributes: android:maxWidth.
android.widget.ImageView.setMaxWidth,Set max width.
android.widget.ImageView.setMaxWidth,An optional argument to supply a maximum width for this view.
android.widget.ImageView.setMaxWidth,Only valid if setAdjustViewBounds(boolean) has been set to true.
android.widget.ImageView.setMaxWidth,To set an image to be a maximum of 100 x 100 while preserving the original aspect ratio do the following: 1) set adjustViewBounds to true 2) set maxWidth and maxHeight to 100 3) set the height and width layout params to WRAP_CONTENT.
android.widget.ImageView.setMaxWidth,Note that this view could be still smaller than 100 x 100 using this approach if the original image is small.
android.widget.ImageView.setMaxWidth,To set an image to a fixed size specify that size in the layout params and then use setScaleType(android.widget.ImageView.ScaleType) to determine how to fit the image within the bounds.
android.widget.ImageView.setMaxWidth,Related XML Attributes: android:maxWidth.
android.widget.LinearLayout.setDividerDrawable,Set a drawable to be used as a divider between items. Related XML Attributes: android:divider.
android.widget.LinearLayout.setDividerDrawable,Set divider drawable.
android.widget.LinearLayout.setDividerDrawable,Set a drawable to be used as a divider between items.
android.widget.LinearLayout.setDividerDrawable,Related XML Attributes: android:divider.
android.widget.LinearLayout.setGravity,Describes how the child views are positioned. Defaults to GRAVITY_TOP. If this layout has a VERTICAL orientation this controls where all the child views are placed if there is extra vertical space. If this layout has a HORIZONTAL orientation this controls the alignment of the children. Related XML Attributes: android:gravity.
android.widget.LinearLayout.setGravity,Set gravity.
android.widget.LinearLayout.setGravity,Describes how the child views are positioned.
android.widget.LinearLayout.setGravity,Defaults to GRAVITY_TOP.
android.widget.LinearLayout.setGravity,If this layout has a VERTICAL orientation this controls where all the child views are placed if there is extra vertical space.
android.widget.LinearLayout.setGravity,If this layout has a HORIZONTAL orientation this controls the alignment of the children.
android.widget.LinearLayout.setGravity,Related XML Attributes: android:gravity.
android.widget.LinearLayout.setOrientation,Should the layout be a column or a row. Related XML Attributes: android:orientation.
android.widget.LinearLayout.setOrientation,Set orientation.
android.widget.LinearLayout.setOrientation,Should the layout be a column or a row.
android.widget.LinearLayout.setOrientation,Related XML Attributes: android:orientation.
android.widget.LinearLayout.setShowDividers,Set how dividers should be shown between items in this layout.
android.widget.LinearLayout.setShowDividers,Set show dividers.
android.widget.LinearLayout.setWeightSum,Defines the desired weights sum. If unspecified the weights sum is computed at layout time by adding the layout_weight of each child. This can be used for instance to give a single child 50% of the total available space by giving it a layout_weight of 0.5 and setting the weightSum to 1.0.
android.widget.LinearLayout.setWeightSum,Set weight sum.
android.widget.LinearLayout.setWeightSum,Defines the desired weights sum.
android.widget.LinearLayout.setWeightSum,If unspecified the weights sum is computed at layout time by adding the layout_weight of each child.
android.widget.LinearLayout.setWeightSum,This can be used for instance to give a single child 50% of the total available space by giving it a layout_weight of 0.5 and setting the weightSum to 1.0.
android.widget.ListPopupWindow.createDragToOpenListener,Returns an OnTouchListener that can be added to the source view to implement drag-to-open behavior. Generally the source view should be the same view that was passed to setAnchorView(View). When the listener is set on a view touching that view and dragging outside of its bounds will open the popup window. Lifting will select the currently touched list item. Example usage:.
android.widget.ListPopupWindow.createDragToOpenListener,Create drag to open listener.
android.widget.ListPopupWindow.createDragToOpenListener,Returns an OnTouchListener that can be added to the source view to implement drag-to-open behavior.
android.widget.ListPopupWindow.createDragToOpenListener,Generally the source view should be the same view that was passed to setAnchorView(View).
android.widget.ListPopupWindow.createDragToOpenListener,When the listener is set on a view touching that view and dragging outside of its bounds will open the popup window.
android.widget.ListPopupWindow.createDragToOpenListener,Lifting will select the currently touched list item.
android.widget.ListPopupWindow.createDragToOpenListener,Example usage:.
android.widget.ListPopupWindow.dismiss,Dismiss the popup window.
android.widget.ListPopupWindow.dismiss,Dismiss.
android.widget.ListPopupWindow.setAdapter,Sets the adapter that provides the data and the views to represent the data in this popup window.
android.widget.ListPopupWindow.setAdapter,Set adapter.
android.widget.ListPopupWindow.setAnchorView,Sets the popup's anchor view. This popup will always be positioned relative to the anchor view when shown.
android.widget.ListPopupWindow.setAnchorView,Set anchor view.
android.widget.ListPopupWindow.setAnchorView,Sets the popup's anchor view.
android.widget.ListPopupWindow.setAnchorView,This popup will always be positioned relative to the anchor view when shown.
android.widget.ListPopupWindow.setBackgroundDrawable,Sets a drawable to be the background for the popup window.
android.widget.ListPopupWindow.setBackgroundDrawable,Set background drawable.
android.widget.ListPopupWindow.setContentWidth,Sets the width of the popup window by the size of its content. The final width may be larger to accommodate styled window dressing.
android.widget.ListPopupWindow.setContentWidth,Set content width.
android.widget.ListPopupWindow.setContentWidth,Sets the width of the popup window by the size of its content.
android.widget.ListPopupWindow.setContentWidth,The final width may be larger to accommodate styled window dressing.
android.widget.ListPopupWindow.setHorizontalOffset,Set the horizontal offset of this popup from its anchor view in pixels.
android.widget.ListPopupWindow.setHorizontalOffset,Set horizontal offset.
android.widget.ListPopupWindow.setModal,Set whether this window should be modal when shown. If a popup window is modal it will receive all touch and key input. If the user touches outside the popup window's content area the popup window will be dismissed.
android.widget.ListPopupWindow.setModal,Set modal.
android.widget.ListPopupWindow.setModal,Set whether this window should be modal when shown.
android.widget.ListPopupWindow.setModal,If a popup window is modal it will receive all touch and key input.
android.widget.ListPopupWindow.setModal,If the user touches outside the popup window's content area the popup window will be dismissed.
android.widget.ListPopupWindow.setVerticalOffset,Set the vertical offset of this popup from its anchor view in pixels.
android.widget.ListPopupWindow.setVerticalOffset,Set vertical offset.
android.widget.ListPopupWindow.setWidth,Sets the width of the popup window in pixels. Can also be MATCH_PARENT or WRAP_CONTENT.
android.widget.ListPopupWindow.setWidth,Set width.
android.widget.ListPopupWindow.setWidth,Sets the width of the popup window in pixels.
android.widget.ListPopupWindow.setWidth,Can also be MATCH_PARENT or WRAP_CONTENT.
android.widget.ListPopupWindow.show,Show the popup list. If the list is already showing this method will recalculate the popup's size and position.
android.widget.ListPopupWindow.show,Show.
android.widget.ListPopupWindow.show,Show the popup list.
android.widget.ListPopupWindow.show,If the list is already showing this method will recalculate the popup's size and position.
android.widget.ListView.addFooterView,Add a fixed view to appear at the bottom of the list. If addFooterView is called more than once the views will appear in the order they were added. Views added using this call can take focus if they want. Note: When first introduced this method could only be called before setting the adapter with setAdapter(android.widget.ListAdapter). Starting with Build.VERSION_CODES.KITKAT this method may be called at any time. If the ListView's adapter does not extend HeaderViewListAdapter it will be wrapped with a supporting instance of WrapperListAdapter.
android.widget.ListView.addFooterView,Add footer view.
android.widget.ListView.addFooterView,Add a fixed view to appear at the bottom of the list.
android.widget.ListView.addFooterView,If addFooterView is called more than once the views will appear in the order they were added.
android.widget.ListView.addFooterView,Views added using this call can take focus if they want.
android.widget.ListView.addFooterView,Note: When first introduced this method could only be called before setting the adapter with setAdapter(android.widget.ListAdapter).
android.widget.ListView.addFooterView,Starting with Build.VERSION_CODES.KITKAT this method may be called at any time.
android.widget.ListView.addFooterView,If the ListView's adapter does not extend HeaderViewListAdapter it will be wrapped with a supporting instance of WrapperListAdapter.
android.widget.ListView.addFooterView,Add a fixed view to appear at the bottom of the list. If addFooterView is called more than once the views will appear in the order they were added. Views added using this call can take focus if they want. Note: When first introduced this method could only be called before setting the adapter with setAdapter(android.widget.ListAdapter). Starting with Build.VERSION_CODES.KITKAT this method may be called at any time. If the ListView's adapter does not extend HeaderViewListAdapter it will be wrapped with a supporting instance of WrapperListAdapter.
android.widget.ListView.addFooterView,Add footer view.
android.widget.ListView.addFooterView,Add a fixed view to appear at the bottom of the list.
android.widget.ListView.addFooterView,If addFooterView is called more than once the views will appear in the order they were added.
android.widget.ListView.addFooterView,Views added using this call can take focus if they want.
android.widget.ListView.addFooterView,Note: When first introduced this method could only be called before setting the adapter with setAdapter(android.widget.ListAdapter).
android.widget.ListView.addFooterView,Starting with Build.VERSION_CODES.KITKAT this method may be called at any time.
android.widget.ListView.addFooterView,If the ListView's adapter does not extend HeaderViewListAdapter it will be wrapped with a supporting instance of WrapperListAdapter.
android.widget.ListView.addHeaderView,Add a fixed view to appear at the top of the list. If this method is called more than once the views will appear in the order they were added. Views added using this call can take focus if they want. Note: When first introduced this method could only be called before setting the adapter with setAdapter(android.widget.ListAdapter). Starting with Build.VERSION_CODES.KITKAT this method may be called at any time. If the ListView's adapter does not extend HeaderViewListAdapter it will be wrapped with a supporting instance of WrapperListAdapter.
android.widget.ListView.addHeaderView,Add header view.
android.widget.ListView.addHeaderView,Add a fixed view to appear at the top of the list.
android.widget.ListView.addHeaderView,If this method is called more than once the views will appear in the order they were added.
android.widget.ListView.addHeaderView,Views added using this call can take focus if they want.
android.widget.ListView.addHeaderView,Note: When first introduced this method could only be called before setting the adapter with setAdapter(android.widget.ListAdapter).
android.widget.ListView.addHeaderView,Starting with Build.VERSION_CODES.KITKAT this method may be called at any time.
android.widget.ListView.addHeaderView,If the ListView's adapter does not extend HeaderViewListAdapter it will be wrapped with a supporting instance of WrapperListAdapter.
android.widget.ListView.addHeaderView,Add a fixed view to appear at the top of the list. If addHeaderView is called more than once the views will appear in the order they were added. Views added using this call can take focus if they want. Note: When first introduced this method could only be called before setting the adapter with setAdapter(android.widget.ListAdapter). Starting with Build.VERSION_CODES.KITKAT this method may be called at any time. If the ListView's adapter does not extend HeaderViewListAdapter it will be wrapped with a supporting instance of WrapperListAdapter.
android.widget.ListView.addHeaderView,Add header view.
android.widget.ListView.addHeaderView,Add a fixed view to appear at the top of the list.
android.widget.ListView.addHeaderView,If addHeaderView is called more than once the views will appear in the order they were added.
android.widget.ListView.addHeaderView,Views added using this call can take focus if they want.
android.widget.ListView.addHeaderView,Note: When first introduced this method could only be called before setting the adapter with setAdapter(android.widget.ListAdapter).
android.widget.ListView.addHeaderView,Starting with Build.VERSION_CODES.KITKAT this method may be called at any time.
android.widget.ListView.addHeaderView,If the ListView's adapter does not extend HeaderViewListAdapter it will be wrapped with a supporting instance of WrapperListAdapter.
android.widget.ListView.getAdapter,Returns the adapter currently in use in this ListView. The returned adapter might not be the same adapter passed to setAdapter(android.widget.ListAdapter) but might be a WrapperListAdapter.
android.widget.ListView.getAdapter,Get adapter.
android.widget.ListView.getAdapter,Returns the adapter currently in use in this ListView.
android.widget.ListView.getAdapter,The returned adapter might not be the same adapter passed to setAdapter(android.widget.ListAdapter) but might be a WrapperListAdapter.
android.widget.ListView.getFooterViewsCount,.
android.widget.ListView.getFooterViewsCount,Get footer views count.
android.widget.ListView.getHeaderViewsCount,.
android.widget.ListView.getHeaderViewsCount,Get header views count.
android.widget.ListView.removeFooterView,Removes a previously-added footer view.
android.widget.ListView.removeFooterView,Remove footer view.
android.widget.ListView.removeHeaderView,Removes a previously-added header view.
android.widget.ListView.removeHeaderView,Remove header view.
android.widget.ListView.setAdapter,Sets the data behind this ListView. The adapter passed to this method may be wrapped by a WrapperListAdapter depending on the ListView features currently in use. For instance adding headers and/or footers will cause the adapter to be wrapped.
android.widget.ListView.setAdapter,Set adapter.
android.widget.ListView.setAdapter,Sets the data behind this ListView.
android.widget.ListView.setAdapter,The adapter passed to this method may be wrapped by a WrapperListAdapter depending on the ListView features currently in use.
android.widget.ListView.setAdapter,For instance adding headers and/or footers will cause the adapter to be wrapped.
android.widget.ListView.setCacheColorHint,When set to a non-zero value the cache color hint indicates that this list is always drawn on top of a solid single-color opaque background. Zero means that what's behind this object is translucent (non solid) or is not made of a single color. This hint will not affect any existing background drawable set on this view ( typically set via View.setBackgroundDrawable(android.graphics.drawable.Drawable) ).
android.widget.ListView.setCacheColorHint,Set cache color hint.
android.widget.ListView.setCacheColorHint,When set to a non-zero value the cache color hint indicates that this list is always drawn on top of a solid single-color opaque background.
android.widget.ListView.setCacheColorHint,Zero means that what's behind this object is translucent (non solid) or is not made of a single color.
android.widget.ListView.setCacheColorHint,This hint will not affect any existing background drawable set on this view ( typically set via View.setBackgroundDrawable(android.graphics.drawable.Drawable) ).
android.widget.ListView.setDivider,Sets the drawable that will be drawn between each item in the list. Note: If the drawable does not have an intrinsic height you should also call setDividerHeight(int). Related XML Attributes: android:divider.
android.widget.ListView.setDivider,Set divider.
android.widget.ListView.setDivider,Sets the drawable that will be drawn between each item in the list.
android.widget.ListView.setDivider,Note: If the drawable does not have an intrinsic height you should also call setDividerHeight(int).
android.widget.ListView.setDivider,Related XML Attributes: android:divider.
android.widget.ListView.setDividerHeight,Sets the height of the divider that will be drawn between each item in the list. Calling this will override the intrinsic height as set by setDivider(android.graphics.drawable.Drawable).
android.widget.ListView.setDividerHeight,Set divider height.
android.widget.ListView.setDividerHeight,Sets the height of the divider that will be drawn between each item in the list.
android.widget.ListView.setDividerHeight,Calling this will override the intrinsic height as set by setDivider(android.graphics.drawable.Drawable).
android.widget.ListView.setFooterDividersEnabled,Enables or disables the drawing of the divider for footer views.
android.widget.ListView.setFooterDividersEnabled,Set footer dividers enabled.
android.widget.ListView.setHeaderDividersEnabled,Enables or disables the drawing of the divider for header views.
android.widget.ListView.setHeaderDividersEnabled,Set header dividers enabled.
android.widget.ListView.setItemsCanFocus,Indicates that the views created by the ListAdapter can contain focusable items.
android.widget.ListView.setItemsCanFocus,Set items can focus.
android.widget.ListView.setSelection,Sets the currently selected item. If in touch mode the item will not be selected but it will still be positioned appropriately. If the specified selection position is less than 0 then the item at position 0 will be selected.
android.widget.ListView.setSelection,Set selection.
android.widget.ListView.setSelection,Sets the currently selected item.
android.widget.ListView.setSelection,If in touch mode the item will not be selected but it will still be positioned appropriately.
android.widget.ListView.setSelection,If the specified selection position is less than 0 then the item at position 0 will be selected.
android.widget.ListView.setSelectionAfterHeaderView,setSelectionAfterHeaderView set the selection to be the first list item after the header views.
android.widget.ListView.setSelectionAfterHeaderView,Set selection after header view.
android.widget.ListView.smoothScrollToPosition,Smoothly scroll to the specified adapter position. The view will scroll such that the indicated position is displayed.
android.widget.ListView.smoothScrollToPosition,Smooth scroll to position.
android.widget.ListView.smoothScrollToPosition,Smoothly scroll to the specified adapter position.
android.widget.ListView.smoothScrollToPosition,The view will scroll such that the indicated position is displayed.
android.widget.MediaController.hide,Remove the controller from the screen.
android.widget.MediaController.hide,Hide.
android.widget.MediaController.setAnchorView,Set the view that acts as the anchor for the control view. This can for example be a VideoView or your Activity's main view. When VideoView calls this method it will use the VideoView's parent as the anchor.
android.widget.MediaController.setAnchorView,Set anchor view.
android.widget.MediaController.setAnchorView,Set the view that acts as the anchor for the control view.
android.widget.MediaController.setAnchorView,This can for example be a VideoView or your Activity's main view.
android.widget.MediaController.setAnchorView,When VideoView calls this method it will use the VideoView's parent as the anchor.
android.widget.MediaController.show,Show the controller on screen. It will go away automatically after 'timeout' milliseconds of inactivity.
android.widget.MediaController.show,Show.
android.widget.MediaController.show,Show the controller on screen.
android.widget.MediaController.show,It will go away automatically after 'timeout' milliseconds of inactivity.
android.widget.MediaController.show,Show the controller on screen. It will go away automatically after 3 seconds of inactivity.
android.widget.MediaController.show,Show.
android.widget.MediaController.show,Show the controller on screen.
android.widget.MediaController.show,It will go away automatically after 3 seconds of inactivity.
android.widget.OverScroller.forceFinished,Force the finished field to a particular value. Contrary to abortAnimation() forcing the animation to finished does NOT cause the scroller to move to the final x and y position.
android.widget.OverScroller.forceFinished,Force finished.
android.widget.OverScroller.forceFinished,Force the finished field to a particular value.
android.widget.OverScroller.forceFinished,Contrary to abortAnimation() forcing the animation to finished does NOT cause the scroller to move to the final x and y position.
android.widget.OverScroller.getCurrVelocity,Returns the absolute value of the current velocity.
android.widget.OverScroller.getCurrVelocity,Get curr velocity.
android.widget.OverScroller.getFinalX,"Returns where the scroll will end. Valid only for ""fling"" scrolls."
android.widget.OverScroller.getFinalX,Get final x.
android.widget.OverScroller.getFinalX,Returns where the scroll will end.
android.widget.OverScroller.getFinalX,"Valid only for ""fling"" scrolls."
android.widget.OverScroller.isOverScrolled,Returns whether the current Scroller is currently returning to a valid position. Valid bounds were provided by the fling(int int int int int int int int int int) method. One should check this value before calling startScroll(int int int int) as the interpolation currently in progress to restore a valid position will then be stopped. The caller has to take into account the fact that the started scroll will start from an overscrolled position.
android.widget.OverScroller.isOverScrolled,Is over scrolled.
android.widget.OverScroller.isOverScrolled,Returns whether the current Scroller is currently returning to a valid position.
android.widget.OverScroller.isOverScrolled,Valid bounds were provided by the fling(int int int int int int int int int int) method.
android.widget.OverScroller.isOverScrolled,One should check this value before calling startScroll(int int int int) as the interpolation currently in progress to restore a valid position will then be stopped.
android.widget.OverScroller.isOverScrolled,The caller has to take into account the fact that the started scroll will start from an overscrolled position.
android.widget.OverScroller.notifyHorizontalEdgeReached,Notify the scroller that we've reached a horizontal boundary. Normally the information to handle this will already be known when the animation is started such as in a call to one of the fling functions. However there are cases where this cannot be known in advance. This function will transition the current motion and animate from startX to finalX as appropriate.
android.widget.OverScroller.notifyHorizontalEdgeReached,Notify horizontal edge reached.
android.widget.OverScroller.notifyHorizontalEdgeReached,Notify the scroller that we've reached a horizontal boundary.
android.widget.OverScroller.notifyHorizontalEdgeReached,Normally the information to handle this will already be known when the animation is started such as in a call to one of the fling functions.
android.widget.OverScroller.notifyHorizontalEdgeReached,However there are cases where this cannot be known in advance.
android.widget.OverScroller.notifyHorizontalEdgeReached,This function will transition the current motion and animate from startX to finalX as appropriate.
android.widget.OverScroller.notifyVerticalEdgeReached,Notify the scroller that we've reached a vertical boundary. Normally the information to handle this will already be known when the animation is started such as in a call to one of the fling functions. However there are cases where this cannot be known in advance. This function will animate a parabolic motion from startY to finalY.
android.widget.OverScroller.notifyVerticalEdgeReached,Notify vertical edge reached.
android.widget.OverScroller.notifyVerticalEdgeReached,Notify the scroller that we've reached a vertical boundary.
android.widget.OverScroller.notifyVerticalEdgeReached,Normally the information to handle this will already be known when the animation is started such as in a call to one of the fling functions.
android.widget.OverScroller.notifyVerticalEdgeReached,However there are cases where this cannot be known in advance.
android.widget.OverScroller.notifyVerticalEdgeReached,This function will animate a parabolic motion from startY to finalY.
android.widget.OverScroller.setFriction,The amount of friction applied to flings. The default value is ViewConfiguration#getScrollFriction.
android.widget.OverScroller.setFriction,Set friction.
android.widget.OverScroller.setFriction,The amount of friction applied to flings.
android.widget.OverScroller.setFriction,The default value is ViewConfiguration#getScrollFriction.
android.widget.OverScroller.springBack,Call this when you want to 'spring back' into a valid coordinate range.
android.widget.OverScroller.springBack,Spring back.
android.widget.PopupMenu.getDragToOpenListener,Returns an OnTouchListener that can be added to the anchor view to implement drag-to-open behavior. When the listener is set on a view touching that view and dragging outside of its bounds will open the popup window. Lifting will select the currently touched list item. Example usage:.
android.widget.PopupMenu.getDragToOpenListener,Get drag to open listener.
android.widget.PopupMenu.getDragToOpenListener,Returns an OnTouchListener that can be added to the anchor view to implement drag-to-open behavior.
android.widget.PopupMenu.getDragToOpenListener,When the listener is set on a view touching that view and dragging outside of its bounds will open the popup window.
android.widget.PopupMenu.getDragToOpenListener,Lifting will select the currently touched list item.
android.widget.PopupMenu.getDragToOpenListener,Example usage:.
android.widget.PopupMenu.show,Show the menu popup anchored to the view specified during construction.
android.widget.PopupMenu.show,Show.
android.widget.PopupWindow.dismiss,Disposes of the popup window. This method can be invoked only after showAsDropDown(android.view.View) has been executed. Failing that calling this method will have no effect.
android.widget.PopupWindow.dismiss,Dismiss.
android.widget.PopupWindow.dismiss,Disposes of the popup window.
android.widget.PopupWindow.dismiss,This method can be invoked only after showAsDropDown(android.view.View) has been executed.
android.widget.PopupWindow.dismiss,Failing that calling this method will have no effect.
android.widget.PopupWindow.getAnimationStyle,Return the animation style to use the popup appears and disappears.
android.widget.PopupWindow.getAnimationStyle,Get animation style.
android.widget.PopupWindow.getBackground,Return the drawable used as the popup window's background. Related XML Attributes: android:popupBackground.
android.widget.PopupWindow.getBackground,Get background.
android.widget.PopupWindow.getBackground,Return the drawable used as the popup window's background.
android.widget.PopupWindow.getBackground,Related XML Attributes: android:popupBackground.
android.widget.PopupWindow.getContentView,Return the view used as the content of the popup window.
android.widget.PopupWindow.getContentView,Get content view.
android.widget.PopupWindow.getHeight,Returns the popup's requested height. May be a layout constant such as LayoutParams#WRAP_CONTENT or LayoutParams#MATCH_PARENT. The actual size of the popup may depend on other factors such as clipping and window layout.
android.widget.PopupWindow.getHeight,Get height.
android.widget.PopupWindow.getHeight,Returns the popup's requested height.
android.widget.PopupWindow.getHeight,May be a layout constant such as LayoutParams#WRAP_CONTENT or LayoutParams#MATCH_PARENT.
android.widget.PopupWindow.getHeight,The actual size of the popup may depend on other factors such as clipping and window layout.
android.widget.PopupWindow.getInputMethodMode,Return the current value in setInputMethodMode(int).
android.widget.PopupWindow.getInputMethodMode,Get input method mode.
android.widget.PopupWindow.getSoftInputMode,Returns the current value in setSoftInputMode(int).
android.widget.PopupWindow.getSoftInputMode,Get soft input mode.
android.widget.PopupWindow.getWidth,Returns the popup's requested width. May be a layout constant such as LayoutParams#WRAP_CONTENT or LayoutParams#MATCH_PARENT. The actual size of the popup may depend on other factors such as clipping and window layout.
android.widget.PopupWindow.getWidth,Get width.
android.widget.PopupWindow.getWidth,Returns the popup's requested width.
android.widget.PopupWindow.getWidth,May be a layout constant such as LayoutParams#WRAP_CONTENT or LayoutParams#MATCH_PARENT.
android.widget.PopupWindow.getWidth,The actual size of the popup may depend on other factors such as clipping and window layout.
android.widget.PopupWindow.isAboveAnchor,Indicates whether the popup is showing above (the y coordinate of the popup's bottom is less than the y coordinate of the anchor) or below the anchor view (the y coordinate of the popup is greater than y coordinate of the anchor's bottom). The value returned by this method is meaningful only after showAsDropDown(android.view.View) or showAsDropDown(android.view.View int int) was invoked.
android.widget.PopupWindow.isAboveAnchor,Is above anchor.
android.widget.PopupWindow.isAboveAnchor,Indicates whether the popup is showing above (the y coordinate of the popup's bottom is less than the y coordinate of the anchor) or below the anchor view (the y coordinate of the popup is greater than y coordinate of the anchor's bottom).
android.widget.PopupWindow.isAboveAnchor,The value returned by this method is meaningful only after showAsDropDown(android.view.View) or showAsDropDown(android.view.View int int) was invoked.
android.widget.PopupWindow.isShowing,Indicate whether this popup window is showing on screen.
android.widget.PopupWindow.isShowing,Is showing.
android.widget.PopupWindow.setAnimationStyle,Change the animation style resource for this popup. If the popup is showing calling this method will take effect only the next time the popup is shown or through a manual call to one of the update() methods.
android.widget.PopupWindow.setAnimationStyle,Set animation style.
android.widget.PopupWindow.setAnimationStyle,Change the animation style resource for this popup.
android.widget.PopupWindow.setAnimationStyle,If the popup is showing calling this method will take effect only the next time the popup is shown or through a manual call to one of the update() methods.
android.widget.PopupWindow.setBackgroundDrawable,Specifies the background drawable for this popup window. The background can be set to null. Related XML Attributes: android:popupBackground.
android.widget.PopupWindow.setBackgroundDrawable,Set background drawable.
android.widget.PopupWindow.setBackgroundDrawable,Specifies the background drawable for this popup window.
android.widget.PopupWindow.setBackgroundDrawable,The background can be set to null.
android.widget.PopupWindow.setBackgroundDrawable,Related XML Attributes: android:popupBackground.
android.widget.PopupWindow.setClippingEnabled,Allows the popup window to extend beyond the bounds of the screen. By default the window is clipped to the screen boundaries. Setting this to false will allow windows to be accurately positioned. If the popup is showing calling this method will take effect only the next time the popup is shown or through a manual call to one of the update() methods.
android.widget.PopupWindow.setClippingEnabled,Set clipping enabled.
android.widget.PopupWindow.setClippingEnabled,Allows the popup window to extend beyond the bounds of the screen.
android.widget.PopupWindow.setClippingEnabled,By default the window is clipped to the screen boundaries.
android.widget.PopupWindow.setClippingEnabled,Setting this to false will allow windows to be accurately positioned.
android.widget.PopupWindow.setClippingEnabled,If the popup is showing calling this method will take effect only the next time the popup is shown or through a manual call to one of the update() methods.
android.widget.PopupWindow.setContentView,Change the popup's content. The content is represented by an instance of View. This method has no effect if called when the popup is showing.
android.widget.PopupWindow.setContentView,Set content view.
android.widget.PopupWindow.setContentView,Change the popup's content.
android.widget.PopupWindow.setContentView,The content is represented by an instance of View.
android.widget.PopupWindow.setContentView,This method has no effect if called when the popup is showing.
android.widget.PopupWindow.setFocusable,Changes the focusability of the popup window. When focusable the window will grab the focus from the current focused widget if the popup contains a focusable View. By default a popup window is not focusable. If the popup is showing calling this method will take effect only the next time the popup is shown or through a manual call to one of the update() methods.
android.widget.PopupWindow.setFocusable,Set focusable.
android.widget.PopupWindow.setFocusable,Changes the focusability of the popup window.
android.widget.PopupWindow.setFocusable,When focusable the window will grab the focus from the current focused widget if the popup contains a focusable View.
android.widget.PopupWindow.setFocusable,By default a popup window is not focusable.
android.widget.PopupWindow.setFocusable,If the popup is showing calling this method will take effect only the next time the popup is shown or through a manual call to one of the update() methods.
android.widget.PopupWindow.setHeight,Sets the popup's requested height. May be a layout constant such as LayoutParams#WRAP_CONTENT or LayoutParams#MATCH_PARENT. The actual size of the popup may depend on other factors such as clipping and window layout. If the popup is showing calling this method will take effect the next time the popup is shown.
android.widget.PopupWindow.setHeight,Set height.
android.widget.PopupWindow.setHeight,Sets the popup's requested height.
android.widget.PopupWindow.setHeight,May be a layout constant such as LayoutParams#WRAP_CONTENT or LayoutParams#MATCH_PARENT.
android.widget.PopupWindow.setHeight,The actual size of the popup may depend on other factors such as clipping and window layout.
android.widget.PopupWindow.setHeight,If the popup is showing calling this method will take effect the next time the popup is shown.
android.widget.PopupWindow.setInputMethodMode,Control how the popup operates with an input method: one of INPUT_METHOD_FROM_FOCUSABLE INPUT_METHOD_NEEDED or INPUT_METHOD_NOT_NEEDED. If the popup is showing calling this method will take effect only the next time the popup is shown or through a manual call to one of the update() methods.
android.widget.PopupWindow.setInputMethodMode,Set input method mode.
android.widget.PopupWindow.setInputMethodMode,Control how the popup operates with an input method: one of INPUT_METHOD_FROM_FOCUSABLE INPUT_METHOD_NEEDED or INPUT_METHOD_NOT_NEEDED.
android.widget.PopupWindow.setInputMethodMode,If the popup is showing calling this method will take effect only the next time the popup is shown or through a manual call to one of the update() methods.
android.widget.PopupWindow.setOutsideTouchable,Controls whether the pop-up will be informed of touch events outside of its window. This only makes sense for pop-ups that are touchable but not focusable which means touches outside of the window will be delivered to the window behind. The default is false. If the popup is showing calling this method will take effect only the next time the popup is shown or through a manual call to one of the update() methods.
android.widget.PopupWindow.setOutsideTouchable,Set outside touchable.
android.widget.PopupWindow.setOutsideTouchable,Controls whether the pop-up will be informed of touch events outside of its window.
android.widget.PopupWindow.setOutsideTouchable,This only makes sense for pop-ups that are touchable but not focusable which means touches outside of the window will be delivered to the window behind.
android.widget.PopupWindow.setOutsideTouchable,The default is false.
android.widget.PopupWindow.setOutsideTouchable,If the popup is showing calling this method will take effect only the next time the popup is shown or through a manual call to one of the update() methods.
android.widget.PopupWindow.setSoftInputMode,Sets the operating mode for the soft input area.
android.widget.PopupWindow.setSoftInputMode,Set soft input mode.
android.widget.PopupWindow.setTouchable,Changes the touchability of the popup window. When touchable the window will receive touch events otherwise touch events will go to the window below it. By default the window is touchable. If the popup is showing calling this method will take effect only the next time the popup is shown or through a manual call to one of the update() methods.
android.widget.PopupWindow.setTouchable,Set touchable.
android.widget.PopupWindow.setTouchable,Changes the touchability of the popup window.
android.widget.PopupWindow.setTouchable,When touchable the window will receive touch events otherwise touch events will go to the window below it.
android.widget.PopupWindow.setTouchable,By default the window is touchable.
android.widget.PopupWindow.setTouchable,If the popup is showing calling this method will take effect only the next time the popup is shown or through a manual call to one of the update() methods.
android.widget.PopupWindow.setWidth,Sets the popup's requested width. May be a layout constant such as LayoutParams#WRAP_CONTENT or LayoutParams#MATCH_PARENT. The actual size of the popup may depend on other factors such as clipping and window layout. If the popup is showing calling this method will take effect the next time the popup is shown.
android.widget.PopupWindow.setWidth,Set width.
android.widget.PopupWindow.setWidth,Sets the popup's requested width.
android.widget.PopupWindow.setWidth,May be a layout constant such as LayoutParams#WRAP_CONTENT or LayoutParams#MATCH_PARENT.
android.widget.PopupWindow.setWidth,The actual size of the popup may depend on other factors such as clipping and window layout.
android.widget.PopupWindow.setWidth,If the popup is showing calling this method will take effect the next time the popup is shown.
android.widget.PopupWindow.setWindowLayoutMode,This method was deprecated in API level 23. Use setWidth(int) and setHeight(int). Change the width and height measure specs that are given to the window manager by the popup. By default these are 0 meaning that the current width or height is requested as an explicit size from the window manager. You can supply ViewGroup.LayoutParams#WRAP_CONTENT or ViewGroup.LayoutParams#MATCH_PARENT to have that measure spec supplied instead replacing the absolute width and height that has been set in the popup. If the popup is showing calling this method will take effect only the next time the popup is shown.
android.widget.PopupWindow.setWindowLayoutMode,Set window layout mode.
android.widget.PopupWindow.setWindowLayoutMode,This method was deprecated in API level 23.
android.widget.PopupWindow.setWindowLayoutMode,Use setWidth(int) and setHeight(int).
android.widget.PopupWindow.setWindowLayoutMode,Change the width and height measure specs that are given to the window manager by the popup.
android.widget.PopupWindow.setWindowLayoutMode,By default these are 0 meaning that the current width or height is requested as an explicit size from the window manager.
android.widget.PopupWindow.setWindowLayoutMode,You can supply ViewGroup.LayoutParams#WRAP_CONTENT or ViewGroup.LayoutParams#MATCH_PARENT to have that measure spec supplied instead replacing the absolute width and height that has been set in the popup.
android.widget.PopupWindow.setWindowLayoutMode,If the popup is showing calling this method will take effect only the next time the popup is shown.
android.widget.PopupWindow.showAsDropDown,Display the content view in a popup window anchored to the bottom-left corner of the anchor view. If there is not enough room on screen to show the popup in its entirety this method tries to find a parent scroll view to scroll. If no parent scroll view can be scrolled the bottom-left corner of the popup is pinned at the top left corner of the anchor view.
android.widget.PopupWindow.showAsDropDown,Show as drop down.
android.widget.PopupWindow.showAsDropDown,Display the content view in a popup window anchored to the bottom-left corner of the anchor view.
android.widget.PopupWindow.showAsDropDown,If there is not enough room on screen to show the popup in its entirety this method tries to find a parent scroll view to scroll.
android.widget.PopupWindow.showAsDropDown,If no parent scroll view can be scrolled the bottom-left corner of the popup is pinned at the top left corner of the anchor view.
android.widget.PopupWindow.showAsDropDown,Displays the content view in a popup window anchored to the corner of another view. The window is positioned according to the specified gravity and offset by the specified x and y coordinates. If there is not enough room on screen to show the popup in its entirety this method tries to find a parent scroll view to scroll. If no parent view can be scrolled the specified vertical gravity will be ignored and the popup will anchor itself such that it is visible. If the view later scrolls to move anchor to a different location the popup will be moved correspondingly.
android.widget.PopupWindow.showAsDropDown,Show as drop down.
android.widget.PopupWindow.showAsDropDown,Displays the content view in a popup window anchored to the corner of another view.
android.widget.PopupWindow.showAsDropDown,The window is positioned according to the specified gravity and offset by the specified x and y coordinates.
android.widget.PopupWindow.showAsDropDown,If there is not enough room on screen to show the popup in its entirety this method tries to find a parent scroll view to scroll.
android.widget.PopupWindow.showAsDropDown,If no parent view can be scrolled the specified vertical gravity will be ignored and the popup will anchor itself such that it is visible.
android.widget.PopupWindow.showAsDropDown,If the view later scrolls to move anchor to a different location the popup will be moved correspondingly.
android.widget.PopupWindow.showAsDropDown,Display the content view in a popup window anchored to the bottom-left corner of the anchor view offset by the specified x and y coordinates. If there is not enough room on screen to show the popup in its entirety this method tries to find a parent scroll view to scroll. If no parent scroll view can be scrolled the bottom-left corner of the popup is pinned at the top left corner of the anchor view. If the view later scrolls to move anchor to a different location the popup will be moved correspondingly.
android.widget.PopupWindow.showAsDropDown,Show as drop down.
android.widget.PopupWindow.showAsDropDown,Display the content view in a popup window anchored to the bottom-left corner of the anchor view offset by the specified x and y coordinates.
android.widget.PopupWindow.showAsDropDown,If there is not enough room on screen to show the popup in its entirety this method tries to find a parent scroll view to scroll.
android.widget.PopupWindow.showAsDropDown,If no parent scroll view can be scrolled the bottom-left corner of the popup is pinned at the top left corner of the anchor view.
android.widget.PopupWindow.showAsDropDown,If the view later scrolls to move anchor to a different location the popup will be moved correspondingly.
android.widget.PopupWindow.showAtLocation,Display the content view in a popup window at the specified location. If the popup window cannot fit on screen it will be clipped. See WindowManager.LayoutParams for more information on how gravity and the x and y parameters are related. Specifying a gravity of Gravity.NO_GRAVITY is similar to specifying Gravity.LEFT | Gravity.TOP.
android.widget.PopupWindow.showAtLocation,Show at location.
android.widget.PopupWindow.showAtLocation,Display the content view in a popup window at the specified location.
android.widget.PopupWindow.showAtLocation,If the popup window cannot fit on screen it will be clipped.
android.widget.PopupWindow.showAtLocation,See WindowManager.LayoutParams for more information on how gravity and the x and y parameters are related.
android.widget.PopupWindow.showAtLocation,Specifying a gravity of Gravity.NO_GRAVITY is similar to specifying Gravity.LEFT | Gravity.TOP.
android.widget.PopupWindow.update,Updates the position and the dimension of the popup window. Calling this function also updates the window with the current popup state as described for update().
android.widget.PopupWindow.update,Update.
android.widget.PopupWindow.update,Updates the position and the dimension of the popup window.
android.widget.PopupWindow.update,Calling this function also updates the window with the current popup state as described for update().
android.widget.PopupWindow.update,Updates the position and the dimension of the popup window. Width and height can be set to -1 to update location only. Calling this function also updates the window with the current popup state as described for update(). If the view later scrolls to move anchor to a different location the popup will be moved correspondingly.
android.widget.PopupWindow.update,Update.
android.widget.PopupWindow.update,Updates the position and the dimension of the popup window.
android.widget.PopupWindow.update,Width and height can be set to -1 to update location only.
android.widget.PopupWindow.update,Calling this function also updates the window with the current popup state as described for update().
android.widget.PopupWindow.update,If the view later scrolls to move anchor to a different location the popup will be moved correspondingly.
android.widget.PopupWindow.update,Updates the dimension of the popup window. Calling this function also updates the window with the current popup state as described for update().
android.widget.PopupWindow.update,Update.
android.widget.PopupWindow.update,Updates the dimension of the popup window.
android.widget.PopupWindow.update,Calling this function also updates the window with the current popup state as described for update().
android.widget.PopupWindow.update,Updates the state of the popup window if it is currently being displayed from the currently set state. This includes: setClippingEnabled(boolean) setFocusable(boolean) setIgnoreCheekPress() setInputMethodMode(int) setTouchable(boolean) setAnimationStyle(int) setTouchModal(boolean) (boolean)} setIsClippedToScreen(boolean).
android.widget.PopupWindow.update,Update.
android.widget.PopupWindow.update,Updates the state of the popup window if it is currently being displayed from the currently set state.
android.widget.PopupWindow.update,This includes: setClippingEnabled(boolean) setFocusable(boolean) setIgnoreCheekPress() setInputMethodMode(int) setTouchable(boolean) setAnimationStyle(int) setTouchModal(boolean) (boolean)} setIsClippedToScreen(boolean).
android.widget.PopupWindow.update,Updates the position and the dimension of the popup window. Width and height can be set to -1 to update location only. Calling this function also updates the window with the current popup state as described for update().
android.widget.PopupWindow.update,Update.
android.widget.PopupWindow.update,Updates the position and the dimension of the popup window.
android.widget.PopupWindow.update,Width and height can be set to -1 to update location only.
android.widget.PopupWindow.update,Calling this function also updates the window with the current popup state as described for update().
android.widget.PopupWindow.update,Updates the position and the dimension of the popup window. Width and height can be set to -1 to update location only. Calling this function also updates the window with the current popup state as described for update().
android.widget.PopupWindow.update,Update.
android.widget.PopupWindow.update,Updates the position and the dimension of the popup window.
android.widget.PopupWindow.update,Width and height can be set to -1 to update location only.
android.widget.PopupWindow.update,Calling this function also updates the window with the current popup state as described for update().
android.widget.ProgressBar.getIndeterminateDrawable,Get the drawable used to draw the progress bar in indeterminate mode.
android.widget.ProgressBar.getIndeterminateDrawable,Get indeterminate drawable.
android.widget.ProgressBar.getMax,Return the upper limit of this progress bar's range.
android.widget.ProgressBar.getMax,Get max.
android.widget.ProgressBar.getProgress,Get the progress bar's current level of progress. Return 0 when the progress bar is in indeterminate mode.
android.widget.ProgressBar.getProgress,Get progress.
android.widget.ProgressBar.getProgress,Get the progress bar's current level of progress.
android.widget.ProgressBar.getProgress,Return 0 when the progress bar is in indeterminate mode.
android.widget.ProgressBar.getProgressDrawable,Get the drawable used to draw the progress bar in progress mode.
android.widget.ProgressBar.getProgressDrawable,Get progress drawable.
android.widget.ProgressBar.incrementProgressBy,Increase the progress bar's progress by the specified amount.
android.widget.ProgressBar.incrementProgressBy,Increment progress by.
android.widget.ProgressBar.incrementSecondaryProgressBy,Increase the progress bar's secondary progress by the specified amount.
android.widget.ProgressBar.incrementSecondaryProgressBy,Increment secondary progress by.
android.widget.ProgressBar.isIndeterminate,Indicate whether this progress bar is in indeterminate mode.
android.widget.ProgressBar.isIndeterminate,Is indeterminate.
android.widget.ProgressBar.setIndeterminate,Change the indeterminate mode for this progress bar. In indeterminate mode the progress is ignored and the progress bar shows an infinite animation instead.
android.widget.ProgressBar.setIndeterminate,Set indeterminate.
android.widget.ProgressBar.setIndeterminate,Change the indeterminate mode for this progress bar.
android.widget.ProgressBar.setIndeterminate,In indeterminate mode the progress is ignored and the progress bar shows an infinite animation instead.
android.widget.ProgressBar.setIndeterminateDrawable,Define the drawable used to draw the progress bar in indeterminate mode. For the Drawable to animate it must implement Animatable or override Drawable#onLevelChange(int). A Drawable that implements Animatable will be animated via that interface and therefore provides the greatest amount of customization. A Drawable that only overrides onLevelChange(int) is animated directly by ProgressBar and only the animation duration repeating behavior and interpolator can be modified and only before the indeterminate animation begins. Related XML Attributes: android:indeterminateDrawable.
android.widget.ProgressBar.setIndeterminateDrawable,Set indeterminate drawable.
android.widget.ProgressBar.setIndeterminateDrawable,Define the drawable used to draw the progress bar in indeterminate mode.
android.widget.ProgressBar.setIndeterminateDrawable,For the Drawable to animate it must implement Animatable or override Drawable#onLevelChange(int).
android.widget.ProgressBar.setIndeterminateDrawable,A Drawable that implements Animatable will be animated via that interface and therefore provides the greatest amount of customization.
android.widget.ProgressBar.setIndeterminateDrawable,A Drawable that only overrides onLevelChange(int) is animated directly by ProgressBar and only the animation duration repeating behavior and interpolator can be modified and only before the indeterminate animation begins.
android.widget.ProgressBar.setIndeterminateDrawable,Related XML Attributes: android:indeterminateDrawable.
android.widget.ProgressBar.setMax,Set the upper range of the progress bar max.
android.widget.ProgressBar.setMax,Set max.
android.widget.ProgressBar.setProgress,Sets the current progress to the specified value. Does not do anything if the progress bar is in indeterminate mode. This method will immediately update the visual position of the progress indicator. To animate the visual position to the target value use setProgress(int boolean) }.
android.widget.ProgressBar.setProgress,Set progress.
android.widget.ProgressBar.setProgress,Sets the current progress to the specified value.
android.widget.ProgressBar.setProgress,Does not do anything if the progress bar is in indeterminate mode.
android.widget.ProgressBar.setProgress,This method will immediately update the visual position of the progress indicator.
android.widget.ProgressBar.setProgress,To animate the visual position to the target value use setProgress(int boolean) }.
android.widget.ProgressBar.setProgress,Sets the current progress to the specified value optionally animating the visual position between the current and target values. Animation does not affect the result of getProgress() which will return the target value immediately after this method is called.
android.widget.ProgressBar.setProgress,Set progress.
android.widget.ProgressBar.setProgress,Sets the current progress to the specified value optionally animating the visual position between the current and target values.
android.widget.ProgressBar.setProgress,Animation does not affect the result of getProgress() which will return the target value immediately after this method is called.
android.widget.ProgressBar.setProgressDrawable,Define the drawable used to draw the progress bar in progress mode.
android.widget.ProgressBar.setProgressDrawable,Set progress drawable.
android.widget.ProgressBar.setSecondaryProgress,Set the current secondary progress to the specified value. Does not do anything if the progress bar is in indeterminate mode.
android.widget.ProgressBar.setSecondaryProgress,Set secondary progress.
android.widget.ProgressBar.setSecondaryProgress,Set the current secondary progress to the specified value.
android.widget.ProgressBar.setSecondaryProgress,Does not do anything if the progress bar is in indeterminate mode.
android.widget.RadioButton.toggle,Change the checked state of the view to the inverse of its current state If the radio button is already checked this method will not toggle the radio button.
android.widget.RadioButton.toggle,Toggle.
android.widget.RadioGroup.check,Sets the selection to the radio button whose identifier is passed in parameter. Using -1 as the selection identifier clears the selection; such an operation is equivalent to invoking clearCheck().
android.widget.RadioGroup.check,Check.
android.widget.RadioGroup.check,Sets the selection to the radio button whose identifier is passed in parameter.
android.widget.RadioGroup.check,Using -1 as the selection identifier clears the selection; such an operation is equivalent to invoking clearCheck().
android.widget.RadioGroup.clearCheck,Clears the selection. When the selection is cleared no radio button in this group is selected and getCheckedRadioButtonId() returns null.
android.widget.RadioGroup.clearCheck,Clear check.
android.widget.RadioGroup.clearCheck,Clears the selection.
android.widget.RadioGroup.clearCheck,When the selection is cleared no radio button in this group is selected and getCheckedRadioButtonId() returns null.
android.widget.RadioGroup.getCheckedRadioButtonId,Returns the identifier of the selected radio button in this group. Upon empty selection the returned value is -1. Related XML Attributes: android:checkedButton.
android.widget.RadioGroup.getCheckedRadioButtonId,Get checked radio button id.
android.widget.RadioGroup.getCheckedRadioButtonId,Returns the identifier of the selected radio button in this group.
android.widget.RadioGroup.getCheckedRadioButtonId,Upon empty selection the returned value is -1.
android.widget.RadioGroup.getCheckedRadioButtonId,Related XML Attributes: android:checkedButton.
android.widget.RatingBar.getRating,Gets the current rating (number of stars filled).
android.widget.RatingBar.getRating,Get rating.
android.widget.RatingBar.setIsIndicator,Whether this rating bar should only be an indicator (thus non-changeable by the user). Related XML Attributes: android:isIndicator.
android.widget.RatingBar.setIsIndicator,Set is indicator.
android.widget.RatingBar.setIsIndicator,Whether this rating bar should only be an indicator (thus non-changeable by the user).
android.widget.RatingBar.setIsIndicator,Related XML Attributes: android:isIndicator.
android.widget.RatingBar.setNumStars,Sets the number of stars to show. In order for these to be shown properly it is recommended the layout width of this widget be wrap content.
android.widget.RatingBar.setNumStars,Set num stars.
android.widget.RatingBar.setNumStars,Sets the number of stars to show.
android.widget.RatingBar.setNumStars,In order for these to be shown properly it is recommended the layout width of this widget be wrap content.
android.widget.RatingBar.setRating,Sets the rating (the number of stars filled).
android.widget.RatingBar.setRating,Set rating.
android.widget.RatingBar.setStepSize,Sets the step size (granularity) of this rating bar.
android.widget.RatingBar.setStepSize,Set step size.
android.widget.RemoteViews.apply,Inflates the view hierarchy represented by this object and applies all of the actions. Caller beware: this may throw.
android.widget.RemoteViews.apply,Apply.
android.widget.RemoteViews.apply,Inflates the view hierarchy represented by this object and applies all of the actions.
android.widget.RemoteViews.apply,Caller beware: this may throw.
android.widget.RemoteViews.getLayoutId,Returns the layout id of the root layout associated with this RemoteViews. In the case that the RemoteViews has both a landscape and portrait root this will return the layout id associated with the portrait layout.
android.widget.RemoteViews.getLayoutId,Get layout id.
android.widget.RemoteViews.getLayoutId,Returns the layout id of the root layout associated with this RemoteViews.
android.widget.RemoteViews.getLayoutId,In the case that the RemoteViews has both a landscape and portrait root this will return the layout id associated with the portrait layout.
android.widget.RemoteViews.removeAllViews,Equivalent to calling ViewGroup#removeAllViews().
android.widget.RemoteViews.removeAllViews,Remove all views.
android.widget.RemoteViews.setFloat,Call a method taking one float on a view in the layout for this RemoteViews.
android.widget.RemoteViews.setFloat,Set float.
android.widget.RemoteViews.setImageViewBitmap,Equivalent to calling ImageView#setImageBitmap(Bitmap).
android.widget.RemoteViews.setImageViewBitmap,Set image view bitmap.
android.widget.RemoteViews.setImageViewResource,Equivalent to calling ImageView#setImageResource(int).
android.widget.RemoteViews.setImageViewResource,Set image view resource.
android.widget.RemoteViews.setImageViewUri,Equivalent to calling ImageView#setImageURI(Uri).
android.widget.RemoteViews.setImageViewUri,Set image view uri.
android.widget.RemoteViews.setInt,Call a method taking one int on a view in the layout for this RemoteViews.
android.widget.RemoteViews.setInt,Set int.
android.widget.RemoteViews.setOnClickPendingIntent,Equivalent to calling View.setOnClickListener(android.view.View.OnClickListener) to launch the provided PendingIntent. The source bounds ( Intent#getSourceBounds() ) of the intent will be set to the bounds of the clicked view in screen space. Note that any activity options associated with the mPendingIntent may get overridden before starting the intent. When setting the on-click action of items within collections (eg. ListView StackView etc.) this method will not work. Instead use RemoteViews#setPendingIntentTemplate(int PendingIntent) in conjunction with RemoteViews#setOnClickFillInIntent(int Intent).
android.widget.RemoteViews.setOnClickPendingIntent,Set on click pending intent.
android.widget.RemoteViews.setOnClickPendingIntent,Equivalent to calling View.setOnClickListener(android.view.View.OnClickListener) to launch the provided PendingIntent.
android.widget.RemoteViews.setOnClickPendingIntent,The source bounds ( Intent#getSourceBounds() ) of the intent will be set to the bounds of the clicked view in screen space.
android.widget.RemoteViews.setOnClickPendingIntent,Note that any activity options associated with the mPendingIntent may get overridden before starting the intent.
android.widget.RemoteViews.setOnClickPendingIntent,When setting the on-click action of items within collections (eg.
android.widget.RemoteViews.setOnClickPendingIntent,ListView StackView etc.) this method will not work.
android.widget.RemoteViews.setOnClickPendingIntent,Instead use RemoteViews#setPendingIntentTemplate(int PendingIntent) in conjunction with RemoteViews#setOnClickFillInIntent(int Intent).
android.widget.RemoteViews.setProgressBar,Equivalent to calling ProgressBar#setMax ProgressBar#setProgress and ProgressBar#setIndeterminate If indeterminate is true then the values for max and progress are ignored.
android.widget.RemoteViews.setProgressBar,Set progress bar.
android.widget.RemoteViews.setTextColor,Equivalent to calling TextView.setTextColor(int).
android.widget.RemoteViews.setTextColor,Set text color.
android.widget.RemoteViews.setTextViewText,Equivalent to calling TextView#setText(CharSequence).
android.widget.RemoteViews.setTextViewText,Set text view text.
android.widget.RemoteViews.setViewVisibility,Equivalent to calling View#setVisibility(int).
android.widget.RemoteViews.setViewVisibility,Set view visibility.
android.widget.Scroller.getCurrVelocity,Returns the current velocity.
android.widget.Scroller.getCurrVelocity,Get curr velocity.
android.widget.Scroller.getDuration,Returns how long the scroll event will take in milliseconds.
android.widget.Scroller.getDuration,Get duration.
android.widget.Scroller.getStartY,Returns the start Y offset in the scroll.
android.widget.Scroller.getStartY,Get start y.
android.widget.Scroller.setFinalX,Sets the final position (X) for this scroller.
android.widget.Scroller.setFinalX,Set final x.
android.widget.Scroller.startScroll,Start scrolling by providing a starting point the distance to travel and the duration of the scroll.
android.widget.Scroller.startScroll,Start scroll.
android.widget.Scroller.startScroll,Start scrolling by providing a starting point and the distance to travel. The scroll will use the default value of 250 milliseconds for the duration.
android.widget.Scroller.startScroll,Start scroll.
android.widget.Scroller.startScroll,Start scrolling by providing a starting point and the distance to travel.
android.widget.Scroller.startScroll,The scroll will use the default value of 250 milliseconds for the duration.
android.widget.Scroller.timePassed,Returns the time elapsed since the beginning of the scrolling.
android.widget.Scroller.timePassed,Time passed.
android.widget.ScrollView.setFillViewport,Indicates this ScrollView whether it should stretch its content height to fill the viewport or not. Related XML Attributes: android:fillViewport.
android.widget.ScrollView.setFillViewport,Set fill viewport.
android.widget.ScrollView.setFillViewport,Indicates this ScrollView whether it should stretch its content height to fill the viewport or not.
android.widget.ScrollView.setFillViewport,Related XML Attributes: android:fillViewport.
android.widget.ScrollView.smoothScrollBy,Like View#scrollBy but scroll smoothly instead of immediately.
android.widget.ScrollView.smoothScrollBy,Smooth scroll by.
android.widget.SearchView.getQuery,Returns the query string currently in the text field.
android.widget.SearchView.getQuery,Get query.
android.widget.SearchView.isQueryRefinementEnabled,Returns whether query refinement is enabled for all items or only specific ones.
android.widget.SearchView.isQueryRefinementEnabled,Is query refinement enabled.
android.widget.SearchView.isSubmitButtonEnabled,Returns whether the submit button is enabled when necessary or never displayed.
android.widget.SearchView.isSubmitButtonEnabled,Is submit button enabled.
android.widget.SearchView.setQuery,Sets a query string in the text field and optionally submits the query as well.
android.widget.SearchView.setQuery,Set query.
android.widget.SearchView.setQueryRefinementEnabled,Specifies if a query refinement button should be displayed alongside each suggestion or if it should depend on the flags set in the individual items retrieved from the suggestions provider. Clicking on the query refinement button will replace the text in the query text field with the text from the suggestion. This flag only takes effect if a SearchableInfo has been specified with setSearchableInfo(android.app.SearchableInfo) and not when using a custom adapter.
android.widget.SearchView.setQueryRefinementEnabled,Set query refinement enabled.
android.widget.SearchView.setQueryRefinementEnabled,Specifies if a query refinement button should be displayed alongside each suggestion or if it should depend on the flags set in the individual items retrieved from the suggestions provider.
android.widget.SearchView.setQueryRefinementEnabled,Clicking on the query refinement button will replace the text in the query text field with the text from the suggestion.
android.widget.SearchView.setQueryRefinementEnabled,This flag only takes effect if a SearchableInfo has been specified with setSearchableInfo(android.app.SearchableInfo) and not when using a custom adapter.
android.widget.SearchView.setSearchableInfo,Sets the SearchableInfo for this SearchView. Properties in the SearchableInfo are used to display labels hints suggestions create intents for launching search results screens and controlling other affordances such as a voice button.
android.widget.SearchView.setSearchableInfo,Set searchable info.
android.widget.SearchView.setSearchableInfo,Sets the SearchableInfo for this SearchView.
android.widget.SearchView.setSearchableInfo,Properties in the SearchableInfo are used to display labels hints suggestions create intents for launching search results screens and controlling other affordances such as a voice button.
android.widget.SearchView.setSubmitButtonEnabled,Enables showing a submit button when the query is non-empty. In cases where the SearchView is being used to filter the contents of the current activity and doesn't launch a separate results activity then the submit button should be disabled.
android.widget.SearchView.setSubmitButtonEnabled,Set submit button enabled.
android.widget.SearchView.setSubmitButtonEnabled,Enables showing a submit button when the query is non-empty.
android.widget.SearchView.setSubmitButtonEnabled,In cases where the SearchView is being used to filter the contents of the current activity and doesn't launch a separate results activity then the submit button should be disabled.
android.widget.ShareActionProvider.setShareHistoryFileName,Sets the file name of a file for persisting the share history which history will be used for ordering share targets. This file will be used for all view created by onCreateActionView(). Defaults to DEFAULT_SHARE_HISTORY_FILE_NAME. Set to null if share history should not be persisted between sessions. Note: The history file name can be set any time however only the action views created by onCreateActionView() after setting the file name will be backed by the provided file. Therefore if you want to use different history files for sharing specific types of content every time you change the history file setShareHistoryFileName(java.lang.String) you must call Activity.invalidateOptionsMenu() to recreate the action view. You should not call Activity.invalidateOptionsMenu() from Activity.onCreateOptionsMenu(Menu).
android.widget.ShareActionProvider.setShareHistoryFileName,Set share history file name.
android.widget.ShareActionProvider.setShareHistoryFileName,Sets the file name of a file for persisting the share history which history will be used for ordering share targets.
android.widget.ShareActionProvider.setShareHistoryFileName,This file will be used for all view created by onCreateActionView().
android.widget.ShareActionProvider.setShareHistoryFileName,Defaults to DEFAULT_SHARE_HISTORY_FILE_NAME.
android.widget.ShareActionProvider.setShareHistoryFileName,Set to null if share history should not be persisted between sessions.
android.widget.ShareActionProvider.setShareHistoryFileName,Note: The history file name can be set any time however only the action views created by onCreateActionView() after setting the file name will be backed by the provided file.
android.widget.ShareActionProvider.setShareHistoryFileName,Therefore if you want to use different history files for sharing specific types of content every time you change the history file setShareHistoryFileName(java.lang.String) you must call Activity.invalidateOptionsMenu() to recreate the action view.
android.widget.ShareActionProvider.setShareHistoryFileName,You should not call Activity.invalidateOptionsMenu() from Activity.onCreateOptionsMenu(Menu).
android.widget.ShareActionProvider.setShareIntent,Sets an intent with information about the share action. Here is a sample for constructing a share intent:.
android.widget.ShareActionProvider.setShareIntent,Set share intent.
android.widget.ShareActionProvider.setShareIntent,Sets an intent with information about the share action.
android.widget.ShareActionProvider.setShareIntent,Here is a sample for constructing a share intent:.
android.widget.Spinner.setAdapter,Sets the SpinnerAdapter used to provide the data which backs this Spinner. If this Spinner has a popup theme set in XML via the popupTheme attribute the adapter should inflate drop-down views using the same theme. The easiest way to achieve this is by using getPopupContext() to obtain a layout inflater for use in SpinnerAdapter#getDropDownView(int View ViewGroup). Spinner overrides Adapter#getViewTypeCount() on the Adapter associated with this view. Calling Adapter#getItemViewType(int) on the object returned from AbsSpinner.getAdapter() will always return 0. Calling Adapter#getViewTypeCount() will always return 1. On API Build.VERSION_CODES#LOLLIPOP and above attempting to set an adapter with more than one view type will throw an IllegalArgumentException.
android.widget.Spinner.setAdapter,Set adapter.
android.widget.Spinner.setAdapter,Sets the SpinnerAdapter used to provide the data which backs this Spinner.
android.widget.Spinner.setAdapter,If this Spinner has a popup theme set in XML via the popupTheme attribute the adapter should inflate drop-down views using the same theme.
android.widget.Spinner.setAdapter,The easiest way to achieve this is by using getPopupContext() to obtain a layout inflater for use in SpinnerAdapter#getDropDownView(int View ViewGroup).
android.widget.Spinner.setAdapter,Spinner overrides Adapter#getViewTypeCount() on the Adapter associated with this view.
android.widget.Spinner.setAdapter,Calling Adapter#getItemViewType(int) on the object returned from AbsSpinner.getAdapter() will always return 0.
android.widget.Spinner.setAdapter,Calling Adapter#getViewTypeCount() will always return 1.
android.widget.Spinner.setAdapter,On API Build.VERSION_CODES#LOLLIPOP and above attempting to set an adapter with more than one view type will throw an IllegalArgumentException.
android.widget.TabHost.newTabSpec,Creates a new TabSpec associated with this tab host.
android.widget.TabHost.newTabSpec,New tab spec.
android.widget.TabHost.setup,Call setup() before adding tabs if loading TabHost using findViewById(). However : You do not need to call setup() after getTabHost() in TabActivity. Example:.
android.widget.TabHost.setup,Setup.
android.widget.TabHost.setup,Call setup() before adding tabs if loading TabHost using findViewById().
android.widget.TabHost.setup,However : You do not need to call setup() after getTabHost() in TabActivity.
android.widget.TabHost.setup,Example:.
android.widget.TabHost.setup,If you are using TabSpec#setContent(android.content.Intent) this must be called since the activityGroup is needed to launch the local activity. This is done for you if you extend TabActivity.
android.widget.TabHost.setup,Setup.
android.widget.TabHost.setup,If you are using TabSpec#setContent(android.content.Intent) this must be called since the activityGroup is needed to launch the local activity.
android.widget.TabHost.setup,This is done for you if you extend TabActivity.
android.widget.TableLayout.setColumnShrinkable,Makes the given column shrinkable or not. When a row is too wide the table can reclaim extra space from shrinkable columns. Calling this method requests a layout operation. Related XML Attributes: android:shrinkColumns.
android.widget.TableLayout.setColumnShrinkable,Set column shrinkable.
android.widget.TableLayout.setColumnShrinkable,Makes the given column shrinkable or not.
android.widget.TableLayout.setColumnShrinkable,When a row is too wide the table can reclaim extra space from shrinkable columns.
android.widget.TableLayout.setColumnShrinkable,Calling this method requests a layout operation.
android.widget.TableLayout.setColumnShrinkable,Related XML Attributes: android:shrinkColumns.
android.widget.TableLayout.setColumnStretchable,Makes the given column stretchable or not. When stretchable a column takes up as much as available space as possible in its row. Calling this method requests a layout operation. Related XML Attributes: android:stretchColumns.
android.widget.TableLayout.setColumnStretchable,Set column stretchable.
android.widget.TableLayout.setColumnStretchable,Makes the given column stretchable or not.
android.widget.TableLayout.setColumnStretchable,When stretchable a column takes up as much as available space as possible in its row.
android.widget.TableLayout.setColumnStretchable,Calling this method requests a layout operation.
android.widget.TableLayout.setColumnStretchable,Related XML Attributes: android:stretchColumns.
android.widget.TableLayout.setStretchAllColumns,Convenience method to mark all columns as stretchable. Related XML Attributes: android:stretchColumns.
android.widget.TableLayout.setStretchAllColumns,Set stretch all columns.
android.widget.TableLayout.setStretchAllColumns,Convenience method to mark all columns as stretchable.
android.widget.TableLayout.setStretchAllColumns,Related XML Attributes: android:stretchColumns.
android.widget.TabWidget.getChildTabViewAt,Returns the tab indicator view at the given index.
android.widget.TabWidget.getChildTabViewAt,Get child tab view at.
android.widget.TextSwitcher.setText,Sets the text of the next view and switches to the next view. This can be used to animate the old text out and animate the next text in.
android.widget.TextSwitcher.setText,Set text.
android.widget.TextSwitcher.setText,Sets the text of the next view and switches to the next view.
android.widget.TextSwitcher.setText,This can be used to animate the old text out and animate the next text in.
android.widget.TextView.addTextChangedListener,Adds a TextWatcher to the list of those whose methods are called whenever this TextView's text changes. In 1.0 the TextWatcher#afterTextChanged method was erroneously not called after setText(char[] int int) calls. Now doing setText(char[] int int) if there are any text changed listeners forces the buffer type to Editable if it would not otherwise be and does call this method.
android.widget.TextView.addTextChangedListener,Add text changed listener.
android.widget.TextView.addTextChangedListener,Adds a TextWatcher to the list of those whose methods are called whenever this TextView's text changes.
android.widget.TextView.addTextChangedListener,In 1.0 the TextWatcher#afterTextChanged method was erroneously not called after setText(char[] int int) calls.
android.widget.TextView.addTextChangedListener,Now doing setText(char[] int int) if there are any text changed listeners forces the buffer type to Editable if it would not otherwise be and does call this method.
android.widget.TextView.append,Convenience method to append the specified text to the TextView's display buffer upgrading it to TextView.BufferType.EDITABLE if it was not already editable.
android.widget.TextView.append,Append.
android.widget.TextView.append,Convenience method to append the specified text slice to the TextView's display buffer upgrading it to TextView.BufferType.EDITABLE if it was not already editable.
android.widget.TextView.append,Append.
android.widget.TextView.getCompoundDrawables,Returns drawables for the left top right and bottom borders. Related XML Attributes: android:drawableLeft android:drawableTop android:drawableRight android:drawableBottom.
android.widget.TextView.getCompoundDrawables,Get compound drawables.
android.widget.TextView.getCompoundDrawables,Returns drawables for the left top right and bottom borders.
android.widget.TextView.getCompoundDrawables,Related XML Attributes: android:drawableLeft android:drawableTop android:drawableRight android:drawableBottom.
android.widget.TextView.getCompoundDrawablesRelative,Returns drawables for the start top end and bottom borders. Related XML Attributes: android:drawableStart android:drawableTop android:drawableEnd android:drawableBottom.
android.widget.TextView.getCompoundDrawablesRelative,Get compound drawables relative.
android.widget.TextView.getCompoundDrawablesRelative,Returns drawables for the start top end and bottom borders.
android.widget.TextView.getCompoundDrawablesRelative,Related XML Attributes: android:drawableStart android:drawableTop android:drawableEnd android:drawableBottom.
android.widget.TextView.getCompoundPaddingLeft,Returns the left padding of the view plus space for the left Drawable if any.
android.widget.TextView.getCompoundPaddingLeft,Get compound padding left.
android.widget.TextView.getCurrentTextColor,Return the current color selected for normal text.
android.widget.TextView.getCurrentTextColor,Get current text color.
android.widget.TextView.getGravity,Returns the horizontal and vertical alignment of this TextView. Related XML Attributes: android:gravity.
android.widget.TextView.getGravity,Get gravity.
android.widget.TextView.getGravity,Returns the horizontal and vertical alignment of this TextView.
android.widget.TextView.getGravity,Related XML Attributes: android:gravity.
android.widget.TextView.getImeOptions,Get the type of the Input Method Editor (IME).
android.widget.TextView.getImeOptions,Get ime options.
android.widget.TextView.getInputType,Get the type of the editable content.
android.widget.TextView.getInputType,Get input type.
android.widget.TextView.getLineCount,Return the number of lines of text or 0 if the internal Layout has not been built.
android.widget.TextView.getLineCount,Get line count.
android.widget.TextView.getSelectionEnd,Convenience for Selection#getSelectionEnd.
android.widget.TextView.getSelectionEnd,Get selection end.
android.widget.TextView.getSelectionStart,Convenience for Selection#getSelectionStart.
android.widget.TextView.getSelectionStart,Get selection start.
android.widget.TextView.getTextColors,Gets the text colors for the different states (normal selected focused) of the TextView. Related XML Attributes: android:textColor.
android.widget.TextView.getTextColors,Get text colors.
android.widget.TextView.getTextColors,Gets the text colors for the different states (normal selected focused) of the TextView.
android.widget.TextView.getTextColors,Related XML Attributes: android:textColor.
android.widget.TextView.getTotalPaddingLeft,Returns the total left padding of the view including the left Drawable if any.
android.widget.TextView.getTotalPaddingLeft,Get total padding left.
android.widget.TextView.getTotalPaddingTop,Returns the total top padding of the view including the top Drawable if any the extra space to keep more than maxLines from showing and the vertical offset for gravity if any.
android.widget.TextView.getTotalPaddingTop,Get total padding top.
android.widget.TextView.length,Returns the length in characters of the text managed by this TextView.
android.widget.TextView.length,Length.
android.widget.TextView.removeTextChangedListener,Removes the specified TextWatcher from the list of those whose methods are called whenever this TextView's text changes.
android.widget.TextView.removeTextChangedListener,Remove text changed listener.
android.widget.TextView.setAllCaps,"Sets the properties of this field to transform input to ALL CAPS display. This may use a ""small caps"" formatting if available. This setting will be ignored if this field is editable or selectable. This call replaces the current transformation method. Disabling this will not necessarily restore the previous behavior from before this was enabled. Related XML Attributes: android:textAllCaps."
android.widget.TextView.setAllCaps,Set all caps.
android.widget.TextView.setAllCaps,Sets the properties of this field to transform input to ALL CAPS display.
android.widget.TextView.setAllCaps,"This may use a ""small caps"" formatting if available."
android.widget.TextView.setAllCaps,This setting will be ignored if this field is editable or selectable.
android.widget.TextView.setAllCaps,This call replaces the current transformation method.
android.widget.TextView.setAllCaps,Disabling this will not necessarily restore the previous behavior from before this was enabled.
android.widget.TextView.setAllCaps,Related XML Attributes: android:textAllCaps.
android.widget.TextView.setAutoLinkMask,Sets the autolink mask of the text. See Linkify.ALL and peers for possible values. Related XML Attributes: android:autoLink.
android.widget.TextView.setAutoLinkMask,Set auto link mask.
android.widget.TextView.setAutoLinkMask,Sets the autolink mask of the text.
android.widget.TextView.setAutoLinkMask,See Linkify.ALL and peers for possible values.
android.widget.TextView.setAutoLinkMask,Related XML Attributes: android:autoLink.
android.widget.TextView.setCompoundDrawablePadding,Sets the size of the padding between the compound drawables and the text. Related XML Attributes: android:drawablePadding.
android.widget.TextView.setCompoundDrawablePadding,Set compound drawable padding.
android.widget.TextView.setCompoundDrawablePadding,Sets the size of the padding between the compound drawables and the text.
android.widget.TextView.setCompoundDrawablePadding,Related XML Attributes: android:drawablePadding.
android.widget.TextView.setCompoundDrawablesRelativeWithIntrinsicBounds,Sets the Drawables (if any) to appear to the start of above to the end of and below the text. Use null if you do not want a Drawable there. The Drawables' bounds will be set to their intrinsic bounds. Calling this method will overwrite any Drawables previously set using setCompoundDrawables(Drawable Drawable Drawable Drawable) or related methods. Related XML Attributes: android:drawableStart android:drawableTop android:drawableEnd android:drawableBottom.
android.widget.TextView.setCompoundDrawablesRelativeWithIntrinsicBounds,Set compound drawables relative with intrinsic bounds.
android.widget.TextView.setCompoundDrawablesRelativeWithIntrinsicBounds,Sets the Drawables (if any) to appear to the start of above to the end of and below the text.
android.widget.TextView.setCompoundDrawablesRelativeWithIntrinsicBounds,Use null if you do not want a Drawable there.
android.widget.TextView.setCompoundDrawablesRelativeWithIntrinsicBounds,The Drawables' bounds will be set to their intrinsic bounds.
android.widget.TextView.setCompoundDrawablesRelativeWithIntrinsicBounds,Calling this method will overwrite any Drawables previously set using setCompoundDrawables(Drawable Drawable Drawable Drawable) or related methods.
android.widget.TextView.setCompoundDrawablesRelativeWithIntrinsicBounds,Related XML Attributes: android:drawableStart android:drawableTop android:drawableEnd android:drawableBottom.
android.widget.TextView.setCompoundDrawablesRelativeWithIntrinsicBounds,Sets the Drawables (if any) to appear to the start of above to the end of and below the text. Use 0 if you do not want a Drawable there. The Drawables' bounds will be set to their intrinsic bounds. Calling this method will overwrite any Drawables previously set using setCompoundDrawables(Drawable Drawable Drawable Drawable) or related methods. Related XML Attributes: android:drawableStart android:drawableTop android:drawableEnd android:drawableBottom.
android.widget.TextView.setCompoundDrawablesRelativeWithIntrinsicBounds,Set compound drawables relative with intrinsic bounds.
android.widget.TextView.setCompoundDrawablesRelativeWithIntrinsicBounds,Sets the Drawables (if any) to appear to the start of above to the end of and below the text.
android.widget.TextView.setCompoundDrawablesRelativeWithIntrinsicBounds,Use 0 if you do not want a Drawable there.
android.widget.TextView.setCompoundDrawablesRelativeWithIntrinsicBounds,The Drawables' bounds will be set to their intrinsic bounds.
android.widget.TextView.setCompoundDrawablesRelativeWithIntrinsicBounds,Calling this method will overwrite any Drawables previously set using setCompoundDrawables(Drawable Drawable Drawable Drawable) or related methods.
android.widget.TextView.setCompoundDrawablesRelativeWithIntrinsicBounds,Related XML Attributes: android:drawableStart android:drawableTop android:drawableEnd android:drawableBottom.
android.widget.TextView.setCompoundDrawablesWithIntrinsicBounds,Sets the Drawables (if any) to appear to the left of above to the right of and below the text. Use null if you do not want a Drawable there. The Drawables' bounds will be set to their intrinsic bounds. Calling this method will overwrite any Drawables previously set using setCompoundDrawablesRelative(Drawable Drawable Drawable Drawable) or related methods. Related XML Attributes: android:drawableLeft android:drawableTop android:drawableRight android:drawableBottom.
android.widget.TextView.setCompoundDrawablesWithIntrinsicBounds,Set compound drawables with intrinsic bounds.
android.widget.TextView.setCompoundDrawablesWithIntrinsicBounds,Sets the Drawables (if any) to appear to the left of above to the right of and below the text.
android.widget.TextView.setCompoundDrawablesWithIntrinsicBounds,Use null if you do not want a Drawable there.
android.widget.TextView.setCompoundDrawablesWithIntrinsicBounds,The Drawables' bounds will be set to their intrinsic bounds.
android.widget.TextView.setCompoundDrawablesWithIntrinsicBounds,Calling this method will overwrite any Drawables previously set using setCompoundDrawablesRelative(Drawable Drawable Drawable Drawable) or related methods.
android.widget.TextView.setCompoundDrawablesWithIntrinsicBounds,Related XML Attributes: android:drawableLeft android:drawableTop android:drawableRight android:drawableBottom.
android.widget.TextView.setCompoundDrawablesWithIntrinsicBounds,Sets the Drawables (if any) to appear to the left of above to the right of and below the text. Use 0 if you do not want a Drawable there. The Drawables' bounds will be set to their intrinsic bounds. Calling this method will overwrite any Drawables previously set using setCompoundDrawablesRelative(Drawable Drawable Drawable Drawable) or related methods. Related XML Attributes: android:drawableLeft android:drawableTop android:drawableRight android:drawableBottom.
android.widget.TextView.setCompoundDrawablesWithIntrinsicBounds,Set compound drawables with intrinsic bounds.
android.widget.TextView.setCompoundDrawablesWithIntrinsicBounds,Sets the Drawables (if any) to appear to the left of above to the right of and below the text.
android.widget.TextView.setCompoundDrawablesWithIntrinsicBounds,Use 0 if you do not want a Drawable there.
android.widget.TextView.setCompoundDrawablesWithIntrinsicBounds,The Drawables' bounds will be set to their intrinsic bounds.
android.widget.TextView.setCompoundDrawablesWithIntrinsicBounds,Calling this method will overwrite any Drawables previously set using setCompoundDrawablesRelative(Drawable Drawable Drawable Drawable) or related methods.
android.widget.TextView.setCompoundDrawablesWithIntrinsicBounds,Related XML Attributes: android:drawableLeft android:drawableTop android:drawableRight android:drawableBottom.
android.widget.TextView.setCursorVisible,Set whether the cursor is visible. The default is true. Note that this property only makes sense for editable TextView. Related XML Attributes: android:cursorVisible.
android.widget.TextView.setCursorVisible,Set cursor visible.
android.widget.TextView.setCursorVisible,Set whether the cursor is visible.
android.widget.TextView.setCursorVisible,The default is true.
android.widget.TextView.setCursorVisible,Note that this property only makes sense for editable TextView.
android.widget.TextView.setCursorVisible,Related XML Attributes: android:cursorVisible.
android.widget.TextView.setError,"Sets the right-hand compound drawable of the TextView to the ""error"" icon and sets an error message that will be displayed in a popup when the TextView has focus. The icon and error message will be reset to null when any key events cause changes to the TextView's text. If the error is null the error message and icon will be cleared."
android.widget.TextView.setError,Set error.
android.widget.TextView.setError,"Sets the right-hand compound drawable of the TextView to the ""error"" icon and sets an error message that will be displayed in a popup when the TextView has focus."
android.widget.TextView.setError,The icon and error message will be reset to null when any key events cause changes to the TextView's text.
android.widget.TextView.setError,If the error is null the error message and icon will be cleared.
android.widget.TextView.setError,Sets the right-hand compound drawable of the TextView to the specified icon and sets an error message that will be displayed in a popup when the TextView has focus. The icon and error message will be reset to null when any key events cause changes to the TextView's text. The drawable must already have had Drawable#setBounds set on it. If the error is null the error message will be cleared (and you should provide a null icon as well).
android.widget.TextView.setError,Set error.
android.widget.TextView.setError,Sets the right-hand compound drawable of the TextView to the specified icon and sets an error message that will be displayed in a popup when the TextView has focus.
android.widget.TextView.setError,The icon and error message will be reset to null when any key events cause changes to the TextView's text.
android.widget.TextView.setError,The drawable must already have had Drawable#setBounds set on it.
android.widget.TextView.setError,If the error is null the error message will be cleared (and you should provide a null icon as well).
android.widget.TextView.setFilters,Sets the list of input filters that will be used if the buffer is Editable. Has no effect otherwise. Related XML Attributes: android:maxLength.
android.widget.TextView.setFilters,Set filters.
android.widget.TextView.setFilters,Sets the list of input filters that will be used if the buffer is Editable.
android.widget.TextView.setFilters,Has no effect otherwise.
android.widget.TextView.setFilters,Related XML Attributes: android:maxLength.
android.widget.TextView.setGravity,Sets the horizontal alignment of the text and the vertical gravity that will be used when there is extra space in the TextView beyond what is required for the text itself. Related XML Attributes: android:gravity.
android.widget.TextView.setGravity,Set gravity.
android.widget.TextView.setGravity,Sets the horizontal alignment of the text and the vertical gravity that will be used when there is extra space in the TextView beyond what is required for the text itself.
android.widget.TextView.setGravity,Related XML Attributes: android:gravity.
android.widget.TextView.setHeight,Sets the height of the TextView to be exactly pixels tall. This value is used for height calculation if LayoutParams does not force TextView to have an exact height. Setting this value overrides previous minimum/maximum height configurations such as setMinHeight(int) or setMaxHeight(int). Related XML Attributes: android:height.
android.widget.TextView.setHeight,Set height.
android.widget.TextView.setHeight,Sets the height of the TextView to be exactly pixels tall.
android.widget.TextView.setHeight,This value is used for height calculation if LayoutParams does not force TextView to have an exact height.
android.widget.TextView.setHeight,Setting this value overrides previous minimum/maximum height configurations such as setMinHeight(int) or setMaxHeight(int).
android.widget.TextView.setHeight,Related XML Attributes: android:height.
android.widget.TextView.setHighlightColor,Sets the color used to display the selection highlight. Related XML Attributes: android:textColorHighlight.
android.widget.TextView.setHighlightColor,Set highlight color.
android.widget.TextView.setHighlightColor,Sets the color used to display the selection highlight.
android.widget.TextView.setHighlightColor,Related XML Attributes: android:textColorHighlight.
android.widget.TextView.setHint,Sets the text to be displayed when the text of the TextView is empty. Null means to use the normal empty text. The hint does not currently participate in determining the size of the view. Related XML Attributes: android:hint.
android.widget.TextView.setHint,Set hint.
android.widget.TextView.setHint,Sets the text to be displayed when the text of the TextView is empty.
android.widget.TextView.setHint,Null means to use the normal empty text.
android.widget.TextView.setHint,The hint does not currently participate in determining the size of the view.
android.widget.TextView.setHint,Related XML Attributes: android:hint.
android.widget.TextView.setHint,Sets the text to be displayed when the text of the TextView is empty from a resource. Related XML Attributes: android:hint.
android.widget.TextView.setHint,Set hint.
android.widget.TextView.setHint,Sets the text to be displayed when the text of the TextView is empty from a resource.
android.widget.TextView.setHint,Related XML Attributes: android:hint.
android.widget.TextView.setHintTextColor,Sets the color of the hint text. Related XML Attributes: android:textColorHint.
android.widget.TextView.setHintTextColor,Set hint text color.
android.widget.TextView.setHintTextColor,Sets the color of the hint text.
android.widget.TextView.setHintTextColor,Related XML Attributes: android:textColorHint.
android.widget.TextView.setHintTextColor,Sets the color of the hint text for all the states (disabled focussed selected...) of this TextView. Related XML Attributes: android:textColorHint.
android.widget.TextView.setHintTextColor,Set hint text color.
android.widget.TextView.setHintTextColor,Sets the color of the hint text for all the states (disabled focussed selected...) of this TextView.
android.widget.TextView.setHintTextColor,Related XML Attributes: android:textColorHint.
android.widget.TextView.setHorizontallyScrolling,Sets whether the text should be allowed to be wider than the View is. If false it will be wrapped to the width of the View. Related XML Attributes: android:scrollHorizontally.
android.widget.TextView.setHorizontallyScrolling,Set horizontally scrolling.
android.widget.TextView.setHorizontallyScrolling,Sets whether the text should be allowed to be wider than the View is.
android.widget.TextView.setHorizontallyScrolling,If false it will be wrapped to the width of the View.
android.widget.TextView.setHorizontallyScrolling,Related XML Attributes: android:scrollHorizontally.
android.widget.TextView.setIncludeFontPadding,Set whether the TextView includes extra top and bottom padding to make room for accents that go above the normal ascent and descent. The default is true. Related XML Attributes: android:includeFontPadding.
android.widget.TextView.setIncludeFontPadding,Set include font padding.
android.widget.TextView.setIncludeFontPadding,Set whether the TextView includes extra top and bottom padding to make room for accents that go above the normal ascent and descent.
android.widget.TextView.setIncludeFontPadding,The default is true.
android.widget.TextView.setIncludeFontPadding,Related XML Attributes: android:includeFontPadding.
android.widget.TextView.setInputType,Set the type of the content with a constant as defined for EditorInfo#inputType. This will take care of changing the key listener by calling setKeyListener(android.text.method.KeyListener) to match the given content type. If the given content type is EditorInfo#TYPE_NULL then a soft keyboard will not be displayed for this text view. Note that the maximum number of displayed lines (see setMaxLines(int) ) will be modified if you change the EditorInfo#TYPE_TEXT_FLAG_MULTI_LINE flag of the input type. Related XML Attributes: android:inputType.
android.widget.TextView.setInputType,Set input type.
android.widget.TextView.setInputType,Set the type of the content with a constant as defined for EditorInfo#inputType.
android.widget.TextView.setInputType,This will take care of changing the key listener by calling setKeyListener(android.text.method.KeyListener) to match the given content type.
android.widget.TextView.setInputType,If the given content type is EditorInfo#TYPE_NULL then a soft keyboard will not be displayed for this text view.
android.widget.TextView.setInputType,Note that the maximum number of displayed lines (see setMaxLines(int) ) will be modified if you change the EditorInfo#TYPE_TEXT_FLAG_MULTI_LINE flag of the input type.
android.widget.TextView.setInputType,Related XML Attributes: android:inputType.
android.widget.TextView.setLineSpacing,Sets line spacing for this TextView. Each line other than the last line will have its height multiplied by mult and have add added to it. Related XML Attributes: android:lineSpacingExtra android:lineSpacingMultiplier.
android.widget.TextView.setLineSpacing,Set line spacing.
android.widget.TextView.setLineSpacing,Sets line spacing for this TextView.
android.widget.TextView.setLineSpacing,Each line other than the last line will have its height multiplied by mult and have add added to it.
android.widget.TextView.setLineSpacing,Related XML Attributes: android:lineSpacingExtra android:lineSpacingMultiplier.
android.widget.TextView.setLines,Sets the height of the TextView to be exactly lines tall. This value is used for height calculation if LayoutParams does not force TextView to have an exact height. Setting this value overrides previous minimum/maximum height configurations such as setMinLines(int) or setMaxLines(int). setSingleLine() will set this value to 1. Related XML Attributes: android:lines.
android.widget.TextView.setLines,Set lines.
android.widget.TextView.setLines,Sets the height of the TextView to be exactly lines tall.
android.widget.TextView.setLines,This value is used for height calculation if LayoutParams does not force TextView to have an exact height.
android.widget.TextView.setLines,Setting this value overrides previous minimum/maximum height configurations such as setMinLines(int) or setMaxLines(int).
android.widget.TextView.setLines,setSingleLine() will set this value to 1.
android.widget.TextView.setLines,Related XML Attributes: android:lines.
android.widget.TextView.setLinkTextColor,Sets the color of links in the text. Related XML Attributes: android:textColorLink.
android.widget.TextView.setLinkTextColor,Set link text color.
android.widget.TextView.setLinkTextColor,Sets the color of links in the text.
android.widget.TextView.setLinkTextColor,Related XML Attributes: android:textColorLink.
android.widget.TextView.setLinkTextColor,Sets the color of links in the text. Related XML Attributes: android:textColorLink.
android.widget.TextView.setLinkTextColor,Set link text color.
android.widget.TextView.setLinkTextColor,Sets the color of links in the text.
android.widget.TextView.setLinkTextColor,Related XML Attributes: android:textColorLink.
android.widget.TextView.setLinksClickable,Sets whether the movement method will automatically be set to LinkMovementMethod if setAutoLinkMask(int) has been set to nonzero and links are detected in setText(char[] int int). The default is true. Related XML Attributes: android:linksClickable.
android.widget.TextView.setLinksClickable,Set links clickable.
android.widget.TextView.setLinksClickable,Sets whether the movement method will automatically be set to LinkMovementMethod if setAutoLinkMask(int) has been set to nonzero and links are detected in setText(char[] int int).
android.widget.TextView.setLinksClickable,The default is true.
android.widget.TextView.setLinksClickable,Related XML Attributes: android:linksClickable.
android.widget.TextView.setMaxHeight,Sets the height of the TextView to be at most maxPixels tall. This value is used for height calculation if LayoutParams does not force TextView to have an exact height. Setting this value overrides previous maximum height configurations such as setMaxLines(int) or setLines(int). Related XML Attributes: android:maxHeight.
android.widget.TextView.setMaxHeight,Set max height.
android.widget.TextView.setMaxHeight,Sets the height of the TextView to be at most maxPixels tall.
android.widget.TextView.setMaxHeight,This value is used for height calculation if LayoutParams does not force TextView to have an exact height.
android.widget.TextView.setMaxHeight,Setting this value overrides previous maximum height configurations such as setMaxLines(int) or setLines(int).
android.widget.TextView.setMaxHeight,Related XML Attributes: android:maxHeight.
android.widget.TextView.setMaxLines,Sets the height of the TextView to be at most maxLines tall. This value is used for height calculation if LayoutParams does not force TextView to have an exact height. Setting this value overrides previous maximum height configurations such as setMaxHeight(int) or setLines(int). Related XML Attributes: android:maxLines.
android.widget.TextView.setMaxLines,Set max lines.
android.widget.TextView.setMaxLines,Sets the height of the TextView to be at most maxLines tall.
android.widget.TextView.setMaxLines,This value is used for height calculation if LayoutParams does not force TextView to have an exact height.
android.widget.TextView.setMaxLines,Setting this value overrides previous maximum height configurations such as setMaxHeight(int) or setLines(int).
android.widget.TextView.setMaxLines,Related XML Attributes: android:maxLines.
android.widget.TextView.setMaxWidth,Sets the width of the TextView to be at most maxPixels wide. This value is used for width calculation if LayoutParams does not force TextView to have an exact width. Setting this value overrides previous maximum width configurations such as setMaxEms(int) or setEms(int). Related XML Attributes: android:maxWidth.
android.widget.TextView.setMaxWidth,Set max width.
android.widget.TextView.setMaxWidth,Sets the width of the TextView to be at most maxPixels wide.
android.widget.TextView.setMaxWidth,This value is used for width calculation if LayoutParams does not force TextView to have an exact width.
android.widget.TextView.setMaxWidth,Setting this value overrides previous maximum width configurations such as setMaxEms(int) or setEms(int).
android.widget.TextView.setMaxWidth,Related XML Attributes: android:maxWidth.
android.widget.TextView.setMinHeight,Sets the height of the TextView to be at least minPixels tall. This value is used for height calculation if LayoutParams does not force TextView to have an exact height. Setting this value overrides previous minimum height configurations such as setMinLines(int) or setLines(int). The value given here is different than View.setMinimumHeight(int). Between minHeight and the value set in View.setMinimumHeight(int) the greater one is used to decide the final height. Related XML Attributes: android:minHeight.
android.widget.TextView.setMinHeight,Set min height.
android.widget.TextView.setMinHeight,Sets the height of the TextView to be at least minPixels tall.
android.widget.TextView.setMinHeight,This value is used for height calculation if LayoutParams does not force TextView to have an exact height.
android.widget.TextView.setMinHeight,Setting this value overrides previous minimum height configurations such as setMinLines(int) or setLines(int).
android.widget.TextView.setMinHeight,The value given here is different than View.setMinimumHeight(int).
android.widget.TextView.setMinHeight,Between minHeight and the value set in View.setMinimumHeight(int) the greater one is used to decide the final height.
android.widget.TextView.setMinHeight,Related XML Attributes: android:minHeight.
android.widget.TextView.setMinWidth,Sets the width of the TextView to be at least minPixels wide. This value is used for width calculation if LayoutParams does not force TextView to have an exact width. Setting this value overrides previous minimum width configurations such as setMinEms(int) or setEms(int). The value given here is different than View.setMinimumWidth(int). Between minWidth and the value set in View.setMinimumWidth(int) the greater one is used to decide the final width. Related XML Attributes: android:minWidth.
android.widget.TextView.setMinWidth,Set min width.
android.widget.TextView.setMinWidth,Sets the width of the TextView to be at least minPixels wide.
android.widget.TextView.setMinWidth,This value is used for width calculation if LayoutParams does not force TextView to have an exact width.
android.widget.TextView.setMinWidth,Setting this value overrides previous minimum width configurations such as setMinEms(int) or setEms(int).
android.widget.TextView.setMinWidth,The value given here is different than View.setMinimumWidth(int).
android.widget.TextView.setMinWidth,Between minWidth and the value set in View.setMinimumWidth(int) the greater one is used to decide the final width.
android.widget.TextView.setMinWidth,Related XML Attributes: android:minWidth.
android.widget.TextView.setMovementMethod,Sets the MovementMethod for handling arrow key movement for this TextView. This can be null to disallow using the arrow keys to move the cursor or scroll the view. Be warned that if you want a TextView with a key listener or movement method not to be focusable or if you want a TextView without a key listener or movement method to be focusable you must call View.setFocusable(boolean) again after calling this to get the focusability back the way you want it.
android.widget.TextView.setMovementMethod,Set movement method.
android.widget.TextView.setMovementMethod,Sets the MovementMethod for handling arrow key movement for this TextView.
android.widget.TextView.setMovementMethod,This can be null to disallow using the arrow keys to move the cursor or scroll the view.
android.widget.TextView.setMovementMethod,Be warned that if you want a TextView with a key listener or movement method not to be focusable or if you want a TextView without a key listener or movement method to be focusable you must call View.setFocusable(boolean) again after calling this to get the focusability back the way you want it.
android.widget.TextView.setPaintFlags,Sets flags on the Paint being used to display the text and reflows the text if they are different from the old flags.
android.widget.TextView.setPaintFlags,Set paint flags.
android.widget.TextView.setShadowLayer,Gives the text a shadow of the specified blur radius and color the specified distance from its drawn position. The text shadow produced does not interact with the properties on view that are responsible for real time shadows View#getElevation() and View#getTranslationZ(). Related XML Attributes: android:shadowColor android:shadowDx android:shadowDy android:shadowRadius.
android.widget.TextView.setShadowLayer,Set shadow layer.
android.widget.TextView.setShadowLayer,Gives the text a shadow of the specified blur radius and color the specified distance from its drawn position.
android.widget.TextView.setShadowLayer,The text shadow produced does not interact with the properties on view that are responsible for real time shadows View#getElevation() and View#getTranslationZ().
android.widget.TextView.setShadowLayer,Related XML Attributes: android:shadowColor android:shadowDx android:shadowDy android:shadowRadius.
android.widget.TextView.setSingleLine,If true sets the properties of this field (number of lines horizontally scrolling transformation method) to be for a single-line input; if false restores these to the default conditions. Note that the default conditions are not necessarily those that were in effect prior this method and you may want to reset these properties to your custom values. Related XML Attributes: android:singleLine.
android.widget.TextView.setSingleLine,Set single line.
android.widget.TextView.setSingleLine,If true sets the properties of this field (number of lines horizontally scrolling transformation method) to be for a single-line input; if false restores these to the default conditions.
android.widget.TextView.setSingleLine,Note that the default conditions are not necessarily those that were in effect prior this method and you may want to reset these properties to your custom values.
android.widget.TextView.setSingleLine,Related XML Attributes: android:singleLine.
android.widget.TextView.setSingleLine,Sets the properties of this field (lines horizontally scrolling transformation method) to be for a single-line input. Related XML Attributes: android:singleLine.
android.widget.TextView.setSingleLine,Set single line.
android.widget.TextView.setSingleLine,Sets the properties of this field (lines horizontally scrolling transformation method) to be for a single-line input.
android.widget.TextView.setSingleLine,Related XML Attributes: android:singleLine.
android.widget.TextView.setText,Sets the text to be displayed using a string resource identifier. Related XML Attributes: android:text.
android.widget.TextView.setText,Set text.
android.widget.TextView.setText,Sets the text to be displayed using a string resource identifier.
android.widget.TextView.setText,Related XML Attributes: android:text.
android.widget.TextView.setText,Sets the text to be displayed. TextView does not accept HTML-like formatting which you can do with text strings in XML resource files. To style your strings attach android.text.style.* objects to a SpannableString or see the Available Resource Types documentation for an example of setting formatted text in the XML resource file. Related XML Attributes: android:text.
android.widget.TextView.setText,Set text.
android.widget.TextView.setText,Sets the text to be displayed.
android.widget.TextView.setText,TextView does not accept HTML-like formatting which you can do with text strings in XML resource files.
android.widget.TextView.setText,To style your strings attach android.text.style.* objects to a SpannableString or see the Available Resource Types documentation for an example of setting formatted text in the XML resource file.
android.widget.TextView.setText,Related XML Attributes: android:text.
android.widget.TextView.setText,Sets the text to be displayed and the TextView.BufferType. Related XML Attributes: android:text android:bufferType.
android.widget.TextView.setText,Set text.
android.widget.TextView.setText,Sets the text to be displayed and the TextView.BufferType.
android.widget.TextView.setText,Related XML Attributes: android:text android:bufferType.
android.widget.TextView.setText,Sets the text to be displayed using a string resource identifier and the TextView.BufferType. Related XML Attributes: android:text android:bufferType.
android.widget.TextView.setText,Set text.
android.widget.TextView.setText,Sets the text to be displayed using a string resource identifier and the TextView.BufferType.
android.widget.TextView.setText,Related XML Attributes: android:text android:bufferType.
android.widget.TextView.setText,Sets the TextView to display the specified slice of the specified char array. You must promise that you will not change the contents of the array except for right before another call to setText() since the TextView has no way to know that the text has changed and that it needs to invalidate and re-layout.
android.widget.TextView.setText,Set text.
android.widget.TextView.setText,Sets the TextView to display the specified slice of the specified char array.
android.widget.TextView.setText,You must promise that you will not change the contents of the array except for right before another call to setText() since the TextView has no way to know that the text has changed and that it needs to invalidate and re-layout.
android.widget.TextView.setTextAppearance,This method was deprecated in API level 23. Use setTextAppearance(int) instead. Sets the text color size style hint color and highlight color from the specified TextAppearance resource.
android.widget.TextView.setTextAppearance,Set text appearance.
android.widget.TextView.setTextAppearance,This method was deprecated in API level 23.
android.widget.TextView.setTextAppearance,Use setTextAppearance(int) instead.
android.widget.TextView.setTextAppearance,Sets the text color size style hint color and highlight color from the specified TextAppearance resource.
android.widget.TextView.setTextAppearance,Sets the text appearance from the specified style resource. Use a framework-defined TextAppearance style like @android:style/TextAppearance.Material.Body1 or see TextAppearance for the set of attributes that can be used in a custom style. Related XML Attributes: android:textAppearance.
android.widget.TextView.setTextAppearance,Set text appearance.
android.widget.TextView.setTextAppearance,Sets the text appearance from the specified style resource.
android.widget.TextView.setTextAppearance,Use a framework-defined TextAppearance style like @android:style/TextAppearance.Material.Body1 or see TextAppearance for the set of attributes that can be used in a custom style.
android.widget.TextView.setTextAppearance,Related XML Attributes: android:textAppearance.
android.widget.TextView.setTextColor,Sets the text color for all the states (normal selected focused) to be this color. Related XML Attributes: android:textColor.
android.widget.TextView.setTextColor,Set text color.
android.widget.TextView.setTextColor,Sets the text color for all the states (normal selected focused) to be this color.
android.widget.TextView.setTextColor,Related XML Attributes: android:textColor.
android.widget.TextView.setTextColor,Sets the text color. Related XML Attributes: android:textColor.
android.widget.TextView.setTextColor,Set text color.
android.widget.TextView.setTextColor,Sets the text color.
android.widget.TextView.setTextColor,Related XML Attributes: android:textColor.
android.widget.TextView.setTextIsSelectable,"Sets whether the content of this view is selectable by the user. The default is false meaning that the content is not selectable. When you use a TextView to display a useful piece of information to the user (such as a contact's address) make it selectable so that the user can select and copy its content. You can also use set the XML attribute R.styleable.TextView_textIsSelectable to ""true"". When you call this method to set the value of textIsSelectable it sets the flags focusable focusableInTouchMode clickable and longClickable to the same value. These flags correspond to the attributes android:focusable android:focusableInTouchMode android:clickable and android:longClickable. To restore any of these flags to a state you had set previously call one or more of the following methods: setFocusable() setFocusableInTouchMode() setClickable() or setLongClickable()."
android.widget.TextView.setTextIsSelectable,Set text is selectable.
android.widget.TextView.setTextIsSelectable,Sets whether the content of this view is selectable by the user.
android.widget.TextView.setTextIsSelectable,The default is false meaning that the content is not selectable.
android.widget.TextView.setTextIsSelectable,When you use a TextView to display a useful piece of information to the user (such as a contact's address) make it selectable so that the user can select and copy its content.
android.widget.TextView.setTextIsSelectable,"You can also use set the XML attribute R.styleable.TextView_textIsSelectable to ""true""."
android.widget.TextView.setTextIsSelectable,When you call this method to set the value of textIsSelectable it sets the flags focusable focusableInTouchMode clickable and longClickable to the same value.
android.widget.TextView.setTextIsSelectable,These flags correspond to the attributes android:focusable android:focusableInTouchMode android:clickable and android:longClickable.
android.widget.TextView.setTextIsSelectable,To restore any of these flags to a state you had set previously call one or more of the following methods: setFocusable() setFocusableInTouchMode() setClickable() or setLongClickable().
android.widget.TextView.setTextSize,Set the default text size to a given unit and value. See TypedValue for the possible dimension units. Note: if this TextView has the auto-size feature enabled than this function is no-op. Related XML Attributes: android:textSize.
android.widget.TextView.setTextSize,Set text size.
android.widget.TextView.setTextSize,Set the default text size to a given unit and value.
android.widget.TextView.setTextSize,See TypedValue for the possible dimension units.
android.widget.TextView.setTextSize,Note: if this TextView has the auto-size feature enabled than this function is no-op.
android.widget.TextView.setTextSize,Related XML Attributes: android:textSize.
android.widget.TextView.setTextSize,"Set the default text size to the given value interpreted as ""scaled pixel"" units. This size is adjusted based on the current density and user font size preference. Note: if this TextView has the auto-size feature enabled than this function is no-op. Related XML Attributes: android:textSize."
android.widget.TextView.setTextSize,Set text size.
android.widget.TextView.setTextSize,"Set the default text size to the given value interpreted as ""scaled pixel"" units."
android.widget.TextView.setTextSize,This size is adjusted based on the current density and user font size preference.
android.widget.TextView.setTextSize,Note: if this TextView has the auto-size feature enabled than this function is no-op.
android.widget.TextView.setTextSize,Related XML Attributes: android:textSize.
android.widget.TextView.setTransformationMethod,Sets the transformation that is applied to the text that this TextView is displaying. Related XML Attributes: android:password android:singleLine.
android.widget.TextView.setTransformationMethod,Set transformation method.
android.widget.TextView.setTransformationMethod,Sets the transformation that is applied to the text that this TextView is displaying.
android.widget.TextView.setTransformationMethod,Related XML Attributes: android:password android:singleLine.
android.widget.TextView.setTypeface,Sets the typeface and style in which the text should be displayed. Note that not all Typeface families actually have bold and italic variants so you may need to use setTypeface(android.graphics.Typeface int) to get the appearance that you actually want. Related XML Attributes: android:fontFamily android:typeface android:textStyle.
android.widget.TextView.setTypeface,Set typeface.
android.widget.TextView.setTypeface,Sets the typeface and style in which the text should be displayed.
android.widget.TextView.setTypeface,Note that not all Typeface families actually have bold and italic variants so you may need to use setTypeface(android.graphics.Typeface int) to get the appearance that you actually want.
android.widget.TextView.setTypeface,Related XML Attributes: android:fontFamily android:typeface android:textStyle.
android.widget.TextView.setTypeface,Sets the typeface and style in which the text should be displayed and turns on the fake bold and italic bits in the Paint if the Typeface that you provided does not have all the bits in the style that you specified. Related XML Attributes: android:typeface android:textStyle.
android.widget.TextView.setTypeface,Set typeface.
android.widget.TextView.setTypeface,Sets the typeface and style in which the text should be displayed and turns on the fake bold and italic bits in the Paint if the Typeface that you provided does not have all the bits in the style that you specified.
android.widget.TextView.setTypeface,Related XML Attributes: android:typeface android:textStyle.
android.widget.TextView.setWidth,Sets the width of the TextView to be exactly pixels wide. This value is used for width calculation if LayoutParams does not force TextView to have an exact width. Setting this value overrides previous minimum/maximum width configurations such as setMinWidth(int) or setMaxWidth(int). Related XML Attributes: android:width.
android.widget.TextView.setWidth,Set width.
android.widget.TextView.setWidth,Sets the width of the TextView to be exactly pixels wide.
android.widget.TextView.setWidth,This value is used for width calculation if LayoutParams does not force TextView to have an exact width.
android.widget.TextView.setWidth,Setting this value overrides previous minimum/maximum width configurations such as setMinWidth(int) or setMaxWidth(int).
android.widget.TextView.setWidth,Related XML Attributes: android:width.
android.widget.TimePicker.setCurrentHour,This method was deprecated in API level 23. Use setHour(int) Sets the currently selected hour using 24-hour time.
android.widget.TimePicker.setCurrentHour,Set current hour.
android.widget.TimePicker.setCurrentHour,This method was deprecated in API level 23.
android.widget.TimePicker.setCurrentHour,Use setHour(int) Sets the currently selected hour using 24-hour time.
android.widget.TimePicker.setCurrentMinute,This method was deprecated in API level 23. Use setMinute(int) Sets the currently selected minute.
android.widget.TimePicker.setCurrentMinute,Set current minute.
android.widget.TimePicker.setCurrentMinute,This method was deprecated in API level 23.
android.widget.TimePicker.setCurrentMinute,Use setMinute(int) Sets the currently selected minute.
android.widget.Toast.cancel,Close the view if it's showing or don't show it if it isn't showing yet. You do not normally have to call this. Normally view will disappear on its own after the appropriate duration.
android.widget.Toast.cancel,Cancel.
android.widget.Toast.cancel,Close the view if it's showing or don't show it if it isn't showing yet.
android.widget.Toast.cancel,You do not normally have to call this.
android.widget.Toast.cancel,Normally view will disappear on its own after the appropriate duration.
android.widget.Toast.getDuration,Return the duration.
android.widget.Toast.getDuration,Get duration.
android.widget.Toast.getGravity,Get the location at which the notification should appear on the screen.
android.widget.Toast.getGravity,Get gravity.
android.widget.Toast.getHorizontalMargin,Return the horizontal margin.
android.widget.Toast.getHorizontalMargin,Get horizontal margin.
android.widget.Toast.getVerticalMargin,Return the vertical margin.
android.widget.Toast.getVerticalMargin,Get vertical margin.
android.widget.Toast.getView,Return the view.
android.widget.Toast.getView,Get view.
android.widget.Toast.getXOffset,Return the X offset in pixels to apply to the gravity's location.
android.widget.Toast.getXOffset,Get x offset.
android.widget.Toast.getYOffset,Return the Y offset in pixels to apply to the gravity's location.
android.widget.Toast.getYOffset,Get y offset.
android.widget.Toast.makeText,Make a standard toast that just contains a text view with the text from a resource.
android.widget.Toast.makeText,Make text.
android.widget.Toast.makeText,Make a standard toast that just contains a text view.
android.widget.Toast.makeText,Make text.
android.widget.Toast.setDuration,Set how long to show the view for.
android.widget.Toast.setDuration,Set duration.
android.widget.Toast.setGravity,Set the location at which the notification should appear on the screen.
android.widget.Toast.setGravity,Set gravity.
android.widget.Toast.setMargin,Set the margins of the view.
android.widget.Toast.setMargin,Set margin.
android.widget.Toast.setText,Update the text in a Toast that was previously created using one of the makeText() methods.
android.widget.Toast.setText,Set text.
android.widget.Toast.setText,Update the text in a Toast that was previously created using one of the makeText() methods.
android.widget.Toast.setText,Set text.
android.widget.Toast.setView,Set the view to show.
android.widget.Toast.setView,Set view.
android.widget.Toast.show,Show the view for the specified duration.
android.widget.Toast.show,Show.
android.widget.ToggleButton.setTextOff,Sets the text for when the button is not in the checked state.
android.widget.ToggleButton.setTextOff,Set text off.
android.widget.VideoView.setVideoPath,Sets video path.
android.widget.VideoView.setVideoPath,Set video path.
android.widget.VideoView.setVideoURI,Sets video URI using specific headers.
android.widget.VideoView.setVideoURI,Set video u r i.
android.widget.VideoView.setVideoURI,Sets video URI.
android.widget.VideoView.setVideoURI,Set video u r i.
android.widget.ViewAnimator.getCurrentView,Returns the View corresponding to the currently displayed child.
android.widget.ViewAnimator.getCurrentView,Get current view.
android.widget.ViewAnimator.setDisplayedChild,Sets which child view will be displayed.
android.widget.ViewAnimator.setDisplayedChild,Set displayed child.
android.widget.ViewFlipper.stopFlipping,No more flips.
android.widget.ViewFlipper.stopFlipping,Stop flipping.
android.widget.ViewSwitcher.getNextView,Returns the next view to be displayed.
android.widget.ViewSwitcher.getNextView,Get next view.
android.widget.ViewSwitcher.reset,Reset the ViewSwitcher to hide all of the existing views and to make it think that the first time animation has not yet played.
android.widget.ViewSwitcher.reset,Reset.
android.widget.ZoomButtonsController.getContainer,Gets the container that is the parent of the zoom controls. The client can add other views to this container to link them with the zoom controls.
android.widget.ZoomButtonsController.getContainer,Get container.
android.widget.ZoomButtonsController.getContainer,Gets the container that is the parent of the zoom controls.
android.widget.ZoomButtonsController.getContainer,The client can add other views to this container to link them with the zoom controls.
android.widget.ZoomButtonsController.setVisible,Sets whether the zoom controls should be visible to the user.
android.widget.ZoomButtonsController.setVisible,Set visible.
android.widget.ZoomButtonsController.setZoomInEnabled,Whether to enable the zoom in control.
android.widget.ZoomButtonsController.setZoomInEnabled,Set zoom in enabled.
android.widget.ZoomButtonsController.setZoomOutEnabled,Whether to enable the zoom out control.
android.widget.ZoomButtonsController.setZoomOutEnabled,Set zoom out enabled.
